//=============================================================================
// VisuStella MZ - Battle Core
// VisuMZ_1_BattleCore.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_1_BattleCore = true;

var VisuMZ = VisuMZ || {};
VisuMZ.BattleCore = VisuMZ.BattleCore || {};
VisuMZ.BattleCore.version = 1.86;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 1] [Version 1.86] [BattleCore]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Battle_Core_VisuStella_MZ
 * @orderAfter VisuMZ_0_CoreEngine
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * The Battle Core plugin revamps the battle engine provided by RPG Maker MZ to
 * become more flexible, streamlined, and support a variety of features. The
 * updated battle engine allows for custom Action Sequences, battle layout
 * styles, and a lot of control over the battle mechanics, too.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Action Sequence Plugin Commands to give you full control over what happens
 *   during the course of a skill or item.
 * * Animated Sideview Battler support for enemies!
 * * Auto Battle options for party-wide and actor-only instances.
 * * Base Troop Events to quickly streamline events for all Troop events.
 * * Battle Command control to let you change which commands appear for actors.
 * * Battle Layout styles to change the way the battle scene looks.
 * * Casting animation support for skills.
 * * Critical Hit control over the success rate formula and damage multipliers.
 * * Custom target scopes added for skills and items.
 * * Damage formula control, including Damage Styles.
 * * Damage caps, both hard caps and soft caps.
 * * Damage traits such Armor Penetration/Reduction to bypass defenses.
 * * Elements & Status Menu Core support for traits.
 * * Multitude of JavaScript notetags and global Plugin Parameters to let you
 *   make a variety of effects across various instances during battle.
 * * Party Command window can be skipped/disabled entirely.
 * * Weather effects now show in battle.
 * * Streamlined Battle Log to remove redundant information and improve the
 *   flow of battle.
 * * Visual HP Gauges can be displayed above the heads of actors and/or enemies
 *   with a possible requirement for enemies to be defeated at least once first
 *   in order for them to show.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Tier 1 ------
 *
 * This plugin is a Tier 1 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin will overwrite some core parts of the RPG Maker MZ base code in
 * order to ensure the Battle Core plugin will work at full capacity. The
 * following are explanations of what has been changed.
 *
 * ---
 *
 * Action Sequences
 *
 * - Action sequences are now done either entirely by the Battle Log Window or
 * through common events if the <Custom Action Sequence> notetag is used.
 * In RPG Maker MZ by default, Action Sequences would be a mixture of using the
 * Battle Log Window, the Battle Manager, and the Battle Scene, making it hard
 * to fully grab control of the situation.
 *
 * ---
 *
 * Action Speed
 *
 * - Action speeds determine the turn order in the default battle system. The
 * AGI of a battle unit is also taken into consideration. However, the random
 * variance applied to the action speed system makes the turn order extremely
 * chaotic and hard for the player to determine. Thus, the random variance
 * aspect of it has been turned off. This can be reenabled by default through
 * Plugin Parameters => Mechanics Settings => Allow Random Speed?
 *
 * ---
 *
 * Animated Sideview Battler Support For Enemies
 *
 * - Enemies can now use Sideview Actor sprites for themselves! They will
 * behave like actors and can even carry their own set of weapons for physical
 * attacks. These must be set up using notetags. More information can be found
 * in the notetag section.
 *
 * - As the sprites are normally used for actors, some changes have been made
 * to Sprite_Actor to be able to support both actors and enemies. These changes
 * should have minimal impact on other plugins.
 *
 * ---
 *
 * Battle Sprite Updates
 *
 * - A lot of functions in Sprite_Battler, Sprite_Actor, and Sprite_Enemy have
 * been overwritten to make the new Action Sequence system added by this plugin
 * possible. These changes make it possible for the sprites to move anywhere on
 * the screen, jump, float, change visibility, and more.
 *
 * ---
 *
 * Change Battle Back in Battle
 * 
 * - By default, the Change Battle Back event command does not work in battle.
 * Any settings made to it will only reflect in the following battle. Now, if
 * the battle back event command is used during battle, it will reflect upon
 * any new changes immediately.
 *
 * ---
 *
 * Critical Hit - LUK Influence
 *
 * - The LUK Buffs now affect the critical hit rate based off how the formula
 * is now calculated. Each stack of a LUK Buff will double the critical hit
 * rate and compound upon that. That means a x1 LUK Buff stack will raise it by
 * x2, a x2 LUK Buff stack will raise the critical hit rate by x4, a x3 LUK
 * Buff Stack will raise the critical hit rate stack by x8, and so on.
 *
 * - LUK also plays a role in how much damage is dealt with critical hits. The
 * default critical hit multiplier has been reduced from x3 to x2. However, a
 * percentage of LUK will added on (based off the user's CRI rate) onto the
 * finalized critical damage. If the user's CRI rate is 4%, then 4% of the user
 * LUK value will also be added onto the damage.
 *
 * - This change can be altered through Plugin Parameters => Damage Settings =>
 * Critical Hits => JS: Rate Formula and JS: Damage Formula.
 *
 * ---
 * 
 * Damage Popups
 * 
 * - Damage popups are now formatted with + and - to determine healing and
 * damage. MP Damage will also include "MP" at the back. This is to make it
 * clearer what each colored variant of the damage popup means as well as help
 * color blind players read the on-screen data properly.
 * 
 * - Damage popups have also been rewritten to show all changed aspects instead
 * of just one. Previously with RPG Maker MZ, if an action would deal both HP
 * and MP damage, only one of them would show. Now, everything is separated and
 * both HP and MP changes will at a time.
 * 
 * ---
 * 
 * Dual Wielding
 * 
 * - Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 * animations at once, with the combined ATK of each weapon. It's confusing to
 * look at and does not portray the nature of "Dual Wielding".
 * 
 * - Dual Wielding, or in the case of users adding in third and fourth weapons,
 * Multi Wielding is now changed. Each weapon is displayed individually, each
 * producing its own attack animation, showing each weapon type, and applying
 * only that weapon's ATK, Traits, and related effects. It is no longer a
 * combined effect to display everything at once like RPG Maker MZ default.
 * 
 * - If an actor has multiple weapon slots but some of them are unequipped,
 * then the action will treat the attack as a single attack. There will be no
 * barehanded attack to add on top of it. This is to match RPG Maker MZ's
 * decision to omit a second animation if the same scenario is applied.
 * 
 * ---
 *
 * Force Action
 *
 * - Previously, Forced Actions would interrupt the middle of an event to
 * perform an action. However, with the addition of more flexible Action
 * Sequences, the pre-existing Force Action system would not be able to exist
 * and would require being remade.
 *
 * - Forced Actions now are instead, added to a separate queue from the action
 * battler list. Whenever an action and/or common event is completed, then if
 * there's a Forced Action battler queued, then the Forced Action battler will
 * have its turn. This is the cleanest method available and avoids the most
 * conflicts possible.
 *
 * - This means if you planned to make cinematic sequences with Forced Actions,
 * you will need to account for the queued Force Actions. However, in the case
 * of battle cinematics, we would highly recommend that you use the newly added
 * Action Sequence Plugin Commands instead as those give you more control than
 * any Force Action ever could.
 *
 * ---
 *
 * Random Scope
 *
 * - The skill and item targeting scopes for Random Enemy, 2 Random Enemies,
 * 3 Random Enemies, 4 Random Enemies will now ignore TGR and utilize true
 * randomness.
 *
 * ---
 *
 * Spriteset_Battle Update
 *
 * - The spriteset now has extra containers to separate battlers (actors and
 * enemies), animations, and damage. This is to make actors and enemy battler
 * sprites more efficient to sort (if enabled), so that animations won't
 * interfere with and cover damage sprites, and to make sure damage sprites are
 * unaffected by screen tints in order to ensure the player will always have a
 * clear read on the information relaying sprites.
 *
 * ---
 * 
 * TPB/ATB Active Battle Actor Shifting
 * 
 * - Pressing cancel on the Actor Command Window no longer switches between
 * actors with a full TPB/ATB gauge before reaching the Party Command Window.
 * This is to accomplish a couple of things: 1) reduce the number of button
 * presses to reach the Party Command Window and 2) to prevent motion resets
 * and disrupting action sequences. If this feature is vital to your battle
 * system, we recommend that you do not use this plugin or any of the Battle
 * Core-required plugins.
 * 
 * ---
 *
 * Weather Displayed in Battle
 *
 * - Previously, weather has not been displayed in battle. This means that any
 * weather effects placed on the map do not transfer over to battle and causes
 * a huge disconnect for players. The Battle Core plugin will add weather
 * effects to match the map's weather conditions. Any changes made to weather
 * through event commands midway through battle will also be reflected.
 *
 * ---
 *
 * ============================================================================
 * Base Troops
 * ============================================================================
 *
 * Base Troops can be found, declared, and modified in the Plugin Parameters =>
 * Mechanics Settings => Base Troop ID's. All of the listed Troop ID's here
 * will have their page events replicated and placed under all other troops
 * found in the database.
 *
 * ---
 *
 * This means that if you have an event that runs on Turn 1 of a Base Troop,
 * then for every troop out there, that same event will also run on Turn 1,
 * as well. This is useful for those who wish to customize their battle system
 * further and to reduce the amount of work needed to copy/paste said event
 * pages into every database troop object manually.
 *
 * ---
 *
 * ============================================================================
 * Damage Styles
 * ============================================================================
 *
 * Damage Styles are a new feature added through the Battle Core plugin. When
 * using certain Battle Styles, you can completely ignore typing in the whole
 * damage formula inside the damage formula input box, and instead, insert
 * either a power amount or a multiplier depending on the Damage Style. The
 * plugin will then automatically calculate damage using that value factoring
 * in ATK, DEF, MAT, MDF values.
 *
 * ---
 *
 * Here is a list of the Damage Styles that come with this plugin by default.
 * You can add in your own and even edit them to your liking.
 * Or just remove them if you want.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Style          Use Formula As   PH/MA Disparity   Stat Scale   Damage Scale
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Standard       Formula          No                Varies       Varies
 * ArmorScaling   Formula          No                Varies       Varies
 * CT             Multiplier       Yes               Low          Normal
 * D4             Multiplier       No                High         Normal
 * DQ             Multiplier       No                Low          Low
 * FF7            Power            Yes               Low          High
 * FF8            Power            Yes               Medium       Normal
 * FF9            Power            Yes               Low          Normal
 * FF10           Power            Yes               Medium       High
 * MK             Multiplier       No                Medium       Low
 * MOBA           Multiplier       No                Medium       Normal
 * PKMN           Power            No                Low          Normal
 *
 * Use the above chart to figure out which Damage Style best fits your game,
 * if you plan on using them.
 *
 * The 'Standard' style is the same as the 'Manual' formula input, except that
 * it allows for the support of <Armor Penetration> and <Armor Reduction>
 * notetags.
 *
 * The 'Armor Scaling' style allows you to type in the base damage calculation
 * without the need to type in any defending modifiers.
 *
 * NOTE: While these are based off the damage formulas found in other games,
 * not all of them are exact replicas. Many of them are adapted for use in
 * RPG Maker MZ since not all RPG's use the same set of parameters and not all
 * external multipliers function the same way as RPG Maker MZ.
 * 
 * ---
 *
 * Style:
 * - This is what the Damage Style is.
 *
 * Use Formula As:
 * - This is what you insert into the formula box.
 * - Formula: Type in the formula for the action just as you would normally.
 * - Multiplier: Type in the multiplier for the action.
 *     Use float values. This means 250% is typed out as 2.50
 * - Power: Type in the power constant for the action.
 *     Use whole numbers. Type in something like 16 for a power constant.
 * 
 * PH/MA Disparity:
 * - Is there a disparity between how Physical Attacks and Magical Attacks
 *   are calculated?
 * - If yes, then physical attacks and magical attacks will have different
 *   formulas used.
 * - If no, then physical attacks and magical attacks will share similar
 *   formulas for how they're calculated.
 *
 * Stat Scale:
 * - How much should stats scale throughout the game?
 * - Low: Keep them under 100 for the best results.
 * - Medium: Numbers work from low to mid 400's for best results.
 * - High: The numbers really shine once they're higher.
 *
 * Damage Scale:
 * - How much does damage vary depending on small parameter changes?
 * - Low: Very little increase from parameter changes.
 * - Normal: Damage scales close to proportionally with parameter changes.
 * - High: Damage can boost itself drastically with parameter changes.
 *
 * ---
 *
 * To determine what kind of parameters are used for the Damage Styles, they
 * will depend on two things: the action's 'Hit Type' (ie Physical Attack,
 * Magical Attack, and Certain Hit) and the action's 'Damage Type' (ie. Damage,
 * Recovery, or Drain).
 *
 * Certain Hit tends to use whichever value is higher: ATK or MAT, and then
 * ignores the target's defense values. Use Certain Hits for 'True Damage'.
 *
 * Use the chart below to figure out everything else:
 * 
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Hit Type      Damage Type   Attacker Parameter   Defender Parameter
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Physical      Damage        ATK                  DEF
 * Magical       Damage        MAT                  MDF
 * Certain Hit   Damage        Larger (ATK, MAT)    -Ignores-
 * Physical      Recover       DEF                  -Ignores-
 * Magical       Recover       MDF                  -Ignores-
 * Certain Hit   Recover       Larger (ATK, MAT)    -Ignores-
 * Physical      Drain         ATK                  DEF
 * Magical       Drain         MAT                  MDF
 * Certain Hit   Drain         Larger (ATK, MAT)    -Ignores-
 *
 * These can be modified within the Plugin Parameters in the individual
 * Damage Styles themselves.
 *
 * ---
 *
 * Skills and Items can use different Damage Styles from the setting you've
 * selected in the Plugin Parameters. They can be altered to have different
 * Damage Styles through the usage of a notetag:
 *
 * <Damage Style: name>
 *
 * This will use whichever style is found in the Plugin Parameters.
 *
 * If "Manual" is used, then no style will be used and all calculations will be
 * made strictly based off the formula found inside the formula box.
 *
 * ---
 *
 * ============================================================================
 * VisuStella MZ Compatibility
 * ============================================================================
 *
 * While this plugin is compatible with the majority of the VisuStella MZ
 * plugin library, it is not compatible with specific plugins or specific
 * features. This section will highlight the main plugins/features that will
 * not be compatible with this plugin or put focus on how the make certain
 * features compatible.
 *
 * ---
 * 
 * VisuMZ_1_BattleCore
 * 
 * When using Action Sequences, Boost effects for damage, turn extensions,
 * analyze, etc. will not occur for anything other than the Action Sequence:
 * "MECH: Action Effect" in order to maintain controlled effects. However, if
 * you do want to apply bonuses for Boosts, utilize "MECH: Boost Store Data" to
 * store inside a variable how many times Boosts were used. This can be used
 * however which way you want it to as long as it is manageable through events
 * and Common Events.
 * 
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 * 
 * ---
 * 
 * === HP Gauge-Related Notetags ===
 * 
 * The following notetags allow you to set whether or not HP Gauges can be
 * displayed by enemies regardless of Plugin Parameter settings.
 * 
 * ---
 *
 * <Show HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always show the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * - This does not bypass disabling enemy HP Gauges as a whole.
 * 
 * ---
 *
 * <Hide HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always hide the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * 
 * ---
 * 
 * <Battle UI Offset: +x, +y>
 * <Battle UI Offset: -x, -y>
 * 
 * <Battle UI Offset X: +x>
 * <Battle UI Offset X: -x>
 * 
 * <Battle UI Offset Y: +y>
 * <Battle UI Offset Y: -y>
 * 
 * - Used for: Actor and Enemy Notetags
 * - Adjusts the offset of HP Gauges and State Icons above the heads of actors
 *   and enemies.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * === Animation-Related Notetags ===
 *
 * The following notetags allow you to set animations to play at certain
 * instances and/or conditions.
 *
 * ---
 *
 * <Slip Animation: x>
 *
 * - Requires VisuMZ_0_CoreEngine!
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - During the phase at which the user regenerates HP, MP, or TP, this
 *   animation will play as long as the user is alive and visible.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Cast Animation: x>
 *
 * - Used for: Skill Notetags
 * - Plays a battle animation at the start of the skill.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Attack Animation: x>
 *
 * - Used for: Enemy Notetags
 * - Gives an enemy an attack animation to play for its basic attack.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 * 
 * <Under>
 * 
 * - Used for: Animation Name Tags
 * - If this tag is found in an animation's name, the animation will appear
 *   under battlers while in battle.
 * - This effect only applies to battlers in the battle scene.
 * - Under effect is NOT applied to status window portraits.
 * - Under effect is NOT applied to projectile animations.
 * 
 * ---
 *
 * === Battleback-Related Notetags ===
 *
 * You can apply these notetags to have some control over the battlebacks that
 * appear in different regions of the map for random or touch encounters.
 *
 * ---
 *
 * <Region x Battleback1: filename>
 * <Region x Battleback2: filename>
 * 
 * - Used for: Map Notetags
 * - If the player starts a battle while standing on 'x' region, then the
 *   'filename' battleback will be used.
 * - Replace 'x' with a number representing the region ID you wish to use.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Castle1.png' will be only inserted
 *   as 'Castle1' without the '.png' at the end.
 * - *NOTE: This will override any specified battleback settings.
 *
 * ---
 *
 * === Battle Command-Related Notetags ===
 *
 * You can use notetags to change how the battle commands of playable
 * characters appear in battle as well as whether or not they can be used.
 *
 * ---
 *
 * <Seal Attack>
 * <Seal Guard>
 * <Seal Item>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Prevents specific battle commands from being able to be used.
 *
 * ---
 *
 * <Battle Commands>
 *  Attack
 *  Skills
 *  SType: x
 *  SType: name
 *  All Skills
 *  Skill: x
 *  Skill: name
 *  Guard
 *  Item
 *  Status
 *  Party
 *  Escape
 *  Auto Battle
 *  Combat Log
 *  Talk
 *  Weapon Swap
 * </Battle Commands>
 *
 * - Used for: Class Notetags
 * - Changes which commands appear in the Actor Command Window in battle.
 *   If this notetag is not used, then the default commands determined in
 *   Plugin Parameters => Actor Command Window => Command List will be used.
 * - Add/remove/modify entries as needed.
 *
 * - Attack 
 *   - Adds the basic attack command.
 * 
 * - Skills
 *   - Displays all the skill types available to the actor.
 * 
 * - SType: x
 * - Stype: name
 *   - Adds in a specific skill type.
 *   - Replace 'x' with the ID of the skill type.
 *   - Replace 'name' with the name of the skill type (without text codes).
 *
 * - All Skills
 *   - Adds all usable battle skills as individual actions.
 * 
 * - Skill: x
 * - Skill: name
 *   - Adds in a specific skill as a usable action.
 *   - Replace 'x' with the ID of the skill.
 *   - Replace 'name' with the name of the skill.
 * 
 * - Guard
 *   - Adds the basic guard command.
 * 
 * - Item
 *   - Adds the basic item command.
 * 
 * - Status
 *   - Adds a status command to view the current inputting actor's status.
 *
 * - Party
 *   - Requires VisuMZ_2_PartySystem.
 *   - Allows this actor to switch out with a different party member.
 * 
 * - Escape
 *   - Adds the escape command.
 * 
 * - Auto Battle
 *   - Adds the auto battle command.
 * 
 * - Combat Log
 *   - Requires VisuMZ_4_CombatLog.
 *   - Opens up the combat log.
 * 
 * - Talk
 *   - Requires VisuMZ_3_BattleCmdTalk!
 *   - Shows talk command if applicable.
 * 
 * - Weapon Swap
 *   - Requires VisuMZ_2_WeaponSwapSystem.
 *   - Swaps the current weapon.
 *
 * Example:
 *
 * <Battle Commands>
 *  Attack
 *  Skill: Heal
 *  Skills
 *  Guard
 *  Item
 *  Escape
 * </Battle Commands>
 *
 * ---
 *
 * <Command Text: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill name text that appears to something else.
 * - Replace 'x' with the skill's name you want to shown in the Actor Battle
 *   Command window.
 * - Recommended Usage: Shorten skill names that are otherwise too big to fit
 *   inside of the Actor Battle Command window.
 *
 * ---
 *
 * <Command Icon: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill icon that appears to something else.
 * - Replace 'x' with the ID of icon you want shown in the Actor Battle Command
 *   window to represent the skill.
 * 
 * ---
 * 
 * <Command Require Learn>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   learned the skill.
 * - Learning the skill is a requirement. Acquiring the skill through traits
 *   does not count as learning the skill.
 * 
 * ---
 * 
 * <Command Require Access>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   access to the skill.
 * - Having access to the skill can come through either learning the skill or
 *   temporarily acquiring it through trait objects.
 * 
 * ---
 * 
 * <Command Show Switch: x>
 * 
 * <Command Show All Switches: x,x,x>
 * <Command Show Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be hidden until all
 *   switches are ON. Then, it would be shown.
 * - If 'Any' notetag variant is used, item will be shown if any of the
 *   switches are ON. Otherwise, it would be hidden.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Command Hide Switch: x>
 * 
 * <Command Hide All Switches: x,x,x>
 * <Command Hide Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be shown until all
 *   switches are ON. Then, it would be hidden.
 * - If 'Any' notetag variant is used, item will be hidden if any of the
 *   switches are ON. Otherwise, it would be shown.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Battle Portrait: filename>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" Battle Layout.
 * - Sets the battle portrait image for the actor to 'filename'.
 * - Replace 'filename' with a picture found within your game project's
 *   img/pictures/ folder. Filenames are case sensitive. Leave out the filename
 *   extension from the notetag.
 * - This will override any menu images used for battle only.
 * 
 * ---
 * 
 * <Battle Portrait Offset: +x, +y>
 * <Battle Portrait Offset: -x, -y>
 * 
 * <Battle Portrait Offset X: +x>
 * <Battle Portrait Offset X: -x>
 * 
 * <Battle Portrait Offset Y: +y>
 * <Battle Portrait Offset Y: -y>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" and "Border" Battle Layouts.
 * - Offsets the X and Y coordinates for the battle portrait.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * <Help Description>
 *  text
 *  text
 * </Help Description>
 *
 * - Used for: State Notetags
 * - Assigns a help description for the state that's displayed under the
 *   "Status" actor command.
 * - Replace 'text' with text you want displayed for the help window.
 * - This best works with one line for compatibility with other plugins.
 * - Insert %1 into the help description to show any data that would otherwise
 *   be shown as the state display, such as Absorption Barrier count.
 * - This is used as a common notetag between Battle Core's state descriptions
 *   and State Tooltips' state descriptions.
 * 
 * ---
 * 
 * <In-Battle Status Description>
 *  text
 *  text
 * </In-Battle Status Description>
 * - Assigns a help description for the state that's displayed under the
 *   "Status" actor command.
 * - Replace 'text' with text you want displayed for the help window.
 * - This best works with one line for compatibility with other plugins.
 * - Insert %1 into the help description to show any data that would otherwise
 *   be shown as the state display, such as Absorption Barrier count.
 * - The description used here will not be used for State Tooltips.
 * - If both <Help Description> and <In-Battle Status Description> notetags
 *   exist in the same state, priority will be given to this one for the
 *   In-Battle Status Window.
 *
 * ---
 * 
 * <Exclude From Status Listing>
 * 
 * - Used for: State Notetags
 * - Excludes the state from being displayed in the status listing.
 * 
 * ---
 * 
 * === JavaScript Notetag: Battle Command-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine if skill-based battle commands are visible or hidden.
 * 
 * ---
 * 
 * <JS Command Visible>
 *  code
 *  code
 *  visible = code;
 * </JS Command Visible>
 * 
 * - Used for: Skill Notetags
 * - The 'visible' variable is the final returned variable to determine the
 *   skill's visibility in the Battle Command Window.
 * - Replace 'code' with JavaScript code to determine the skill's visibility in
 *   the Battle Command Window.
 * - The 'user' variable represents the user who will perform the skill.
 * - The 'skill' variable represents the skill to be used.
 * 
 * ---
 *
 * === Targeting-Related Notetags ===
 *
 * The following notetags are related to the targeting aspect of skills and
 * items and may adjust the scope of how certain skills/items work.
 *
 * ---
 *
 * <Always Hit>
 *
 * <Always Hit Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - Causes the action to always hit or to always have a hit rate of exactly
 *   the marked x%.
 * - Replace 'x' with a number value representing the hit success percentage.
 *
 * ---
 *
 * <Repeat Hits: x>
 *
 * - Used for: Skill, Item Notetags
 * - Changes the number of hits the action will produce.
 * - Replace 'x' with a number value representing the number of hits to incur.
 *
 * ---
 *
 * <Target: x Random Any>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets can be both actors and enemies.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Enemies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Allies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only actors.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: All Allies But User>
 *
 * - Used for: Skill, Item Notetags
 * - Targets all allies with the exception of the user.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 *
 * ---
 * 
 * <Target: Ally or Enemy>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target allies or enemies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to allies first.
 * - Ignored when used by enemies and will be treated as an ally scope.
 * - Auto-battle actors will also treat this action as an ally scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Target: Enemy or Ally>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target enemies or allies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to enemies first.
 * - Ignored when used by enemies and will be treated as an enemy scope.
 * - Auto-battle actors will also treat this action as an enemy scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Single or Multiple Select>
 * 
 * - Used for: Skill, Item Notetags
 * - Requires an original scope that can select individual targets.
 * - This will allow the skill/item to be able to select either single targets
 *   or multiple targets at once.
 *   - In order to select "all enemies", the player must press the "Page Up"
 *     keyboard button or the visual on screen "All Enemies" button.
 *   - In order to select "all allies", the player must press the "Page Down"
 *     keyboard button or the visual on screen "All Allies" button.
 *   - Those wondering why this isn't regulated to a command left or right of
 *     the enemies and actors is because mouse controls and touch controls
 *     would not be able to select all enemies or all allies that way.
 *   - This can NOT be used with single dead ally scopes.
 * - If there is an enemy with Taunt or Provoke, the option to select
 *   "All Enemies" does not become possible.
 * - The enemy AI and Auto-Battle actor AI will NOT make use of the ability to
 *   toggle between single and multiple target scopes. They will only use the
 *   single target versions of these skills.
 * 
 * ---
 * 
 * <Disperse Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - This will cause any damage dealt by this skill to be split equally amongst
 *   all targets of the skill including repeats.
 *   - For basic attacks, any damage reduction added attack trait totals will
 *     by reverted.
 * - This does NOT have to be used with <Single or Multiple Select> notetag and
 *   can be used by itself for an "All" scope, making the skill/item deal less
 *   damage if there's more enemies and more damage if there's less enemies.
 * 
 * ---
 * 
 * <Cannot Target User>
 * 
 * - Used for: Skill, Item Notetags
 * - This will cause the action to be unable to select the user as the target.
 * - This is not a targeting scope. Instead, it is used in addition to any
 *   other targeting scopes out there.
 * - When used with "All" scopes, the user is removed from the target pool.
 * - This is also applied outside of battle.
 * - If the user somehow enters the target pool, the user is then replaced by
 *   a random ally found in the party.
 * 
 * ---
 *
 * === JavaScript Notetag: Targeting-Related ===
 *
 * ---
 * 
 * <JS Accuracy>
 *  code
 *  code
 *  rate = code;
 * </JS Accuracy>
 * 
 * - Used for: Skill, Item Notetags
 * - Only applies during battle.
 * - The 'rate' variable is the final returned amount to determine the
 *   accuracy hit success rate.
 *   - Base value comes from Game_Action.itemHit
 *   - Skill/Item <JS Accuracy> runs
 *   - Then <JS Accuracy as User/Target> notetags run
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the accuracy hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - Works best with VisuMZ Core Engine's "Improved Accuracy" QoL formula in
 *   order to consolidate both HIT and EVA.
 * 
 * ---
 * 
 * <JS Accuracy as User>
 *  code
 *  code
 *  rate = code;
 * </JS Accuracy as User>
 * 
 * <JS Accuracy as Target>
 *  code
 *  code
 *  rate = code;
 * </JS Accuracy as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Only applies during battle.
 * - The 'rate' variable is the final returned amount to determine the
 *   accuracy hit success rate.
 *   - Base value comes from Game_Action.itemHit
 *   - Skill/Item <JS Accuracy> runs
 *   - Then <JS Accuracy as User/Target> notetags run
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * 
 * ---
 * 
 * <JS Targets>
 *  code
 *  code
 *  targets = [code];
 * </JS Targets>
 *
 * - Used for: Skill, Item Notetags
 * - The 'targets' variable is an array that is returned to be used as a
 *   container for all the valid action targets.
 *   - This is NOT used for filtering out who the player can or cannot select.
 *   - This determines a final result.
 * - The 'targets' variable will include the original set of targets determined
 *   by the skill/item's original scale.
 * - If you wish to clear it out, simply do 'targets = []' first.
 * - Replace 'code' with JavaScript code to determine valid targets.
 *
 * ---
 *
 * === Damage-Related Notetags ===
 *
 * ---
 *
 * <Damage Style: name>
 *
 * - Used for: Skill, Item Notetags
 * - Replace 'name' with a Damage Style name to change the way calculations are
 *   made using the damage formula input box.
 * - Names can be found in Plugin Parameters => Damage Settings => Style List
 *
 * ---
 *
 * <Armor Reduction: x>
 * <Armor Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Armor Penetration: x>
 * <Armor Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Magic Reduction: x>
 * <Magic Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Magic Penetration: x>
 * <Magic Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Bypass Damage Cap>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage capped.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage capped.
 *
 * ---
 *
 * <Damage Cap: x>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will declare the hard damage cap to
 *   be the 'x' value.
 * - If used on trait objects, this will raise the affect unit's hard damage
 *   cap to 'x' value. If another trait object has a higher value, use that
 *   value instead.
 *
 * ---
 *
 * <Bypass Soft Damage Cap>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage scaled downward to the soft cap.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage scaled downward to the soft cap.
 *
 * ---
 *
 * <Soft Damage Cap: +x%>
 * <Soft Damage Cap: -x%>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will increase/decrease the action's
 *   soft cap by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 * - If used on trait objects, this will raise the affect unit's soft damage
 *   limit by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 *
 * ---
 *
 * <Unblockable>
 *
 * - Used for: Skill, Item Notetags
 * - Using "Guard" against this skill will not reduce any damage.
 *
 * ---
 * 
 * <Popup Position: Head>
 * <Popup Position: Center>
 * <Popup Position: Base>
 * 
 * - Used for: Enemy Notetags
 * - Determines the popup starting position for this enemy.
 *   - Head makes the popups start at the top of the ennemy.
 *   - Center makes the popups start at the center of the ennemy.
 *   - Base makes the popups start at the bottom of the ennemy.
 * - If this notetag is not used, refer to the default Plugin Parameter setting
 *   found in Damage Settings.
 * 
 * ---
 * 
 * <Popup Offset X: +x>
 * <Popup Offset X: -x>
 * <Popup Offset Y: +y>
 * <Popup Offset Y: -y>
 * 
 * - Used for: Enemy Notetags
 * - Alters the popup x/y position offset for this enemy.
 * - Replace 'x' with a number representing the horizontal position x offset.
 *   - Negative: left. Positive: right.
 * - Replace 'y' with a number representing the vertical position y offset.
 *   - Negative: up. Positive: down.
 * - If these notetags are not used, refer to the default Plugin Parameter
 *   settings found in Damage Settings.
 * 
 * ---
 *
 * === Critical-Related Notetags ===
 *
 * The following notetags affect skill and item critical hit rates and the
 * critical damage multiplier.
 *
 * ---
 *
 * <Always Critical>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always land a critical hit regardless of the
 *   user's CRI parameter value.
 *
 * ---
 *
 * <Set Critical Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always have a x% change to land a critical hit
 *   regardless of user's CRI parameter value.
 * - Replace 'x' with a percerntage value representing the success rate.
 *
 * ---
 *
 * <Modify Critical Rate: x%>
 * <Modify Critical Rate: +x%>
 * <Modify Critical Rate: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - Modifies the user's CRI parameter calculation for this skill/item.
 * - The 'x%' notetag variant will multiply the user's CRI parameter value
 *   for this skill/item.
 * - The '+x%' and '-x%' notetag variants will incremenetally increase/decrease
 *   the user's CRI parameter value for this skill/item.
 *
 * ---
 *
 * <Modify Critical Multiplier: x%>
 * <Modify Critical Multiplier: +x%>
 * <Modify Critical Multiplier: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the damage multiplier when a critical hit lands.
 * - The 'x%' notetag variant multiply the multiplier to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the multiplier with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * <Modify Critical Bonus Damage: x%>
 * <Modify Critical Bonus Damage: +x%>
 * <Modify Critical Bonus Damage: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the bonus damage added when a critical hit lands.
 * - The 'x%' notetag variant multiply the damage to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the bonus damage with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * === JavaScript Notetags: Critical-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine how critical hit-related aspects are calculated.
 *
 * ---
 *
 * <JS Critical Rate>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate>
 *
 * - Used for: Skill, Item Notetags
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 *   - Base value comes from Game_Action.itemCri
 *   - Skill/Item <JS Critical Rate> runs
 *   - Then <JS Critical Rate as User/Target> notetags run
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Rate as User>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate as User>
 *
 * <JS Critical Rate as Target>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate as Target>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Only applies during battle.
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 *   - Base value comes from Game_Action.itemCri
 *   - Skill/Item <JS Critical Rate> runs
 *   - Then <JS Critical Rate as User/Target> notetags run
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Damage>
 *  code
 *  code
 *  multiplier = code;
 *  bonusDamage = code;
 * </JS Critical Damage>
 *
 * - Used for: Skill, Item Notetags
 * - The 'multiplier' variable is returned later and used as the damage
 *   multiplier used to amplify the critical damage amount.
 * - The 'bonusDamage' variable is returned later and used as extra added
 *   damage for the critical damage amount.
 * - Replace 'code' with JavaScript code to determine how the 'multiplier' and
 *   'bonusDamage' variables are calculated.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 * 
 * === Life Steal-Related Notetags ===
 * 
 * ---
 * 
 * <HP Life Steal: x%>
 * <MP Life Steal: x%>
 * 
 * - Used for: Skill, Item Notetags
 * - Causes this skill/item to have Life Steal properties, allowing the user to
 *   take x% of the HP/MP Damage as recovered HP/MP.
 *   - HP Life Steal can only take HP from dealt HP damage.
 *   - MP Life Steal can only take MP from dealt MP damage.
 * - Replace 'x' with a number representing the percentage of the dealt damage
 *   used as HP/MP recovery.
 * - This cannot be used with skills/items with HP Drain/MP Drain. Life Steal
 *   is a different mechanic from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <HP Life Steal Certain Hit: +x%>
 * <HP Life Steal Physical Hit: +x%>
 * <HP Life Steal Magical Hit: +x%>
 * 
 * <HP Life Steal Certain Hit: -x%>
 * <HP Life Steal Physical Hit: -x%>
 * <HP Life Steal Magical Hit: -x%>
 * 
 * <MP Life Steal Certain Hit: +x%>
 * <MP Life Steal Physical Hit: +x%>
 * <MP Life Steal Magical Hit: +x%>
 * 
 * <MP Life Steal Certain Hit: -x%>
 * <MP Life Steal Physical Hit: -x%>
 * <MP Life Steal Magical Hit: -x%>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - The related battler's various trait properties can have passive life steal
 *   properties that will trigger upon using skills/items with matching hit
 *   types regardless of whether or not the skill/item innately has Life Steal.
 *   - Notetag variants with "Certain Hit" will only trigger from "Certain Hit"
 *     skill and item types. Same with "Physical" and "Magical" variants.
 *   - HP Life Steal can only take HP from dealt HP damage.
 *   - MP Life Steal can only take HP from dealt MP damage.
 * - Replace 'x' with a number representing the additive stacking percentage
 *   boost of the dealt damage used as HP/MP recovery. The effects will stack
 *   additively with other trait objects.
 * - This cannot be used with skills/items with HP Drain/MP Drain. Life Steal
 *   is a different mechanic from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Cancel Life Steal>
 * 
 * <Cancel HP Life Steal>
 * <Cancel MP Life Steal>
 * 
 * - Used for: Skill, Item Notetags
 * - Prevents this skill from allowing Life Steal effects to occur including
 *   the passive life steal calculators from the skill/item user.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Guard Life Steal>
 * 
 * <Guard HP Life Steal>
 * <Guard MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - If the related battler becomes the target of Life Steal, this will prevent
 *   the Life Steal effects from taking effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Disarm Life Steal>
 * 
 * <Disarm HP Life Steal>
 * <Disarm MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - Makes the related battler unable to HP/MP Life Steal regardless of the
 *   skill/item and its related properties like equipment.
 * - This does not prevent skills/items with innate Life Steal from being used.
 *   Only the Life Steal part of the skill/item will have no effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Negative Life Steal>
 * 
 * <Negative HP Life Steal>
 * <Negative MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - If the related battler becomes the target of Life Steal, this will invert
 *   the healing properties of Life Steal, causing the Life Steal user to
 *   instead take HP/MP damage.
 *   - This does NOT heal the target related battler.
 * - This does not prevent skills/items with innate Life Steal from being used.
 *   Only the Life Steal part of the skill/item will have no effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 *
 * === Action Sequence-Related Notetags ===
 *
 * Action Sequences allow you full control over how a skill and/or item plays
 * through its course. These notetags give you control over various aspects of
 * those Action Sequences. More information is found in the Action Sequences
 * help section.
 *
 * ---
 *
 * <Custom Action Sequence>
 *
 * - Used for: Skill, Item Notetags
 * - Removes all automated Action Sequence parts from the skill.
 * - Everything Action Sequence-related will be done by Common Events.
 * - Insert Common Event(s) into the skill/item's effects list to make use of
 *   the Custom Action Sequences.
 * - This will prevent common events from loading in the Item Scene and Skill
 *   Scene when used outside of battle.
 *
 * ---
 * 
 * <Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - If the Action Sequence Plugin Parameter "Auto Notetag" is enabled, this
 *   plugin will prevent custom action sequences from happening for the skill
 *   or item, and instead, use an Automatic Action Sequence instead.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Bypass Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - This notetag is used for the game devs that have the Action Sequence
 *   Plugin Parameter "Auto Notetag" on for applying <Custom Action Sequence>
 *   to everything.
 * - This will allow items and skills to be able to launch their common
 *   events from the menu scene regardless of the inherent restriction to
 *   prevent action sequence based skills/items with common events from
 *   launching.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Common Event: name>
 *
 * - Used for: Skill, Item Notetags
 * - Battle only: calls forth a Common Event of a matching name.
 * - Replace 'name' with the name of a Common Event to call from when this
 *   skill/item is used in battle.
 *   - Remove any \I[x] in the name.
 * - Insert multiple notetags to call multiple Common Events in succession.
 * - This will occur after any Common Event Trait Effects for the skill/item's
 *   database entry.
 * - This is primarily used for users who are reorganizing around their Common
 *   Events and would still like to have their skills/items perform the correct
 *   Action Sequences in case the ID's are different.
 * 
 * ---
 *
 * <Display Icon: x>
 * <Display Text: string>
 *
 * - Used for: Skill, Item Notetags
 * - When displaying the skill/item name in the Action Sequence, determine the
 *   icon and/or text displayed.
 * - Replace 'x' with a number value representing the icon ID to be displayed.
 * - Replace 'string' with a text value representing the displayed name.
 *
 * ---
 * 
 * <Common Event Key: name>
 * <Common Event Keys: name, name, name>
 * 
 * <Common Event Keys>
 *  key
 *  key
 *  key
 * </Common Event Keys>
 * 
 * - Used for: Skill, Item Notetags
 * - Will generate Common Events for the skill/item with a corresponding key.
 * - Replace 'name' with the name of the Common Event's key that you want to
 *   reference. That key will be converted into a Common Event effect for the
 *   skill/item and be treated as an action sequence.
 *   - The notetag variants that use multiple keys will have the keys added in
 *     the order they are listed.
 *   - If keys do not reference any Common Events, no Common Events will be
 *     added for that key.
 * - To mark a Common Event with a key, insert inside a Common Event's name the
 *   [ and ] brackets around the text that will be used as the Common Event's
 *   key text.
 *   - For example, if Common Event's name is "Penta Slash [PENTA]", then the
 *     key used is "PENTA" without the quotes.
 *   - This key could then be referenced by <Common Event Key: PENTA> notetag.
 *   - Do not use commas (,) inside the key text as it will be automatically
 *     removed for the sake of consistency.
 * - This feature is made for make the process of sharing Action Sequences to
 *   become easier without needing to line up Common Event ID's.
 * 
 * ---
 *
 * === Animated Sideview Battler-Related Notetags ===
 *
 * Enemies can use Animated Sideview Actor graphics thanks to this plugin.
 * These notetags give you control over that aspect. Some of these also affect
 * actors in addition to enemies.
 *
 * ---
 *
 * <Sideview Battler: filename>
 *
 * <Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Replaces the enemy's battler graphic with an animated Sideview Actor
 *   graphic found in the img/sv_actors/ folder.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Sideview Battlers>
 *
 * ---
 *
 * <Sideview Anchor: x, y>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets the sprite anchor positions for the sideview sprite.
 * - Replace 'x' and 'y' with numbers depicting where the anchors should be for
 *   the sideview sprite.
 * - By default, the x and y anchors are 0.5 and 1.0.
 *
 * ---
 * 
 * <Sideview Home Offset: +x, +y>
 * <Sideview Home Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, State Notetags
 * - Offsets the sideview actor sprite's home position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * - This notetag will not work if you remove it from the JavaScript code in
 *   Plugin Parameters > Actor > JS:  Home Position
 * 
 * ---
 * 
 * <Sideview Weapon Offset: +x, +y>
 * <Sideview Weapon Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy State Notetags
 * - Offsets the sideview weapon sprite's position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * 
 * ---
 *
 * <Sideview Show Shadow>
 * <Sideview Hide Shadow>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets it so the sideview battler's shadow will be visible or hidden.
 *
 * ---
 * 
 * <Sideview Shadow Scale: x%>
 * <Sideview Shadow Scale: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - This affects both the X and Y scale.
 * 
 * ---
 * 
 * <Sideview Shadow Scale X: x%>
 * <Sideview Shadow Scale X: x.y>
 * 
 * <Sideview Shadow Scale Y: x%>
 * <Sideview Shadow Scale Y: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - These affect their respective X and Y scales separately.
 * 
 * ---
 *
 * <Sideview Collapse>
 * <Sideview No Collapse>
 *
 * - Used for: Enemy Notetags
 * - Either shows the collapse graphic or does not show the collapse graphic.
 * - Collapse graphic means the enemy will 'fade away' once it's defeated.
 * - No collapse graphic means the enemy's corpse will remain on the screen.
 *
 * ---
 *
 * <Sideview Idle Motion: name>
 *
 * <Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Changes the default idle motion for the enemy.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Idle Motions>
 *  walk: 25
 *  wait: 50
 *  guard
 *  victory
 *  abnormal
 * </Sideview Idle Motions>
 *
 * ---
 *
 * <Sideview Size: width, height>
 *
 * - Used for: Enemy Notetags
 * - When using a sideview battler, its width and height will default to the
 *   setting made in Plugin Parameters => Enemy Settings => Size: Width/Height.
 * - This notetag lets you change that value to something else.
 * - Replace 'width' and 'height' with numbers representing how many pixels
 *   wide/tall the sprite will be treated as.
 * - This does NOT change the image size. This only changes the HITBOX size.
 *
 * ---
 *
 * <Sideview Weapon: weapontype>
 *
 * <Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Give your sideview enemies weapons to use.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Sideview Weapons>
 *
 * ---
 *
 * <traitname Sideview Battler: filename>
 *
 * <traitname Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </traitname Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have a unique appearance.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Male Sideview Battlers>
 *
 * <Female Sideview Battlers>
 *  Actor1_2: 25
 *  Actor1_4: 10
 *  Actor1_6
 *  Actor1_8
 * </Female Sideview Battlers>
 *
 * ---
 *
 * <traitname Sideview Idle Motion: name>
 *
 * <traitname Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </traitname Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique idle motions.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Jolly Sideview Idle Motions>
 *  wait: 25
 *  victory: 10
 *  walk
 * </Jolly Sideview Idle Motions>
 *
 * <Serious Sideview Idle Motions>
 *  walk: 25
 *  guard: 10
 *  wait
 * </Jolly Sideview Idle Motions>
 *
 * ---
 *
 * <traitname Sideview Weapon: weapontype>
 *
 * <traitname Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </traitname Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique weapons.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Male Sideview Weapons>
 *
 * <Female Sideview Weapons>
 *  Dagger: 25
 *  Spear: 25
 *  Cane
 * </Female Sideview Weapons>
 *
 * ---
 *
 * === Enemy-Related Notetags ===
 *
 * ---
 *
 * <Battler Sprite Cannot Move>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to move, jump, and/or float due to
 *   Action Sequences. Useful for rooted enemies.
 *
 * ---
 * 
 * <Battler Sprite Grounded>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to jumping and/or floating due to
 *   Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * ---
 *
 * <Swap Enemies>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Swap Enemies>
 *
 * - Used for: Enemy Notetags
 * - Causes this enemy database object to function as a randomizer for any of
 *   the listed enemies inside the notetag. When the enemy is loaded into the
 *   battle scene, the enemy is immediately replaced with one of the enemies
 *   listed. The randomization is based off the 'weight' given to each of the
 *   enemy 'names'.
 * - Replace 'name' with the database enemy of the enemy you wish to replace
 *   the enemy with.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Swap Enemies>
 *  Bat: 50
 *  Slime: 25
 *  Orc
 *  Minotaur
 * </Swap Enemies>
 *
 * ---
 * 
 * <Aspect Name: name>
 * 
 * - Used for: Enemy Notetags
 * - Changes enemy's aspect name shown in the In-Battle Status and other
 *   supported plugin menus.
 *   - Requires <Aspect Description> in order to show.
 * - Replace 'name' with text for how enemy aspect should be renamed.
 * 
 * ---
 * 
 * <Aspect Color: color>
 * 
 * - Used for: Enemy Notetags
 * - Changes enemy's aspect name color shown in the In-Battle Status and other
 *   supported plugin menus.
 *   - Requires <Aspect Description> in order to show.
 * - Replace 'color' with either a number from 0 to 31 representing the text
 *   color or in the format of '#rrggbb' to custom pick a hex color.
 * 
 * ---
 * 
 * <Aspect Icon: x>
 * 
 * - Used for: Enemy Notetags
 * - Changes enemy's aspect icon shown in the In-Battle Status and other
 *   supported plugin menus.
 *   - Requires <Aspect Description> in order to show.
 * - Replace 'x' with a number representing the icon index used to represent
 *   the enemy aspect.
 * 
 * ---
 * 
 * <Aspect Description>
 *  text
 *  text
 * </Aspect Description>
 * 
 * - Used for: Enemy Notetags
 * - Changes enemy's aspect description shown in the In-Battle Status and other
 *   supported plugin menus.
 * - Replace 'text' with the text you would like to appear as a description for
 *   the enemy's aspect.
 * 
 * ---
 *
 * === JavaScript Notetags: Mechanics-Related ===
 *
 * These JavaScript notetags allow you to run code at specific instances during
 * battle provided that the unit has that code associated with them in a trait
 * object (actor, class, weapon, armor, enemy, or state). How you use these is
 * entirely up to you and will depend on your ability to understand the code
 * used and driven for each case.
 *
 * ---
 *
 * <JS Pre-Start Battle>
 *  code
 *  code
 *  code
 * </JS Pre-Start Battle>
 *
 * <JS Post-Start Battle>
 *  code
 *  code
 *  code
 * </JS Post-Start Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of battle aimed at the function:
 *   BattleManager.startBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Turn>
 *  code
 *  code
 *  code
 * </JS Pre-Start Turn>
 *
 * <JS Post-Start Turn>
 *  code
 *  code
 *  code
 * </JS Post-Start Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of a turn aimed at the function:
 *   BattleManager.startTurn()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Action>
 *  code
 *  code
 *  code
 * </JS Pre-Start Action>
 *
 * <JS Post-Start Action>
 *  code
 *  code
 *  code
 * </JS Post-Start Action>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action aimed at the function:
 *   BattleManager.startAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Apply>
 *  code
 *  code
 *  code
 * </JS Pre-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Apply as User>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as User>
 *
 * <JS Pre-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage>
 *  code
 *  code
 *  code
 * </JS Pre-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage being calculated up to this
 *   point (if any) and any changes made to the 'value' variable will reflect
 *   on the damage dealt/healed, too.
 *
 * ---
 *
 * <JS Pre-Damage as User>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as User>
 *
 * <JS Pre-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage being calculated up to this
 *   point (if any) and any changes made to the 'value' variable will reflect
 *   on the damage dealt/healed, too.
 *
 * ---
 *
 * <JS Post-Damage>
 *  code
 *  code
 *  code
 * </JS Post-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage/healing that has been last
 *   dealt through this action.
 *
 * ---
 *
 * <JS Post-Damage as User>
 *  code
 *  code
 *  code
 * </JS Post-Damage as User>
 *
 * <JS Post-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Post-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage/healing that has been last
 *   dealt through this action.
 *
 * ---
 *
 * <JS Post-Apply>
 *  code
 *  code
 *  code
 * </JS Post-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply as User>
 *  code
 *  code
 *  code
 * </JS Post-Apply as User>
 *
 * <JS Post-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Post-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 *
 * ---
 *
 * <JS Pre-End Action>
 *  code
 *  code
 *  code
 * </JS Pre-End Action>
 *
 * <JS Post-End Action>
 *  code
 *  code
 *  code
 * </JS Post-End Action>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action aimed at the function:
 *   BattleManager.endAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Turn>
 *  code
 *  code
 *  code
 * </JS Pre-End Turn>
 *
 * <JS Post-End Turn>
 *  code
 *  code
 *  code
 * </JS Post-End Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of a turn aimed at the function:
 *   Game_Battler.prototype.onTurnEnd()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Regenerate>
 *  code
 *  code
 *  code
 * </JS Pre-Regenerate>
 *
 * <JS Post-Regenerate>
 *  code
 *  code
 *  code
 * </JS Post-Regenerate>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a unit regenerates HP/MP aimed at the function:
 *   Game_Battler.prototype.regenerateAll()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Victory>
 *  code
 *  code
 *  code
 * </JS Battle Victory>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is won aimed at the function:
 *   BattleManager.processVictory()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Success>
 *  code
 *  code
 *  code
 * </JS Escape Success>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping succeeds aimed at the function:
 *   BattleManager.onEscapeSuccess()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Failure>
 *  code
 *  code
 *  code
 * </JS Escape Failure>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping fails aimed at the function:
 *   BattleManager.onEscapeFailure()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Defeat>
 *  code
 *  code
 *  code
 * </JS Battle Defeat>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is lost aimed at the function:
 *   BattleManager.processDefeat()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Battle>
 *  code
 *  code
 *  code
 * </JS Pre-End Battle>
 *
 * <JS Post-End Battle>
 *  code
 *  code
 *  code
 * </JS Post-End Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when the battle is over aimed at the function:
 *   BattleManager.endBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 * 
 * === Battle Layout-Related Notetags ===
 * 
 * These tags will change the battle layout for a troop regardless of how the
 * plugin parameters are set up normally. Insert these tags in either the
 * noteboxes of maps or the names of troops for them to take effect. If both
 * are present for a specific battle, then priority goes to the setting found
 * in the troop name.
 * 
 * ---
 * 
 * <Layout: type>
 * <Battle Layout: type>
 * 
 * - Used for: Map Notetags, Troop Name Tags, and Troop Comment Tags
 * - Changes the battle layout style used for this specific map or battle.
 * - Replace 'type' with 'default', 'list', 'xp', 'portrait', or 'border'.
 * - Those with VisuMZ_3_FrontviewBattleUI can use 'frontview'.
 * - Those with VisuMZ_3_SideviewBattleUI can use 'sideview'.
 * - If using Troop Comment Tags, then as long as the tag appears in a comment
 *   found on any of the Troop's pages (even if they don't run), the tag will
 *   be considered in effect.
 * 
 * ---
 * 
 * === Troop Size Tags ===
 * 
 * ---
 * 
 * <Extend: x>
 * <Extend: x, x, x>
 * 
 * - Used for: Troop Name Tags and Troop Comment Tags
 * - Adds enemies from another troop to the current troop.
 * - Enemies from another troop will retain their database positions.
 * - Replace 'x' with the ID of the database troop entry you wish to add enemy
 *   members from.
 *   - Insert multiple x's to add from more troops.
 * - Extended troop members will be added in the order they're listed.
 * - Be cautious of how many enemies you add as too many will lag the battle
 *   system. We are not responsible for frame drops due to this.
 * 
 * ---
 * 
 * === Troop Comment Tags ===
 * 
 * Place these tags inside of a comment found in a troop page's event list.
 * 
 * ---
 * 
 * <Once Parallel When Start Battle>
 * 
 * - Used for: Troop Page Comment Tags
 * - Causes the troop page to immediately load the moment the battle scene
 *   begins to fade in (not after it fades in). This is faster than a turn 0
 *   condition troop page. Troop page conditions are ignored.
 * - This can be used for things like the Action Sequence Camera plugin, the
 *   Visual Battle Environment plugin, and/or initial battle poses and such in
 *   order to provide a near seamless battle transition experience.
 * - This does NOT trigger when coming out of the options menu or party menu.
 * - This WILL trigger when going from battle to battle nonstop via plugins
 *   like VisuStella MZ's Chain Battles.
 * - When actors are moving towards their home positions, it will take around
 *   30 frames by default. Use this information however you like.
 * 
 * ---
 *
 * ============================================================================
 * Action Sequence - Plugin Commands
 * ============================================================================
 *
 * Skills and items, when used in battle, have a pre-determined series of
 * actions to display to the player as a means of representing what's going on
 * with the action. For some game devs, this may not be enough and they would
 * like to get more involved with the actions themselves.
 *
 * Action Sequences, added through this plugin, enable this. To give a skill or
 * item a Custom Action Sequence, a couple of steps must be followed:
 *
 * ---
 *
 * 1. Insert the <Custom Action Sequence> notetag into the skill or item's
 *    notebox (or else this would not work as intended).
 * 2. Give that skill/item a Common Event through the Effects box. The selected
 *    Common Event will contain all the Action Sequence data.
 * 3. Create the Common Event with Action Sequence Plugin Commands and/or event
 *    commands to make the skill/item do what you want it to do.
 *
 * ---
 *
 * The Plugin Commands added through the Battle Core plugin focus entirely on
 * Action Sequences. However, despite the fact that they're made for skills and
 * items, some of these Action Sequence Plugin Commands can still be used for
 * regular Troop events and Common Events.
 *
 * ---
 *
 * === Action Sequence - Action Sets ===
 *
 * Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * ---
 *
 * ACSET: Setup Action Set
 * - The generic start to most actions.
 *
 *   Display Action:
 *   Immortal: On:
 *   Battle Step:
 *   Wait For Movement:
 *   Cast Animation:
 *   Wait For Animation:
 *   - Use this part of the action sequence?
 *
 * ---
 *
 * ACSET: All Targets Action Set
 * - Affects all targets simultaneously performing the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 * 
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait For Animation:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Each Target Action Set
 * - Goes through each target one by one to perform the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 *
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait Count:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Finish Action
 * - The generic ending to most actions.
 *
 *   Wait For New Line:
 *   Wait For Effects:
 *   Clear Battle Log:
 *   Home Reset:
 *   Wait For Movement:
 *   - Use this part of the action sequence?
 *
 * ---
 * 
 * === Action Sequences - Angle ===
 * 
 * These action sequences allow you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * ANGLE: Change Angle
 * - Changes the camera angle.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Angle:
 *   - Change the camera angle to this many degrees.
 *
 *   Duration:
 *   - Duration in frames to change camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Reset Angle
 * - Reset any angle settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Wait For Angle
 * - Waits for angle changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Animations ===
 *
 * These Action Sequences are related to the 'Animations' that can be found in
 * the Animations tab of the Database.
 *
 * ---
 *
 * ANIM: Action Animation
 * - Plays the animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation
 * - Plays the animation associated with the user's weapon.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation 2+
 * - Plays the animation associated with the user's other weapons.
 * - Plays nothing if there is no other weapon equipped.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Slot:
 *   - Which weapon slot to get this data from?
 *   - Main-hand weapon is weapon slot 1.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 * 
 * ANIM: Balloon Animation
 * - Plays a balloon animation on target(s).
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Balloon Type:
 *   - What kind of balloon should be played on target(s)?
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Single)
 * - Plays a balloon animation using an icon on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Range)
 * - Plays a balloon animation an icon range on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Starting Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Ending Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Specific)
 * - Plays a balloon animation with specific icons on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Icons:
 *   - Insert the ID(s) of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 *
 * ANIM: Cast Animation
 * - Plays the cast animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Change Battle Portrait
 * - Changes the battle portrait of the actor (if it's an actor).
 * - Can be used outside of battle/action sequences.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *   - Valid units can only be actors.
 *
 *   Filename:
 *   - Select the file to change the actor's portrait to.
 * 
 * ---
 *
 * ANIM: Change Battle Portrait (JS)
 * - Changes the battle portrait of the actor through JavaScript.
 * - Can be used outside of battle/action sequences.
 * 
 *   JS: Actor ID:
 *   - Enter which Actor ID to affect.
 *   - Uses JavaScript code.
 * 
 *   JS: Filename:
 *   - Enter the filename you wish to use.
 *   - Uses JavaScript code.
 * 
 * ---
 *
 * ANIM: Guard Animation
 * - Plays the animation associated with the user's guard action (if any).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Item Animation
 * - Plays the animation associated with a specific item.
 * 
 *   Item ID:
 *   - Which item ID will the animation come from?
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Play at Coordinate
 * - Plays an animation on the screen at a specific x, y coordinate.
 * - Requires VisuMZ_0_CoreEngine!
 * 
 *   Animation ID:
 *   - Plays this animation.
 * 
 *   Coordinates:
 * 
 *     X:
 *     Y:
 *     - X/Y coordinate used for the animation.
 *       You may use JavaScript code.
 * 
 *   Mirror Animation?:
 *   - Mirror the animation?
 * 
 *   Mute Animation?:
 *   - Mute the animation?
 * 
 *   Wait for Completion?:
 *   - Wait the animation to finish before continuing?
 *
 * ---
 *
 * ANIM: Show Animation
 * - Plays the a specific animation on unit(s).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Animation ID:
 *   - Select which animation to play on unit(s).
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Show Animation JS
 * - Plays the a specific animation on unit(s).
 * - Uses JavaScript to determine animation ID.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   JS: Animation ID:
 *   - Select which animation to play on unit(s).
 *   - Uses JavaScript to determine animation ID.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Skill Animation
 * - Plays the animation associated with a specific skill.
 * 
 *   Skill ID:
 *   - Which skill ID will the animation come from?
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Wait For Animation
 * - Causes the interpreter to wait for any animation(s) to finish.
 *
 * ---
 *
 * === Action Sequences - Battle Log ===
 *
 * These Action Sequences are related to the Battle Log Window, the window
 * found at the top of the battle screen.
 *
 * ---
 *
 * BTLOG: Add Text
 * - Adds a new line of text into the Battle Log.
 *
 *   Text:
 *   - Add this text into the Battle Log.
 *   - Text codes allowed.
 * 
 *   Copy to Combat Log?:
 *   - Copies text to the Combat Log.
 *   - Requires VisuMZ_4_CombatLog
 * 
 *     Combat Log Icon:
 *     - What icon would you like to bind to this entry?
 *     - Requires VisuMZ_4_CombatLog
 *
 * ---
 *
 * BTLOG: Clear Battle Log
 * - Clears all the text in the Battle Log.
 *
 * ---
 *
 * BTLOG: Display Action
 * - plays the current action in the Battle Log.
 *
 * ---
 *
 * BTLOG: Pop Base Line
 * - Removes the Battle Log's last added base line and  all text up to its
 *   former location.
 *
 * ---
 *
 * BTLOG: Push Base Line
 * - Adds a new base line to where the Battle Log currently is at.
 *
 * ---
 *
 * BTLOG: Refresh Battle Log
 * - Refreshes the Battle Log.
 *
 * ---
 *
 * BTLOG: UI Show/Hide
 * - Shows or hides the Battle UI (including the Battle Log).
 *
 *   Show/Hide?:
 *   - Shows/hides the Battle UI.
 *
 * ---
 *
 * BTLOG: Wait For Battle Log
 * - Causes the interpreter to wait for the Battle Log to finish.
 *
 * ---
 *
 * BTLOG: Wait For New Line
 * - Causes the interpreter to wait for a new line in the Battle Log.
 *
 * ---
 *
 * === Action Sequences - Camera ===
 *
 * These Action Sequences are battle camera-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * CAMERA: Clamp ON/OFF
 * - Turns battle camera clamping on/off.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Setting:
 *   - Turns camera clamping on/off.
 *
 * ---
 *
 * CAMERA: Focus Point
 * - Focus the battle camera on a certain point in the screen.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   X Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Y Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Focus Target(s)
 * - Focus the battle camera on certain battler target(s).
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Targets:
 *   - Select unit(s) to focus the battle camera on.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Offset
 * - Offset the battle camera from the focus target.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Offset X:
 *   - How much to offset the camera X by.
 *   - Negative: left. Positive: right.
 *
 *   Offset Y:
 *   - How much to offset the camera Y by.
 *   - Negative: up. Positive: down.
 *
 *   Duration:
 *   - Duration in frames for offset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Reset
 * - Reset the battle camera settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Reset Focus?:
 *   - Reset the focus point?
 *
 *   Reset Offset?:
 *   - Reset the camera offset?
 *
 *   Duration:
 *   - Duration in frames for reset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Wait For Camera
 * - Waits for camera changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 * 
 * === Action Sequences - Cutins ===
 * 
 * Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Add Visual Cutin Effect
 * - Adds the Visual Cutin Effect using these desired settings.
 * - Only one of each cutin-style type can be present at a time.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Basic Settings:
 * 
 *     Cutin Style Type:
 *     - What Visual Cutin Effect style type do you wish to use?
 *     - Only one of each cutin-style type can be present.
 *     - Refer to VisuMZ wiki for visuals on styles.
 * 
 *     Portrait Target:
 *     - Select unit(s) to grab the Visual Cutin Effect portrait data from.
 *     - First unit will be used to make portrait.
 * 
 *     Parallax Filename:
 *     - Pick a parallax to use for the Visual Cutin Effect.
 *     - Pick (None) to not use a parallax.
 * 
 *     Background Color:
 *     - Use #rrggbb for custom colors or regular numbers for text colors from
 *       the Window Skin.
 *
 *   Extra Settings:
 *   - Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 *   - An explanation for these settings are found in the Visual Cutin Effect
 *     help file and documentation.
 *   - Extra parameters are added for Parallax Scroll Inversion when the target
 *     is an enemy.
 * 
 *   Wait for Entrance:
 *   - Wait until cutin entrance is finished before performing the next
 *     event command?
 * 
 * ---
 *
 * CUTIN: End Visual Cutin Effect (All)
 * - Ends all Visual Cutin Effects currently present.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 *
 * CUTIN: End Visual Cutin Effect (Type)
 * - Ends the Visual Cutin Effect with the matching type.
 * - Requires VisuMZ_3_VisualCutinEffect!
 *
 *   Cutin Style Type:
 *   - What Visual Cutin Effect style type do you wish to end?
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 * 
 * CUTIN: Wait for Cutin Entrance
 * - Wait until all cutin entrances are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Wait for Cutin Exit
 * - Wait until all cutin exits are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 *
 * === Action Sequences - Dragonbones ===
 *
 * These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * ---
 *
 * DB: Dragonbones Animation
 * - Causes the unit(s) to play a Dragonbones motion animation.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Motion Animation:
 *   - What is the name of the Dragonbones motion animation you wish to play?
 *
 * ---
 *
 * DB: Dragonbones Time Scale
 * - Causes the unit(s) to change their Dragonbones time scale.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Time Scale:
 *   - Change the value of the Dragonbones time scale to this.
 *
 * ---
 *
 * === Action Sequences - Elements ===
 *
 * These Action Sequences can change up the element(s) used for the action's
 * damage calculation midway through an action.
 *
 * They also require the VisuMZ_1_ElementStatusCore plugin to be present in
 * order for them to work.
 *
 * ---
 *
 * ELE: Add Elements
 * - Adds element(s) to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to add onto the action.
 *   - Insert multiple element ID's to add multiple at once.
 *
 * ---
 *
 * ELE: Clear Element Changes
 * - Clears all element changes made through Action Sequences.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 *
 * ELE: Force Elements
 * - Forces only specific element(s) when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to force in the action.
 *   - Insert multiple element ID's to force multiple at once.
 *
 * ---
 *
 * ELE: Null Element
 * - Forces no element to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 * 
 * === Action Sequences - Grid ===
 * 
 * These Action Sequences are Battle Grid System-related.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * ---
 * 
 * GRID: Action Animation at Node
 * - Plays action animation at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 *
 * GRID: Add Passive State(s) to Node
 * - Adds Passive State(s) at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 *
 *   State ID(s):
 *   - Select which State ID(s) to add as a Passive State.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to add the Passive State Node effect for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Passive State(s) to.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Passive State(s) to.
 *
 * ---
 * 
 * GRID: Add Trigger to Node
 * - Adds Trigger to target node.
 * - Target node cannot have battler.
 * - Each node can only contain ONE trigger! 
 * - Otherwise, newly placed triggers will overwrite the old ones.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Skill ID:
 *   - Select which Skill ID(s) to add as the trigger.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to add the Trigger Node effect for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Trigger to.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Trigger to.
 * 
 * ---
 * 
 * GRID: Add Trigger to Node JS
 * - Adds JS Trigger to target node.
 * - Target node cannot have battler.
 * - Each node can only contain ONE trigger! 
 * - Otherwise, newly placed triggers will overwrite the old ones.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   JS: Skill ID:
 *   - Use JavaScript to determine what skill ID to add to this node.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to add the Trigger Node effect for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Trigger to.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Trigger to.
 * 
 * ---
 * 
 * GRID: Animation ID at Node
 * - Plays specific animation ID at target node.
 * 
 *   Animation ID:
 *   - Play this animation at target node.
 * 
 *     Mirror?:
 *     - Mirror this animation?
 * 
 *     Mute?:
 *     - Mute this animation?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Animation JS at Node
 * - Uses JS to calculate which animation to play at target node.
 * 
 *   JS: Animation ID:
 *   - Calculate which animation to play on unit(s).
 *   - Uses JavaScript to determine animation ID.
 * 
 *     Mirror?:
 *     - Mirror this animation?
 * 
 *     Mute?:
 *     - Mute this animation?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Animation Type at Node
 * - Plays certain animation type at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Type:
 *   - What is the animation type you would like to play?
 *     - Attack
 *     - Guard
 *     - Item
 *     - Skill
 * 
 *     Slot (Attack Type):
 *     - Which weapon slot to get this data from?
 *     - Main-hand weapon is weapon slot 1.
 * 
 *     Item ID (Item Type):
 *     - Which item ID will the animation come from?
 * 
 *     Skill ID (Skill Type):
 *     - Which skill ID will the animation come from?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Move Target(s) In Direction
 * - Moves target(s) in a specific direction to other Nodes.
 * - Requires VisuMZ_2_BattleGridSystem!
 * - This will bypass the "once per action" condition used for both the
 *   <rule Move User Node direction: x> & <rule Move Target Node direction: x>
 *   notetags as this is not a notetag effect.
 * 
 *   Targets:
 *   - Select unit(s) to move.
 * 
 *   Movement Type:
 *   - Select the Movement type rulings.
 *   - See VisuMZ_2_BattleGridSystem help file for details.
 * 
 *     Direction:
 *     - Select the movement direction.
 * 
 *     Distance:
 *     - The number of nodes to be moved.
 *     - You may use JavaScript code.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 *   Silent Change?:
 *   - Silent: Discreet changes shown. More apparent later.
 *   - Visual: Instant changes shown.
 * 
 * ---
 * 
 * GRID: Pull To Target Node
 * - Pulls battlers towards target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *
 *     Unit:
 *     - Which unit do you want to pull on?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to
 *       pull to.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to
 *       pull to.
 * 
 *   Strength:
 *   - Input the strength level of the pull.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 * ---
 * 
 * GRID: Push From Target Node
 * - Pushes battlers away from target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *
 *     Unit:
 *     - Which unit do you want to push from?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to
 *       push from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to
 *       push from.
 * 
 *   Strength:
 *   - Input the strength level of the push.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 * ---
 *
 * GRID: Remove All Passive States from Node
 * - Removes all Passive State effects at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to clear the Node for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to clear
 *       Passive States from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to clear
 *       Passive States from.
 *
 * ---
 *
 * GRID: Remove Passive State(s) from Node
 * - Remove Passive State(s) at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 *
 *   State ID(s):
 *   - Select which State ID(s) to remove as a Passive State.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to remove the Passive State Node effect for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to remove
 *       a Passive State(s) from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to remove
 *       a Passive State(s) from.
 *
 * ---
 * 
 * GRID: Remove Trigger from Node
 * - Removes Trigger at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to clear Triggers for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to clear
 *       Triggers from.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to clear
 *       Triggers from.
 * 
 * ---
 * 
 * === Action Sequences - Horror Effects ===
 * 
 * These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 * 
 * ---
 *
 * HORROR: Clear All Filters
 * - Clear all Horror Effects filters on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove Horror Effects for.
 *
 * ---
 *
 * HORROR: Glitch Create
 * - Creates the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Glitch Slices:
 *   - Glitch slices to be used with the target.
 *
 *   Glitch Offset:
 *   - Default offset value.
 *
 *   Glitch Animated?:
 *   - Animate the glitch effect?
 *
 *   Glitch Frequency:
 *   - If animated, how frequent to make the glitch effect?
 *   - Lower = often     Higher = rarer
 *
 *   Glitch Strength:
 *   - If animated, how strong is the glitch effect?
 *   - Lower = weaker     Higher = stronger
 *
 * ---
 *
 * HORROR: Glitch Remove
 * - Removes the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: Noise Create
 * - Creates the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Noise Rate:
 *   - Noise rate to be used with the target.
 *
 *   Noise Animated:
 *   - Animate the noise for the target?
 *
 * ---
 *
 * HORROR: Noise Remove
 * - Removes the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: TV Create
 * - Creates the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   TV Line Thickness:
 *   - Default TV line thickness
 *   - Lower = thinner     Higher = thicker
 *
 *   TV Corner Size:
 *   - Default TV line corner size
 *   - Lower = smaller     Higher = bigger
 *
 *   TV Animated:
 *   - Animate the TV?
 *
 *   TV Speed:
 *   - Speed used to animate the TV if animated
 *   - Lower = slower     Higher = faster
 *
 * ---
 *
 * HORROR: TV Remove
 * - Removes the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 * 
 * === Action Sequences - Impact ===
 * 
 * These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * IMPACT: Bizarro Inversion
 * - Swaps blue/red colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Bizarro?:
 *   - Enable Bizarro Inversion effect?
 *
 * ---
 *
 * IMPACT: Color Break
 * - Breaks the colors on the screen before reassembling.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Intensity:
 *   - What is the intensity of the color break effect?
 *
 *   Duration:
 *   - What is the duration of the color break effect?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Desaturation
 * - Desaturates all colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Desaturate?:
 *   - Enable Desaturation effect?
 *
 * ---
 *
 * IMPACT: Motion Blur Screen
 * - Creates a motion blur on the whole screen.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Target(s)
 * - Creates a motion blur on selected target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion blur effects for.
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Trail Create
 * - Creates a motion trail effect for the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion trail effects for.
 *
 *   Delay:
 *   - How many frames to delay by when creating a motion trail?
 *   - The higher the delay, the less motion trails there are.
 *
 *   Duration:
 *   - How many frames should the motion trail last?
 *   - What do you want to be its duration?
 *
 *   Hue:
 *   - What do you want to be the hue for the motion trail?
 *
 *   Starting Opacity:
 *   - What starting opacity value do you want for the motion trail?
 *   - Opacity values decrease over time.
 *
 *   Tone:
 *   - What tone do you want for the motion trail?
 *   - Format: [Red, Green, Blue, Gray]
 *
 * ---
 *
 * IMPACT: Motion Trail Remove
 * - Removes the motion trail effect from the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to clear motion trail effects for.
 *
 * ---
 *
 * IMPACT: Negative Inversion
 * - Inverts all the colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Negative?:
 *   - Enable Negative Inversion effect?
 *
 * ---
 *
 * IMPACT: Oversaturation
 * - Oversaturates colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Oversaturate?:
 *   - Enable Oversaturation effect?
 *
 * ---
 *
 * IMPACT: Shockwave at Point
 * - Creates a shockwave at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to create a shockwave at?
 *   - You can use JavaScript code.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Each Target(s)
 * - Creates a shockwave at each of the target(s) location(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Target(s) Center
 * - Creates a shockwave from the center of the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Time Scale
 * - Adjust time to go faster or slower!
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Scale:
 *   - Adjusts how fast/slow time goes.
 *   - 1.00 is normal. Lower is slower. Higher is faster.
 *
 * ---
 *
 * IMPACT: Time Stop
 * - Stops time for a set amount of milliseconds.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Milliseconds:
 *   - How many milliseconds should time stop for?
 *   - 1000 milliseconds = 1 second.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Point
 * - Creates a zoom blur at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to focus the zoom at?
 *   - You can use JavaScript code.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Target(s) Center
 * - Creates a zoom blur at the center of targets.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a zoom blur from.
 *
 *   Target Location:
 *   - Select which part target group to start a zoom blur from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the zoom blur X/Y point by.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * === Action Sequences - Inject ===
 *
 * These Action Sequences are related to injecting sprite animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * ---
 * 
 * INJECT: Animation Begin
 * - Injects and plays a whole spritesheet animation.
 * - The spritesheet animation will play over the battler until it is finished.
 * - The battler's original sprite will be invisible until finished.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to inject the animation on.
 * 
 *   Filename:
 *   - Select the animation spritesheet file.
 *   - Located in the /img/sv_actors/ folder.
 * 
 *     Horizontal Cells:
 *     - How many horizontal cells (or columns) are there?
 * 
 *     Vertical Cells:
 *     - How many vertical cells (or rows) are there?
 * 
 *     Frame Delay:
 *     - How many frames are played inbetween cells?
 * 
 *     Smooth Bitmap?:
 *     - Smooth the spritesheet graphic?
 * 
 *   Offset:
 * 
 *     Offset X:
 *     - Offsets the X position of the injected animation.
 *     - Negative: left. Positive: right.
 * 
 *     Offset Y:
 *     - Offsets the Y position of the injected animation.
 *     - Negative: up. Positive: down.
 * 
 * ---
 * 
 * INJECT: Animation End
 * - Stops and ends any injected animations on target(s).
 * - Any inject animation will be prematurely terminated.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to stop injected animation(s).
 * 
 * ---
 * 
 * INJECT: Animation Pause/Resume
 * - Pauses/resumes any injected animations on target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to pause/resume injected animation(s).
 * 
 *   Pause?:
 *   - Pause the injected animation?
 * 
 * ---
 * 
 * INJECT: Wait For Injected Animation
 * - Waits for injected animations to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * === Action Sequences - Mechanics ===
 *
 * These Action Sequences are related to various mechanics related to the
 * battle system.
 *
 * ---
 *
 * MECH: Action Effect
 * - Causes the unit(s) to take damage/healing from action and incurs any
 *   changes made such as buffs and states.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 * ---
 * 
 * MECH: Active Chain Input Disable
 * - Disables input for Active Chain Skills at this time.
 * - Requires VisuMZ_3_ActiveChainSkills!
 * 
 * ---
 *
 * MECH: Add Buff/Debuff
 * - Adds buff(s)/debuff(s) to unit(s). 
 * - Determine which parameters are affected and their durations.
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s) and/or debuff(s).
 *
 *   Buff Parameters:
 *   - Select which parameter(s) to buff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Debuff Parameters:
 *   - Select which parameter(s) to debuff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Turns:
 *   - Number of turns to set the parameter(s) buffs to.
 *   - You may use JavaScript code.
 *
 * ---
 *
 * MECH: Add State
 * - Adds state(s) to unit(s).
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s).
 *
 *   States:
 *   - Select which state ID(s) to add to unit(s).
 *   - Insert multiple state ID's to add multiple at once.
 *
 * ---
 * 
 * MECH: Analyze Weakness
 * - Reveal elemental weakness(es) from target(s).
 * - Requires VisuMZ_3_WeaknessDisplay!
 * 
 *   Targets:
 *   - Select unit(s) to reveal elemental weaknesses for.
 * 
 *   Reveal:
 *   - How many elemental weaknesses do you wish to reveal?
 *   - You may use JavaScript code.
 * 
 * ---
 *
 * MECH: Armor Penetration
 * - Adds an extra layer of defensive penetration/reduction.
 * - You may use JavaScript code for any of these.
 *
 *   Armor/Magic Penetration:
 *
 *     Rate:
 *     - Penetrates an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Penetrates a flat amount of armor by this value.
 *
 *   Armor/Magic Reduction:
 *
 *     Rate:
 *     - Reduces an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Reduces a flat amount of armor by this value.
 *
 * ---
 * 
 * MECH: ATB Gauge
 * - Alters the ATB/TPB Gauges.
 * - Requires VisuMZ_2_BattleSystemATB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Charging:
 *   
 *     Charge Rate:
 *     - Changes made to the ATB Gauge if it is currently charging.
 * 
 *   Casting:
 *   
 *     Cast Rate:
 *     - Changes made to the ATB Gauge if it is currently casting.
 *   
 *     Interrupt?:
 *     - Interrupt the ATB Gauge if it is currently casting?
 * 
 * ---
 * 
 * MECH: Boost Points Change
 * - Changes Boost Points for target(s).
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Boost Points for.
 * 
 *   Alter Boost Points By:
 *   - Alters the unit(s) Boost Points.
 *   - Positive for gaining points. Negative for losing points.
 * 
 * ---
 * 
 * MECH: Boost Store Data
 * - Stores the number of Boosts used this action inside a variable.
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Variable ID:
 *   - Which variable do you want to store the data inside?
 * 
 * ---
 * 
 * MECH: Break Shield Change
 * - Changes Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Break Shields for.
 * 
 *   Alter Break Shields By:
 *   - Alters the unit(s) Break Shields.
 *   - Positive for gaining shields. Negative for losing shields.
 * 
 * ---
 * 
 * MECH: Break Shield Reset
 * - Resets Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to reset the Break Shields for.
 * 
 * ---
 * 
 * MECH: BTB Brave Points
 * - Alters the target(s) Brave Points to an exact value.
 * - Requires VisuMZ_2_BattleSystemBTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Alter Brave Points By:
 *   - Alters the target(s) Brave Points.
 *   - Positive for gaining BP.
 *   - Negative for losing BP.
 * 
 * ---
 *
 * MECH: Collapse
 * - Causes the unit(s) to perform its collapse animation if the unit(s)
 *   has died.
 *
 *   Targets:
 *   - Select unit(s) to process a death collapse.
 *
 *   Force Death:
 *   - Force death even if the unit has not reached 0 HP?
 *   - This will remove immortality.
 *
 *   Wait For Effect?:
 *   - Wait for the collapse effect to complete before performing next command?
 *
 * ---
 * 
 * MECH: CTB Order
 * - Alters the CTB Turn Order.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Turn Order for.
 * 
 *   Change Order By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: CTB Speed
 * - Alters the CTB Speed.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Speed for.
 * 
 *   Charge Rate:
 *   - Changes made to the CTB Speed if it is currently charging.
 * 
 *   Cast Rate:
 *   - Changes made to the CTB Speed if it is currently casting.
 * 
 * ---
 * 
 * MECH: Custom Damage Formula
 * - Changes the current action's damage formula to custom.
 * - This will assume the MANUAL damage style.
 * 
 *   Formula:
 *   - Changes the current action's damage formula to custom.
 *   - Use 'default' to revert the damage formula.
 * 
 * ---
 *
 * MECH: Damage Popup
 * - Causes the unit(s) to display the current state of damage received
 *   or healed.
 *
 *   Targets:
 *   - Select unit(s) to prompt a damage popup.
 *
 * ---
 *
 * MECH: Dead Label Jump
 * - If the active battler is dead, jump to a specific label in the
 *   common event.
 *
 *   Jump To Label:
 *   - If the active battler is dead, jump to this specific label in the
 *     common event.
 *
 * ---
 * 
 * MECH: Emulate Attack Effect
 * - Emulate an "Action Effect" but using a the user's attack skill instead of
 *   the current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Guard Effect
 * - Emulate an "Action Effect" but using a the user's guard skill instead of
 *   the current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Item Effect
 * - Emulate an "Action Effect" but using a specific item instead of the
 *   current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   Item ID:
 *   - Which item ID will be emulated?
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Skill Cost
 * - Pick a skill for target(s) to emulate paying the cost of.
 * - Lets you cause characters to perform paying the costs of a specific skill
 *   without needing to actually use them.
 * - This will include Skill Cooldowns and Limited Skill Uses.
 * 
 *   Skill ID:
 *   - Which skill ID will have its cost paid for?
 *   - Use 0 for current action's skill.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Skill Effect
 * - Emulate an "Action Effect" but using a specific skill instead of the
 *   current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   Skill ID:
 *   - Which skill ID will be emulated?
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 *
 * MECH: Enemy Escape
 * - Causes the enemy unit(s) to escape.
 *
 *   Targets:
 *   - Select unit(s) to escape.
 *
 * ---
 *
 * MECH: ETB Energy Count
 * - Alters the subject team's available Energy Count.
 * - Requires VisuMZ_2_BattleSystemETB!
 *
 *   Energy Count:
 *   - Alters the subject team's available Energy Count.
 *   - Positive for gaining energy. Negative for losing energy.
 *
 * ---
 *
 * MECH: FTB Action Count
 * - Alters the subject team's available Action Count.
 * - Requires VisuMZ_2_BattleSystemFTB!
 *
 *   Action Count:
 *   - Alters the subject team's available Action Count.
 *   - Positive for gaining actions. Negative for losing actions.
 *
 * ---
 *
 * MECH: HP, MP, TP
 * - Alters the HP, MP, and TP values for unit(s).
 * - Positive values for healing. Negative values for damage.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 *   HP, MP, TP:
 *
 *     Rate:
 *     - Changes made to the parameter based on rate.
 *     - Positive values for healing. Negative values for damage.
 *
 *     Flat:
 *     - Flat changes made to the parameter.
 *     - Positive values for healing. Negative values for damage.
 *
 *   Damage Popup?:
 *   - Display a damage popup after?
 *
 * ---
 *
 * MECH: Immortal
 * - Changes the immortal flag of targets. If immortal flag is removed and a
 *   unit would die, collapse that unit.
 *
 *   Targets:
 *   - Alter the immortal flag of these groups. If immortal flag is removed and
 *     a unit would die, collapse that unit.
 *
 *   Immortal:
 *   - Turn immortal flag for unit(s) on/off?
 *
 * ---
 *
 * MECH: Multipliers
 * - Changes the multipliers for the current action.
 * - You may use JavaScript code for any of these.
 *
 *   Critical Hit%:
 *
 *     Rate:
 *     - Affects chance to land a critical hit by this multiplier.
 *
 *     Flat:
 *     - Affects chance to land a critical hit by this flat bonus.
 *
 *   Critical Damage
 *
 *     Rate:
 *     - Affects critical damage by this multiplier.
 *
 *     Flat:
 *     - Affects critical damage by this flat bonus.
 *
 *   Damage/Healing
 *
 *     Rate:
 *     - Sets the damage/healing multiplier for current action.
 *
 *     Flat:
 *     - Sets the damage/healing bonus for current action.
 *
 *   Hit Rate
 *
 *     Rate:
 *     - Affects chance to connect attack by this multiplier.
 *
 *     Flat:
 *     - Affects chance to connect attack by this flat bonus.
 *
 * ---
 * 
 * MECH: Once Parallel
 * - Plays a Common Event parallel to the battle event once without repeating
 *   itself when done.
 * 
 *   Common Event ID:
 *   - The ID of the parallel Common Event to play.
 *   - Does NOT repeat itself when finished.
 *   - When exiting battle scene, all Once Parallels are cleared.
 *   - Once Parallels are not retained upon reentering the scene.
 *   - Once Parallels are not stored in memory and cannot be saved.
 * 
 * ---
 * 
 * MECH: OTB Order
 * - Alters the OTB Turn Order. Best used with single targets.
 * - Requires VisuMZ_2_BattleSystemOTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the OTB Turn Order for.
 * 
 *   Current Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Next Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Follow Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: PTB Alter Cost
 * - Alters the action's cost settings.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Override?:
 *   - Overrides any 'permanent' settings for Changeability?
 * 
 *   Alter Changeability:
 *   - Allow the cost type and value to be changeable?
 * 
 *   Alter Cost Type:
 *   - Change the cost type to this scenario.
 *   - Use 'Unchanged' for no changes.
 * 
 *   Alter Cost Value:
 *   - What is the default action cost for this scenario?
 * 
 *   Priority:
 *   - What is this scenario's priority? Scenario outcomes with equal or lower
 *     priorities cannot override types and costs.
 * 
 * ---
 * 
 * MECH: PTB Conversion
 * - Converts full actions into half actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Conversion Count:
 *   - Converts full actions into half actions.
 *   - If not enough, consume half actions.
 * 
 * ---
 * 
 * MECH: PTB Full/Half Action(s)
 * - Alters the subject team's available Full/Half Actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Full Actions:
 *   - Alters the subject team's available Full Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 *   Half Actions:
 *   - Alters the subject team's available Half Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 * ---
 *
 * MECH: Remove Buff/Debuff
 * - Removes buff(s)/debuff(s) from unit(s). 
 * - Determine which parameters are removed.
 *
 *   Targets:
 *   - Select unit(s) to have the buff(s) and/or debuff(s) removed.
 *
 *   Buff Parameters:
 *   - Select which buffed parameter(s) to remove.
 *
 *   Debuff Parameters:
 *   - Select which debuffed parameter(s) to remove.
 *
 * ---
 *
 * MECH: Remove State
 * - Remove state(s) from unit(s).
 *
 *   Targets:
 *   - Select unit(s) to have states removed from.
 *
 *   States:
 *   - Select which state ID(s) to remove from unit(s).
 *   - Insert multiple state ID's to remove multiple at once.
 *
 * ---
 * 
 * MECH: State Turns Change By
 * - Changes target(s) state turns by an amount.
 * - Requires VisuMZ_1_SkillsStatesCore!
 * 
 *   Targets:
 *   - Select unit(s) to affect state turns for.
 * 
 *   State ID:
 *   - What is the ID of the state you wish to change turns for?
 *   - Only works on states that can have turns.
 * 
 *   Change Turns By:
 *   - How many turns should the state be changed to?
 *   - You may use JavaScript code.
 * 
 *   Auto-Add State?:
 *   - Automatically adds state if actor(s) does not have it applied?
 * 
 * ---
 * 
 * MECH: State Turns Change To
 * - Changes target(s) state turns to a specific value.
 * - Requires VisuMZ_1_SkillsStatesCore!
 * 
 *   Targets:
 *   - Select unit(s) to affect state turns for.
 * 
 *   State ID:
 *   - What is the ID of the state you wish to change turns for?
 *   - Only works on states that can have turns.
 * 
 *   Change Turns To:
 *   - How many turns should the state be changed to?
 *   - You may use JavaScript code.
 * 
 *   Auto-Add State?:
 *   - Automatically adds state if target(s) does not have it applied?
 * 
 * ---
 * 
 * MECH: STB Exploit Effect
 * - Utilize the STB Exploitation mechanics!
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Target(s) Exploited?:
 *   - Exploit the below targets?
 * 
 *     Targets:
 *     - Select unit(s) to become exploited.
 * 
 *     Force Exploitation:
 *     - Force the exploited status?
 * 
 *   User Exploiter?:
 *   - Allow the user to become the exploiter?
 * 
 *     Force Exploitation:
 *     - Force the exploiter status?
 * 
 * ---
 * 
 * MECH: STB Extra Action
 * - Adds an extra action for the currently active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Extra Actions:
 *   - How many extra actions should the active battler gain?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: STB Remove Excess Actions
 * - Removes excess actions from the active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Remove Actions:
 *   - How many actions to remove from the active battler?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: Swap Weapon
 * - Causes the unit(s) to swap their weapon for another.
 * - Requires VisuMZ_2_WeaponSwapSystem!
 * 
 *   Targets:
 *   - Select unit(s) to swap weapons for.
 * 
 *   Weapon Type ID:
 *   - Which weapon type to swap to?
 *   - This is NOT the weapon's ID.
 *   - It's the weapon TYPE.
 * 
 * ---
 * 
 * MECH: Text Popup
 * - Causes the unit(s) to display a text popup.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Text:
 *   - What text do you wish to display?
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 * 
 * MECH: Variable Popup
 * - Causes the unit(s) to display a popup using the data stored inside
 *   a variable.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Variable:
 *   - Get data from which variable to display as a popup?
 * 
 *   Digit Grouping:
 *   - Use digit grouping to separate numbers?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 *
 * MECH: Wait For Effect
 * - Waits for the effects to complete before performing next command.
 *
 * ---
 *
 * === Action Sequences - Motion ===
 *
 * These Action Sequences allow you the ability to control the motions of
 * sideview sprites.
 *
 * ---
 * 
 * MOTION: Clear Freeze Frame
 * - Clears any freeze frames from the unit(s).
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to clear freeze frames for.
 * 
 * ---
 * 
 * MOTION: Freeze Motion Frame
 * - Forces a freeze frame instantly at the selected motion.
 * - Automatically clears with a new motion.
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to freeze motions for.
 * 
 *   Motion Type:
 *   - Freeze this motion for the unit(s).
 * 
 *   Frame Index:
 *   - Which frame do you want to freeze the motion on?
 *   - Frame index values start at 0.
 * 
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 * 
 * ---
 *
 * MOTION: Motion Type
 * - Causes the unit(s) to play the selected motion.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 *   Motion Type:
 *   - Play this motion for the unit(s).
 *
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 *
 * ---
 *
 * MOTION: Perform Action
 * - Causes the unit(s) to play the proper motion based on the current action.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 * ---
 *
 * MOTION: Refresh Motion
 * - Cancels any set motions unit(s) has to do and use their most natural
 *   motion at the moment.
 *
 *   Targets:
 *   - Select which unit(s) to refresh their motion state.
 *
 * ---
 *
 * MOTION: Wait By Motion Frame
 * - Creates a wait equal to the number of motion frames passing.
 * - Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 *   Motion Frames to Wait?:
 *   - Each "frame" is equal to the value found in 
 *     Plugin Parameters => Actors => Motion Speed
 *
 * ---
 *
 * === Action Sequences - Movement ===
 *
 * These Action Sequences allow you the ability to control the sprites of
 * actors and enemies in battle.
 *
 * ---
 *
 * MOVE: Battle Step
 * - Causes the unit(s) to move forward past their home position to prepare
 *   for action.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home By Distance
 * - Change unit(s)'s home position by a distance from their current home
 *   position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     change by.
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To JS Coordinates
 * - Change home position(s) to specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s)'s new home
 *     position.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Point
 * - Change home position(s) to a target point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to change home position to.
 *
 *     Target Location:
 *     - Select which part target group to change home position to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Face Direction
 * - Causes the unit(s) to face forward or backward.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Direction:
 *   - Select which direction to face.
 *
 * ---
 *
 * MOVE: Face JS Coordinates
 * - Causes the unit(s) to face specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s) to face
 *     towards.
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Point
 * - Causes the unit(s) to face a point on the screen.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Target(s)
 * - Causes the unit(s) to face other targets on the screen.
 * - Sideview-only!
 *
 *   Targets (facing):
 *   - Select which unit(s) to change direction.
 *
 *   Targets (destination):
 *   - Select which unit(s) for the turning unit(s) to face.
 *
 *   Face Away From?:
 *   - Face away from the unit(s) instead?
 *
 * ---
 *
 * MOVE: Float
 * - Causes the unit(s) to float above the ground.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make float.
 *
 *   Desired Height:
 *   - Vertical distance to float upward.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total float amount.
 *
 *   Float Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Float?:
 *   - Wait for floating to complete before performing next command?
 *
 * ---
 *
 * MOVE: Home Reset
 * - Causes the unit(s) to move back to their home position(s) and face back to
 *   their original direction(s).
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Jump
 * - Causes the unit(s) to jump into the air.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make jump.
 *
 *   Desired Height:
 *   - Max jump height to go above the ground
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total jump amount.
 *
 *   Wait For Jump?:
 *   - Wait for jumping to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move Distance
 * - Moves unit(s) by a distance from their current position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     move unit(s).
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To JS Coordinates
 * - Moves unit(s) to specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s) to move to.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Point
 * - Moves unit(s) to a designated point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to move.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to move to.
 *
 *     Target Location:
 *     - Select which part target group to move to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Opacity
 * - Causes the unit(s) to change opacity.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change opacity.
 *
 *   Desired Opacity:
 *   - Change to this opacity value.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for opacity change.
 *
 *   Opacity Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Opacity?:
 *   - Wait for opacity changes to complete before performing next command?
 *
 * ---
 *
 * MOVE: Scale/Grow/Shrink
 * - Causes the unit(s) to scale, grow, or shrink?.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change the scale of.
 *
 *   Scale X:
 *   Scale Y:
 *   - What target scale value do you want?
 *   - 1.0 is normal size.
 *
 *   Duration:
 *   - Duration in frames to scale for.
 *
 *   Scale Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Scale?:
 *   - Wait for scaling to complete before performing next command?
 *
 * ---
 *
 * MOVE: Skew/Distort
 * - Causes the unit(s) to skew.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to skew.
 *
 *   Skew X:
 *   Skew Y:
 *   - What variance to skew?
 *   - Use small values for the best results.
 *
 *   Duration:
 *   - Duration in frames to skew for.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew to complete before performing next command?
 *
 * ---
 *
 * MOVE: Spin/Rotate
 * - Causes the unit(s) to spin.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to spin.
 *
 *   Angle:
 *   - How many degrees to spin?
 *
 *   Duration:
 *   - Duration in frames to spin for.
 *
 *   Spin Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 * 
 *   Revert Angle on Finish:
 *   - Upon finishing the spin, revert the angle back to 0.
 *
 *   Wait For Spin?:
 *   - Wait for spin to complete before performing next command?
 *
 * ---
 *
 * MOVE: Wait For Float
 * - Waits for floating to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Jump
 * - Waits for jumping to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Movement
 * - Waits for movement to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Opacity
 * - Waits for opacity changes to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Scale
 * - Waits for scaling to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Skew
 * - Waits for skewing to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Spin
 * - Waits for spinning to complete before performing next command.
 *
 * ---
 * 
 * === Action Sequences - Projectiles ===
 * 
 * Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * ---
 *
 * PROJECTILE: Animation
 * - Create an animation projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Animation ID:
 *     - Determine which animation to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 * 
 *     Wait For Animation?:
 *     - Wait for animation to finish before going to the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 * 
 *     End Animation ID:
 *     - Plays an animation when projectile reaches target.
 *     - Use 0 to not use.
 *     - Requires VisuMZ_1_BattleCore v1.86+.
 *     - Requires VisuMZ_3_ActSeqProjectiles v1.09+.
 * 
 *       Mirror Animation:
 *       - Mirror the effect animation?
 *       - Requires VisuMZ_1_BattleCore v1.86+.
 *       - Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * 
 *       Mute Animation:
 *       - Mute the effect animation?
 *       - Requires VisuMZ_1_BattleCore v1.86+.
 *       - Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 *     
 *
 * ---
 *
 * PROJECTILE: Icon
 * - Create an icon projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Icon:
 *     - Determine which icon to use as a projectile.
 *       - You may use JavaScript code.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 * 
 *     End Animation ID:
 *     - Plays an animation when projectile reaches target.
 *     - Use 0 to not use.
 *     - Requires VisuMZ_1_BattleCore v1.86+.
 *     - Requires VisuMZ_3_ActSeqProjectiles v1.09+.
 * 
 *       Mirror Animation:
 *       - Mirror the effect animation?
 *       - Requires VisuMZ_1_BattleCore v1.86+.
 *       - Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * 
 *       Mute Animation:
 *       - Mute the effect animation?
 *       - Requires VisuMZ_1_BattleCore v1.86+.
 *       - Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 *
 * ---
 *
 * PROJECTILE: Picture
 * - Create a picture projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Picture Filename:
 *     - Determine which picture to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 * 
 *     End Animation ID:
 *     - Plays an animation when projectile reaches target.
 *     - Use 0 to not use.
 *     - Requires VisuMZ_1_BattleCore v1.86+.
 *     - Requires VisuMZ_3_ActSeqProjectiles v1.09+.
 * 
 *       Mirror Animation:
 *       - Mirror the effect animation?
 *       - Requires VisuMZ_1_BattleCore v1.86+.
 *       - Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * 
 *       Mute Animation:
 *       - Mute the effect animation?
 *       - Requires VisuMZ_1_BattleCore v1.86+.
 *       - Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 *
 * ---
 * 
 * === Action Sequences - Skew ===
 * 
 * These action sequences allow you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * SKEW: Change Skew
 * - Changes the camera skew.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Skew X:
 *   - Change the camera skew X to this value.
 *
 *   Skew Y:
 *   - Change the camera skew Y to this value.
 *
 *   Duration:
 *   - Duration in frames to change camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Reset Skew
 * - Reset any skew settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Wait For Skew
 * - Waits for skew changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Target ===
 *
 * If using a manual target by target Action Sequence, these commands will give
 * you full control over its usage.
 *
 * ---
 *
 * TARGET: Current Index
 * - Sets the current index to this value.
 * - Then decide to jump to a label (optional).
 *
 *   Set Index To:
 *   - Sets current targeting index to this value.
 *   - 0 is the starting index of a target group.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Next Target
 * - Moves index forward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Previous Target
 * - Moves index backward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Random Target
 * - Sets index randomly to determine new currernt target.
 * - Then decide to jump to a label (optional).
 *
 *   Force Random?:
 *   - Index cannot be its previous index amount after random.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 * 
 * === Action Sequences - Voice ==
 * 
 * ---
 *
 * VOICE: Common Line
 * - Plays a common voice line from target battler(s).
 * - Requires VisuMZ_3_BattleVoices!
 *
 *   Speaker Target(s):
 *   - Select unit(s) to play voice lines from.
 *
 *   Voice Line:
 *   - What voice line do you wish to play?
 *
 * ---
 *
 * VOICE: Play Special Line
 * - Plays a special voice line from target battler(s).
 * - Requires VisuMZ_3_BattleVoices!
 *
 *   Speaker Target(s):
 *   - Select unit(s) to play voice lines from.
 *
 *   Voice Line Type:
 *   - What voice line type do you wish to play?
 *     - Action Name
 *     - Chant Line
 *     - Item Name
 *     - Skill Name
 *     - Spell Name
 *     - Unique Lines
 *
 *   Name / Letter:
 *   - What voice letter/name do you want to play?
 *
 * ---
 *
 * === Action Sequences - Weapon ===
 *
 * Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * ---
 *
 * WEAPON: Clear Weapon Slot
 * - Clears the active weapon slot (making others valid again).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to clear the active weapon slot for.
 *
 * ---
 *
 * WEAPON: Next Weapon Slot
 * - Goes to next active weapon slot (making others invalid).
 * - If next slot is weaponless, don't label jump.
 *
 *   Targets:
 *   - Select unit(s) to change the next active weapon slot for.
 *
 * ---
 *
 * WEAPON: Set Weapon Slot
 * - Sets the active weapon slot (making others invalid).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to change the active weapon slot for.
 *
 *   Weapon Slot ID:
 *   - Select weapon slot to make active (making others invalid).
 *   - Use 0 to clear and normalize. You may use JavaScript code.
 *
 * ---
 *
 * === Action Sequences - Zoom ===
 *
 * These Action Sequences are zoom-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ZOOM: Change Scale
 * - Changes the zoom scale.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Scale:
 *   - The zoom scale to change to.
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Reset Zoom
 * - Reset any zoom settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Wait For Zoom
 * - Waits for zoom changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Auto Battle Settings
 * ============================================================================
 *
 * These Plugin Parameter settings allow you to change the aspects added by
 * this plugin that support Auto Battle and the Auto Battle commands.
 *
 * Auto Battle commands can be added to the Party Command Window and/or Actor
 * Command Window. The one used by the Party Command Window will cause the
 * whole party to enter an Auto Battle state until stopped by a button input.
 * The command used by the Actor Command Window, however, will cause the actor
 * to select an action based off the Auto Battle A.I. once for the current turn
 * instead.
 *
 * ---
 *
 * Battle Display
 * 
 *   Message:
 *   - Message that's displayed when Auto Battle is on.
 *     Text codes allowed. %1 - OK button, %2 - Cancel button
 * 
 *   OK Button:
 *   - Text used to represent the OK button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Cancel Button:
 *   - Text used to represent the Cancel button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Background Type:
 *   - Select background type for Auto Battle window.
 *     - 0 - Window
 *     - 1 - Dim
 *     - 2 - Transparent
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the Auto Battle options to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Startup Name:
 *   - Command name of the option.
 * 
 *   Style Name:
 *   - Command name of the option.
 * 
 *   OFF:
 *   - Text displayed when Auto Battle Style is OFF.
 * 
 *   ON:
 *   - Text displayed when Auto Battle Style is ON.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Settings
 * ============================================================================
 *
 * These Plugin Parameters add a variety of things to how damage is handled in
 * battle. These range from hard damage caps to soft damage caps to how damage
 * popups appear, how the formulas for various aspects are handled and more.
 *
 * Damage Styles are also a feature added through this plugin. More information
 * can be found in the help section above labeled 'Damage Styles'.
 *
 * ---
 *
 * Damage Styles
 * 
 *   Default Style:
 *   - Which Damage Style do you want to set as default?
 *   - Use 'Manual' to not use any styles at all.
 *     - The 'Manual' style will not support <Armor Penetration> notetags.
 *     - The 'Manual' style will not support <Armor Reduction> notetags.
 * 
 *   Style List:
 *   - A list of the damage styles available.
 *   - These are used to calculate base damage.
 * 
 *     Name:
 *     - Name of this Damage Style.
 *     -Used for notetags and such.
 * 
 *     JS: Formula:
 *     - The base formula for this Damage Style.
 * 
 *     Items & Equips Core:
 * 
 *       HP Damage:
 *       MP Damage:
 *       HP Recovery:
 *       MP Recovery:
 *       HP Drain:
 *       MP Drain:
 *       - Vocabulary used for this data entry.
 * 
 *       JS: Damage Display:
 *       - Code used the data displayed for this category.
 *
 * ---
 *
 * Damage Cap
 * 
 *   Enable Damage Cap?:
 *   - Put a maximum hard damage cap on how far damage can go?
 *   - This can be broken through the usage of notetags.
 * 
 *   Default Hard Cap:
 *   - The default hard damage cap used before applying damage.
 * 
 *   Enable Soft Cap?:
 *   - Soft caps ease in the damage values leading up to the  hard damage cap.
 *   - Requires hard Damage Cap enabled.
 * 
 *     Base Soft Cap Rate:
 *     - The default soft damage cap used before applying damage.
 * 
 *     Soft Scale Constant:
 *     - The default soft damage cap used before applying damage.
 *
 * ---
 *
 * Popups
 * 
 *   Popup Duration:
 *   - Adjusts how many frames a popup stays visible.
 * 
 *   Newest Popups Bottom:
 *   - Puts the newest popups at the bottom.
 * 
 *   End Battle Show?:
 *   - Show or hide popups upon victory or escape?
 *   - Used to hide battle-state removal popups.
 * 
 *   Offset X:
 *   Offset Y:
 *   - Sets how much to offset the sprites by horizontally/vertically.
 * 
 *   Shift X:
 *   Shift Y:
 *   - Sets how much to shift the sprites by horizontally/vertically.
 * 
 *   Shift Y:
 * 
 *   Critical Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Critical Duration:
 *   - Adjusts how many frames a the flash lasts.
 *
 * ---
 *
 * Formulas
 * 
 *   JS: Overall Formula:
 *   - The overall formula used when calculating damage.
 * 
 *   JS: Variance Formula:
 *   - The formula used when damage variance.
 * 
 *   JS: Guard Formula:
 *   - The formula used when damage is guarded.
 *
 * ---
 *
 * Critical Hits
 * 
 *   JS: Rate Formula:
 *   - The formula used to calculate Critical Hit Rates.
 * 
 *   JS: Damage Formula:
 *   - The formula used to calculate Critical Hit Damage modification.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Mechanics Settings
 * ============================================================================
 *
 * Some of the base settings for the various mechanics found in the battle
 * system can be altered here in these Plugin Parameters. Most of these will
 * involve JavaScript code and require you to have to good understanding of
 * how the RPG Maker MZ code works before tampering with it.
 *
 * ---
 *
 * Action Speed
 * 
 *   Allow Random Speed?:
 *   - Allow speed to be randomized base off the user's AGI?
 * 
 *   Turn End Buffs Expire?:
 *   - Normally, buffs expire after all actions end.
 *   - But here, you can have buffs expire on turn end.
 * 
 *   JS: Calculate:
 *   - Code used to calculate action speed.
 *
 * ---
 *
 * Base Troop
 * 
 *   Base Troop ID's:
 *   - Select the Troop ID(s) to duplicate page events from for all
 *     other troops.
 *   - More information can be found in the dedicated Help section above.
 *
 * ---
 * 
 * Common Events (on Map)
 * 
 *   Pre-Battle Event:
 *   Post-Battle Event:
 *   Victory Event:
 *   Defeat Event:
 *   Escape Success Event:
 *   Escape Fail Event:
 *   - Queued Common Event to run upon meeting the condition.
 *   - Use to 0 to not run any Common Event at all.
 *   - "Post-Battle Event" will always run regardless.
 *   - If any events are running before the battle, they will continue running
 *     to the end first before the queued Common Events will run.
 *   - These common events only run on the map scene. They're not meant to run
 *     in the battle scene.
 *   - If the "Defeat Event" has a common event attached to it, then random
 *     encounters will be changed to allow defeat without being sent to the
 *     Game Over scene. Instead, the game will send the player to the map scene
 *     where the Defeat Event will run.
 *
 * ---
 *
 * Escape
 * 
 *   JS: Calc Escape Ratio:
 *   - Code used to calculate the escape success ratio.
 * 
 *   JS: Calc Escape Raise:
 *   - Code used to calculate how much the escape success ratio raises upon
 *     each failure.
 * 
 * ---
 * 
 * Switches
 * 
 *   Switch: Critical:
 *   - Turns switch ON if the action performs a critical hit.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit lands a critical
 *     hit, then the switch will remain ON for the rest of the action.
 * 
 *   Switch: Miss/Evade:
 *   - Turns switch ON if the action misses/is evaded.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit fails to land,
 *     then the switch will remain ON for the rest of the action.
 * 
 * ---
 * 
 * Variables
 * 
 *   Variable: Damage:
 *   - Variable records target damage during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of damage done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 *   Variable: Healing:
 *   - Variable records target healing during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of healing done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 * ---
 *
 * JS: Battle-Related
 * 
 *   JS: Pre-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Battle Victory:
 *   - Target function: BattleManager.processVictory()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Success:
 *   - Target function: BattleManager.onEscapeSuccess()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Failure:
 *   - Target function: BattleManager.onEscapeFailure()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Battle Defeat:
 *   - Target function: BattleManager.processDefeat()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Turn-Related
 * 
 *   JS: Pre-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Action-Related
 * 
 *   JS: Pre-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Post-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Action:
 *   - Target function: BattleManager.endAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Action:
 *   - DescriTarget function: BattleManager.endAction()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Layout Settings
 * ============================================================================
 *
 * The Battle Layout Settings Plugin Parameter gives you control over the look,
 * style, and appearance of certain UI elements. These range from the way the
 * Battle Status Window presents its information to the way certain windows
 * like the Party Command Window and Actor Command Window appear.
 *
 * ---
 *
 * Battle Layout Style
 * - The style used for the battle layout.
 * 
 *   Default:
 *   - Shows actor faces in Battle Status.
 * 
 *   List:
 *   - Lists actors in Battle Status.
 * 
 *   XP:
 *   - Shows actor battlers in a stretched Battle Status.
 * 
 *   Portrait:
 *   - Shows portraits in a stretched Battle Status.
 * 
 *   Border:
 *   - Displays windows around the screen border.
 *
 * ---
 *
 * List Style
 * 
 *   Show Faces:
 *   - Shows faces in List Style?
 * 
 *   Command Window Width:
 *   - Determine the window width for the Party and Actor Command Windows.
 *   - Affects Default and List Battle Layout styles.
 *
 * ---
 *
 * XP Style
 * 
 *   Command Lines:
 *   - Number of action lines in the Actor Command Window for the XP Style.
 * 
 *   Sprite Height:
 *   - Default sprite height used when if the sprite's height has not been
 *     determined yet.
 * 
 *   Sprite Base Location:
 *   - Determine where the sprite is located on the Battle Status Window.
 *     - Above Name - Sprite is located above the name.
 *     - Bottom - Sprite is located at the bottom of the window.
 *     - Centered - Sprite is centered in the window.
 *     - Top - Sprite is located at the top of the window.
 *
 * ---
 *
 * Portrait Style
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait instead of a face.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Border Style
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait at the edge of the screen.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Skill & Item Windows
 * 
 *   Middle Layout:
 *   - Shows the Skill & Item Windows in mid-screen?
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 *
 * ---
 * 
 * Status Window Elements
 * 
 *   Battler Name:
 *   Gauge 1 (HP):
 *   Gauge 2 (MP):
 *   Gauge 3 (TP):
 *   State Icon:
 *   TPB/ATB Gauge:
 * 
 *     Offset: X/Y:
 *     - Offset this Battle Status Window element's X/Y.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Window Skin:
 * 
 *     Filename:
 *     - Filename used for the Battle Status Window skin.
 *     - Leave this empty to use the default window skin.
 * 
 *     Hide Window Skin?:
 *     - Hide the window skin for the Battle Status Window?
 * 
 *   Selectable Background:
 * 
 *     Hide Selectable BG?:
 *     - Show/Hide the selectable background box for the Battle Status Window?
 * 
 *   Attachments:
 * 
 *     Back Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the back of the Battle
 *         Status Window. Leave empty for none.
 * 
 *       Offset: X/Y:
 *       - Offset this Battle Status Window element's X/Y.
 *       - For X: Negative goes left. Positive goes right.
 *       - For Y: Negative goes up. Positive goes down.
 * 
 *     Front Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the front of the Battle
 *         Status Window. Leave empty for none.
 * 
 * ---
 * 
 * UI Elements
 * 
 *   Anti-Tint UI?
 *   - Prevent UI Elements from being tinted?
 *   - This prevents UI Elements such as HP Gauges, Enemy Names, Battle Cursor,
 *     and Weakness Display from being affected by screen tint.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Log Settings
 * ============================================================================
 *
 * These Plugin Parameters give you control over how the Battle Log Window, the
 * window shown at the top of the screen in the battle layout, appears, its
 * various properties, and which text will be displayed.
 *
 * The majority of the text has been disabled by default with this plugin to
 * make the flow of battle progress faster.
 *
 * ---
 *
 * General
 * 
 *   Back Color:
 *   - Use #rrggbb for a hex color.
 * 
 *   Max Lines:
 *   - Maximum number of lines to be displayed.
 * 
 *   Message Wait:
 *   - Number of frames for a usual message wait.
 * 
 *   Text Align:
 *   - Text alignment for the Window_BattleLog.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for the battle log.
 *
 * ---
 *
 * Start Turn
 * 
 *   Show Start Turn?:
 *   - Display turn changes at the start of the turn?
 * 
 *   Start Turn Message:
 *   - Message displayed at turn start.
 *   - %1 - Turn Count
 * 
 *   Start Turn Wait:
 *   - Number of frames to wait after a turn started.
 *
 * ---
 *
 * Display Action
 * 
 *   Show Centered Action?:
 *   - Display a centered text of the action name?
 * 
 *   Show Skill Message 1?:
 *   - Display the 1st skill message?
 * 
 *   Show Skill Message 2?:
 *   - Display the 2nd skill message?
 * 
 *   Show Item Message?:
 *   - Display the item use message?
 *
 * ---
 *
 * Action Changes
 * 
 *   Show Counter?:
 *   - Display counter text?
 * 
 *     Wait Frames:
 *     - How many frames should the battle log wait after text?
 *     - 60 frames = 1 second.
 * 
 *   Show Reflect?:
 *   - Display magic reflection text?
 * 
 *     Wait Frames:
 *     - How many frames should the battle log wait after text?
 *     - 60 frames = 1 second.
 * 
 *   Show Substitute?:
 *   - Display substitute text?
 * 
 *     Wait Frames:
 *     - How many frames should the battle log wait after text?
 *     - 60 frames = 1 second.
 *
 * ---
 *
 * Action Results
 * 
 *   Show No Effect?:
 *   - Display no effect text?
 * 
 *   Show Critical?:
 *   - Display critical text?
 * 
 *   Show Miss/Evasion?:
 *   - Display miss/evasion text?
 * 
 *   Show HP Damage?:
 *   - Display HP Damage text?
 * 
 *   Show MP Damage?:
 *   - Display MP Damage text?
 * 
 *   Show TP Damage?:
 *   - Display TP Damage text?
 *
 * ---
 *
 * Display States
 * 
 *   Show Added States?:
 *   - Display added states text?
 * 
 *   Show Removed States?:
 *   - Display removed states text?
 * 
 *   Show Current States?:
 *   - Display the currently affected state text?
 * 
 *   Show Added Buffs?:
 *   - Display added buffs text?
 * 
 *   Show Added Debuffs?:
 *   - Display added debuffs text?
 * 
 *   Show Removed Buffs?:
 *   - Display removed de/buffs text?
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battleback Scaling Settings
 * ============================================================================
 *
 * By default, the battlebacks in RPG Maker MZ scale as if the screen size is
 * a static 816x624 resolution, which isn't always the case. These settings
 * here allow you to dictate how you want the battlebacks to scale for the
 * whole game. These settings CANNOT be changed midgame or per battle.
 *
 * ---
 *
 * Settings
 * 
 *   Default Style:
 *   - The default scaling style used for battlebacks.
 *   - MZ (MZ's default style)
 *   - 1:1 (No Scaling)
 *   - Scale To Fit (Scale to screen size)
 *   - Scale Down (Scale Downward if Larger than Screen)
 *   - Scale Up (Scale Upward if Smaller than Screen)
 * 
 *   JS: 1:1:
 *   JS: Scale To Fit:
 *   JS: Scale Down:
 *   JS: Scale Up:
 *   - This code gives you control over the scaling for this style.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Party Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you control over how the Party Command Window
 * operates in the battle scene. You can turn disable it from appearing or make
 * it so that it doesn't 
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Party Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Party Command Window.
 * 
 *   Fight Icon:
 *   - The icon used for the Fight command.
 * 
 *   Add Auto Battle?:
 *   - Add the "Auto Battle" command to the Command Window?
 * 
 *     Auto Battle Icon:
 *     - The icon used for the Auto Battle command.
 * 
 *     Auto Battle Text:
 *     - The text used for the Auto Battle command.
 * 
 *   Add Status?:
 *   - Add the "Status" command to the Command Window?
 * 
 *   Add Options?:
 *   - Add the "Options" command to the Command Window?
 * 
 *     Options Icon:
 *     - The icon used for the Options command.
 * 
 *     Active TPB Message:
 *     - Message that will be displayed when selecting options during the
 *       middle of an action.
 * 
 *   Escape Icon:
 *   - The icon used for the Escape command.
 *
 * ---
 *
 * Access
 * 
 *   Skip Party Command:
 *   - DTB: Skip Party Command selection on turn start.
 *   - TPB: Skip Party Command selection at battle start.
 * 
 *   Disable Party Command:
 *   - Disable the Party Command Window entirely?
 *
 * ---
 *
 * Help Window
 * 
 * The Help Window will only appear for 'Border' and 'Frontview Battle UI'
 * battle layouts. It does not appear for other battle layouts.
 * 
 *   Fight:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 * 
 *   Options:
 *   - Text displayed when selecting the Options command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you to change various aspects regarding the
 * Actor Command Window and how it operates in the battle scene. This ranges
 * from how it appears to the default battle commands given to all players
 * without a custom <Battle Commands> notetag.
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Actor Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Actor Command Window.
 * 
 *   Item Icon:
 *   - The icon used for the Item command.
 * 
 *   Normal SType Icon:
 *   - Icon used for normal skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * 
 *   Magic SType Icon:
 *   - Icon used for magic skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 *
 * ---
 *
 * Battle Commands
 * 
 *   Command List:
 *   - List of battle commands that appear by default if the <Battle Commands>
 *     notetag isn't present.
 *
 *     - Attack 
 *       - Adds the basic attack command.
 * 
 *     - Skills
 *       - Displays all the skill types available to the actor.
 * 
 *     - SType: x
 *     - Stype: name
 *       - Adds in a specific skill type.
 *       - Replace 'x' with the ID of the skill type.
 *       - Replace 'name' with the name of the skill type (without text codes).
 *
 *     - All Skills
 *       - Adds all usable battle skills as individual actions.
 * 
 *     - Skill: x
 *     - Skill: name
 *       - Adds in a specific skill as a usable action.
 *       - Replace 'x' with the ID of the skill.
 *       - Replace 'name' with the name of the skill.
 * 
 *     - Guard
 *       - Adds the basic guard command.
 * 
 *     - Item
 *       - Adds the basic item command.
 * 
 *     - Status
 *       - Adds the status command.
 * 
 *     - Escape
 *       - Adds the escape command.
 * 
 *     - Auto Battle
 *       - Adds the auto battle command.
 * 
 *     - Party
 *       - Requires VisuMZ_2_PartySystem!
 *       - Switches out the current actor for another.
 * 
 *     - Combat Log
 *       - Requires VisuMZ_4_CombatLog!
 *       - Shows combat log.
 * 
 *     - Talk
 *       - Requires VisuMZ_3_BattleCmdTalk!
 *       - Shows talk command if applicable.
 * 
 *     - Weapon Swap
 *       - Requires VisuMZ_2_WeaponSwapSystem!
 *       - Swaps current weapon for next one.
 * 
 *   Show Command Costs:
 *   - If a battle command has a resource cost, show it?
 *
 * ---
 *
 * Help Window
 * 
 * The Help Window will only appear for 'Border' and 'Frontview Battle UI'
 * battle layouts. It does not appear for other battle layouts.
 * 
 *   Skill Types:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Items:
 *   - Text displayed when selecting the item command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: In-Battle Status Window
 * ============================================================================
 *
 * Added with Battle Core version 1.84, this new window allows the player to
 * view the status of the current active party. If the actors have states and
 * buffs, the player can scroll through them and read about their effects
 * through the help window.
 * 
 * If you would like to manage which parameters can appear here, this can be
 * done through the VisuMZ_0_CoreEngine's "Parameter Settings" and adjust which
 * parameters are shown through "Extended Parameters". These settings will
 * reflect in the In-Battle Status window, too. Otherwise, the parameters that
 * will be shown will only be MaxHP, MaxMP, ATK, DEF, MAT, MDF, AGI, and LUK.
 * 
 * The In-Battle Status can also be used to view enemies (if the parameter is
 * enabled). To view enemies, players must scroll through all the actors before
 * viewing enemies. Enemies will have their battler graphic displayed. If the
 * enemy has a SV Battler graphic, that will be displayed instead. However, if
 * the enemy has a Dragonbones, then the database battler graphic is displayed
 * to match any of the turn order displays as those also use the same graphic.
 * 
 * Enemies will not display the current HP on their In-Battle Status gauges.
 * Instead, they will display what percentage their HP, MP, and/or TP is at.
 * This is primarily due to how gauges do not support large numbers well and
 * showing the percentage values are better for this scene.
 *
 * ---
 * 
 * General Settings
 * 
 *   Status Icon:
 *   - The icon used for the Status command.
 * 
 *   Status Graphic:
 *   - Choose how the actor graphic appears for In-Battle Status.
 * 
 *   Help Description:
 *   - Text displayed when selecting the Status command.
 * 
 * ---
 * 
 * Enemy Settings
 * 
 *   Allow View Enemies?:
 *   - Allows players to view enemy stats (even if limited)?
 * 
 *   Show Level?:
 *   - Shows the enemy's level in the In-Battle Status?
 * 
 *   Hidden Parameter:
 *   - The text that appears if a parameter value is hidden.
 * 
 *     Show Params Always:
 *     - Always show exact enemy parameter values.
 * 
 *     Show Battle Test:
 *     - Show exact enemy parameter values in battle test.
 * 
 *     Show If Defeated:
 *     - Show exact enemy parameter values if enemy has been defeated before.
 * 
 * ---
 * 
 * Page Buttons:
 * 
 *   Show Page Buttons?:
 *   - Shows page buttons to switch between actors?
 *   - Still requires Touch UI option to be on.
 * 
 *   Large UI Position?:
 *   - If using a large resolution, position the page buttons on which side?
 * 
 *  Offset X
 *  - Offsets the page buttons x position.
 *  - Negative: left. Positive: right.
 * 
 *  Offset Y
 *  - Offsets the page buttons y position.
 *  - Negative: up. Positive: down.
 * 
 * ---
 * 
 * Parameter Display
 * 
 *   Increased Value
 *   - How are increased parameter values displayed?
 *   - %1 - Parameter Value
 * 
 *   Decreased Value
 *   - How are increased parameter values displayed?
 *   - %1 - Parameter Value
 * 
 * ---
 * 
 * States Display
 * 
 *   Max Width
 *   - Maximum width of the states list display.
 * 
 *   List States?
 *   - Lists states in the states list display?
 * 
 *   List Buffs?
 *   - Lists buffs in the states list display?
 * 
 *   List Debuffs?
 *   - Lists debuffs in the states list display?
 * 
 *   Buffs/Debuffs Display:
 * 
 *     Buff Name Format
 *     - Text format used to represent buffs.
 *     - %1 - Parameter Name
 * 
 *     Debuff Name Format
 *     - Text format used to represent debuffs.
 *     - %1 - Parameter Name
 * 
 *   Normal State:
 * 
 *     Normal Icon
 *     - Icon used to represent normal state (unaffected by states, buffs, or
 *       debuffs).
 * 
 *     Normal Text
 *     - Text used to represent normal state (unaffected by states, buffs, or
 *       debuffs).
 * 
 * ---
 * 
 * Help Descriptions
 * 
 *   State Help Format:
 *   - Text format used for state help descriptions
 *   - %1 - Description; %2 - Turns/Actions Remaining
 * 
 *   Buff Help Format:
 *   - Text format used for Buff help descriptions
 *   - %1 - Param; %2 - Percent; %3 - Color; %4 - Turns
 * 
 *   Debuff Help Format:
 *   - Text format used for Debuff help descriptions
 *   - %1 - Param; %2 - Percent; %3 - Color; %4 - Turns
 * 
 *   Normal State:
 *   - Help description used to explain normal state (unaffected by states,
 *     buffs, or debuffs).
 * 
 *   Turns/Actions Left:
 * 
 *     Actions Format:
 *     - Text format used to represent actions remaining.
 *     - %1 - Actions; %2 - Color
 * 
 *     Turns Format:
 *     - Text format used to represent turns remaining.
 *     - %1 - Turns; %2 - Color
 * 
 *     Passive Text:
 *     - Text used to represent a passive.
 * 
 * ---
 * 
 * Window Settings
 * 
 *   Background Type:
 *   - Select background type for this window.
 * 
 *   JS: Draw Data:
 *   - Code used to draw battler data.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 * 
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Multi-Target Windows Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters adjust how the Multi-Target Windows appear
 * in battle. These windows are visible when selecting an enemy or actor while
 * using a skill/item that has the <Single or Multiple Select> notetag.
 * 
 * Those wondering why this isn't regulated to a command left or right of the
 * enemies and actors is because mouse controls and touch controls would not be
 * able to select all enemies or all allies that way.
 *
 * ---
 * 
 * Properties
 * 
 *   Window Width:
 *   - What is the width used for the Multi-Target Window?
 * 
 *   Background Type:
 *   - Select background type for these windows.
 * 
 *   Show Button:
 *   - Shows the keyboard/controller button to press?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 * ---
 * 
 * Vocab
 * 
 *   All Actors:
 *   - What is the text used for the "All Actors" button?
 * 
 *   All Enemies:
 *   - What is the text used for the "All Enemies" button?
 * 
 * ---
 * 
 * Offsets > Actor Offsets
 * Offsets > Enemy Offsets
 * 
 *   Offset X:
 *   - Offsets the button's x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the button's y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Combo Window Settings
 * ============================================================================
 * 
 * If enabled, this window will display updated information about the total
 * amount of hits performed and total damage/healing value executed for HP.
 * 
 * This only applies when HP damage is directly dealt through action effects.
 * It does NOT apply for MP damage, TP damage, states, regeneration, or event
 * commands.
 * 
 * If you would like to adjust the Damage Combo Window mid-action, you can use
 * the following script calls to do so:
 * 
 *     $comboWindowReset()
 *     - Resets the all values found in the damage combo window.
 * 
 *     $comboWindowIncreaseHits(x)
 *     - Increases the current hit counter in the combo window by 'x'.
 *     - Insert a number for 'x'.
 *     - Example: $comboWindowIncreaseHits(2)
 * 
 *     $comboWindowIncreaseDamage(x)
 *     - Increases the current total damage counter in the combo window by 'x'.
 *     - Insert a number for 'x'.
 *     - This will offset any healing added in the damage counter window.
 *     - Example: $comboWindowIncreaseDamage(100)
 * 
 *     $comboWindowIncreaseHealing(x)
 *     - Increases the current total heal counter in the combo window by 'x'.
 *     - Insert a number for 'x'.
 *     - This will offset any damage added in the damage counter window.
 *     - Example: $comboWindowIncreaseHealing(200)
 * 
 * ---
 * 
 * General Settings:
 * 
 *   Enable?:
 *   - Add the Combo Window to show in battle?
 * 
 * ---
 * 
 * Appearance Settings:
 * 
 *   Custom Font:
 *   - Insert the custom font face name here.
 *   - Use VisuMZ_1_MessageCore to register new fonts.
 * 
 *   Text Align:
 *   - Text alignment for this window?
 * 
 *   JS: Draw Data:
 *   - Code used to draw the data in this window.
 * 
 * ---
 * 
 * Vocabulary:
 * 
 *   Damage Combo Format:
 *   - Text format used to display total hits for damage.
 *   - %1 - Total Hits
 * 
 *   Healing Combo Format:
 *   - Text format used to display total hits for healing.
 *   - %1 - Total Hits
 * 
 *   Damage Total Format:
 *   - Text format used to display total value for damage.
 *   - %1 - Total Damage
 * 
 *   Healing Total Format:
 *   - Text format used to display total value for healing.
 *   - %1 - Total Healing
 * 
 * ---
 * 
 * Position Settings:
 * 
 *   Fade Shift X:
 *   - Shifts the windows x position when fading.
 *   - Negative: left. Positive: right.
 * 
 *   Fade Shift Y:
 *   - Shifts the windows y position when fading.
 *   - Negative: up. Positive: down.
 * 
 *   Offset X:
 *   - Offsets the windows x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the windows y position.
 *   - Negative: up. Positive: down.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 * 
 * ---
 * 
 * Updating Settings:
 * 
 *   Number Roll Duration:
 *   - Frame duration to roll damage numbers.
 *   - 60 frames = 1 second.
 * 
 *   Minimum Stay Duration:
 *   - Frame duration to stay visible minimum. 
 *   - 60 frames = 1 second.
 * 
 *   Minimum Hit Visible:
 *   - Minimum hits before combo window becomes visible?
 * 
 *   Opacity Speed:
 *   - Opacity speed when fading in/out.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how the sideview battlers behave for
 * the actor sprites. Some of these settings are shared with enemies if they
 * use sideview battler graphics.
 *
 * ---
 *
 * Flinch
 * 
 *   Flinch Distance X:
 *   - The normal X distance when flinching.
 * 
 *   Flinch Distance Y:
 *   - The normal Y distance when flinching.
 * 
 *   Flinch Duration:
 *   - The number of frames for a flinch to complete.
 * 
 *   Shake Flinch:
 *   - Perform a shake flinch when taking damage?
 * 
 *     Max Duration:
 *     - Maximum duration a shake flinch can have.
 *     - This is reduced relative to the amount of damage taken.
 * 
 *     Max Power:
 *     - The power rating of a shake flinch at full damage.
 *     - This is reduced relative to the amount of damage taken.
 *
 * ---
 * 
 * Frontview Battlers
 * 
 *   Portrait Animations:
 * 
 *     Each Target:
 *     - Place animations on top for "Each Target" display types?
 *     - Does not apply to MV animations.
 * 
 *     Center of All:
 *     - Place animations on top for "Center of All" display types?
 *     - Does not apply to MV animations.
 * 
 *     Center of Screen:
 *     - Place animations on top for "Center of Screen" display types?
 *     - Does not apply to MV animations.
 * 
 * ---
 *
 * Sideview Battlers
 * 
 *   Anchor:
 * 
 *     Anchor: X:
 *     - Default X anchor for Sideview Battlers.
 * 
 *     Anchor: Y:
 *     - Default Y anchor for Sideview Battlers.
 * 
 *   Chant Style:
 *   - What determines the chant motion?
 *   - Hit type or skill type?
 * 
 *   Motion Speed:
 *   - The number of frames in between each motion.
 * 
 *   Position:
 * 
 *     Offset X:
 *     - Offsets X position where actor is positioned.
 *     - Negative values go left. Positive values go right.
 * 
 *     Offset Y:
 *     - Offsets Y position where actor is positioned.
 *     - Negative values go up. Positive values go down.
 * 
 *   Priority: Active:
 *   - Place the active actor on top of actor and enemy sprites.
 * 
 *   Priority: Actors:
 *   - Prioritize actors over enemies when placing sprites on top of each other
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 * 
 *   State Overlay:
 * 
 *     Offset X:
 *     - Offsets X position for state overlay on actor.
 *     - Negative values go left. Positive values go right.
 * 
 *     Offset Y:
 *     - Offsets Y position for state overlay on actor.
 *     - Negative values go up. Positive values go down.
 * 
 *   JS: Home Position:
 *   - Code used to calculate the home position of actors.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Enemy Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how enemies appear visually in the
 * battle scene. Some of these settings will override the settings used for
 * actors if used as sideview battlers. Other settings include changing up the
 * default attack animation for enemies, how the enemy select window functions,
 * and more.
 *
 * ---
 *
 * Visual
 * 
 *   Attack Animation:
 *   - Default attack animation used for enemies.
 *   - Use <Attack Animation: x> for custom animations.
 * 
 *   Emerge Text:
 *   - Show or hide the 'Enemy emerges!' text at the start of battle.
 * 
 *   Offset X:
 *   - Offsets X position where enemy is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where enemy is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 *
 * ---
 *
 * Select Window
 * 
 *   Any: Last Selected:
 *   - Prioritize last selected enemy over front view or sideview settings?
 * 
 *   FV: Right Priority:
 *   - If using frontview, auto select the enemy furthest right.
 * 
 *   SV: Right Priority:
 *   - If using sideview, auto select the enemy furthest right.
 * 
 * ---
 * 
 * Name:
 * 
 *   Legacy Option:
 *   - Use the legacy version (window) or new version (sprite).
 *   - WARNING: Legacy version is no longer supported for bugs.
 *   - Not all settings available here in the Plugin Parameters will be
 *     available to the legacy version (ie Always Visible and Attach States).
 * 
 *   Font Size:
 *   - Font size used for enemy names.
 * 
 *   Name Position:
 * 
 *     Offset X:
 *     Offset Y:
 *     - Offset the enemy name's position by this much.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name: Attach States:
 *   - Attach the enemy's state icon to the enemy name?
 * 
 *     Attach: Offset X:
 *     Attach: Offset Y:
 *     - How much to offset the attached icon's X/Y position by?
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name Visibility:
 * 
 *     Always Hidden:
 *     - Determines if the enemy name will always be visible.
 *     - Highest priority.
 * 
 *     Always Visible:
 *     - Determines if the enemy name will always be visible.
 *     - Medium priority.
 * 
 *     As Target:
 *     - Shows enemy name when enemy is a target.
 *     - Medium priority.
 * 
 *     By Selection?:
 *     - Determines the conditions for enemy name visibility.
 *     - Lowest priority.
 * 
 *     Temporary Visibility:
 *     - Number of frames enemy's name temporarily visible after taking an
 *       action effect in battle.
 *     - 60 frames = 1 second.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Allow Collapse:
 *   - Causes defeated enemies with SV Battler graphics to "fade away"
 *     when defeated?
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Motion: Idle:
 *   - Sets default idle animation used by Sideview Battlers.
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Size: Width:
 *   - Default width for enemies that use Sideview Battlers.
 * 
 *   Size: Height:
 *   - Default height for enemies that use Sideview Battlers.
 * 
 *   Weapon Type:
 *   - Sets default weapon type used by Sideview Battlers.
 *   - Use 0 for Bare Hands.
 *
 * ---
 * 
 * Aspect Defaults
 * 
 *   Name Format:
 *   - Default name aspect format.
 *   - %1 - Original Enemy Name
 * 
 *   Name Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Icon:
 *   - Default icon used for aspect.
 *   - Use <Aspect Icon: x> to change icon.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: HP Gauge Settings
 * ============================================================================
 *
 * Settings that adjust the visual HP Gauge displayed in battle.
 *
 * ---
 *
 * Show Gauges For
 * 
 *   Actors:
 *   - Show HP Gauges over the actor sprites' heads?
 *   - Requires SV Actors to be visible.
 * 
 *   Enemies:
 *   - Show HP Gauges over the enemy sprites' heads?
 *   - Can be bypassed with <Hide HP Gauge> notetag.
 * 
 *     Requires Defeat?:
 *     - Requires defeating the enemy once to show HP Gauge?
 *     - Can be bypassed with <Show HP Gauge> notetag.
 * 
 *       Battle Test Bypass?:
 *       - Bypass the defeat requirement in battle test?
 *
 * ---
 *
 * Settings
 * 
 *   Animation Duration:
 *   - How many frames should gauges animate themselves?
 *   - Default: 20 frames.
 * 
 *   Anchor X:
 *   Anchor Y:
 *   - Where do you want the HP Gauge sprite's anchor X/Y to be?
 *     Use values between 0 and 1 to be safe.
 * 
 *   Scale:
 *   - How large/small do you want the HP Gauge to be scaled?
 * 
 *   Offset X:
 *   Offset Y:
 *   - How many pixels to offset the HP Gauge's X/Y by?
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the 'Show HP Gauge' option to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Option Name:
 *   - Command name of the option.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Action Sequence Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters allow you to decide if you want automatic
 * Action Sequences to be used for physical attacks, the default casting
 * animations used, how counters and reflects appear visually, and what the
 * default stepping distances are.
 *
 * ---
 *
 * Automatic Sequences
 * 
 *   Melee Single Target:
 *   - Allow this auto sequence for physical, single target actions?
 * 
 *   Melee Multi Target:
 *   - Allow this auto sequence for physical, multi-target actions?
 *
 * ---
 * 
 * Quality of Life
 * 
 *   Auto Notetag:
 *   - Automatically apply the <Custom Action Sequence> notetag effect to any
 *     item or skill that has a Common Event?
 *   - Any item or skill without a Common Event attached to it will use the
 *     Automatic Action Sequences instead.
 *   - The <Auto Action Sequence> notetag will disable this effect for that
 *     particular skill or item.
 * 
 * ---
 *
 * Cast Animations
 * 
 *   Certain Hit:
 *   - Cast animation for Certain Hit skills.
 * 
 *   Physical:
 *   - Cast animation for Physical skills.
 * 
 *   Magical:
 *   - Cast animation for Magical skills.
 *
 * ---
 *
 * Counter/Reflect
 * 
 *   Counter Back:
 *   - Play back the attack animation used?
 * 
 *   Reflect Animation:
 *   - Animation played when an action is reflected.
 * 
 *   Reflect Back:
 *   - Play back the attack animation used?
 *
 * ---
 *
 * Stepping
 * 
 *   Melee Distance:
 *   - Minimum distance in pixels for Movement Action Sequences.
 * 
 *   Step Distance X:
 *   - The normal X distance when stepping forward.
 * 
 *   Step Distance Y:
 *   - The normal Y distance when stepping forward.
 * 
 *   Step Duration:
 *   - The number of frames for a stepping action to complete.
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * * Yanfly
 * * Arisu
 * * Olivia
 * * Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.86: January 16, 2025
 * * Bug Fixes!
 * ** Fixed a bug where during Active TPB, actors were not showing damage
 *    motions. Fix made by Olivia.
 * ** Fixed a bug regarding the in-battle status requiring that the Main Menu
 *    Core to be installed when other plugins are also present. Fix by Olivia.
 * ** Fixed a bug where <Exclude From Status Listing> notetag was not working
 *    properly due to a documentation typo of <Exclude From Status List>. Both
 *    notetags should now work. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added clarity for Plugin Parameters > Party Command Window Settings >
 *    Help Window
 * ** Added clarity for Plugin Parameters > Actor Command Window Settings >
 *    Help Window
 * *** The Help Window will only appear for 'Border' and 'Frontview Battle UI'
 *     battle layouts.
 * * New Features!
 * ** New notetag added by Irina:
 * *** <Under>
 * **** If this tag is found in an animation's name, the animation will appear
 *      under battlers while in battle.
 * ***** This effect only applies to battlers in the battle scene.
 * ***** Under effect is NOT applied to status window portraits.
 * ***** Under effect is NOT applied to projectile animations.
 * ** Added new Action Sequence Projectile settings:
 * *** Extra Settings > End Animation ID:
 * **** Plays an animation when projectile reaches target.
 * **** Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * 
 * Version 1.85: October 17, 2024
 * * Bug Fixes!
 * ** Fixed a bug where the enemy name's visibility would remain after an
 *    action has taken place and before inputting is done. Fix made by Olivia.
 * ** Fixed a bug where the "Name Visibility As Target" plugin parameter did
 *    not work properly. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Updated <Help Description> notetag documentation:
 * *** This is used as a common notetag between Battle Core's state
 *     descriptions and State Tooltips' state descriptions.
 * * New Features!
 * ** New Notetag added by Olivia:
 * *** <In-Battle Status Description>
 * **** A prioritized help description used to separate from the common help
 *      description notetag shared with State Tooltips.
 * ** New Plugin Parameters added by Olivia:
 * *** Actor Battlers > Frontview > Portrait Animations > Each Target
 * *** Actor Battlers > Frontview > Portrait Animations > Center of All
 * *** Actor Battlers > Frontview > Portrait Animations > Center of Screen
 * **** Place animations on top or behind for these display types?
 * *** Battle Log > Action Changes > Show Counter? > Wait Frames
 * *** Battle Log > Action Changes > Show Reflect? > Wait Frames
 * *** Battle Log > Action Changes > Show Substitute? > Wait Frames
 * **** If devs allow the results of counters, reflects, and substitutes, there
 *      wasn't enough time before to allow the text to be visible on screen.
 *      You can now adjust how many frames are now visible if text is shown.
 * **** Default values are left at 0 as to not interrupt currently existing
 *      action sequences.
 * 
 * Version 1.84: September 19, 2024
 * * Bug Fixes!
 * ** Fixed a bug where Action Sequence "MOVE: Change Home By Distance" would
 *    also be affected by the actor and enemy position offsets. Fixed by Irina.
 * ** Fixed a bug where Action Sequence "MECH: STB Exploit Effect" caused a
 *    crash. Fix made by Arisu.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Command added by Arisu:
 * *** ANIM: Change Battle Portrait (JS)
 * **** Changes the battle portrait of the actor through JavaScript.
 * **** Can be used outside of battle/action sequences.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > In-Battle Status Window
 * **** This new window allows the player to view the status of the current
 *      active party. If the actors have states and buffs, the player can
 *      scroll through them and read about their effects through the help
 *      window.
 * ** New Notetags added by Olivia:
 * *** <Help Description>
 * **** Assigns a help description for the state that's displayed under the
 *      new "Status" actor command.
 * *** <Exclude From Status Listing>
 * **** Excludes the state from being displayed in the status listing.
 * *** <Aspect Name: x>
 * *** <Aspect Icon: x>
 * *** <Aspect Color: x>
 * *** <Aspect Description>
 * **** Used to define enemy aspect that will show up in the In-Battle Status
 *      as well as other supported plugins.
 * *** <Popup Position: Head>
 * *** <Popup Position: Center>
 * *** <Popup Position: Base>
 * **** Changes the popup starting position for this enemy.
 * *** <Popup Offset X: +x>
 * *** <Popup Offset X: -x>
 * *** <Popup Offset Y: +y>
 * *** <Popup Offset Y: -y>
 * **** Changes the popup X/Y position offset for this enemy.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Party Command Window > Add Status?
 * **** Add the "Status" command to the Command Window? 
 * *** Plugin Parameters > Actor Command Window > Command List
 * **** Updated to have the "Status" command.
 * *** Plugin Parameters > In-Battle Status Window
 * **** Completely new! View the help file for more information.
 * *** Plugin Parameters > Enemy > Aspects
 * **** Used for the In-Battle Status as well as other supported plugins.
 * 
 * Version 1.83: May 16, 2024
 * * Bug Fixes!
 * ** Fixed a bug where sometimes, a battler in Active TPB would not refresh
 *    their motion after a state has been removed. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Fixed a typo with MP Life Steal notetag entry.
 * * Feature Updates!
 * ** Added fail safes for some plugin parameters in case users outright delete
 *    plugin parameter values without introducing something to replace them.
 *    Update made by Olivia.
 * * New Features!
 * ** New Action Sequence added by Olivia:
 * *** GRID: Add Trigger to Node JS
 * **** Adds JS Trigger to target node. Target node cannot have battler.
 * **** Requires VisuMZ_2_BattleGridSystem!
 * ** New notetags added by Olivia:
 * *** <JS Accuracy>
 * *** <JS Accuracy as User>
 * *** <JS Accuracy as Target>
 * **** Allows usage of JavaScript code to modify accuracy rates of actions in
 *      battle through skills, items, and trait objects.
 * *** <JS Critical Rate as User>
 * *** <JS Critical Rate as Target>
 * **** Allows usage of JavaScript code to modify critical rate of actions in
 *      battle through skills, items, and trait objects.
 * **** <JS Critical Rate> version already exists.
 * ** New Plugin Parameters added by Olivia
 * *** Plugin Parameters > Damage Combo Window
 * **** If enabled, this window will display updated information about the
 *      total amount of hits performed and total damage/healing value executed
 *      for HP.
 * *** Plugin Parameters > Actor Battler Settings > Sideview Battlers >
 *     State Overlay > Offset X/Y
 * **** Offsets X/Y position for state overlay on actor.
 * *** Plugin Parameters > Enemy Battler Settings > Name Visibility >
 *     As Target
 * **** Shows enemy name when enemy is a target.
 * *** Plugin Parameters > Enemy Battler Settings > Name Visibility >
 *     Temporary Visibility
 * **** Number of frames enemy's name temporarily visible after taking an
 *      action effect in battle.
 * 
 * Version 1.82: March 14, 2024
 * * Bug Fixes!
 * ** Home movement changes did not acknowledge actor and enemy offset X/Y
 *    positions. This should now be reflected properly. Fix made by Irina.
 * ** Fixed a bug where in active TPB/ATB, revived actors may not resume normal
 *    motions after collapsing. Fix made by Olivia.
 * 
 * Version 1.81: February 15, 2024
 * * Bug Fixes!
 * ** Fixed a bug that would cause active TPB inputting actors to not show
 *    their damage or evasion motions. Fix made by Olivia.
 * ** Fixed a bug that would cause a crash upon motion changes. Fix by Olivia.
 * ** Fixed an incorrect spelling of "Anger" for "ANIM: Balloon Animation" that
 *    prevented it from working properly.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia:
 * *** ANIM: Show Animation JS
 * **** Plays the a specific animation on unit(s). Uses JavaScript to determine
 *      animation ID.
 * ** New Action Sequences added for future plugin: VisuMZ_2_BattleGridSystem
 * *** GRID: Action Animation at Node
 * *** GRID: Add Passive State(s) to Node
 * *** GRID: Add Trigger to Node
 * *** GRID: Animation ID at Node
 * *** GRID: Animation JS at Node
 * *** GRID: Animation Type at Node
 * *** GRID: Move Target(s) In Direction
 * *** GRID: Pull To Target Node
 * *** GRID: Push From Target Node
 * *** GRID: Remove All Passive States from Node
 * *** GRID: Remove Passive State(s) from Node
 * *** GRID: Remove Trigger from Node
 * *** GRID: Teleport To Node
 * *** GRID: Traverse To Node
 * **** Requires the future plugin VisuMZ_2_BattleGridSystem!
 * **** Read the help section for more information on these.
 * 
 * Version 1.80: January 18, 2024
 * * Bug Fixes!
 * ** Fixed a crash that would occur with <Disperse Damage> when used outside
 *    of battle. Fix made by Irina.
 * ** Fixed a crash that would occur with certain enemy graphics when images
 *    used for them would disappear. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia:
 * *** ANIM: Guard Animation
 * *** ANIM: Item Animation
 * *** ANIM: Skill Animation
 * **** Plays the animation associated with the user's guard action (if any),
 *      or a specific item/skill.
 * *** MECH: Emulate Attack Effect
 * *** MECH: Emulate Guard Effect
 * *** MECH: Emulate Item Effect
 * *** MECH: Emulate Skill Effect
 * **** Emulate an "Action Effect" but using a the user's attack skill, guard
 *      skill, specific item, or specific skill instead of the current action.
 * **** Essentially lets you perform the mechanics of another action without
 *      having to use another action or needing to pay that action's costs.
 * *** MECH: Emulate Skill Cost
 * **** Pick a skill for target(s) to emulate paying the cost of.
 * **** Includes cooldowns and limited uses.
 * *** MECH: State Turns Change By
 * *** MECH: State Turns Change To
 * **** Changes target(s) state turns by an amount/to a certain value.
 * **** Requires VisuMZ_1_SkillsStatesCore!
 * *** Projectile action sequences have new Extra Features!
 * **** See v1.08 changes for VisuMZ_3_ActSeqProjectiles.
 * 
 * Version 1.79: December 14, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Arisu:
 * *** ANIM: Balloon Animation
 * **** Plays a balloon animation on target(s).
 * *** ANIM: Balloon Icon (Single)
 * *** ANIM: Balloon Icon (Range)
 * *** ANIM: Balloon Icon (Specific)
 * **** Plays a balloon animation using an icon on target(s).
 * **** Requires VisuMZ_4_IconBalloons!
 * 
 * Version 1.78: October 12, 2023
 * * Bug Fixes!
 * ** Fixed a bug that is caused by using the actor escape command not escaping
 *    properly in battle and causing a freeze. Fix made by Olivia.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Parameters > Mechanics > Turn End Buffs Expire?
 * **** Normally, buffs expire after all actions end.
 * **** But here, you can have buffs expire on turn end.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.77: August 17, 2023
 * * Bug Fixes!
 * ** Fixed a bug where for TPB, actions aimed at dead targets would not
 *    redirect to suitable targets. Fix made by Olivia.
 * ** Fixed a bug where dual wielding would not use a weapon if it was equipped
 *    in the second weapon slot if the first weapon slot was empty. Fix made
 *    by Olivia.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Added compatibility for VisuStella MZ Battle Voices Action Sequences.
 * * Documentation Update!
 * ** Help file updated for new features.
 * 
 * Version 1.76: July 13, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia and sponsored by NSG:
 * *** MOVE: Change Home To JS Coordinates
 * **** Change home position(s) to specified JS Coordinates. Sideview-only!
 *      Uses JS!
 * *** MOVE: Face JS Coordinates
 * **** Causes the unit(s) to face specified JS Coordinates. Sideview-only!
 *      Uses JS!
 * *** MOVE: Move To JS Coordinates
 * **** Moves unit(s) to specified JS Coordinates. Sideview-only! Uses JS!
 * 
 * Version 1.75: March 16, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia and sponsored by Anon:
 * *** <HP Life Steal: x%>
 * *** <MP Life Steal: x%>
 * *** <HP Life Steal hitType: +/-x%>
 * *** <MP Life Steal hitType: +/-x%>
 * *** <Cancel Life Steal>
 * *** <Guard Life Steal>
 * *** <Disarm Life Steal>
 * *** <Negative Life Steal>
 * **** Life Steal properties involving HP/MP are now added. They will restore
 *      a portion of the dealt HP/MP damage to the target.
 * **** This is a different mechanic from Drain HP/Drain MP and cannot be used
 *      together to prevent clashing.
 * **** Read the help file for more information.
 * 
 * Version 1.74: February 16, 2023
 * * Bug Fixes!
 * ** Fixed a bug that would cause a crash if your basic attack skill somehow
 *    manages to target neither an enemy nor an actor. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Auto-action sequence for jumping forward and attacking is now reinstated
 *    so that it's only disabled when the target and user are on the same side.
 *    If there is no target, a jump still occurs for visual player feedback.
 *    Update made by Olivia.
 * * New Features!
 * ** New notetag effect added by Olivia and sponsored by AndyL:
 * *** <Cannot Target User>
 * **** This will cause the action to be unable to select the user as target.
 * **** This is not a targeting scope. Instead, it is used in addition to any
 *      other targeting scopes out there.
 * 
 * Version 1.73: January 20, 2023
 * * Bug Fixes!
 * ** Active TPB custom action sequences will no longer play differently due to
 *    queued inputting actors causing motion refreshes. Fix made by Arisu.
 * ** Corrected and updated Anti-Tint UI animation offsets for MV animations.
 *    Fix made by Irina.
 * ** Fixed a problem with Sideview Battlers not working properly. Fix made
 *    by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for to add the following text to the <Target: x>
 *    notetag entries in order to avoid confusion.
 * *** This will overwrite the existing database scope and ignore the
 *     database's existing scope in favor of this.
 * * Feature Update!
 * ** <Extend: x> Troop Name Tag is now also usable as a Troop Comment Tag.
 * ** Action Sequence targeting has been updated with two new types "special"
 *    and "special x", to be used for future plugins.
 * * New Features!
 * ** New Notetags added by Irina and sponsored by AndyL:
 * *** <Target: Ally or Enemy>
 * *** <Target: Enemy or Ally>
 * **** Allows the player to target allies or enemies with the skill/item.
 * **** See help file for more information.
 * *** <Single or Multiple Select>
 * **** This will allow the skill/item to be able to select either single
 *      targets or multiple targets at once.
 * **** See help file for more information.
 * *** <Disperse Damage>
 * **** This will cause any damage dealt by this skill to be split equally
 *      amongst all targets of the skill including repeats.
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Multi-Target Windows
 * **** Settings that alter the Multi-Target Windows in battle.
 * 
 * Version 1.72: December 15, 2022
 * * Bug Fixes!
 * ** Fixed a transformation of a sideview enemy to a static enemy and back not
 *    working properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Feature!
 * ** New Plugin Parameter added by Irina!
 * *** Plugin Parameters > HP Gauges > Settings > Animation Duration
 * **** How many frames should gauges animate themselves? Default: 20 frames.
 * ** New Plugin Parameters added by Yanfly!
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Power
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Duration
 * **** These new plugin parameters will cause targets that take HP damage to
 *      shake (in addition to a regular flinch) to provide better visual
 *      feedback to the player.
 * **** Shake Flinch will be kept disabled by default and only turned on when
 *      you want it to be.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.71: November 10, 2022
 * ** Fixed a problem with repeating animations from Visual State Effects
 *    causing softlocks. Fix made by Olivia.
 * 
 * Version 1.70: October 6, 2022
 * * Bug Fixes!
 * ** Fixed a problem with the "Border" style where if a battle portrait
 *    changed midway through the battle, the portrait shown didn't actually
 *    update properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Olivia:
 * *** MECH: Active Chain Input Disable
 * **** Disables input for Active Chain Skills at this time.
 * **** Requires VisuMZ_3_ActiveChainSkills!
 * ** New Plugin Parameter added by Olivia and sponsored by Anon:
 * *** Plugin Parameters > Damage Settings > Popups > End Battle Show?
 * **** Show or hide popups upon victory or escape?
 * **** Used to hide battle-state removal popups.
 * 
 * Version 1.69: September 7, 2022
 * * Compatibility Update!
 * ** Better compatibility with VisuMZ Active Chain Skills.
 * ** Compatibility will be seen with VisuMZ_3_ActiveChainSkills version 1.02.
 * * Documentation Update!
 * ** Added notes to the following Action Sequences:
 * *** MOTION: Clear Freeze Frame and MOTION: Freeze Motion Frame
 * **** Only applies to sprite sheets.
 * **** Does NOT work with Dragonbones.
 * **** Use "DB: Dragonbones Time Scale" instead.
 * * Feature Update!
 * ** Reduced MV Animation misalignment when Screen Resolution does not match
 *    the UI Area Resolution. Update by Arisu.
 * ** Command Remember will now remember the locations of single skills. Update
 *    made by Olivia.
 * 
 * Version 1.68: August 4, 2022
 * * Feature Update!
 * ** Damage popups are now automatically cleared upon starting battles. This
 *    is to ensure that, if for some reason, residual damage popup requests
 *    will not be retained. Update made by Olivia.
 * 
 * Version 1.67: July 28, 2022
 * * Feature Updates!
 * ** Rounding window coordinates have been added for for 'XP' and 'Portrait'
 *    styles when window sizes happen to land on non-divisible numbers. Update
 *    made by Irina.
 * ** Enemy name position rounding is now enforced. Update made by Irina.
 * 
 * Version 1.66: July 14, 2022
 * * Bug Fixes!
 * ** Fixed a bug that caused the various Battleback Scaling JS custom plugin
 *    parameters to not work properly. Fix made by Irina.
 * 
 * Version 1.65: July 7, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Automatic action motions for HP and MP Recovery (Certain Hit type) will
 *    now use the "skill" cast SV animation instead of attack animation to
 *    better match the default RPG Maker MZ cast animation. Update by Olivia.
 * * New Features!
 * ** New troop name tag added by Olivia:
 * *** <Extend: x> and <Extend: x, x, x>
 * **** Adds enemies from another troop to the current troop.
 * **** Enemies from another troop will retain their database positions.
 * **** Extended troop members will be added in the order they're listed.
 * **** Be cautious of how many enemies you add as too many will lag the battle
 *      system. We are not responsible for frame drops due to this.
 * 
 * Version 1.64: June 16, 2022
 * * Bug Fixes!
 * ** "All Skills" battle command should now work with the updated version of
 *    VisuMZ Skills & States Core. Fix madde by Olivia.
 * * Compatibility Update
 * ** Plugins should be more compatible with one another.
 * 
 * Version 1.63: May 26, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** HP Gauge sprite now properly synchs with battler location.
 * * New Features!
 * ** New Action Sequence Effects added by Irina and sponsored by MirageV:
 * *** INJECT action sequence series
 * **** See the Action Sequence Impact changelog for details.
 * 
 * Version 1.62: April 22, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Battle Forced End Action Crash
 * **** Depending on various circumstances, currently active battlers can be
 *      cleared from the battle system at will due to a number of reasons.
 *      However, if it just so happens that the targets are cleared, too, with
 *      actions remaining, then a crash will follow up. This plugin will
 *      prevent that change. Fix made by Olivia.
 * 
 * Version 1.61: April 14, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Impact Effects added by Irina and collaborating with Manu Gaming!
 * *** Impact: Bizarro Inversion
 * *** Impact: Desaturation
 * *** Impact: Negative Inversion
 * *** Impact: Oversaturation
 * *** Impact: Time Scale
 * *** Impact: Time Stop
 * 
 * Version 1.60: April 7, 2022
 * * Bug Fixes!
 * ** <Bypass Soft Damage Cap> notetag should no longer cause crashes. Fix made
 *    by Olivia.
 * * Feature Update!
 * ** Removed one of the forced log window clear events that have made log
 *    window messages impossible to utilize for certain settings. Update made
 *    by Olivia.
 * 
 * Version 1.59: March 31, 2022
 * * Bug Fixes!
 * ** Escape failure will no longer trigger Post-Battle Common Events. Fix
 *    made by Arisu.
 * 
 * Version 1.58: March 24, 2022
 * * Documentation Update:
 * ** Added extra clarity to <Sideview Size: width, height> notetag:
 * *** This does NOT change the image size. This only changes the HITBOX size.
 * * Feature Update!
 * ** Added failsafes to prevent battlers from moving to non-finite coordinates
 *    if calculations are made for non-existent targets. Updated by Olivia.
 * ** Regeneration timing for TPB-based battle systems will now occur based on
 *    individual turn counts instead of global turn counts for initial turn 0
 *    checks. Updated by Olivia.
 * 
 * Version 1.57: February 17, 2022
 * * Feature Update!
 * ** Adjusted the offset properties for the anti-tint UI container to properly
 *    match the UI offsets if the anti-tint were to be off. Update by Irina.
 * 
 * Version 1.56: February 10, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Once Parallels for battle now operate outside of the battle process.
 *    Update made by Olivia.
 * * New Features!
 * ** New Troop Page comment tag added by Olivia and sponsored by Puddor:
 * *** <Once Parallel When Start Battle>
 * **** Causes the troop page to immediately run the moment the battle scene
 *      begins to fade in (not after it fades in). This is faster than a turn 0
 *      condition troop page. Troop page conditions are ignored.
 * **** This can be used for things like the Action Sequence Camera plugin, the
 *      Visual Battle Environment plugin, and/or initial battle poses and such
 *      in order to provide a near seamless battle transition experience.
 * **** This does NOT trigger when coming out of the options menu or party
 *      menu screens.
 * **** This WILL trigger when going from battle to battle nonstop via plugins
 *      like VisuStella MZ's Chain Battles.
 * **** When actors are moving towards their home positions, it will take
 *      around 30 frames by default. Use this information however you like.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.55: January 27 2022
 * * Compatibility Update!
 * ** RPG Maker MV animations with front view should now play in the correct
 *    area against actor faces. Update made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Animations now play on top of all actor faces/portraits regardless of the
 *    battle layout style. Update made by Olivia.
 * * New Features!
 * ** New notetag added by Arisu.
 * *** <Bypass Auto Action Sequence>
 * **** This notetag is used for the game devs that have the Action Sequence
 *      Plugin Parameter "Auto Notetag" on for applying the notetag
 *      <Custom Action Sequence> to every skill and item with common events.
 * **** This will allow items and skills to be able to launch their common
 *      events from the menu scene regardless of the inherent restriction to
 *      prevent action sequence based skills/items with common events from
 *      launching.
 * **** Ignore this if you have "Auto Notetag" disabled or set to false. By
 *      default, this setting is set to false. Please be aware of the changes
 *      you've made to your game before using it.
 * 
 * Version 1.54: January 13, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Overly-Protective Substitute
 * *** When an ally with critical health is being targeted by a friendly non-
 *     Certain Hit skill (such as a heal or buff) and another ally has the
 *     substitute state, the other ally would "protect" the originally targeted
 *     ally and take the heal or buff.
 * *** The new changed behavior is that now, substitute will not trigger for
 *     any actions whose scope targets allies.
 * *** Fix made by Olivia.
 * 
 * Version 1.53: December 30, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for updated features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Battle Layout > UI Elements > Anti-Tint UI?
 * **** Prevent UI Elements from being tinted?
 * **** This prevents UI Elements such as HP Gauges, Enemy Names, Battle
 *      Cursor, and Weakness Display from being affected by screen tint.
 * * Updated Feature!
 * ** Updated Plugin Command "PROJECTILE: Animation" by Arisu!
 * *** New Parameter: Wait For Animation?
 * **** Wait for animation to finish before going to the next command?
 * 
 * Version 1.52: December 16, 2021
 * * Compatibility Update!
 * ** RPG Maker MZ 1.4.0 compatibility update!
 * *** MV Animations played on screen level will now show up properly in the
 *     center of the screen.
 * 
 * Version 1.51: December 9, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence Plugin Commands added by Arisu:
 * *** MOVE: Change Home By Distance
 * *** MOVE: Change Home To Point
 * *** MOVE: Change Home To Target(s)
 * **** These Plugin Commands allow you to adjust the home position of
 *      battlers in sideview battle.
 * **** This is sideview only!
 * **** This does NOT work with front view!
 * **** For those wondering, going to the options screen, party screen, etc.
 *      won't reset the home positions like regular movement changes do.
 * **** Merry Christmas, Harold-gang!
 * 
 * Version 1.50: November 4, 2021
 * * Bug Fixes!
 * ** <Seal Attack> and <Seal Guard> should no longer be bypassed by
 *    auto-battle status. Fix made by Yanfly.
 * 
 * Version 1.49: October 28, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Action Sequence: MOTION: Freeze Motion Frame will now only show weapons
 *    when using a motion that is named either "attack", "thrust", "swing", or
 *    "missile". Update made by Irina.
 * ** Fail safe added to prevent Scene_Battle going into unsupported scenes
 *    like Scene_Equip and Scene_Skill. Update made by Olivia.
 * * New Feature!
 * ** New Action Sequence Plugin Command added by Arisu and sponsored by Anon:
 * *** MECH: Once Parallel
 * **** Plays a Common Event parallel to the battle event once without
 *      repeating itself when done.
 * **** When exiting battle scene, all Once Parallels are cleared.
 * **** Once Parallels are not retained upon reentering the scene.
 * **** Once Parallels are not stored in memory and cannot be saved.
 * 
 * Version 1.48: October 21, 2021
 * * Feature Update!
 * ** Animations are now played on top of battlers in the Front View XP Battle
 *    Layout appearance. Update made by Irina.
 * ** Battle Log, if decided to be shown, now updates faster. Update by Irina.
 * ** Default Critical Damage Bonus increase is now updated to account for
 *    HP Healing and MP Recovery. To update this, create a new project, with
 *    the newest version of Battle Core installed. Copy over the Plugin
 *    Parameters for the Damage Settings > Critical Hits > JS: Damage Formula
 *    to your own project's version. Update made by Irina.
 * 
 * Version 1.47: October 14, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Feature Update!
 * ** Back attachment sprites are now automatically updated with sprite
 *    battlers to be shifted towards the very back.
 * 
 * Version 1.46: September 23, 2021
 * * Bug Fixes!
 * ** Fixed problem with skills and items without action sequences preventing
 *    actions from occurring. Fix made by Yanfly.
 * 
 * Version 1.45: September 17, 2021
 * * Bug Fixes!
 * ** <JS Pre-End Action> and <JS Post-End Action> effects now have multiple
 *    checks to make sure that they don't launch multiple times when a battler
 *    without actions has a turn after one that does. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence notetags added by Yanfly and Arisu:
 * *** <Common Event Key: name>
 * *** <Common Event Keys: name, name, name>
 * *** <Common Event Keys>
 *      key
 *      key
 *      key
 *     </Common Event Keys>
 * **** Will generate Common Events for the skill/item with a corresponding
 *      key.
 * **** More information will be explained inside of the help file.
 * **** This feature is made for make the process of sharing Action Sequences
 *      to become easier without needing to line up Common Event ID's.
 * 
 * Version 1.44: August 20, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Irina and sponsored by Anon.
 * *** "ANIM: Play at Coordinate"
 * **** Plays an animation on the screen at a specific x, y coordinate even if
 *      there is no sprite attached.
 * **** Requires VisuMZ_0_CoreEngine!
 * 
 * Version 1.43: July 23, 2021
 * * Feature Update!
 * ** Immortality now works different with instant death mechanics. Skill
 *    effects that apply instant death or attack states that apply instant
 *    death will now trigger a flag instead of cancelling immortality. The
 *    flag will remain until immortality is manually cancelled via Action
 *    Sequence and then proc the death effect. This way, animations can remain
 *    to the end with instant death mechanics in mind. This does not affect
 *    script calls.
 * 
 * Version 1.42: July 16, 2021
 * * Bug Fixes!
 * ** Added another fail safe for empty common events used for pre-battle
 *    common events. Fix made by Olivia.
 * 
 * Version 1.41: July 2, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added entries to <Battle Command> notetags and Plugin Parameters for
 *    "Party", "Combat Log", and "Weapon Swap" which weren't updated before.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * * New Features!
 * ** New Action Sequence added by Arisu:
 * *** MECH: Enemy Escape
 * **** Causes the enemy unit(s) to escape.
 * 
 * Version 1.40: June 25, 2021
 * * Bug Fixes!
 * ** Transformations from static enemies to and from animated SV enemies
 *    should no longer show both sprites. Fix made by Irina.
 * * Compatibility Update
 * ** Compatibility update with RPG Maker MZ 1.3.0+.
 * 
 * Version 1.39: June 18, 2021
 * * Bug Fixes!
 * ** MOVE: Home Reset should no longer trigger an end action function and
 *    cause plugins such as "Boost Action" to malfunction. Fix made by Olivia.
 * * Compatibility Update
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <Battle Layout: x> Troop Name tags can now work with comment tags. Update
 *    made by Irina.
 * ** Random encounter lists are now better shuffled for more variety with how
 *    the RNG seed works. Update made by Arisu.
 * 
 * Version 1.38: June 11, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Location calculations will now be based off the a battler's base position
 *    in order for animations, popups, and other aspects to line up properly
 *    when scaled. Update made by Irina.
 * ** Plugin Parameters for Enemy Battler Settings > Name have been rearranged
 *    for better organization. Update by Olivia.
 * * New Features!
 * ** New Notetags added by Olivia and sponsored by NSG:
 * *** <Sideview Shadow Scale X: x%>
 * *** <Sideview Shadow Scale X: x.y>
 * *** <Sideview Shadow Scale Y: x%>
 * *** <Sideview Shadow Scale Y: x.y>
 * **** These new notetags allow you to adjust the X and Y scale of the SV
 *      shadow sprite separately.
 * ** New Plugin Parameters added by Olivia and sponsored by NSG:
 * *** Enemy Battler Settings > Name > Name Visibility > Always Hidden
 * *** Enemy Battler Settings > Name > Name Visibility > By Selection?
 * **** Choose to have the names always hidden or by selection.
 * **** These are adjusted on a priority list.
 * 
 * Version 1.37: May 21, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia.
 * *** <Command Require Learn>
 * *** <Command Require Access>
 * **** These two commands determine the visibility of a battle command by
 *      whether or not the skill has been learned or accessible.
 * * Feature Update!
 * ** For those using TPB, each battler's regeneration phase will no longer
 *    tick multiple times in a single frame to prevent irregularities. Update
 *    made by Olivia.
 * 
 * Version 1.36: May 14, 2021
 * * Bug Fixes!
 * ** Reversed an HP/MP regeneration bug that was incorrectly reported for TPB.
 *    Fix made by Olivia.
 * * Documentation Update
 * ** Added "TPB/ATB Active Battle Actor Shifting" to Major Changes section:
 * *** This change has been active since the start of this plugin. It was not
 *     documented until now.
 * *** Pressing cancel on the Actor Command Window no longer switches between
 *     actors with a full TPB/ATB gauge before reaching the Party Command
 *     Window. This is to accomplish a couple of things: 1) reduce the number
 *     of button presses to reach the Party Command Window and 2) to prevent
 *     motion resets and disrupting action sequences. If this feature is vital
 *     to your battle system, we recommend that you do not use this plugin or
 *     any of the Battle Core-required plugins.
 * ** Feature Updates
 * *** Distortion sprite Y calculations will now be rounded upward for better
 *     visuals and prevent odd pixelation effects. Update made by Irina.
 * 
 * Version 1.35: May 7, 2021
 * * Bug Fixes!
 * ** Pre-Battle Common Events without a wait command at the end should no
 *    longer lock up by coincidentally pressing the menu key at the same time.
 *    Fix made by Olivia.
 * * Feature Update!
 * ** Added an extra check for TPB-based battle systems to not run turn end
 *    functions when it's not actually the actual turn end timing. Update made
 *    by Olivia.
 * ** "Damage Styles" plugin parameters are now moved to the top of the
 *    Damage Settings category. This should make it easier to acknowledge the
 *    existence of and not have it be an unknown entity. Update made by Irina.
 * 
 * Version 1.34: April 23, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Uses a better algorithm for determining shadow positioning. Update made
 *    by Olivia.
 * * New Features!
 * ** New additions made for Projectile action sequences.
 * ** "Start Location" and "Goal Location" now have "Target Location" parameter
 *    to determine which part of the target's body to send the projectile from
 *    or towards. Added by Olivia.
 * ** Requires VisuMZ_1_BattleCore version 1.34 to have affect.
 * 
 * Version 1.33: April 9, 2021
 * * Bug Fixes!
 * ** Skill costs should now be displayed on battle commands again. Bug fix
 *    made by Olivia.
 * ** Pre-Battle Common Events should no longer cause stalling when used with
 *    specific event commands. Bug fix made by Olivia.
 * * Compatibility Update!
 * ** Added "Weapon Swap" to the list of battle commands that can be added.
 * * Documentation Update!
 * ** Added "Weapon Swap" and "Combat Log" to the list of <Battle Commands> in
 *    the notetags section.
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia:
 * *** <Sideview Shadow Scale: x%> and <Sideview Shadow Scale: x.y>
 * **** Used for: Actor, Enemy Notetags
 * **** Adjusts the scaling size of the sideview battler's shadow.
 * 
 * Version 1.32: April 2, 2021
 * * Feature Update!
 * ** Sideview battler sprites when using front view will now factor in the
 *    window padding and appear properly centered to their focus point. Update
 *    made by Olivia.
 * 
 * Version 1.31: March 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Added "VisuStella MZ Compatibility" section for detailed compatibility
 *    explanations with the VisuMZ_3_BoostAction plugin.
 * 
 * Version 1.30: March 19, 2021
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <JS Targets> is now updated to include the default set of targets
 *    selected by the skill/item's original scope. Update made by Yanfly.
 * *** If you wish to clear it out, simply do 'targets = []' first.
 * 
 * Version 1.29: March 12, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Enemy Battler Settings > Name > Legacy Option
 * **** Use the legacy version (window) or new version (sprite).
 * **** WARNING: Legacy version is no longer supported for bugs.
 * **** Not all settings available here in the Plugin Parameters will be
 *      available to the legacy version (ie Always Visible and Attach States).
 * 
 * Version 1.28: March 5, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Arisu:
 * *** Plugin Parameters > Actor Command > Show Command Costs
 * **** If you don't want to show skill costs for your commands in the Actor
 *      Command Window, you can now hide them.
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battle Layout Settings > Status Window Elements
 * *** Battle Layout Settings > Status Window Elements > Battler Name
 * *** Battle Layout Settings > Status Window Elements > Gauge 1 (HP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 2 (MP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 3 (TP)
 * *** Battle Layout Settings > Status Window Elements > State Icon
 * *** Battle Layout Settings > Status Window Elements > TPB/ATB Gauge
 * **** These new Plugin Parameters allow you to offset the positions of the
 *      various Battle Status Window elements. Their base positions will be
 *      calculated by the Battle Layout used and then offset from there.
 * *** Battle Layout Settings > Status Window Elements > Window Skin
 * **** These settings allow you to set a specific window skin for the
 *      Battle Status Window or hide it from view completely.
 * *** Battle Layout Settings > Status Window Elements > Selectable Background
 * **** This option allows you to hide the black box that comes with the
 *      majority of selectable elements found in RPG Maker MZ in case it does
 *      not fit with how you want the Battle Status Window to look.
 * *** Battle Layout Settings > Status Window Elements > Back Attachment
 * *** Battle Layout Settings > Status Window Elements > Front Attachment
 * **** These settings allow you to attach images to the back/front of the
 *      Battle Status Window from the img/system/ folder.
 * **** You may offset X and Y positions for them as well.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Enemy Settings > Name: Always Visible
 * **** Determines if the enemy name will always be visible.
 * *** Plugin Parameters > Enemy Settings > Name: Attach States
 * **** Attach the enemy's state icon to the enemy name?
 * *** Plugin Parameters > Enemy Settings > Attach: Offset X/Y
 * **** Offset the attached state icon's position.
 * * Feature Update!
 * ** Switched drawing enemy names on the screen from window to sprite to
 *    reduce lag and for better screen positioning accuracy especially during
 *    screen zooming. Update by Olivia.
 * 
 * Version 1.27: February 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Critical
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Miss/Evade
 * **** Turns Switches ON if the action performs a critical hit, misses, or is
 *      evaded at any point.
 * **** Switch reverts to OFF whenever an action starts.
 * **** If multiple targets/hits are struck, as long as one hit respectively
 *      lands a critical hit, fails to land, then the switch will remain ON for
 *      the rest of the action.
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Damage
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Healing
 * **** Variable records target damage/healing during action.
 * **** Variable reverts to 0 whenever an action starts.
 * **** If multiple targets/hits are struck, the variable will record the total
 *      amount of damage/healing done for the remainder of the action (unless
 *      manually reseting to 0 during an Action Sequence).
 * 
 * Version 1.26: February 19, 2021
 * * Bug Fixes!
 * ** Battles with branching event paths found within a conditional branch or
 *    choice tree will no longer be skipped over. Fix made by Arisu.
 * * Compatibility Update
 * ** Returning to the battle scene from the options scene in a Tpb-base battle
 *    system now links the current actor. Update by Irina.
 * 
 * Version 1.25: February 5, 2021
 * * Compatibility Update
 * ** Added compatibility update with VisuStella MZ Skills and States Core's
 *    Plugin Parameter > State Settings > Action End Update
 * * Feature Update!
 * ** <Common Event: name> notetag no longer requires <Custom Action Sequence>
 *    notetag if the Plugin Parameter: Auto Notetag is enabled.
 * 
 * Version 1.24: January 29, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** MOVE: Move To Point and MOVE: Move To Target(s) Action Sequences'
 *    "Offset Adjustment" normal setting will now factor in Offset X and
 *    Offset Y positions unlike before where it cancels them. Update by Irina.
 * * New Features!
 * ** New notetag added by Arisu:
 * *** <Common Event: name>
 * **** Battle only: calls forth a Common Event of a matching name.
 * **** This is primarily used for users who are reorganizing around their
 *      Common Events and would still like to have their skills/items perform
 *      the correct Action Sequences in case the ID's are different.
 * 
 * Version 1.23: January 22, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** ACSET: All Targets Action Set and ACSET: Each Target Action Set updated
 * *** New parameter added: Dual/Multi Wield?
 * **** Add times struck based on weapon quantity equipped?
 * * New Features!
 * ** Dual Wielding now functions differently. Made by Olivia.
 * *** Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 *     animations at once, with the combined ATK of each weapon. It's confusing
 *     to look at and does not portray the nature of "Dual Wielding".
 * *** Dual Wielding, or in the case of users adding in third and fourth
 *     weapons, Multi Wielding is now changed. Each weapon is displayed
 *     individually, each producing its own attack animation, showing each
 *     weapon type, and applying only that weapon's ATK, Traits, and related
 *     effects. It is no longer a combined effect to display everything at once
 *     like RPG Maker MZ default.
 * *** If an actor has multiple weapon slots but some of them are unequipped,
 *     then the action will treat the attack as a single attack. There will be
 *     no barehanded attack to add on top of it. This is to match RPG Maker
 *     MZ's decision to omit a second animation if the same scenario is
 *     applied.
 * ** New Action Sequence Plugin Commands added by Yanfly
 * *** ANIM: Attack Animation 2+
 * **** Plays the animation associated with the user's 2nd weapon.
 *      Plays nothing if there is no 2nd weapon equipped.
 * ** New Action Sequence Plugin Commands added by Olivia
 * *** WEAPON: Clear Weapon Slot
 * *** WEAPON: Next Weapon Slot
 * *** WEAPON: Set Weapon Slot
 * **** These are Action Sequence Plugin Commands for devs who want finer
 *      control over Dual/Multi Wielding weapons.
 * 
 * Version 1.22: January 15, 2021
 * * Compatibility Update
 * ** Compatibility with "All Skills" Actor Command should now work with the
 *    Skills & States Core hide skill notetags.
 * 
 * Version 1.21: January 8, 2021
 * * Bug Fixes!
 * ** "MOVE: Home Reset" Plugin Command Action Sequence should work properly.
 *    Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Notetag snuck in by Arisu
 * *** <Auto Action Sequence>
 * **** Used for those who have the "Auto Notetag" Plugin Parameter enabled and
 *      just want to use an automatic Action Sequence instead.
 * ** New Plugin Parameter snuck in by Arisu!
 * *** Plugin Parameters > Action Sequences > Quality of Life > Auto Notetag
 * **** Automatically apply the <Custom Action Sequence> notetag effect to any
 *      item or skill that has a Common Event?
 * **** Any item or skill without a Common Event attached to it will use the
 *      Automatic Action Sequences instead.
 * **** The <Auto Action Sequence> notetag will disable this effect for that
 *      particular skill or item.
 * ** Arisu, you're going to be responsible for any bugs these may cause.
 * *** Bring it!!!!
 * **** And handling any bug report emails that are sent because this was
 *      turned on by accident.
 * ***** Please read the documentation, guys!
 * 
 * Version 1.20: January 1, 2021
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors that have received damage
 *    will return back to place after flinching. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New notetags added by Yanfly:
 * *** <Battle Portrait Offset: +x, +y>
 * *** <Battle Portrait Offset X: +x>
 * *** <Battle Portrait Offset Y: +y>
 * **** This is used with the "Portrait" and "Border" Battle Layouts.
 * **** Offsets the X and Y coordinates for the battle portrait.
 * 
 * Version 1.19: December 25, 2020
 * * Bug Fixes!
 * ** Removing a state from a Sideview Enemy during the middle of their a non-
 *    looping motion will no longer reset their motion to neutral.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for updated feature(s)!
 * * Feature Update!
 * ** Action Sequence "PROJECTILE: Icon" now supports code for the "Icon"
 *    parameter. Update made by Yanfly.
 * 
 * Version 1.18: December 18, 2020
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors will no longer step back
 *    after an enemy's action is finished. Fix made by Yanfly and Shiro.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** Action Sequence "BTLOG: Add Text" is updated for the convenience of a new
 *    option to quickly copy the displayed text to the VisuStella MZ Combat Log
 *    if that plugin is installed. Added by Yanfly.
 * 
 * Version 1.17: December 11, 2020
 * * Bug Fixes!
 * ** Common Events in TPB Active that cause forced actions will no longer
 *    cause currently inputting actors that match the forced action battler to
 *    crash the game. Fix made by Yanfly and Shiro.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * Feature Update!
 * ** Action Sequence Impact Action Sequences "Shockwave from Each Target(s)",
 *    "Shockwave from Target(s) Center", and "Zoom Blur at Target(s) Center"
 *    now have "Offset X" and "Offset Y" plugin parameters. Added by Yanfly.
 * ** Action Sequence "MOVE: Move To Target(s)" is now changed so that if the
 *    "Melee Distance" value is set to 0, battlers will no longer stand a half
 *    body distance away. Added by Yanfly.
 * 
 * Version 1.16: December 4, 2020
 * * Bug Fixes!
 * ** Bug fixes made for the RPG Maker MZ base code. If a battler has no
 *    actions, then their action speed will not be Infinity. Fix by Olivia.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.15: November 29, 2020
 * * Bug Fixes!
 * ** Completely replacing the whole party at once will no longer cause the
 *    battle system to crash. Fix made by Olivia.
 * ** Pre-Battle Common Events will no longer cancel out any win/lose branches.
 *    Fix made by Arisu.
 * * Feature Update!
 * ** Custom Action Sequences will no longer close the Actor Command Input
 *    window unless absolutely necessary (like for Show Message events) during
 *    Active TPB/ATB. Change made by Arisu.
 * 
 * Version 1.14: November 22, 2020
 * * Feature Update!
 * ** Natural Miss and Evasion motions now have flinch distance.
 *    Added by Yanfly.
 * 
 * Version 1.13: November 15, 2020
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.12: November 8, 2020
 * * Bug Fixes!
 * ** Failsafes added to prevent common events from running if they're empty.
 *    Fix made by Irina.
 * ** Skip Party Command will now work properly with TPB-based battle systems.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** In preparation for upcoming VisuStella MZ plugins.
 * 
 * Version 1.11: November 1, 2020
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added clarity for the Plugin Parameters for the Common Events settings
 *    found in the mechanics section. The common events are only meant to run
 *    in the map scene and not for the battle scene. Update made by Irina.
 * * Feature Update!
 * ** The Plugin Parameter for Mechanics, Common Events (on Map), Defeat Event
 *    now has updated functionality. If this has a common event attached to it,
 *    then losing to random encounters will no longer send the player to the
 *    Game Over scene, but instead, send the player back to the map scene,
 *    where the Defeat Common Event will run. Update made by Irina.
 * 
 * Version 1.10: October 25, 2020
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Action Sequence Plugin Command added by Olivia:
 * *** MECH: Custom Damage Formula
 * **** Changes the current action's damage formula to custom.
 *      This will assume the MANUAL damage style.
 * ** New Notetag added by Irina:
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battleback Scaling Settings
 * **** These settings allow you to adjust how battlebacks scale to the screen
 *      in the game.
 * *** <Battler Sprite Grounded>
 * **** Prevents the enemy from being able to jumping and/or floating due to
 *      Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * Version 1.09: October 18, 2020
 * * Bug Fixes!
 * ** Exiting out of the Options menu scene or Party menu scene will no longer
 *    cause party members to reset their starting position. Fix made by Arisu
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * ** There was a documentation error with <JS Pre-Regenerate> and
 *    <JS Post-Regenerate>. Fix made by Yanfly.
 * *** Before, these were written as <JS Pre-Regenerate Turn> and
 *     <JS Post-Regenerate Turn>. The "Turn" part of the notetag has been
 *     removed in the documentation.
 * * Feature Update!
 * ** Damage sprites on actors are now centered relative to the actor's anchor.
 *    Change made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Command added by Yanfly:
 * *** MECH: Variable Popup
 * **** Causes the unit(s) to display a popup using the data stored inside
 *      a variable.
 * 
 * Version 1.08: October 11, 2020
 * * Bug Fixes!
 * ** Dead party members at the start of battle no longer start offscreen.
 *    Fix made by Arisu.
 * ** Removed party members from battle no longer count as moving battlers.
 *    Fix made by Yanfly.
 * ** Using specific motions should now have the weapons showing and not
 *    showing properly. Fix made by Yanfly.
 * 
 * Version 1.07: October 4, 2020
 * * Bug Fixes!
 * ** Adding and removing actors will now refresh the battle status display.
 *    Fix made by Irina.
 * ** Adding new states that would change the affected battler's state motion
 *    will automatically refresh the battler's motion. Fix made by Irina.
 * ** Boss Collapse animation fixed and will sink into the ground.
 *    Fix made by Irina.
 * ** Failsafes added for certain animation types. Fix made by Yanfly.
 * ** Freeze Motion for thrust, swing, and missile animations will now show the
 *    weapons properly. Fix made by Yanfly.
 * ** The Guard command will no longer display the costs of the Attack command.
 *    Fix made by Irina.
 * * Documentation Update!
 * ** Updated help file for newly added plugin parameters.
 * * Feature Updates!
 * ** When using the Change Battleback event command in battle, the game client
 *    will wait until both battlebacks are loaded before changing the both of
 *    them so that the appearance is synched together. Change made by Yanfly.
 * * New Features!
 * ** New plugin parameters added by Irina!
 * *** Plugin Parameters > Actor Battler Settings > Chant Style
 * **** What determines the chant motion? Hit type or skill type?
 * 
 * Version 1.06: September 27, 2020
 * * Bug Fixes!
 * ** Enemy Battler Plugin Parameter "Shadow Visible" should now work again.
 *    Fix made by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins. Added by Yanfly.
 * * Documentation Update!
 * ** Updated the help file for all the new plugin parameters.
 * * Feature Update!
 * ** Action Sequence "MECH: HP, MP, TP" will now automatically collapse an
 *    enemy if it has been killed by the effect.
 * ** All battle systems for front view will now have damage popups appear
 *    in front of the status window instead of just the Portrait battle layout.
 *    Update made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Commands from Irina!
 * *** MOTION: Clear Freeze Frame
 * *** MOTION: Freeze Motion Frame
 * **** You can freeze a battler's sprite's motion with a specific frame.
 * ** New notetags for Maps and name tags for Troops added by Yanfly!
 * *** <Battle Layout: type> to change the battle layout style used for
 *     specific maps and/or troops.
 * ** New plugin parameters added by Yanfly!
 * *** Plugin Parameters > Battle Layout Settings > Command Window Width
 * **** This plugin parameter lets you adjust the window width for Party and
 *      Actor Command windows in the Default and List Battle Layout styles.
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset X
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset Y
 * **** These plugin parameters allow you to offset the position of the enemy
 *      name positions on the screen by a specific amount.
 * 
 * Version 1.05: September 20, 2020
 * * Bug Fixes!
 * ** Actors now use their casting or charging animations again during TPB/ATB.
 *    Fix made by Yanfly.
 * ** Defeat requirement for enemies will no longer crash the game if turned on
 *    after creating
 * ** Escaping animation no longer has actors stay in place. Fixed by Yanfly.
 * ** Failsafes added for newly added weapon types that have not been adjusted
 *    in the Database > System 2 tab. Fixed by Irina.
 * ** Shadows now appear under the actor sprites. Fix made by Yanfly.
 * ** Victory during TPB will no longer cancel the victory animations of
 *    actors that will have their turn after. Fixed by Yanfly.
 * * Documentation Update!
 * ** All Anchor Plugin Parameter descriptions now state to use values between
 *    0 and 1 to be safe. Update made by Yanfly.
 * * Feature Update!
 * ** During Active TPB / ATB, canceling out of the actor command window will
 *    go directly into the party window without having to sort through all of
 *    the available active actors.
 * ** Going from the Party Command Window's Fight command will immediately
 *    return back to the actor command window that was canceled from.
 * * New Features!
 * ** Action Sequence Plugin Command "MOVE: Spin/Rotate" has been updated.
 * *** A new parameter has been added: "Revert Angle on Finish"
 * *** Added by Yanfly.
 * ** New plugin parameters have been added to Damage Settings.
 * *** Appear Position: Selects where you want popups to appear relative to the
 *     battler. Head, Center, Base. Added by Yanfly.
 * *** Offset X: Sets how much to offset the sprites by vertically.
 *     Added by Yanfly.
 * *** Offset Y: Sets how much to offset the sprites by horizontally.
 *     Added by Yanfly.
 * ** New plugin parameters have been added to Actor Battler Settings.
 * *** Priority: Active - Place the active actor on top of actor and
 *     enemy sprites. Added by Yanfly.
 * *** Priority: Actors - Prioritize actors over enemies when placing 
 *     sprites on top of each other. Added by Yanfly.
 * 
 * Version 1.04: September 13, 2020
 * * Bug Fixes!
 * ** Active Battler Sprites now remain on top and won't be hidden behind
 *    other sprites for better visual clarity. Fix made by Arisu.
 * ** Collapsing battlers will now show the dead motion properly. Fix made by
 *    Olivia.
 * ** Dead battlers can no longer be given immortality. Fix made by Olivia.
 * ** Going into the Options menu with no battleback set will no longer set a
 *    battle snapshot.
 * ** HP Gauges for Sideview Enemies are no longer flipped! Fix made by Yanfly.
 * ** Moving a dead battler would no longer reset their animation. Fix made by
 *    Olivia.
 * ** Pre-Battle Common Events now work with events instead of just random
 *    encounters. Fix made by Yanfly.
 * ** Sideview Enemy shadows no longer twitch. Fix made by Irina.
 * * Documentation Updates!
 * ** Added further explanations for Anchor X and Anchor Y plugin parameters.
 *    This is because there's a lot of confusion for users who aren't familiar
 *    with how sprites work. Added by Irina.
 * ** <Magic Reduction: x> notetag updated to say magical damage instead of
 *    physical damage. Fix made by Yanfly.
 * * New Features!
 * ** Additional Action Sequence Plugin Commands have been added in preparation
 *    of upcoming plugins! Additions made by Irina.
 * *** Action Sequences - Angle (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Camera (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Skew (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Zoom (for VisuMZ_3_ActSeqCamera)
 * ** Additional Action Sequence Plugin Commands have been made available now
 *    and added to Battle Core! Additions made by Irina.
 * *** MOVE: Scale/Grow/Shrink
 * *** MOVE: Skew/Distort
 * *** MOVE: Spin/Rotate
 * *** MOVE: Wait For Scale
 * *** MOVE: Wait For Skew
 * *** MOVE: Wait For Spin
 * ** Plugin Parameters Additions. Additions made by Irina.
 * *** Plugin Params > Actor Battler Settings > Offset X
 * *** Plugin Params > Actor Battler Settings > Offset Y
 * *** Plugin Params > Actor Battler Settings > Smooth Image
 * *** Plugin Params > Enemy Battler Settings > Offset X
 * *** Plugin Params > Enemy Battler Settings > Offset Y
 * *** Plugin Params > Enemy Battler Settings > Smooth Image
 * 
 * Version 1.03: September 6, 2020
 * * Bug Fixes!
 * ** Animated Battlers will refresh their motions from the death motion once
 *    they're revived instead of waiting for their next input phase. Fix made
 *    by Yanfly.
 * ** Battle Log speed sometimes went by too fast for certain enabled messages.
 *    Wait timers are now added to them, like state results, buff results, and
 *    debuff results. Fix made by Yanfly.
 * ** Boss Collapse animation now works properly. Fix made by Yanfly.
 * ** Freeze fix for TPB (Wait) if multiple actors get a turn at the same time.
 *    Fix made by Olivia.
 * ** Pressing cancel on a target window after selecting a single skill no
 *    longer causes the status window to twitch.
 * ** Sideview Enemies had a split frame of being visible if they were to start
 *    off hidden in battle. Fix made by Shaz.
 * * Compatibility Update:
 * ** Battle Core's Sprite_Damage.setup() function is now separated fro the
 *    default to allow for better compatibility. Made by Yanfly.
 * * Documentation Update:
 * ** Inserted more information for "Damage Popups" under "Major Changes"
 * * New Features!
 * ** <Magic Penetration: x>, <Magic Penetration: x%> notetags added.
 * ** <Magic Reduction: x>, <Magic Reduction: x%> notetags added.
 * ** <Battle UI Offset: +x, +y>, <Battle UI Offset X: +x>, and
 *    <Battle UI Offset Y: +y> notetags added for adjusting the positions of
 *    HP Gauges and State Icons.
 * *** Notetags added by Yanfly.
 * 
 * Version 1.02: August 30, 2020
 * * Bug Fixes!
 * ** Failsafes added for parsing battle targets. Fix made by Yanfly.
 * ** Immortality is no longer ignored by skills/items with the Normal Attack
 *    state effect. Fix made by Yanfly.
 * ** Miss and Evasion sound effects work again! Fix made by Yanfly.
 * ** Selecting "Escape" from the Actor Command Window will now have the
 *    Inputting Battler show its escape motion. Fix made by Yanfly.
 * ** Wait for Movement now applies to SV Enemies. Fix made by Yanfly.
 * * New Features!
 * ** Plugin Command "ACSET: Finish Action" now has an option to turn off the
 *    Immortality of targets. Feature added by Yanfly.
 * * Optimization Update
 * ** Uses less resources when making checks for Pre-Battle Battle Start events
 * 
 * Version 1.01: August 23, 2020
 * * Bug Fixes!
 * ** Plugin Parameters > Damage Settings > Damage Formats are now fixed.
 *    Fix made by Olivia.
 * ** TPB Battle System with Disable Party Command fixed. Fix made by Olivia.
 * ** States now show in list format if faces are disabled. Fix made by Yanfly.
 * ** The default damage styles were missing the 'v' variable to allow for
 *    variable data input. These are back now. Fix made by Yanfly.
 * *** Users updating from version 1.00 will need to fix this problem by either
 *     removing the plugin from the Plugin Manager list and reinstalling it, or
 *     going to Plugin Parameters > Damage Settings > Style List > the style
 *     you want, and adding "const v = $gameVariables._data;" to JS: Formula
 * * New Notetags Added:
 * ** <Command Show Switch: x> added by Olivia
 * ** <Command Show All Switches: x,x,x> added by Olivia
 * ** <Command Show Any Switches: x,x,x> added by Olivia
 * ** <Command Hide Switch: x> added by Olivia
 * ** <Command Hide All Switches: x,x,x> added by Olivia
 * ** <Command Hide Any Switches: x,x,x> added by Olivia
 * ** <JS Command Visible> added by Olivia
 *
 * Version 1.00: August 20, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceStart
 * @text -
 * @desc The following are Action Sequences commands/sets.
 * These Plugin Commands only work in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSet
 * @text Action Sequence - Action Sets
 * @desc Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_SetupAction
 * @text ACSET: Setup Action Set
 * @desc The generic start to most actions.
 * 
 * @arg DisplayAction:eval
 * @text Display Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: On
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionStart:eval
 * @text Battle Step
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg CastAnimation:eval
 * @text Cast Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_WholeActionSet
 * @text ACSET: All Targets Action Set
 * @desc Affects all targets simultaneously performing the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_TargetActionSet
 * @text ACSET: Each Target Action Set
 * @desc Goes through each target one by one to perform the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount1:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount2:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed * 2
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_FinishAction
 * @text ACSET: Finish Action
 * @desc The generic ending to most actions.
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForNewLine:eval
 * @text Wait For New Line
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effects
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ClearBattleLog:eval
 * @text Clear Battle Log
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEnd:eval
 * @text Home Reset
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAngle
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAngle
 * @text Action Sequences - Angle
 * @desc Allows you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeAngle
 * @text ANGLE: Change Angle
 * @desc Changes the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc Change the camera angle to this many degrees.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_Reset
 * @text ANGLE: Reset Angle
 * @desc Reset any angle settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_WaitForAngle
 * @text ANGLE: Wait For Angle
 * @desc Waits for angle changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAnimation
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAnimation
 * @text Action Sequences - Animations
 * @desc These Action Sequences are related to the 'Animations' that
 * can be found in the Animations tab of the Database.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ActionAnimation
 * @text ANIM: Action Animation
 * @desc Plays the animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation
 * @text ANIM: Attack Animation
 * @desc Plays the animation associated with the user's 1st weapon.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation2
 * @text ANIM: Attack Animation 2+
 * @desc Plays the animation associated with the user's other weapons.
 * Plays nothing if there is no other weapon equipped.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Slot:eval
 * @text Slot
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 2
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonAnimation
 * @text ANIM: Balloon Animation
 * @desc Plays a balloon animation on target(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg Balloon:str
 * @text Balloon Type
 * @type select
 * @option Exclamation
 * @option Question
 * @option Music Note
 * @option Heart
 * @option Anger
 * @option Sweat
 * @option Frustration
 * @option Silence
 * @option Light Bulb
 * @option Zzz
 * @option User-defined 1
 * @option User-defined 2
 * @option User-defined 3
 * @option User-defined 4
 * @option User-defined 5
 * @desc What kind of balloon should be played on target(s)?
 * @default Exclamation
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIcon
 * @text ANIM: Balloon Icon (Single)
 * @desc Plays a balloon animation using an icon on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg IconIndex:num
 * @text Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIconRange
 * @text ANIM: Balloon Icon (Range)
 * @desc Plays a balloon animation an icon range on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg startIcon:num
 * @text Starting Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg endIcon:num
 * @text Ending Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIconSpecific
 * @text ANIM: Balloon Icon (Specific)
 * @desc Plays a balloon animation with specific icons on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg icons:arraynum
 * @text Icons
 * @type string[]
 * @desc Insert the ID(s) of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default []
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_CastAnimation
 * @text ANIM: Cast Animation
 * @desc Plays the cast animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait
 * @text ANIM: Change Battle Portrait
 * @desc Changes the battle portrait of the actor (if it's an actor).
 * Can be used outside of battle/action sequences.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to change the portraits for.
 * Valid units can only be actors.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/pictures/
 * @desc Select the file to change the actor's portrait to.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait_JS
 * @text ANIM: Change Battle Portrait (JS)
 * @desc Changes the battle portrait of the actor through JavaScript.
 * Can be used outside of battle/action sequences.
 *
 * @arg ActorJS:func
 * @text JS: Actor ID
 * @type note
 * @desc Enter which Actor ID to affect.
 * Uses JavaScript code.
 * @default "// Get Actor ID here.\nlet actorID = 0;\nactorID = $gameParty.members()[0].actorId();\n\n// Return Actor ID\nreturn actorID;"
 *
 * @arg FilenameJS:func
 * @text JS: Filename
 * @type note
 * @desc Enter the filename you wish to use.
 * Uses JavaScript code.
 * @default "// Get Filename here.\nlet filename = 'Actor1_';\nfilename += String(Math.randomInt(8) + 1);\n\n// Return Filename\nreturn filename;"
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_GuardAnimation
 * @text ANIM: Guard Animation
 * @desc Plays the animation associated with the user's guard action (if any).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ItemAnimation
 * @text ANIM: Item Animation
 * @desc Plays the animation associated with a specific item.
 * 
 * @arg ItemID:eval
 * @text Item ID
 * @type item
 * @desc Which item ID will the animation come from?
 * @default 7
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_PlayAtCoordinate
 * @text ANIM: Play at Coordinate
 * @desc Plays an animation on the screen at a specific x, y coordinate.
 * Requires VisuMZ_0_CoreEngine!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Animation
 * @type animation
 * @desc Plays this animation.
 * @default 1
 * 
 * @arg Coordinates
 *
 * @arg pointX:eval
 * @text X
 * @parent Coordinates
 * @desc X coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 *
 * @arg pointY:eval
 * @text Y
 * @parent Coordinates
 * @desc Y coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 *
 * @arg Mirror:eval
 * @text Mirror Animation?
 * @parent Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute Animation?
 * @parent Animation
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the animation?
 * @default false
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion?
 * @parent Animation
 * @type boolean
 * @on Wait
 * @off Normal
 * @desc Wait the animation to finish before continuing?
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimation
 * @text ANIM: Show Animation
 * @desc Plays the a specific animation on unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Select which animation to play on unit(s).
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimationJS
 * @text ANIM: Show Animation JS
 * @desc Plays the a specific animation on unit(s).
 * Uses JavaScript to determine animation ID.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:eval
 * @text JS: Animation ID
 * @desc Select which animation to play on unit(s).
 * Uses JavaScript to determine animation ID.
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_SkillAnimation
 * @text ANIM: Skill Animation
 * @desc Plays the animation associated with a specific skill.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will the animation come from?
 * @default 99
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_WaitForAnimation
 * @text ANIM: Wait For Animation
 * @desc Causes the interpreter to wait for any animation(s) to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceBattleLog
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakBattleLog
 * @text Action Sequences - Battle Log
 * @desc These Action Sequences are related to the Battle Log Window,
 * the window found at the top of the battle screen.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_AddText
 * @text BTLOG: Add Text
 * @desc Adds a new line of text into the Battle Log.
 * 
 * @arg Text:str
 * @text Text
 * @desc Add this text into the Battle Log.
 * Text codes allowed.
 * @default Insert text here.
 * 
 * @arg CopyCombatLog:eval
 * @text Copy to Combat Log?
 * @type boolean
 * @on Copy Text
 * @off Don't Copy
 * @desc Copies text to the Combat Log.
 * Requires VisuMZ_4_CombatLog
 * @default true
 *
 * @arg CombatLogIcon:num
 * @text Combat Log Icon
 * @parent CopyCombatLog:eval
 * @desc What icon would you like to bind to this entry?
 * Requires VisuMZ_4_CombatLog
 * @default 87
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Clear
 * @text BTLOG: Clear Battle Log
 * @desc Clears all the text in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_DisplayAction
 * @text BTLOG: Display Action
 * @desc Displays the current action in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PopBaseLine
 * @text BTLOG: Pop Base Line
 * @desc Removes the Battle Log's last added base line and 
 * all text up to its former location.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PushBaseLine
 * @text BTLOG: Push Base Line
 * @desc Adds a new base line to where the Battle Log currently is at.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Refresh
 * @text BTLOG: Refresh Battle Log
 * @desc Refreshes the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_UI
 * @text BTLOG: UI Show/Hide
 * @desc Shows or hides the Battle UI (including the Battle Log).
 * 
 * @arg ShowHide:eval
 * @text Show/Hide?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows/hides the Battle UI.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForBattleLog
 * @text BTLOG: Wait For Battle Log
 * @desc Causes the interpreter to wait for the Battle Log to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForNewLine
 * @text BTLOG: Wait For New Line
 * @desc Causes the interpreter to wait for a new line in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCamera
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCamera
 * @text Action Sequences - Camera
 * @desc Allows you to have control over the camera.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Clamp
 * @text CAMERA: Clamp ON/OFF
 * @desc Turns battle camera clamping on/off.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Setting:eval
 * @text ON/OFF
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Turns camera clamping on/off.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusPoint
 * @text CAMERA: Focus Point
 * @desc Focus the battle camera on a certain point in the screen.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg FocusX:eval
 * @text X Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg FocusY:eval
 * @text Y Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusTarget
 * @text CAMERA: Focus Target(s)
 * @desc Focus the battle camera on certain battler target(s).
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to focus the battle camera on.
 * @default ["user"]
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Offset
 * @text CAMERA: Offset
 * @desc Offset the battle camera from the focus target.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @desc How much to offset the camera X by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @desc How much to offset the camera Y by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for offset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Reset
 * @text CAMERA: Reset
 * @desc Reset the battle camera settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg ResetFocus:eval
 * @text Reset Focus?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the focus point?
 * @default true
 * 
 * @arg ResetOffset:eval
 * @text Reset Offset?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the camera offset?
 * @default true
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for reset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_WaitForCamera
 * @text CAMERA: Wait For Camera
 * @desc Waits for camera to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCutin
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCutin
 * @text Action Sequences - Cutins
 * @desc Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_AddVisualCutinEffect
 * @text CUTIN: Add Visual Cutin Effect
 * @desc Adds the Visual Cutin Effect using these desired settings.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg Basic
 * @text Basic Settings
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @parent Basic
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to use?
 * Only one of each cutin-style type can be present.
 * @default CenterHorzSpan
 * 
 * @arg Targets:arraystr
 * @text Portrait Target
 * @parent Basic
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to grab the Visual Cutin Effect portrait
 * data from. First unit will be used to make portrait.
 * @default ["user"]
 *
 * @arg parallaxFilename:str
 * @text Parallax Filename
 * @parent Basic
 * @type file
 * @dir img/parallaxes/
 * @require 1
 * @desc Pick a parallax to use for the Visual Cutin Effect.
 * Pick (None) to not use a parallax.
 * @default >>>ATTENTION<<<
 *
 * @arg bgColor:str
 * @text Background Color
 * @parent Basic
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #888888
 *
 * @arg ExtraSettings:struct
 * @text Extra Settings
 * @type struct<VisualCutinEffect>
 * @desc Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 * @default {}
 * 
 * @arg WaitForEntrance:eval
 * @text Wait For Entrance
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin entrance is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectAll
 * @text CUTIN: End Visual Cutin Effect (All)
 * @desc Ends all Visual Cutin Effects currently present.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectType
 * @text CUTIN: End Visual Cutin Effect (Type)
 * @desc Ends the Visual Cutin Effect with the matching type.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to end?
 * @default CenterHorzSpan
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForEntrance
 * @text CUTIN: Wait for Cutin Entrance
 * @desc Wait until all cutin entrances are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForExit
 * @text CUTIN: Wait for Cutin Exit
 * @desc Wait until all cutin exits are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 *
 * @command ActionSequenceSpaceDragonbones
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreaDragonbones
 * @text Action Sequences - Dragonbones
 * @desc These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesMotionAni
 * @text DB: Dragonbones Animation
 * @desc Causes the unit(s) to play a Dragonbones motion animation.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg MotionAni:str
 * @text Motion Animation
 * @desc What is the name of the Dragonbones motion animation you wish to play?
 * @default attack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesTimeScale
 * @text DB: Dragonbones Time Scale
 * @desc Causes the unit(s) to change their Dragonbones time scale.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg TimeScale:num
 * @text Time Scale
 * @desc Change the value of the Dragonbones time scale to this.
 * @default 1.0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceElements
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakElements
 * @text Action Sequences - Elements
 * @desc These Action Sequences are related to elements.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_AddElements
 * @text ELE: Add Elements
 * @desc Adds element(s) to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to add onto the action.
 * Insert multiple element ID's to add multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_Clear
 * @text ELE: Clear Element Changes
 * @desc Clears all element changes made through Action Sequences.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_ForceElements
 * @text ELE: Force Elements
 * @desc Forces only specific element(s) when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to force in the action.
 * Insert multiple element ID's to force multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_NullElements
 * @text ELE: Null Element
 * @desc Forces no element to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceGrid
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakGrid
 * @text Action Sequences - Grid
 * @desc These Action Sequences are Battle Grid System-related.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_ActionAnimationAtNode
 * @text GRID: Action Animation at Node
 * @desc Plays action animation at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddPassiveStatesToNode
 * @text GRID: Add Passive State(s) to Node
 * @desc Adds Passive State(s) at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg StateIDs:arraynum
 * @text State ID(s)
 * @type state[]
 * @desc Select which State ID(s) to add as a Passive State.
 * @default []
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Passive State Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Passive State(s) to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Passive State(s) to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddTriggerToNode
 * @text GRID: Add Trigger to Node
 * @desc Adds Trigger to target node. Target node cannot have battler.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg SkillID:num
 * @text Skill ID
 * @type skill
 * @desc Select which Skill ID(s) to add as the trigger.
 * @default 1
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Trigger Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Trigger to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Trigger to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddTriggerToNodeJS
 * @text GRID: Add Trigger to Node JS
 * @desc Adds Trigger to target node. Target node cannot have battler.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg SkillID:eval
 * @text JS: Skill ID
 * @desc Use JavaScript to determine what skill ID to add to this node.
 * @default 1
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Trigger Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Trigger to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Trigger to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationIDAtNode
 * @text GRID: Animation ID at Node
 * @desc Plays specific animation ID at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Play this animation at target node.
 * @default 1
 *
 * @arg Mirror:eval
 * @text Mirror?
 * @parent AnimationID:num
 * @type boolean
 * @on Mirror Animation
 * @off Don't Mirror
 * @desc Mirror this animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute?
 * @parent AnimationID:num
 * @type boolean
 * @on Mute Animation
 * @off Don't Mute
 * @desc Mute this animation?
 * @default false
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationJsAtNode
 * @text GRID: Animation JS at Node
 * @desc Uses JS to calculate which animation to play at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * @arg AnimationID:eval
 * @text JS: Animation ID
 * @desc Calculate which animation to play on unit(s).
 * Uses JavaScript to determine animation ID.
 * @default 1
 *
 * @arg Mirror:eval
 * @text Mirror?
 * @parent AnimationID:eval
 * @type boolean
 * @on Mirror Animation
 * @off Don't Mirror
 * @desc Mirror this animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute?
 * @parent AnimationID:eval
 * @type boolean
 * @on Mute Animation
 * @off Don't Mute
 * @desc Mute this animation?
 * @default false
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationTypeAtNode
 * @text GRID: Animation Type at Node
 * @desc Plays certain animation type at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg Type:str
 * @text Animation Type
 * @type select
 * @option Attack
 * @option Guard
 * @option Item
 * @option Skill
 * @desc What is the animation type you would like to play?
 * @default Attack
 * 
 * @arg Slot:eval
 * @text Slot (Attack Type)
 * @parent Type:str
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 1
 * 
 * @arg ItemID:num
 * @text Item ID (Item Type)
 * @parent Type:str
 * @type item
 * @desc Which item ID will the animation come from?
 * @default 7
 * 
 * @arg SkillID:num
 * @text Skill ID (Skill Type)
 * @parent Type:str
 * @type skill
 * @desc Which skill ID will the animation come from?
 * @default 99
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_MoveTargetsInDirection
 * @text GRID: Move Target(s) In Direction
 * @desc Moves target(s) in a specific direction to other Nodes.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to move.
 * @default ["all targets"]
 * 
 * @arg MoveType:str
 * @text Movement Type
 * @type select
 * @option -
 * @option Exact
 * @option -
 * @option Mid
 * @option -
 * @option Switch
 * @option Switch Mid
 * @option -
 * @option Crash
 * @option Crash Mid
 * @option -
 * @desc Select the Movement type rulings.
 * See VisuMZ_2_BattleGridSystem help file for details.
 * @default Mid
 * 
 * @arg Direction:str
 * @text Direction
 * @parent MoveType:str
 * @type select
 * @option -
 * @option Upward
 * @option Downward
 * @option -
 * @option Up-Forward
 * @option Forward
 * @option Down-Forward
 * @option -
 * @option Up-Backward
 * @option Backward
 * @option Down-Backward
 * @option -
 * @option Up-Leftward
 * @option Leftward
 * @option Down-Leftward
 * @option -
 * @option Up-Rightward
 * @option Rightward
 * @option Down-Rightward
 * @option -
 * @desc Select the movement direction.
 * @default Backward
 *
 * @arg Distance:eval
 * @text Distance
 * @parent MoveType:str
 * @desc The number of nodes to be moved.
 * You may use JavaScript code.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 *
 * @arg SilentMove:eval
 * @text Silent Change?
 * @type boolean
 * @on Silent
 * @off Visual
 * @desc Silent: Discreet changes shown. More apparent later.
 * Visual: Instant changes shown.
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_PullToTargetNode
 * @text GRID: Pull To Target Node
 * @desc Pulls battlers towards target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to pull on?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to pull to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to pull to.
 * @default 1
 *
 * @arg Strength:eval
 * @text Strength
 * @desc Input the strength level of the pull.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_PushFromTargetNode
 * @text GRID: Push From Target Node
 * @desc Pushes battlers away from target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to push from?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to push from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to push from.
 * @default 1
 *
 * @arg Strength:eval
 * @text Strength
 * @desc Input the strength level of the push.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_ClearPassiveStatesFromNode
 * @text GRID: Remove All Passive States from Node
 * @desc Removes all all Passive State effects at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to clear the Node for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to clear Passive States from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to clear Passive States from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_RemovePassiveStatesFromNode
 * @text GRID: Remove Passive State(s) from Node
 * @desc Remove Passive State(s) at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg StateIDs:arraynum
 * @text State ID(s)
 * @type state[]
 * @desc Select which State ID(s) to remove as a Passive State.
 * @default []
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to remove the Passive State Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to remove a Passive State(s) from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to remove a Passive State(s) from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_RemoveTriggerFromNode
 * @text GRID: Remove Trigger from Node
 * @desc Removes Trigger from target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to clear Triggers for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to clear Triggers from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to clear Triggers from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_TeleportToNode
 * @text GRID: Teleport To Node
 * @desc Teleports user/random opponent to target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to teleport to?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to teleport to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to teleport.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_TraverseToNode
 * @text GRID: Traverse To Node
 * @desc Traverses user/random opponent to target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to traverse to?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to traverse to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to traverse.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceHorror
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakHorror
 * @text Action Sequences - Horror Effects
 * @desc These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_Clear
 * @text HORROR: Clear All Filters
 * @desc Clear all Horror Effects filters on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove Horror Effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchCreate
 * @text HORROR: Glitch Create
 * @desc Creates the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg slices:num
 * @text Glitch Slices
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Glitch slices to be used with the target.
 * @default 10
 *
 * @arg offset:num
 * @text Glitch Offset
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Default offset value.
 * @default 100
 *
 * @arg animated:eval
 * @text Glitch Animated?
 * @parent FilterGlitch
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the glitch effect?
 * @default true
 *
 * @arg aniFrequency:num
 * @text Glitch Frequency
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how frequent to make the glitch effect?
 * Lower = often     Higher = rarer
 * @default 300
 *
 * @arg aniStrength:num
 * @text Glitch Strength
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how strong is the glitch effect?
 * Lower = weaker     Higher = stronger
 * @default 30
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchRemove
 * @text HORROR: Glitch Remove
 * @desc Removes the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseCreate
 * @text HORROR: Noise Create
 * @desc Creates the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg noise:num
 * @text Noise Rate
 * @parent FilterNoise
 * @desc Noise rate to be used with the target.
 * @default 0.3
 *
 * @arg animated:eval
 * @text Noise Animated
 * @parent FilterNoise
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the noise for the target?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseRemove
 * @text HORROR: Noise Remove
 * @desc Removes the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVCreate
 * @text HORROR: TV Create
 * @desc Creates the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg lineWidth:num
 * @text TV Line Thickness
 * @parent FilterTV
 * @type number
 * @min 1
 * @desc Default TV line thickness
 * Lower = thinner     Higher = thicker
 * @default 5
 *
 * @arg vignetting:num
 * @text TV Corner Size
 * @parent FilterTV
 * @desc Default TV line corner size
 * Lower = smaller     Higher = bigger
 * @default 0.3
 *
 * @arg animated:eval
 * @text TV Animated
 * @parent FilterTV
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the TV?
 * @default true
 *
 * @arg aniSpeed:num
 * @text TV Speed
 * @parent FilterTV
 * @desc Speed used to animate the TV if animated
 * Lower = slower     Higher = faster
 * @default 0.25
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVRemove
 * @text HORROR: TV Remove
 * @desc Removes the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceImpact
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakImpact
 * @text Action Sequences - Impact
 * @desc These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_BlueRedInvert
 * @text IMPACT: Bizarro Inversion
 * @desc Swaps blue/red colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Bizarro?
 * @type boolean
 * @on Enable / Bizarro
 * @off Disable / Normal
 * @desc Enable Bizarro Inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ColorBreak
 * @text IMPACT: Color Break
 * @desc Breaks the colors on the screen before reassembling.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Intensity:eval
 * @text Intensity
 * @desc What is the intensity of the color break effect?
 * @default 60
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the color break effect?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutBack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Desaturate
 * @text IMPACT: Desaturation
 * @desc Desaturates all colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Desaturate?
 * @type boolean
 * @on Enable / Desaturate
 * @off Disable / Normal
 * @desc Enable Desaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurScreen
 * @text IMPACT: Motion Blur Screen
 * @desc Creates a motion blur on the whole screen.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.1
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurTarget
 * @text IMPACT: Motion Blur Target(s)
 * @desc Creates a motion blur on selected target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion blur effects for.
 * @default ["user"]
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.5
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailCreate
 * @text IMPACT: Motion Trail Create
 * @desc Creates a motion trail effect for the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion trail effects for.
 * @default ["user"]
 *
 * @arg delay:num
 * @text Delay
 * @type number
 * @min 1
 * @desc How many frames to delay by when creating a motion trail?
 * The higher the delay, the less after images there are.
 * @default 1
 *
 * @arg duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion trail last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg hue:num
 * @text Hue
 * @type number
 * @min 0
 * @max 360
 * @desc What do you want to be the hue for the motion trail?
 * @default 0
 *
 * @arg opacityStart:num
 * @text Starting Opacity
 * @type number
 * @min 0
 * @max 255
 * @desc What starting opacity value do you want for the motion
 * trail? Opacity values decrease over time.
 * @default 200
 *
 * @arg tone:eval
 * @text Tone
 * @desc What tone do you want for the motion trail?
 * Format: [Red, Green, Blue, Gray]
 * @default [0, 0, 0, 0]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailRemove
 * @text IMPACT: Motion Trail Remove
 * @desc Removes the motion trail effect from the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to clear motion trail effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Negative
 * @text IMPACT: Negative Inversion
 * @desc Inverts all the colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Negative?
 * @type boolean
 * @on Enable / Negative
 * @off Disable / Normal
 * @desc Enable negative inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Oversaturate
 * @text IMPACT: Oversaturation
 * @desc Oversaturates colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Oversaturate?
 * @type boolean
 * @on Enable / Oversaturate
 * @off Disable / Normal
 * @desc Enable Oversaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwavePoint
 * @text IMPACT: Shockwave at Point
 * @desc Creates a shockwave at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveEachTargets
 * @text IMPACT: Shockwave from Each Target(s)
 * @desc Creates a shockwave at each of the target(s) location(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveCenterTargets
 * @text IMPACT: Shockwave from Target(s) Center
 * @desc Creates a shockwave from the center of the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeScale
 * @text IMPACT: Time Scale
 * @desc Adjust time to go faster or slower!
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc Adjusts how fast/slow time goes.
 * 1.00 is normal. Lower is slower. Higher is faster.
 * @default 1.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeStop
 * @text IMPACT: Time Stop
 * @desc Stops time for a set amount of milliseconds.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg ms:eval
 * @text Milliseconds
 * @desc How many milliseconds should time stop for?
 * 1000 milliseconds = 1 second.
 * @default 1000
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurPoint
 * @text IMPACT: Zoom Blur at Point
 * @desc Creates a zoom blur at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurTargetCenter
 * @text IMPACT: Zoom Blur at Target(s) Center
 * @desc Creates a zoom blur at the center of targets.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a zoom blur from.
 * @default ["user"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a zoom blur from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceInject
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakInject
 * @text Action Sequences - Inject
 * @desc These Action Sequences are related to injected animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationStart
 * @text INJECT: Animation Begin
 * @desc Injects and plays a whole spritesheet animation.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to inject the animation on.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/sv_actors/
 * @desc Select the animation spritesheet file.
 * Located in the /img/sv_actors/ folder.
 * @default Untitled
 *
 * @arg horzCells:num
 * @text Horizontal Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many horizontal cells (or columns) are there?
 * @default 1
 *
 * @arg vertCells:num
 * @text Vertical Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many vertical cells (or rows) are there?
 * @default 1
 *
 * @arg frameDelay:num
 * @text Frame Delay
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many frames are played inbetween cells?
 * @default 1
 *
 * @arg smooth:eval
 * @text Smooth Bitmap?
 * @parent Filename:str
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth the spritesheet graphic?
 * @default false
 * 
 * @arg Offset
 *
 * @arg offsetX:eval
 * @text Offset X
 * @parent Offset
 * @desc Offsets the X position of the injected animation.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg offsetY:eval
 * @text Offset Y
 * @parent Offset
 * @desc Offsets the Y position of the injected animation.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationEnd
 * @text INJECT: Animation End
 * @desc Stops and ends any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to stop injected animation(s).
 * @default ["user"]
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationPauseResume
 * @text INJECT: Animation Pause/Resume
 * @desc Pauses/resumes any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to pause injected animation(s).
 * @default ["user"]
 *
 * @arg pause:eval
 * @text Pause?
 * @parent Filename:str
 * @type boolean
 * @on Pause
 * @off Resume
 * @desc Pause the injected animation?
 * @default true
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_WaitForInjectAni
 * @text INJECT: Wait For Injected Animation
 * @desc Waits for injected animations to complete before performing
 * next command. Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMechanics
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMechanics
 * @text Action Sequences - Mechanics
 * @desc These Action Sequences are related to various mechanics
 * related to the battle system.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActionEffect
 * @text MECH: Action Effect
 * @desc Causes the unit(s) to take damage/healing from action and
 * incurs any changes made such as buffs and states.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActiveChainInputDisable
 * @text MECH: Active Chain Input Disable
 * @desc Disables input for Active Chain Skills at this time.
 * Requires VisuMZ_3_ActiveChainSkills!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddBuffDebuff
 * @text MECH: Add Buff/Debuff
 * @desc Adds buff(s)/debuff(s) to unit(s). 
 * Determine which parameters are affected and their durations.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s) and/or debuff(s).
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to buff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["ATK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to debuff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["DEF"]
 * 
 * @arg Turns:eval
 * @text Turns
 * @desc Number of turns to set the parameter(s) buffs to.
 * You may use JavaScript code.
 * @default 5
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddState
 * @text MECH: Add State
 * @desc Adds state(s) to unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s).
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to add to unit(s).
 * Insert multiple state ID's to add multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AnalyzeWeakness
 * @text MECH: Analyze Weakness
 * @desc Reveal elemental weakness(es) from target(s).
 * Requires VisuMZ_3_WeaknessDisplay!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reveal elemental weaknesses for.
 * @default ["all targets"]
 * 
 * @arg Reveal:eval
 * @text Reveal
 * @desc How many elemental weaknesses do you wish to reveal?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ArmorPenetration
 * @text MECH: Armor Penetration
 * @desc Adds an extra layer of defensive penetration/reduction.
 * You may use JavaScript code for any of these.
 *
 * @arg ArmorPenetration
 * @text Armor/Magic Penetration
 * 
 * @arg ArPenRate:eval
 * @text Rate
 * @parent ArmorPenetration
 * @desc Penetrates an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArPenFlat:eval
 * @text Flat
 * @parent ArmorPenetration
 * @desc Penetrates a flat amount of armor by this value.
 * @default 0
 *
 * @arg ArmorReduction
 * @text Armor/Magic Reduction
 * 
 * @arg ArRedRate:eval
 * @text Rate
 * @parent ArmorReduction
 * @desc Reduces an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArRedFlat:eval
 * @text Flat
 * @parent ArmorReduction
 * @desc Reduces a flat amount of armor by this value.
 * @default 0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AtbGauge
 * @text MECH: ATB Gauge
 * @desc Alters the ATB/TPB Gauges.
 * Requires VisuMZ_2_BattleSystemATB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 *
 * @arg Charging
 * 
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the ATB Gauge if it is currently charging.
 * @default -0.00
 * 
 * @arg Casting
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the ATB Gauge if it is currently casting.
 * @default -0.00
 * 
 * @arg Interrupt:eval
 * @text Interrupt?
 * @parent Casting
 * @type boolean
 * @on Interrupt
 * @off Don't Interrupt
 * @desc Interrupt the ATB Gauge if it is currently casting?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsChange
 * @text MECH: Boost Points Change
 * @desc Changes Boost Points for target(s).
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Boost Points for.
 * @default ["user"]
 * 
 * @arg BoostPoints:eval
 * @text Alter Boost Points By
 * @desc Alters the unit(s) Boost Points.
 * Positive for gaining points. Negative for losing points.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsStoreData
 * @text MECH: Boost Store Data
 * @desc Stores the number of Boosts used this action inside a variable.
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg VariableID:num
 * @text Variable ID
 * @type variable
 * @desc Which variable do you want to store the data inside?
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldChange
 * @text MECH: Break Shield Change
 * @desc Changes Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Break Shields for.
 * @default ["all targets"]
 * 
 * @arg BreakShields:eval
 * @text Alter Break Shields By
 * @desc Alters the unit(s) Break Shields.
 * Positive for gaining shields. Negative for losing shields.
 * @default -1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldReset
 * @text MECH: Break Shield Reset
 * @desc Resets Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reset the Break Shields for.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BtbGain
 * @text MECH: BTB Brave Points
 * @desc Alters the target(s) Brave Points to an exact value.
 * Requires VisuMZ_2_BattleSystemBTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 * 
 * @arg BravePoints:eval
 * @text Alter Brave Points By
 * @desc Alters the target(s) Brave Points.
 * Positive for gaining BP. Negative for losing BP.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Collapse
 * @text MECH: Collapse
 * @desc Causes the unit(s) to perform its collapse animation
 * if the unit(s) has died.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to process a death collapse.
 * @default ["all targets"]
 * 
 * @arg ForceDeath:eval
 * @text Force Death
 * @type boolean
 * @on On
 * @off Off
 * @desc Force death even if the unit has not reached 0 HP?
 * This will remove immortality.
 * @default false
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effect?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for the collapse effect to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbOrder
 * @text MECH: CTB Order
 * @desc Alters the CTB Turn Order.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg ChangeOrderBy:eval
 * @text Change Order By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbSpeed
 * @text MECH: CTB Speed
 * @desc Alters the CTB Speed.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Speed for.
 * @default ["all targets"]
 *
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the CTB Speed if it is currently charging.
 * @default -0.00
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the CTB Speed if it is currently casting.
 * @default -0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CustomDmgFormula
 * @text MECH: Custom Damage Formula
 * @desc Changes the current action's damage formula to custom.
 * This will assume the MANUAL damage style.
 * 
 * @arg Formula:str
 * @text Formula
 * @desc Changes the current action's damage formula to custom.
 * Use 'default' to revert the damage formula.
 * @default default
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DamagePopup
 * @text MECH: Damage Popup
 * @desc Causes the unit(s) to display the current state of
 * damage received or healed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a damage popup.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DeathBreak
 * @text MECH: Dead Label Jump
 * @desc If the active battler is dead, jump to a specific label in the common event.
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If the active battler is dead, jump to this specific label in the common event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateAttackEffect
 * @text MECH: Emulate Attack Effect
 * @desc Emulate an "Action Effect" but using a the user's
 * attack skill instead of the current action.
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateGuardEffect
 * @text MECH: Emulate Guard Effect
 * @desc Emulate an "Action Effect" but using a the user's
 * guard skill instead of the current action.
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateItemEffect
 * @text MECH: Emulate Item Effect
 * @desc Emulate an "Action Effect" but using a specific item
 * instead of the current action.
 * 
 * @arg ItemID:eval
 * @text Item ID
 * @type item
 * @desc Which item ID will be emulated?
 * @default 7
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateSkillCost
 * @text MECH: Emulate Skill Cost
 * @desc Pick a skill for target(s) to emulate paying the cost of.
 * Includes cooldowns and limited uses.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will have its cost paid for?
 * Use 0 for current action's skill.
 * @default 0
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateSkillEffect
 * @text MECH: Emulate Skill Effect
 * @desc Emulate an "Action Effect" but using a specific skill
 * instead of the current action.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will be emulated?
 * @default 99
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EnemyEscape
 * @text MECH: Enemy Escape
 * @desc Causes the enemy unit(s) to escape.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to escape.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EtbAction
 * @text MECH: ETB Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Requires VisuMZ_2_BattleSystemETB!
 * 
 * @arg ActionCount:eval
 * @text Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Positive for gaining energy. Negative for losing energy.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_FtbAction
 * @text MECH: FTB Action Count
 * @desc Alters the subject team's available Action Count.
 * Requires VisuMZ_2_BattleSystemFTB!
 * 
 * @arg ActionCount:eval
 * @text Action Count
 * @desc Alters the subject team's available Action Count.
 * Positive for gaining actions. Negative for losing actions.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_HpMpTp
 * @text MECH: HP, MP, TP
 * @desc Alters the HP, MP, and TP values for unit(s).
 * Positive values for healing. Negative values for damage.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["user"]
 *
 * @arg HP
 * 
 * @arg HP_Rate:eval
 * @text HP Rate
 * @parent HP
 * @desc Changes made to HP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg HP_Flat:eval
 * @text HP Flat
 * @parent HP
 * @desc Flat changes made to HP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg MP
 * 
 * @arg MP_Rate:eval
 * @text MP Rate
 * @parent MP
 * @desc Changes made to MP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg MP_Flat:eval
 * @text MP Flat
 * @parent MP
 * @desc Flat changes made to MP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 *
 * @arg TP
 * 
 * @arg TP_Rate:eval
 * @text TP Rate
 * @parent TP
 * @desc Changes made to TP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg TP_Flat:eval
 * @text TP Flat
 * @parent TP
 * @desc Flat changes made to TP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg ShowPopup:eval
 * @text Damage Popup?
 * @type boolean
 * @on On
 * @off Off
 * @desc Display a damage popup after?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Immortal
 * @text MECH: Immortal
 * @desc Changes the immortal flag of targets. If immortal flag is
 * removed and a unit would die, collapse that unit.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Alter the immortal flag of these groups. If immortal flag
 * is removed and a unit would die, collapse that unit.
 * @default ["user","all targets"]
 * 
 * @arg Immortal:eval
 * @text Immortal
 * @type boolean
 * @on On
 * @off Off
 * @desc Turn immortal flag for unit(s) on/off?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Multipliers
 * @text MECH: Multipliers
 * @desc Changes the multipliers for the current action.
 * You may use JavaScript code for any of these.
 *
 * @arg CriticalHit
 * @text Critical Hit%
 * 
 * @arg CriticalHitRate:eval
 * @text Rate
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalHitFlat:eval
 * @text Flat
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this flat bonus.
 * @default +0.00
 *
 * @arg CriticalDmg
 * @text Critical Damage
 * 
 * @arg CriticalDmgRate:eval
 * @text Rate
 * @parent CriticalDmg
 * @desc Affects critical damage by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalDmgFlat:eval
 * @text Flat
 * @parent CriticalDmg
 * @desc Affects critical damage by this flat bonus.
 * @default +0.00
 *
 * @arg Damage
 * @text Damage/Healing
 * 
 * @arg DamageRate:eval
 * @text Rate
 * @parent Damage
 * @desc Sets the damage/healing multiplier for current action.
 * @default 1.00
 * 
 * @arg DamageFlat:eval
 * @text Flat
 * @parent Damage
 * @desc Sets the damage/healing bonus for current action.
 * @default +0.00
 *
 * @arg HitRate
 * @text Hit Rate
 * 
 * @arg HitRate:eval
 * @text Rate
 * @parent HitRate
 * @desc Affects chance to connect attack by this multiplier.
 * @default 1.00
 * 
 * @arg HitFlat:eval
 * @text Flat
 * @parent HitRate
 * @desc Affects chance to connect attack by this flat bonus.
 * @default +0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OnceParallel
 * @text MECH: Once Parallel
 * @desc Plays a Common Event parallel to the battle event once
 * without repeating itself when done.
 *
 * @arg CommonEventID:num
 * @text Common Event ID
 * @type common_event
 * @desc The ID of the parallel Common Event to play.
 * Does NOT repeat itself when finished.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OtbOrder
 * @text MECH: OTB Order
 * @desc Alters the OTB Turn Order. Best used with single targets.
 * Requires VisuMZ_2_BattleSystemOTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the OTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg CurrentTurn:eval
 * @text Current Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @arg NextTurn:eval
 * @text Next Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @arg FollowTurn:eval
 * @text Follow Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbAlterCost
 * @text MECH: PTB Alter Cost
 * @desc Alters the action's cost settings.
 * Requires VisuMZ_2_BattleSystemPTB!
 *
 * @arg Override:eval
 * @text Override?
 * @type boolean
 * @on Override Permanent
 * @off Require Temporary
 * @desc Overrides any 'permanent' settings for Changeability?
 * @default false
 *
 * @arg alterChange:str
 * @text Alter Changeability
 * @type select
 * @option Unchanged - Cost type is unchanged after this effect
 * @value unchanged
 * @option Permanent - Cost type can no longer be changed after
 * @value permanent
 * @option Temporary - Cost type can still be changed after
 * @value temporary
 * @desc Allow the cost type and value to be changeable?
 * @default unchanged
 *
 * @arg alterType:str
 * @text Alter Cost Type
 * @type select
 * @option Unchanged - No changes are made
 * @value unchanged
 * @option Consume - Removes half, otherwise consumes full
 * @value consume
 * @option Convert - Converts full => half, otherwise consumes half
 * @value convert
 * @option Compress - Consumes half, otherwise converts full => half
 * @value compress
 * @desc Change the cost type to this scenario.
 * Use 'Unchanged' for no changes.
 * @default convert
 *
 * @arg alterCost:eval
 * @text Alter Cost Value
 * @desc What is the default action cost for this scenario?
 * @default +0
 *
 * @arg alterPriority:eval
 * @text Priority
 * @desc What is this scenario's priority? Scenario outcomes with
 * equal or lower priorities cannot override types and costs.
 * @default 50
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbConvert
 * @text MECH: PTB Conversion
 * @desc Converts full actions into half actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg ConvertCount:eval
 * @text Conversion Count
 * @desc Converts full actions into half actions.
 * If not enough, consume half actions.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbFullHalfAction
 * @text MECH: PTB Full/Half Action(s)
 * @desc Alters the subject team's available Full/Half Actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg FullActions:eval
 * @text Full Actions
 * @desc Alters the subject team's available Full Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 * 
 * @arg HalfActions:eval
 * @text Half Actions
 * @desc Alters the subject team's available Half Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveBuffDebuff
 * @text MECH: Remove Buff/Debuff
 * @desc Removes buff(s)/debuff(s) from unit(s). 
 * Determine which parameters are removed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have the buff(s) and/or debuff(s) removed.
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which buffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which debuffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveState
 * @text MECH: Remove State
 * @desc Remove state(s) from unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have states removed from.
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to remove from unit(s).
 * Insert multiple state ID's to remove multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StateTurnsChangeBy
 * @text MECH: State Turns Change By
 * @desc Changes target(s) state turns by an amount.
 * Requires VisuMZ_1_SkillsStatesCore!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to affect state turns for.
 * @default ["all targets"]
 *
 * @arg StateID:num
 * @text State ID
 * @type state
 * @desc What is the ID of the state you wish to change turns for?
 * Only works on states that can have turns.
 * @default 5
 *
 * @arg Turns:eval
 * @text Change Turns By
 * @desc How many turns should the state be changed to?
 * You may use JavaScript code.
 * @default +1
 *
 * @arg AutoAddState:eval
 * @text Auto-Add State?
 * @type boolean
 * @on Auto-Add
 * @off Don't Add
 * @desc Automatically adds state if actor(s) does not have it applied?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StateTurnsChangeTo
 * @text MECH: State Turns Change To
 * @desc Changes target(s) state turns to a specific value.
 * Requires VisuMZ_1_SkillsStatesCore!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to affect state turns for.
 * @default ["all targets"]
 *
 * @arg StateID:num
 * @text State ID
 * @type state
 * @desc What is the ID of the state you wish to change turns for?
 * Only works on states that can have turns.
 * @default 5
 *
 * @arg Turns:eval
 * @text Change Turns To
 * @desc How many turns should the state be changed to?
 * You may use JavaScript code.
 * @default 10
 *
 * @arg AutoAddState:eval
 * @text Auto-Add State?
 * @type boolean
 * @on Auto-Add
 * @off Don't Add
 * @desc Automatically adds state if target(s) does not have it applied?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExploit
 * @text MECH: STB Exploit Effect
 * @desc Utilize the STB Exploitation mechanics!
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Exploited:eval
 * @text Target(s) Exploited?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Exploit the below targets?
 * @default true
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to become exploited.
 * @default ["all targets"]
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploited status?
 * @default false
 * 
 * @arg Exploiter:eval
 * @text User Exploiter?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Allow the user to become the exploiter?
 * @default true
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploiter status?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExtraAction
 * @text MECH: STB Extra Action
 * @desc Adds an extra action for the currently active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Extra Actions
 * @parent Charging
 * @desc How many extra actions should the active battler gain?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbRemoveExcessActions
 * @text MECH: STB Remove Excess Actions
 * @desc Removes excess actions from the active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Remove Actions
 * @parent Charging
 * @desc How many actions to remove from the active battler?
 * You may use JavaScript code.
 * @default 99
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_SwapWeapon
 * @text MECH: Swap Weapon
 * @desc Causes the unit(s) to swap their weapon for another.
 * Requires VisuMZ_2_WeaponSwapSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to swap weapons for.
 * @default ["user"]
 * 
 * @arg WeaponTypeID:eval
 * @text Weapon Type ID
 * @desc Which weapon type to swap to?
 * This is NOT the weapon's ID. It's the weapon TYPE.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_TextPopup
 * @text MECH: Text Popup
 * @desc Causes the unit(s) to display a text popup.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Text:str
 * @text Text
 * @desc What text do you wish to display?
 * @default Text
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Text:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_VariablePopup
 * @text MECH: Variable Popup
 * @desc Causes the unit(s) to display a popup using the data
 * stored inside a variable.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Variable:num
 * @text Variable ID
 * @type variable
 * @desc Get data from which variable to display as a popup?
 * @default 1
 * 
 * @arg DigitGrouping:eval
 * @text Digit Grouping
 * @parent Variable:num
 * @type boolean
 * @on Group Digits
 * @off Don't Group
 * @desc Use digit grouping to separate numbers?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Variable:num
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 0, 0, 0]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_WaitForEffect
 * @text MECH: Wait For Effect
 * @desc Waits for the effects to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMotion
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMotion
 * @text Action Sequences - Motion
 * @desc These Action Sequences allow you the ability to control
 * the motions of sideview sprites.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_ClearFreezeFrame
 * @text MOTION: Clear Freeze Frame
 * @desc Clears any freeze frames from the unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to clear freeze frames for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_FreezeMotionFrame
 * @text MOTION: Freeze Motion Frame
 * @desc Forces a freeze frame instantly at the selected motion.
 * Automatically clears with a new motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to freeze motions for.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Freeze this motion for the unit(s).
 * @default attack
 * 
 * @arg Frame:num
 * @text Frame Index
 * @desc Which frame do you want to freeze the motion on?
 * Frame index values start at 0.
 * @default 2
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_MotionType
 * @text MOTION: Motion Type
 * @desc Causes the unit(s) to play the selected motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default attack
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_PerformAction
 * @text MOTION: Perform Action
 * @desc Causes the unit(s) to play the proper motion based
 * on the current action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_RefreshMotion
 * @text MOTION: Refresh Motion
 * @desc Cancels any set motions unit(s) has to do and use
 * their most natural motion at the moment.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to refresh their motion state.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_WaitMotionFrame
 * @text MOTION: Wait By Motion Frame
 * @desc Creates a wait equal to the number of motion frames passing.
 * Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 * @arg MotionFrameWait:num
 * @text Motion Frames to Wait?
 * @type number
 * @min 1
 * @desc Each "frame" is equal to the value found in
 * Plugin Parameters => Actors => Motion Speed
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMovement
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMovement
 * @text Action Sequences - Movement
 * @desc These Action Sequences allow you the ability to control
 * the sprites of actors and enemies in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_BattleStep
 * @text MOVE: Battle Step
 * @desc Causes the unit(s) to move forward past their home position
 * to prepare for action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveBy
 * @text MOVE: Change Home By Distance
 * @desc Change unit(s)'s home position by a distance from their
 * current home position(s). Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to change by.
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to change home by.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToJsPoint
 * @text MOVE: Change Home To JS Coordinates
 * @desc Change home position(s) to specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DestinationJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s)'s new home position.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToPoint
 * @text MOVE: Change Home To Point
 * @desc Change home position(s) to a target point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default center
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToTarget
 * @text MOVE: Change Home To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to change home position to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceDirection
 * @text MOVE: Face Direction
 * @desc Causes the unit(s) to face forward or backward.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Direction:str
 * @text Direction
 * @type combo
 * @option forward
 * @option backward
 * @option random
 * @desc Select which direction to face.
 * @default forward
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceJsPoint
 * @text MOVE: Face JS Coordinates
 * @desc Causes the unit(s) to face specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 *
 * @arg PointJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s) to face towards.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FacePoint
 * @text MOVE: Face Point
 * @desc Causes the unit(s) to face a point on the screen.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Point:str
 * @text Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceTarget
 * @text MOVE: Face Target(s)
 * @desc Causes the unit(s) to face other targets on the screen.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (facing)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for the turning unit(s) to face.
 * @default ["current target"]
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the unit(s) instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Float
 * @text MOVE: Float
 * @desc Causes the unit(s) to float above the ground.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make float.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Vertical distance to float upward.
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total float amount.
 * @default 12
 *
 * @arg EasingType:str
 * @text Float Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForFloat:eval
 * @text Wait For Float?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for floating to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeReset
 * @text MOVE: Home Reset
 * @desc Causes the unit(s) to move back to their home position(s)
 * and face back to their original direction(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["alive battlers"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Jump
 * @text MOVE: Jump
 * @desc Causes the unit(s) to jump into the air.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make jump.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Max jump height to go above the ground
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total jump amount.
 * @default 12
 * 
 * @arg WaitForJump:eval
 * @text Wait For Jump?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for jumping to complete before performing next command?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveBy
 * @text MOVE: Move Distance
 * @desc Moves unit(s) by a distance from their current position(s).
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to move unit(s).
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to move.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToJsPoint
 * @text MOVE: Move To JS Coordinates
 * @desc Moves unit(s) to specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DestinationJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s) to move to.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToPoint
 * @text MOVE: Move To Point
 * @desc Moves unit(s) to a designated point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToTarget
 * @text MOVE: Move To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to move to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Opacity
 * @text MOVE: Opacity
 * @desc Causes the unit(s) to change opacity.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change opacity.
 * @default ["user"]
 * 
 * @arg Opacity:eval
 * @text Desired Opacity
 * @desc Change to this opacity value.
 * You may use JavaScript code.
 * @default 255
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for opacity change.
 * @default 12
 *
 * @arg EasingType:str
 * @text Opacity Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForOpacity:eval
 * @text Wait For Opacity?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for opacity changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Scale
 * @text MOVE: Scale/Grow/Shrink
 * @desc Causes the unit(s) to scale, grow, or shrink?.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change the scale of.
 * @default ["user"]
 * 
 * @arg ScaleX:eval
 * @text Scale X
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg ScaleY:eval
 * @text Scale Y
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to scale for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Scale Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForScale:eval
 * @text Wait For Scale?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for scaling to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Skew
 * @text MOVE: Skew/Distort
 * @desc Causes the unit(s) to skew.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to skew.
 * @default ["user"]
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc X variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Y variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to skew for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Spin
 * @text MOVE: Spin/Rotate
 * @desc Causes the unit(s) to spin.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to spin.
 * @default ["user"]
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc How many degrees to spin?
 * @default 360
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to spin for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Spin Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg RevertAngle:eval
 * @text Revert Angle on Finish
 * @type boolean
 * @on Revert
 * @off Don't
 * @desc Revert angle after spinning?
 * @default true
 * 
 * @arg WaitForSpin:eval
 * @text Wait For Spin?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for spin to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForFloat
 * @text MOVE: Wait For Float
 * @desc Waits for floating to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForJump
 * @text MOVE: Wait For Jump
 * @desc Waits for jumping to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForMovement
 * @text MOVE: Wait For Movement
 * @desc Waits for movement to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForOpacity
 * @text MOVE: Wait For Opacity
 * @desc Waits for opacity changes to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForScale
 * @text MOVE: Wait For Scale
 * @desc Waits for scaling to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSkew
 * @text MOVE: Wait For Skew
 * @desc Waits for skewing to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSpin
 * @text MOVE: Wait For Spin
 * @desc Waits for spinning to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceProjectile
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakProjectile
 * @text Action Sequences - Projectiles
 * @desc Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Animation
 * @text PROJECTILE: Animation
 * @desc Create an animation projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Settings
 * @type animation
 * @desc Determine which animation to use as a projectile.
 * @default 77
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to finish before going to the next command?
 * @default false
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExAni>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","EasingType:str":"Linear","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Icon
 * @text PROJECTILE: Icon
 * @desc Create an icon projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Icon:eval
 * @text Icon Index
 * @parent Settings
 * @desc Determine which icon to use as a projectile.
 * You may use JavaScript code.
 * @default 118
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Picture
 * @text PROJECTILE: Picture
 * @desc Create a picture projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Picture:str
 * @text Picture Filename
 * @parent Settings
 * @type file
 * @dir img/pictures/
 * @desc Determine which picture to use as a projectile.
 * @default Untitled
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceSkew
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSkew
 * @text Action Sequences - Skew
 * @desc Allows you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeSkew
 * @text SKEW: Change Skew
 * @desc Changes the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc Change the camera skew X to this value.
 * @default 0
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Change the camera skew Y to this value.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_Reset
 * @text SKEW: Reset Skew
 * @desc Reset any skew settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_WaitForSkew
 * @text SKEW: Wait For Skew
 * @desc Waits for skew changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceTarget
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakTarget
 * @text Action Sequences - Target
 * @desc If using a manual target by target Action Sequence,
 * these commands will give you full control over its usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_CurrentIndex
 * @text TARGET: Current Index
 * @desc Sets the current index to this value.
 * Then decide to jump to a label (optional).
 * 
 * @arg Index:eval
 * @text Set Index To
 * @desc Sets current targeting index to this value.
 * 0 is the starting index of a target group.
 * @default 0
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_NextTarget
 * @text TARGET: Next Target
 * @desc Moves index forward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_PrevTarget
 * @text TARGET: Previous Target
 * @desc Moves index backward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_RandTarget
 * @text TARGET: Random Target
 * @desc Sets index randomly to determine new currernt target.
 * Then decide to jump to a label (optional).
 * 
 * @arg ForceRandom:eval
 * @text Force Random?
 * @type boolean
 * @on On
 * @off Off
 * @desc Index cannot be its previous index amount after random.
 * @default false
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceVoice
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakVoice
 * @text Action Sequences - Voice
 * @desc Allows you to play battle voices.
 * Requires VisuMZ_3_BattleVoices!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleVoice_PlayCommonLine
 * @text VOICE: Play Common Line
 * @desc Plays a common voice line from target battler(s).
 * Requires VisuMZ_3_BattleVoices!
 * 
 * @arg Targets:arraystr
 * @text Speaker Target(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play voice lines from.
 * @default ["user"]
 *
 * @arg VoiceLine:str
 * @text Voice Line
 * @type select
 * @option -
 * @value -
 * @option ---Battle Phase---
 * @value -
 * @option On Battle Start
 * @value BattleStart
 * @option On Battle Input
 * @value BattleInput
 * @option On Battle Victory
 * @value BattleVictory
 * @option Victory => Level Up
 * @value BattleVictoryLevelUp
 * @option Escape => Success
 * @value BattleEscapeSuccess
 * @option Escape => Failure
 * @value BattleEscapeFailure
 * @option -
 * @value -
 * @option ---On Action Start---
 * @value -
 * @option Basic Action => Regular Attack
 * @value ActionStartBasicAttack
 * @option Basic Action => Regular Guard
 * @value ActionStartBasicGuard
 * @option Skill Usage For Allies => Certain Hit
 * @value ActionStartSkillAllyCertainHit
 * @option Skill Usage For Allies => Physical
 * @value ActionStartSkillAllyPhysical
 * @option Skill Usage For Allies => Magical
 * @value ActionStartSkillAllyMagical
 * @option Skill Usage For Enemies => Certain Hit
 * @value ActionStartSkillEnemyCertainHit
 * @option Skill Usage For Enemies => Physical
 * @value ActionStartSkillEnemyPhysical
 * @option Skill Usage For Enemies => Magical
 * @value ActionStartSkillEnemyMagical
 * @option Item Usage For Allies
 * @value ActionStartItemAlly
 * @option Item Usage For Enemies
 * @value ActionStartItemEnemy
 * @option -
 * @value -
 * @option ---Perform Action---
 * @value -
 * @option Basic Action => Attack Motion
 * @value PerformActionBasicAttack
 * @option Basic Action => Critical Action
 * @value PerformActionCritical
 * @option Basic Action => Defeat Opponent
 * @value PerformActionDefeatFoe
 * @option Basic Action => Missed Action
 * @value PerformActionMiss
 * @option Skill Usage => Certain Hit
 * @value PerformActionSkillCertainHit
 * @option Skill Usage => Physical
 * @value PerformActionSkillPhysical
 * @option Skill Usage => Magical
 * @value PerformActionSkillMagical
 * @option -
 * @value -
 * @option ---On HP Change---
 * @value -
 * @option Life State => On Death
 * @value HpChangeDeath
 * @option Life State => On Revive
 * @value HpChangeRevive
 * @option On Damage => Damage <= 0%
 * @value HpChangeDamageNone
 * @option On Damage => Damage < 25%
 * @value HpChangeDamageLight
 * @option On Damage => Damage < 50%
 * @value HpChangeDamageMedium
 * @option On Damage => Damage >= 50%
 * @value HpChangeDamageHeavy
 * @option On Damage => Guarding Damage
 * @value HpChangeDamageGuard
 * @option On Recovery => Recovery < 25%
 * @value HpChangeRecoverLight
 * @option On Recovery => Recovery < 50%
 * @value HpChangeRecoverMedium
 * @option On Recovery => Recovery >= 50%
 * @value HpChangeRecoverHeavy
 * @option -
 * @value -
 * @option ---On Action Result---
 * @value -
 * @option On Miss/Evasion
 * @value ActionResultEvasion
 * @option On Magic Evasion
 * @value ActionResultMagicEvasion
 * @option On Counter
 * @value ActionResultCounter
 * @option On Reflection
 * @value ActionResultReflection
 * @option On Substitute
 * @value ActionResultSubstitute
 * @option -
 * @value -
 * @option ---Buff/Debuff Related---
 * @value -
 * @option On Buff Apply
 * @value BuffAdd
 * @option On Buff Remove
 * @value BuffRemove
 * @option On Debuff Apply
 * @value DebuffAdd
 * @option On Debuff Remove
 * @value DebuffRemove
 * @option -
 * @value -
 * @option ---State Related---
 * @value -
 * @option Positive States => On State Apply
 * @value StatePositiveAdd
 * @option Positive States => text On State Remove
 * @value StatePositiveRemove
 * @option Negative States => On State Apply
 * @value StateNegativeAdd
 * @option Negative States => On State Remove
 * @value StateNegativeRemove
 * @option Neutral States => On State Apply
 * @value StateNeutralAdd
 * @option Neutral States => On State Remove
 * @value StateNeutralRemove
 * @option -
 * @value -
 * @option ---Miscellaneous---
 * @value -
 * @option Voice Preview
 * @value CharaCreatePreview
 * @option -
 * @value -
 * @desc What voice line do you wish to play?
 * @default ActionStartBasicAttack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleVoice_PlaySpecialLine
 * @text VOICE: Play Special Line
 * @desc Plays a special voice line from target battler(s).
 * Requires VisuMZ_3_BattleVoices!
 * 
 * @arg Targets:arraystr
 * @text Speaker Target(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play voice lines from.
 * @default ["user"]
 *
 * @arg VoiceLineType:str
 * @text Voice Line Type
 * @type select
 * @option Action Name
 * @value ActionName
 * @option Chant Line
 * @value ChantLine
 * @option Item Name
 * @value ItemName
 * @option Skill Name
 * @value SkillName
 * @option Spell Name
 * @value SpellName
 * @option Unique Lines
 * @value UniqueLine
 * @desc What voice line type do you wish to play?
 * @default ActionName
 *
 * @arg Letter:str
 * @text Name / Letter
 * @type select
 * @option A
 * @option B
 * @option C
 * @option D
 * @option E
 * @option F
 * @option G
 * @option H
 * @option I
 * @option J
 * @option K
 * @option L
 * @option M
 * @option N
 * @option O
 * @option P
 * @option Q
 * @option R
 * @option S
 * @option T
 * @option U
 * @option V
 * @option W
 * @option X
 * @option Y
 * @option Z
 * @desc What voice letter/name do you want to play?
 * @default A
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceWeapon
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakWeapon
 * @text Action Sequences - Weapon
 * @desc Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_ClearActiveWeapon
 * @text WEAPON: Clear Weapon Slot
 * @desc Clears the active weapon slot (making others valid again).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to clear the active weapon slot for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_NextActiveWeapon
 * @text WEAPON: Next Weapon Slot
 * @desc Goes to next active weapon slot (making others invalid).
 * If next slot is weaponless, don't label jump.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the next active weapon slot for.
 * @default ["user"]
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a weapon is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_SetActiveWeapon
 * @text WEAPON: Set Weapon Slot
 * @desc Sets the active weapon slot (making others invalid).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the active weapon slot for.
 * @default ["user"]
 * 
 * @arg SlotID:eval
 * @text Weapon Slot ID
 * @desc Select weapon slot to make active (making others invalid).
 * Use 0 to clear and normalize. You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceZoom
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakZoom
 * @text Action Sequences - Zoom
 * @desc Allows you to have control over the screen zoom.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Scale
 * @text ZOOM: Change Scale
 * @desc Changes the zoom scale.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc The zoom scale to change to.
 * @default 1.0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Reset
 * @text ZOOM: Reset Zoom
 * @desc Reset any zoom settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_WaitForZoom
 * @text ZOOM: Wait For Zoom
 * @desc Waits for zoom to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceEnd
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleCore
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param AutoBattle:struct
 * @text Auto Battle Settings
 * @type struct<AutoBattle>
 * @desc Settings pertaining to Auto Battle.
 * @default {"BattleDisplay":"","AutoBattleMsg:str":"Press %1 or %2 to stop Auto Battle","AutoBattleOK:str":"OK","AutoBattleCancel:str":"Cancel","AutoBattleBgType:num":"1","AutoBattleRect:func":"\"const width = Graphics.width;\\nconst height = this.calcWindowHeight(1, false);\\nconst x = 0;\\nconst y = (Graphics.height - height) / 2;\\nreturn new Rectangle(x, y, width, height);\"","Options":"","AddOption:eval":"true","AdjustRect:eval":"true","StartName:str":"Auto Battle Start","StyleName:str":"Auto Battle Style","StyleOFF:str":"Attack","StyleON:str":"Skills"}
 *
 * @param Damage:struct
 * @text Damage Settings
 * @type struct<Damage>
 * @desc Settings pertaining to damage calculations.
 * @default {"DamageStyles":"","DefaultDamageStyle:str":"Standard","DamageStyleList:arraystruct":"[\"{\\\"Name:str\\\":\\\"Standard\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Armor Scaling\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"CT\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\nvalue = attackStat * 4;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"D4\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nlet stat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n    armor = 0;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n    armor = 0;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"DQ\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Get Primary Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Check for Recovery\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = 0;\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\n    // Plink Damage\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\n    value = baseline / 3;\\\\\\\\n} else {\\\\\\\\n    // Normal Damage\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\n    value = baseline / 2;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF7\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare base Damage\\\\\\\\nlet baseDamage = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Final Damage\\\\\\\\nlet value = baseDamage;\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    value += 22 * power;\\\\\\\\n} else {\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF8\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Damage\\\\\\\\nlet Value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\n    value *= power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.mat + power;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\n    value *= power / 256;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF9\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Main Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Base Damage\\\\\\\\nlet baseDamage = power;\\\\\\\\nif (this.isPhysical()) {\\\\\\\\n    baseDamage += stat;\\\\\\\\n}\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    baseDamage -= armor;\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Bonus Damage\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\n\\\\\\\\n// Declare Final Damage\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF10\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Create Damage Offense Value\\\\\\\\nlet value = power;\\\\\\\\n\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Damage Defense Value\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\n    value *= -1;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MK\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MOBA\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Value\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\n\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value *= a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value *= a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"PKMN\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\"]","Cap":"","EnableDamageCap:eval":"false","DefaultHardCap:num":"9999","EnableSoftCap:eval":"false","DefaultSoftCap:num":"0.80","DefaultSoftScaler:num":"0.1275","Popups":"","PopupDuration:num":"128","NewPopupBottom:eval":"true","PopupPosition:str":"base","PopupOffsetX:num":"0","PopupOffsetY:num":"0","PopupShiftX:num":"8","PopupShiftY:num":"-28","hpDamageFmt:str":"-%1","hpHealingFmt:str":"+%1","mpDamageFmt:str":"-%1 %2","mpHealingFmt:str":"+%1 %2","CriticalColor:eval":"[255, 0, 0, 160]","CriticalDuration:num":"128","Formulas":"","OverallFormulaJS:func":"\"// Declare Constants\\nconst target = arguments[0];\\nconst critical = arguments[1];\\nconst item = this.item();\\n\\n// Get Base Damage\\nconst baseValue = this.evalDamageFormula(target);\\n\\n// Calculate Element Modifiers\\nlet value = baseValue * this.calcElementRate(target);\\n\\n// Calculate Physical and Magical Modifiers\\nif (this.isPhysical()) {\\n    value *= target.pdr;\\n}\\nif (this.isMagical()) {\\n    value *= target.mdr;\\n}\\n\\n// Apply Healing Modifiers\\nif (baseValue < 0) {\\n    value *= target.rec;\\n}\\n\\n// Apply Critical Modifiers\\nif (critical) {\\n    value = this.applyCritical(value);\\n}\\n\\n// Apply Variance and Guard Modifiers\\nvalue = this.applyVariance(value, item.damage.variance);\\nvalue = this.applyGuard(value, target);\\n\\n// Finalize Damage\\nvalue = Math.round(value);\\nreturn value;\"","VarianceFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst variance = arguments[1];\\n\\n// Calculate Variance\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\n\\n// Return Damage\\nreturn damage >= 0 ? damage + v : damage - v;\"","GuardFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst target = arguments[1];\\n\\n// Return Damage Early\\nconst note = this.item().note;\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\nif (!target.isGuard()) return damage;\\nif (damage < 0) return damage;\\n\\n// Declare Guard Rate\\nlet guardRate = 0.5;\\nguardRate /= target.grd;\\n\\n// Return Damage\\nreturn damage * guardRate;\"","Critical":"","CriticalHitRateJS:func":"\"// Declare Constants\\nconst user = this.subject();\\nconst target = arguments[0];\\n\\n// Create Base Critical Rate\\nlet rate = this.subject().cri * (1 - target.cev);\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\n    return 1;\\n}\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    return Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    rate *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    rate += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL RATE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL RATE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Apply LUK Buffs/Debuffs\\nconst lukStack = this.subject().buff(7);\\nrate *= 2 ** lukStack;\\n\\n// Return Rate\\nreturn rate;\"","CriticalHitMultiplier:func":"\"// Declare Constants\\nconst user = this.subject();\\nlet damage = arguments[0];\\nlet multiplier = 2.0;\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\nif (this.isHpRecover() || this.isMpRecover()) {\\n    bonusDamage *= -1;\\n}\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\d+)([%％])>/i)) {\\n    multiplier = Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    multiplier += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\d+)([%％])>/i)) {\\n    bonusDamage *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL DAMAGE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Return Damage\\nreturn damage * multiplier + bonusDamage;\""}
 *
 * @param Mechanics:struct
 * @text Mechanics Settings
 * @type struct<Mechanics>
 * @desc Settings pertaining to various game mechanics.
 * @default {"ActionSpeed":"","AllowRandomSpeed:eval":"false","CalcActionSpeedJS:func":"\"// Declare Constants\\nconst agi = this.subject().agi;\\n\\n// Create Speed\\nlet speed = agi;\\nif (this.allowRandomSpeed()) {\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\n}\\nif (this.item()) {\\n    speed += this.item().speed;\\n}\\nif (this.isAttack()) {\\n    speed += this.subject().attackSpeed();\\n}\\n\\n// Return Speed\\nreturn speed;\"","BaseTroop":"","BaseTroopIDs:arraynum":"[\"1\"]","CommonEvents":"","BattleStartEvent:num":"0","BattleEndEvent:num":"0","VictoryEvent:num":"0","DefeatEvent:num":"0","EscapeSuccessEvent:num":"0","EscapeFailEvent:num":"0","Escape":"","CalcEscapeRatioJS:func":"\"// Calculate Escape Ratio\\nlet ratio = 0.5;\\nratio *= $gameParty.agility();\\nratio /= $gameTroop.agility();\\n\\n// Return Ratio\\nreturn ratio;\"","CalcEscapeRaiseJS:func":"\"// Calculate Escape Ratio\\nlet value = 0.1;\\nvalue += $gameParty.aliveMembers().length;\\n\\n// Return Value\\nreturn value;\"","BattleJS":"","PreStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleVictoryJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeSuccessJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeFailureJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleDefeatJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","TurnJS":"","PreStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","ActionJS":"","PreStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PreApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\""}
 *
 * @param CmdWindows
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleLayout:struct
 * @text Battle Layout Settings
 * @type struct<BattleLayout>
 * @desc Settings that adjust how the battle layout appears.
 * @default {"Style:str":"default","ListStyle":"","ShowFacesListStyle:eval":"true","CommandWidth:num":"192","XPStyle":"","XPActorCommandLines:num":"4","XPActorDefaultHeight:num":"64","XPSpriteYLocation:str":"name","PotraitStyle":"","ShowPortraits:eval":"true","PortraitScale:num":"0.5","BorderStyle":"","SkillItemBorderCols:num":"1","ShowPortraitsBorderStyle:eval":"true","PortraitScaleBorderStyle:num":"1.25","SkillItemWindows":"","SkillItemMiddleLayout:eval":"false","SkillItemStandardCols:num":"2"}
 *
 * @param BattleLog:struct
 * @text Battle Log Settings
 * @type struct<BattleLog>
 * @desc Settings that adjust how Window_BattleLog behaves.
 * @default {"General":"","BackColor:str":"#000000","MaxLines:num":"10","MessageWait:num":"16","TextAlign:str":"center","BattleLogRectJS:func":"\"const wx = 0;\\nconst wy = 0;\\nconst ww = Graphics.boxWidth;\\nconst wh = this.calcWindowHeight(10, false);\\nreturn new Rectangle(wx, wy, ww, wh);\"","StartTurn":"","StartTurnShow:eval":"true","StartTurnMsg:str":"Turn %1","StartTurnWait:num":"40","DisplayAction":"","ActionCenteredName:eval":"true","ActionSkillMsg1:eval":"false","ActionSkillMsg2:eval":"true","ActionItemMsg:eval":"false","ActionChanges":"","ShowCounter:eval":"true","ShowReflect:eval":"true","ShowSubstitute:eval":"true","ActionResults":"","ShowFailure:eval":"false","ShowCritical:eval":"false","ShowMissEvasion:eval":"false","ShowHpDmg:eval":"false","ShowMpDmg:eval":"false","ShowTpDmg:eval":"false","DisplayStates":"","ShowAddedState:eval":"false","ShowRemovedState:eval":"false","ShowCurrentState:eval":"false","ShowAddedBuff:eval":"false","ShowAddedDebuff:eval":"false","ShowRemovedBuff:eval":"false"}
 *
 * @param BattlebackScale:struct
 * @text Battleback Scaling
 * @type struct<Battleback>
 * @desc Settings that adjust how battlebacks scale.
 * @default {"DefaultStyle:str":"MZ","jsOneForOne:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst scale = 1.0;\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = 0;\\nthis.y = 0;\"","jsScaleToFit:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = this.width / this.bitmap.width;\\nconst ratioY = this.height / this.bitmap.height;\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScaleDown:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScale Up:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\""}
 *
 * @param PartyCmd:struct
 * @text Party Command Window
 * @type struct<PartyCmd>
 * @desc Settings that alter the Party Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconFight:num":"76","CommandAddAutoBattle:eval":"true","CmdIconAutoBattle:num":"78","CmdTextAutoBattle:str":"Auto","CommandAddOptions:eval":"true","CmdIconOptions:num":"83","ActiveTpbOptionsMessage:str":"Options Menu queued after action is complete.","CmdIconEscape:num":"82","Access":"","SkipPartyCmd:eval":"true","DisablePartyCmd:eval":"false","HelpWindow":"","HelpFight:str":"Select actions to fight.","HelpAutoBattle:str":"Sets party to Auto Battle mode.","HelpOptions:str":"Opens up the Options Menu.","HelpEscape:str":"Attempt to escape the battle."}
 *
 * @param ActorCmd:struct
 * @text Actor Command Window
 * @type struct<ActorCmd>
 * @desc Settings that alter the Actor Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconItem:num":"176","IconStypeNorm:num":"78","IconStypeMagic:num":"79","BattleCmd":"","BattleCmdList:arraystr":"[\"attack\",\"skills\",\"guard\",\"item\",\"escape\"]","ShowCosts:eval":"true","HelpWindow":"","HelpSkillType:str":"Opens up a list of skills under the \\C[16]%1\\C[0] category.","HelpItem:str":"Opens up a list of items that you can use.","HelpEscape:str":"Attempt to escape the battle.","HelpAutoBattle:str":"Automatically choose an action suitable for combat.","HelpParty:str":"Automatically choose an action suitable for combat."}
 *
 * @param InBattleStatus:struct
 * @text In-Battle Status Window
 * @type struct<InBattleStatus>
 * @desc Settings that alter the In-Battle Status window accessed
 * through the "Status" command.
 * @default {"General":"","CmdIconStatus:num":"87","StatusGraphic:str":"face","HelpStatus:str":"View battle member status.","Enemy":"","enemyStatus:eval":"true","enemyShowLevel:eval":"true","enemyHiddenParameter:str":"???","enemyShowParametersAlways:eval":"false","enemyShowParametersIfBattleTest:eval":"true","enemyShowParametersIfDefeated:eval":"true","PageButtons":"","pageOffsetX:num":"+0","pageOffsetY:num":"+0","pageButtons:eval":"true","Parameters":"","buffValueFmt:str":"▲%1","debuffValueFmt:str":"▼%1","States":"","statesMaxWidth:num":"384","drawStates:eval":"true","drawBuffs:eval":"true","drawDebuffs:eval":"true","BuffsDebuffs":"","buffNameFmt:str":"%1▲","debuffNameFmt:str":"%1▼","NormalState":"","normalIcon:num":"84","normalText:str":"Normal","HelpDesc":"","stateHelpFmt:json":"\"%1 %2\"","buffHelpFmt:json":"\"Increases %1 to %3%2\\\\C[0]. %4\"","debuffHelpFmt:json":"\"Decreases %1 to %3%2\\\\C[0]. %4\"","normalHelp:json":"\"Status is currently normal.\"","TurnHelpDesc":"","actionsFmt:str":"\\C[6](Actions %2%1\\C[6])\\C[0]","TurnsFmt:str":"\\C[5](Turns %2%1\\C[5])\\C[0]","passiveText:str":"\\C[4](Passive)\\C[0]","Window":"","StatusWindow_BgType:num":"0","StatusWindow_DrawJS:func":"\"{ // Draw Face and Simple Status\\n    const x = this.colSpacing() / 2;\\n    const h = ImageManager.faceHeight;\\n    const y = h / 2 - this.lineHeight() * 1.5;\\n    this.drawActorGraphic(this._battler, x + 1, 0, ImageManager.faceWidth, h);\\n    this.drawActorSimpleStatus(this._battler, x + 180, y);\\n}\\n{ // Draw Actor Parameters\\n    let maxWidth = this.drawingAreaWidth();\\n    let x1 = 0;\\n    let x2 = Math.ceil(this.drawingAreaWidth() / 2);\\n\\n    let counter = 0;\\n    const params = this.displayedParams();\\n\\n    let px = x1;\\n    const availableHeight = this.innerHeight - ImageManager.faceHeight;\\n    const paramHeight = Math.ceil(params.length / 2) * this.lineHeight();\\n    let py = Math.ceil((availableHeight - paramHeight) / 2) + ImageManager.faceHeight;\\n    let pw = Math.floor(maxWidth / 2);\\n\\n    if (this._statesWindow.y !== 0) {\\n        this._statesWindow.y = py;\\n    }\\n\\n    for (const param of params) {\\n        this.drawDarkRect(px, py, pw, this.lineHeight());\\n        this.drawParamData(param, px, py, pw);\\n        counter++;\\n        if (counter % 2 === 0) {\\n            px = x1;\\n            py += this.lineHeight();\\n        } else {\\n            px = x2;\\n        }\\n    }\\n}\"","StatusWindow_RectJS:func":"\"const wx = Graphics.boxWidth > 1000 ? 120 : 0;\\nconst wy = this._helpWindow.y + this._helpWindow.height;\\nconst ww = Graphics.boxWidth - (wx * 2);\\nconst wh = Graphics.boxHeight - wy - this.windowAreaHeight();\\nreturn new Rectangle(wx, wy, ww, wh);\""}
 * 
 * @param MultiTarget:struct
 * @text Multi-Target Windows
 * @type struct<MultiTarget>
 * @desc Settings that alter the Multi-Target Windows in battle.
 * @default {"Properties":"","WindowWidth:num":"280","BgType:num":"2","ShowButton:eval":"true","Vocab":"","AllActorsText:str":"All Allies","AllEnemiesText:str":"All Enemies","Offsets":"","ActorOffsets":"","ActorOffsetX:num":"+0","ActorOffsetY:num":"+0","EnemyOffsets":"","EnemyOffsetX:num":"+0","EnemyOffsetY:num":"+0"}
 * 
 * @param ComboWindow:struct
 * @text Damage Combo Window
 * @type struct<ComboWindow>
 * @desc Settings that alter the damage/healing combo window displayed in battle.
 * @default {"General":"","Enable:eval":"true","Appearance":"","CustomFontFace:str":"Arial","TextAlign:str":"left","ComboWindow_DrawJS:func":"\"// Declare Coordinates\\nlet x = 0;\\nlet y = 0;\\n\\n// Hit Text\\nconst hitText = this.hitText();\\nconst hitTextSize = this.textSizeEx(hitText);\\nif (this.textAlignment() === 'right') {\\n    x = this.innerWidth - this.itemPadding() - hitTextSize.width;\\n} else if (this.textAlignment() === 'center') {\\n    x = Math.floor((this.innerWidth - hitTextSize.width) / 2);\\n} else {\\n    x = this.itemPadding();\\n}\\nthis.drawTextEx(hitText, x, y);\\n\\n// New Line\\ny += Math.ceil(this.lineHeight() * 2/3);\\n\\n// Damage Text\\nconst dmgText = this.damageText();\\nconst dmgTextSize = this.textSizeEx(dmgText);\\nif (this.textAlignment() === 'right') {\\n    x = this.innerWidth - this.itemPadding() - dmgTextSize.width;\\n} else if (this.textAlignment() === 'center') {\\n    x = Math.floor((this.innerWidth - dmgTextSize.width) / 2);\\n} else {\\n    x = this.itemPadding();\\n}\\nthis.drawTextEx(dmgText, x, y);\"","Vocab":"","hitsDmgFmt:str":"\\C[6]%1\\} \\C[4]Hit Combo\\C[0]\\{","hitsHealFmt:str":"\\C[6]%1\\} \\C[4]Heal Combo\\C[0]\\{","totalDmgFmt:str":"\\}\\C[21]Total Damage: \\{\\C[0]%1","totalHealFmt:str":"\\}\\C[21]Total Healing: \\{\\C[24]+%1\\C[0]","Position":"","fadeShiftX:num":"-2","fadeShiftY:num":"+0","PosOffsetX:num":"+0","PosOffsetY:num":"+0","ComboWindow_RectJS:func":"\"const ww = Math.ceil(Graphics.width / 4);\\nconst wh = this.calcWindowHeight(2, true);\\nconst wx = 0 + this.comboWindowOffsetX();\\nconst wy = Math.round(Graphics.boxHeight * 1 / 3) + this.comboWindowOffsetY();\\nreturn new Rectangle(wx, wy, ww, wh);\"","Update":"","updateDuration:num":"20","minimumStayDuration:num":"40","minimumHits:num":"1","opacitySpeed:num":"16"}
 *
 * @param VisualBreak
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param Actor:struct
 * @text Actor Battler Settings
 * @type struct<Actor>
 * @desc Settings that alter various properties for actors.
 * @default {"Flinch":"","FlinchDistanceX:num":"12","FlinchDistanceY:num":"0","FlinchDuration:num":"6","SvBattlers":"","AnchorX:num":"0.5","AnchorY:num":"1.0","ChantStyle:eval":"true","OffsetX:num":"0","OffsetY:num":"0","MotionSpeed:num":"12","PrioritySortActive:eval":"true","PrioritySortActors:eval":"false","Shadow:eval":"true","SmoothImage:eval":"true","HomePosJS:func":"\"// Declare Constants\\nconst sprite = this;\\nconst actor = this._actor;\\nconst index = arguments[0];\\n\\n// Make Calculations\\nlet x = Math.round((Graphics.width / 2) + 192)\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\nx += index * 32;\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\ny += index * 48;\\n\\n// Home Position Offsets\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\+\\\\-]\\\\d+),[ ]([\\\\+\\\\-]\\\\d+)>/i;\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\n\\n// Set Home Position\\nthis.setHome(x, y);\""}
 *
 * @param Enemy:struct
 * @text Enemy Battler Settings
 * @type struct<Enemy>
 * @desc Settings that alter various properties for enemies.
 * @default {"Visual":"","AttackAnimation:num":"1","EmergeText:eval":"false","OffsetX:num":"0","OffsetY:num":"0","SmoothImage:eval":"true","SelectWindow":"","FrontViewSelect:eval":"false","SideviewSelect:eval":"true","NameFontSize:num":"22","SvBattlers":"","AllowCollapse:eval":"false","AnchorX:num":"0.5","AnchorY:num":"1.0","MotionIdle:str":"walk","Shadow:eval":"true","Width:num":"64","Height:num":"64","WtypeId:num":"0"}
 *
 * @param HpGauge:struct
 * @text HP Gauge Settings
 * @type struct<HpGauge>
 * @desc Settings that adjust the visual HP Gauge displayed in battle.
 * @default {"Display":"","ShowActorGauge:eval":"false","ShowEnemyGauge:eval":"true","RequiresDefeat:eval":"false","BTestBypass:eval":"true","Settings":"","AnchorX:num":"0.5","AnchorY:num":"1.0","Scale:num":"0.5","OffsetX:num":"0","OffsetY:num":"-3","Options":"","AddHpGaugeOption:eval":"true","AdjustRect:eval":"true","Name:str":"Show HP Gauge"}
 *
 * @param ActionSequence:struct
 * @text Action Sequence Settings
 * @type struct<ActionSequence>
 * @desc Settings that adjust how certain Action Sequences work.
 * @default {"AutoSequences":"","AutoMeleeSolo:eval":"true","AutoMeleeAoE:eval":"true","CastAnimations":"","CastCertain:num":"120","CastPhysical:num":"52","CastMagical:num":"51","CounterReflection":"","CounterPlayback:eval":"true","ReflectAnimation:num":"53","ReflectPlayback:eval":"true","Stepping":"","MeleeDistance:num":"24","StepDistanceX:num":"48","StepDistanceY:num":"0","StepDuration:num":"12"}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * Auto Battle Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~AutoBattle:
 *
 * @param BattleDisplay
 * @text Battle Display
 *
 * @param AutoBattleMsg:str
 * @text Message
 * @parent BattleDisplay
 * @desc Message that's displayed when Auto Battle is on.
 * Text codes allowed. %1 - OK button, %2 - Cancel button
 * @default Press %1 or %2 to stop Auto Battle
 *
 * @param AutoBattleOK:str
 * @text OK Button
 * @parent BattleDisplay
 * @desc Text used to represent the OK button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default OK
 *
 * @param AutoBattleCancel:str
 * @text Cancel Button
 * @parent BattleDisplay
 * @desc Text used to represent the Cancel button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default Cancel
 *
 * @param AutoBattleBgType:num
 * @text Background Type
 * @parent BattleDisplay
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for Auto Battle window.
 * @default 1
 *
 * @param AutoBattleRect:func
 * @text JS: X, Y, W, H
 * @parent BattleDisplay
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const width = Graphics.width;\nconst height = this.calcWindowHeight(1, false);\nconst x = 0;\nconst y = (Graphics.height - height) / 2;\nreturn new Rectangle(x, y, width, height);"
 *
 * @param Options
 *
 * @param AddOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the Auto Battle options to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param StartName:str
 * @text Startup Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Start
 *
 * @param StyleName:str
 * @text Style Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Style
 *
 * @param StyleOFF:str
 * @text OFF
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is OFF.
 * @default Attack
 *
 * @param StyleON:str
 * @text ON
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is ON.
 * @default Skills
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Damage:
 *
 * @param DamageStyles
 * @text Damage Styles
 *
 * @param DefaultDamageStyle:str
 * @text Default Style
 * @parent DamageStyles
 * @desc Which Damage Style do you want to set as default?
 * Use 'Manual' to not use any styles at all.
 * @default Standard
 *
 * @param DamageStyleList:arraystruct
 * @text Style List
 * @parent DamageStyles
 * @type struct<DamageStyle>[]
 * @desc A list of the damage styles available.
 * These are used to calculate base damage.
 * @default ["{\"Name:str\":\"Standard\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"Armor Scaling\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"CT\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\nvalue = attackStat * 4;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"D4\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nlet stat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n    armor = 0;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n    armor = 0;\\\\n}\\\\n\\\\n// Calculate Damage \\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"DQ\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\n}\\\\n\\\\n// Get Primary Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Check for Recovery\\\\nif (this.isRecover()) {\\\\n    let value = stat * multiplier * sign;\\\\n    return isNaN(value) ? 0 : value;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = 0;\\\\nif (stat < ((2 + armor) / 2)) {\\\\n    // Plink Damage\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\n    value = baseline / 3;\\\\n} else {\\\\n    // Normal Damage\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\n    value = baseline / 2;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF7\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare base Damage\\\\nlet baseDamage = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = 6 * (a.mat + level);\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.def + level);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.mdf + level);\\\\n}\\\\n\\\\n// Calculate Final Damage\\\\nlet value = baseDamage;\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isRecover()) {\\\\n    value += 22 * power;\\\\n} else {\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF8\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Damage\\\\nlet Value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\n    value *= power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.mat + power;\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\n    value *= power / 256;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = (power + a.def) * power / 2;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = (power + a.mdf) * power / 2;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF9\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Declare Main Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Declare Base Damage\\\\nlet baseDamage = power;\\\\nif (this.isPhysical()) {\\\\n    baseDamage += stat;\\\\n}\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    baseDamage -= armor;\\\\n    baseDamage = Math.max(1, baseDamage);\\\\n}\\\\n\\\\n// Declare Bonus Damage\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\n\\\\n// Declare Final Damage\\\\nlet value = baseDamage * bonusDamage * sign;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF10\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Create Damage Offense Value\\\\nlet value = power;\\\\n\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = power * ((a.def + power) / 2);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = power * ((a.mdf + power) / 2);\\\\n}\\\\n\\\\n// Apply Damage Defense Value\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\n    armor = Math.max(armor, 1);\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\n} else if (this.isRecover()) {\\\\n    value *= -1;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MK\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nconst denominator = Math.max(200 + armor, 1);\\\\n\\\\n// Calculate Damage \\\\nlet value = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.atk / denominator;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.mat / denominator;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = 200 * a.def / 200;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = 200 * a.mdf / 200;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MOBA\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Value\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\n\\\\n// Apply Attacker's Offense Parameter\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value *= a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value *= a.mdf;\\\\n}\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"PKMN\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}"]
 *
 * @param Cap
 * @text Damage Cap
 *
 * @param EnableDamageCap:eval
 * @text Enable Damage Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Put a maximum hard damage cap on how far damage can go?
 * This can be broken through the usage of notetags.
 * @default false
 *
 * @param DefaultHardCap:num
 * @text Default Hard Cap
 * @parent EnableDamageCap:eval
 * @type number
 * @min 1
 * @desc The default hard damage cap used before applying damage.
 * @default 9999
 *
 * @param EnableSoftCap:eval
 * @text Enable Soft Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Soft caps ease in the damage values leading up to the 
 * hard damage cap. Requires hard Damage Cap enabled.
 * @default false
 *
 * @param DefaultSoftCap:num
 * @text Base Soft Cap Rate
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.80
 *
 * @param DefaultSoftScaler:num
 * @text Soft Scale Constant
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.1275
 *
 * @param Popups
 *
 * @param PopupDuration:num
 * @text Popup Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a popup stays visible.
 * @default 128
 *
 * @param NewPopupBottom:eval
 * @text Newest Popups Bottom
 * @parent Popups
 * @type boolean
 * @on Bottom
 * @off Top
 * @desc Puts the newest popups at the bottom.
 * @default true
 *
 * @param PopupPosition:str
 * @text Appear Position
 * @parent Popups
 * @type select
 * @option Head - At the top of the battler.
 * @value head
 * @option Center - At the center of the battler.
 * @value center
 * @option Base - At the foot of the battler.
 * @value base
 * @desc Selects where you want popups to appear relative to the battler.
 * @default base
 *
 * @param EndBattlePopups:eval
 * @text End Battle Show?
 * @parent Popups
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide popups upon victory or escape?
 * Used to hide battle-state removal popups.
 * @default true
 *
 * @param PopupOffsetX:num
 * @text Offset X
 * @parent Popups
 * @desc Sets how much to offset the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param PopupOffsetY:num
 * @text Offset Y
 * @parent Popups
 * @desc Sets how much to offset the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PopupShiftX:num
 * @text Shift X
 * @parent Popups
 * @desc Sets how much to shift the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 8
 *
 * @param PopupShiftY:num
 * @text Shift Y
 * @parent Popups
 * @desc Sets how much to shift the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default -28
 *
 * @param hpDamageFmt:str
 * @text HP Damage Format
 * @parent Popups
 * @desc Determines HP damage format for popup.
 * %1 - Value, %2 - HP Text
 * @default -%1
 *
 * @param hpHealingFmt:str
 * @text HP Healing Format
 * @parent Popups
 * @desc Determines HP healing format for popup.
 * %1 - Value, %2 - HP Text
 * @default +%1
 *
 * @param mpDamageFmt:str
 * @text MP Damage Format
 * @parent Popups
 * @desc Determines MP damage format for popup.
 * %1 - Value, %2 - MP Text
 * @default -%1 %2
 *
 * @param mpHealingFmt:str
 * @text MP Healing Format
 * @parent Popups
 * @desc Determines MP healing format for popup.
 * %1 - Value, %2 - MP Text
 * @default +%1 %2
 *
 * @param CriticalColor:eval
 * @text Critical Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 *
 * @param CriticalDuration:num
 * @text Critical Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a the flash lasts.
 * @default 128
 *
 * @param Formulas
 *
 * @param OverallFormulaJS:func
 * @text JS: Overall Formula
 * @parent Formulas
 * @type note
 * @desc The overall formula used when calculating damage.
 * @default "// Declare Constants\nconst target = arguments[0];\nconst critical = arguments[1];\nconst item = this.item();\n\n// Get Base Damage\nconst baseValue = this.evalDamageFormula(target);\n\n// Calculate Element Modifiers\nlet value = baseValue * this.calcElementRate(target);\n\n// Calculate Physical and Magical Modifiers\nif (this.isPhysical()) {\n    value *= target.pdr;\n}\nif (this.isMagical()) {\n    value *= target.mdr;\n}\n\n// Apply Healing Modifiers\nif (baseValue < 0) {\n    value *= target.rec;\n}\n\n// Apply Critical Modifiers\nif (critical) {\n    value = this.applyCritical(value);\n}\n\n// Apply Variance and Guard Modifiers\nvalue = this.applyVariance(value, item.damage.variance);\nvalue = this.applyGuard(value, target);\n\n// Finalize Damage\nvalue = Math.round(value);\nreturn value;"
 *
 * @param VarianceFormulaJS:func
 * @text JS: Variance Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage variance.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst variance = arguments[1];\n\n// Calculate Variance\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\n\n// Return Damage\nreturn damage >= 0 ? damage + v : damage - v;"
 *
 * @param GuardFormulaJS:func
 * @text JS: Guard Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage is guarded.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst target = arguments[1];\n\n// Return Damage Early\nconst note = this.item().note;\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\nif (!target.isGuard()) return damage;\nif (damage < 0) return damage;\n\n// Declare Guard Rate\nlet guardRate = 0.5;\nguardRate /= target.grd;\n\n// Return Damage\nreturn damage * guardRate;"
 *
 * @param Critical
 * @text Critical Hits
 *
 * @param CriticalHitRateJS:func
 * @text JS: Rate Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Rates.
 * @default "// Declare Constants\nconst user = this.subject();\nconst target = arguments[0];\n\n// Create Base Critical Rate\nlet rate = this.subject().cri * (1 - target.cev);\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<ALWAYS CRITICAL>/i)) {\n    return 1;\n}\nif (note.match(/<SET CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    return Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    rate *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    rate += Number(RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL RATE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL RATE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Apply LUK Buffs/Debuffs\nconst lukStack = this.subject().buff(7);\nrate *= 2 ** lukStack;\n\n// Return Rate\nreturn rate;"
 *
 * @param CriticalHitMultiplier:func
 * @text JS: Damage Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Damage modification.
 * @default "// Declare Constants\nconst user = this.subject();\nlet damage = arguments[0];\nlet multiplier = 2.0;\nlet bonusDamage = this.subject().luk * this.subject().cri;\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\d+)([%％])>/i)) {\n    multiplier = Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    multiplier += Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\d+)([%％])>/i)) {\n    bonusDamage *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL DAMAGE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL DAMAGE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Return Damage\nreturn damage * multiplier + bonusDamage;"
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Formula Style
 * ----------------------------------------------------------------------------
 */
/*~struct~DamageStyle:
 *
 * @param Name:str
 * @text Name
 * @desc Name of this Damage Style.
 * Used for notetags and such.
 * @default Untitled
 *
 * @param Formula:func
 * @text JS: Formula
 * @parent Name:str
 * @type note
 * @desc The base formula for this Damage Style.
 * @default "// Define Constants\nconst item = this.item();\nconst a = this.subject();\nconst b = target;\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\n\n// Create Damage Value\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\n\n// Return Value\nreturn isNaN(value) ? 0 : value;"
 *
 * @param ItemsEquipsCore
 * @text Items & Equips Core
 *
 * @param DamageType
 * @text Damage Label
 * @parent ItemsEquipsCore
 *
 * @param DamageType1:str
 * @text HP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType2:str
 * @text MP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType3:str
 * @text HP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType4:str
 * @text MP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType5:str
 * @text HP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageType6:str
 * @text MP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageDisplay:func
 * @text JS: Damage Display
 * @parent ItemsEquipsCore
 * @type note
 * @desc Code used the data displayed for this category.
 * @default "// Define Constants\nconst item = this._item;\nconst formula = item.damage.formula;\nconst a = this._tempActorA;\nconst b = this._tempActorB;\nconst user = a;\nconst target = b;\n\n// Return Value\ntry {\n    const value = Math.max(eval(formula), 0);\n    return '%1%'.format(Math.round(value * 100));\n} catch (e) {\n    if ($gameTemp.isPlaytest()) {\n        console.log('Damage Formula Error for %1'.format(this._item.name));\n    }\n    return '?????';\n}"
 *
 */
/* ----------------------------------------------------------------------------
 * Mechanics Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Mechanics:
 *
 * @param ActionSpeed
 * @text Action Speed
 *
 * @param AllowRandomSpeed:eval
 * @text Allow Random Speed?
 * @parent ActionSpeed
 * @type boolean
 * @on Allow
 * @off Disable
 * @desc Allow speed to be randomized base off the user's AGI?
 * @default false
 *
 * @param SyncBuffExpire:eval
 * @text Turn End Buffs Expire
 * @parent ActionSpeed
 * @type boolean
 * @on Expire
 * @off Don't Expire
 * @desc Normally, buffs expire after all actions end.
 * But here, you can have buffs expire on turn end.
 * @default false
 *
 * @param CalcActionSpeedJS:func
 * @text JS: Calculate
 * @parent ActionSpeed
 * @type note
 * @desc Code used to calculate action speed.
 * @default "// Declare Constants\nconst agi = this.subject().agi;\n\n// Create Speed\nlet speed = agi;\nif (this.allowRandomSpeed()) {\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\n}\nif (this.item()) {\n    speed += this.item().speed;\n}\nif (this.isAttack()) {\n    speed += this.subject().attackSpeed();\n}\n\n// Return Speed\nreturn speed;"
 *
 * @param BaseTroop
 * @text Base Troop
 *
 * @param BaseTroopIDs:arraynum
 * @text Base Troop ID's
 * @parent BaseTroop
 * @type troop[]
 * @desc Select the Troop ID(s) to duplicate page events from for all other troops.
 * @default ["1"]
 *
 * @param CommonEvents
 * @text Common Events (on Map)
 *
 * @param BattleStartEvent:num
 * @text Pre-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Common Event to run before each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param BattleEndEvent:num
 * @text Post-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run after each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param VictoryEvent:num
 * @text Victory Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon victory on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param DefeatEvent:num
 * @text Defeat Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon defeat on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeSuccessEvent:num
 * @text Escape Success Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape success on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeFailEvent:num
 * @text Escape Fail Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape failure on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param Escape
 *
 * @param CalcEscapeRatioJS:func
 * @text JS: Calc Escape Ratio
 * @parent Escape
 * @type note
 * @desc Code used to calculate the escape success ratio.
 * @default "// Calculate Escape Ratio\nlet ratio = 0.5;\nratio *= $gameParty.agility();\nratio /= $gameTroop.agility();\n\n// Return Ratio\nreturn ratio;"
 *
 * @param CalcEscapeRaiseJS:func
 * @text JS: Calc Escape Raise
 * @parent Escape
 * @type note
 * @desc Code used to calculate how much the escape success ratio raises upon each failure.
 * @default "// Calculate Escape Ratio\nlet value = 0.1;\nvalue += $gameParty.aliveMembers().length;\n\n// Return Value\nreturn value;"
 *
 * @param Switches
 *
 * @param SwitchCritical:num
 * @text Switch: Critical
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action performs a critical hit.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param SwitchMissEvade:num
 * @text Switch: Miss/Evade
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action misses/is evaded.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param Variables
 *
 * @param VariableDmg:num
 * @text Variable: Damage
 * @parent Variables
 * @type variable
 * @desc Variable records target damage during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param VariableHeal:num
 * @text Variable: Healing
 * @parent Variables
 * @type variable
 * @desc Variable records target healing during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param BattleJS
 * @text JS: Battle-Related
 * 
 * @param PreStartBattleJS:func
 * @text JS: Pre-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartBattleJS:func
 * @text JS: Post-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleVictoryJS:func
 * @text JS: Battle Victory
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processVictory()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeSuccessJS:func
 * @text JS: Escape Success
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeSuccess()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeFailureJS:func
 * @text JS: Escape Failure
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeFailure()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleDefeatJS:func
 * @text JS: Battle Defeat
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processDefeat()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param PreEndBattleJS:func
 * @text JS: Pre-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndBattleJS:func
 * @text JS: Post-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param TurnJS
 * @text JS: Turn-Related
 *
 * @param PreStartTurnJS:func
 * @text JS: Pre-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartTurnJS:func
 * @text JS: Post-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreEndTurnJS:func
 * @text JS: Pre-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndTurnJS:func
 * @text JS: Post-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreRegenerateJS:func
 * @text JS: Pre-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostRegenerateJS:func
 * @text JS: Post-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param ActionJS
 * @text JS: Action-Related
 *
 * @param PreStartActionJS:func
 * @text JS: Pre-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostStartActionJS:func
 * @text JS: Post-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PreApplyJS:func
 * @text JS: Pre-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreDamageJS:func
 * @text JS: Pre-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostDamageJS:func
 * @text JS: Post-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostApplyJS:func
 * @text JS: Post-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreEndActionJS:func
 * @text JS: Pre-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostEndActionJS:func
 * @text JS: Post-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Layout Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLayout:
 *
 * @param Style:str
 * @text Battle Layout Style
 * @type select
 * @option Default - Shows actor faces in Battle Status.
 * @value default
 * @option List - Lists actors in Battle Status.
 * @value list
 * @option XP - Shows actor battlers in a stretched Battle Status.
 * @value xp
 * @option Portrait - Shows portraits in a stretched Battle Status.
 * @value portrait
 * @option Border - Displays windows around the screen border.
 * @value border
 * @option Frontview Battle UI - Requires VisuMZ_3_FrontviewBattleUI
 * @value frontview_ui
 * @option Sideview Battle UI - Requires VisuMZ_3_SideviewBattleUI
 * @value sideview_ui
 * @desc The style used for the battle layout.
 * @default default
 *
 * @param ListStyle
 * @text List Style
 * @parent Style:str
 *
 * @param ShowFacesListStyle:eval
 * @text Show Faces
 * @parent ListStyle
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows faces in List Style?
 * @default true
 *
 * @param CommandWidth:num
 * @text Command Window Width
 * @parent ListStyle
 * @type number
 * @min 1
 * @desc Determine the window width for the Party and Actor Command
 * Windows. Affects Default and List Battle Layout styles.
 * @default 192
 *
 * @param XPStyle
 * @text XP Style
 * @parent Style:str
 *
 * @param XPActorCommandLines:num
 * @text Command Lines
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Number of action lines in the Actor Command Window for the XP Style.
 * @default 4
 *
 * @param XPActorDefaultHeight:num
 * @text Sprite Height
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Default sprite height used when if the sprite's height has not been determined yet.
 * @default 64
 *
 * @param XPSpriteYLocation:str
 * @text Sprite Base Location
 * @parent XPStyle
 * @type select
 * @option Above Name - Sprite is located above the name.
 * @value name
 * @option Bottom - Sprite is located at the bottom of the window.
 * @value bottom
 * @option Centered - Sprite is centered in the window.
 * @value center
 * @option Top - Sprite is located at the top of the window.
 * @value top
 * @desc Determine where the sprite is located on the Battle Status Window.
 * @default name
 *
 * @param PotraitStyle
 * @text Portrait Style
 * @parent Style:str
 *
 * @param ShowPortraits:eval
 * @text Show Portraits?
 * @parent PotraitStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait instead of a face.
 * @default true
 *
 * @param PortraitScale:num
 * @text Portrait Scaling
 * @parent PotraitStyle
 * @desc If portraits are used, scale them by this much.
 * @default 0.5
 *
 * @param BorderStyle
 * @text Border Style
 * @parent Style:str
 *
 * @param SkillItemBorderCols:num
 * @text Columns
 * @parent BorderStyle
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 1
 *
 * @param ShowPortraitsBorderStyle:eval
 * @text Show Portraits?
 * @parent BorderStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait at the edge of the screen.
 * @default true
 *
 * @param PortraitScaleBorderStyle:num
 * @text Portrait Scaling
 * @parent BorderStyle
 * @desc If portraits are used, scale them by this much.
 * @default 1.0
 *
 * @param SkillItemWindows
 * @text Skill & Item Windows
 *
 * @param SkillItemMiddleLayout:eval
 * @text Middle Layout
 * @parent SkillItemWindows
 * @type boolean
 * @on Middle
 * @off Bottom
 * @desc Shows the Skill & Item Windows in mid-screen?
 * @default false
 *
 * @param SkillItemStandardCols:num
 * @text Columns
 * @parent SkillItemWindows
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 2
 *
 * @param StatusWindow
 * @text Status Window Elements
 *
 * @param StatusWindowName
 * @text Battler Name
 * @parent StatusWindow
 *
 * @param NameOffsetX:num
 * @text Offset: X
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param NameOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowHpGauge
 * @text Gauge 1 (HP)
 * @parent StatusWindow
 *
 * @param HpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param HpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowMpGauge
 * @text Gauge 2 (MP)
 * @parent StatusWindow
 *
 * @param MpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param MpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpGauge
 * @text Gauge 3 (TP)
 * @parent StatusWindow
 *
 * @param TpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowStateIcon
 * @text State Icon
 * @parent StatusWindow
 *
 * @param StateIconOffsetX:num
 * @text Offset: X
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StateIconOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpbGauge
 * @text TPB/ATB Gauge
 * @parent StatusWindow
 *
 * @param TpbGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpbGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowSkin
 * @text Window Skin
 * @parent StatusWindow
 *
 * @param StatusWindowSkinFilename:str
 * @text Filename
 * @parent StatusWindowSkin
 * @type file
 * @dir img/system/
 * @desc Filename used for the Battle Status Window skin.
 * Leave this empty to use the default window skin.
 * @default 
 *
 * @param StatusWindowSkinHide:eval
 * @text Hide Window Skin?
 * @parent StatusWindowSkin
 * @type boolean
 * @on No Window Skin
 * @off Default Skin
 * @desc Show/Hide the window skin for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowSelectBack
 * @text Selectable Background
 * @parent StatusWindow
 *
 * @param StatusWindowSelectableBackHide:eval
 * @text Hide Selectable BG?
 * @parent StatusWindowSelectBack
 * @type boolean
 * @on No Selectable BG
 * @off Default Selectable BG
 * @desc Show/Hide the selectable background box for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowAttachments
 * @text Attachments
 * @parent StatusWindow
 *
 * @param StatusWindowBackAttachment
 * @text Back Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentBack:str
 * @text Filename
 * @parent StatusWindowBackAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the back of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentBackOffsetX:num
 * @text Offset: X
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentBackOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowFrontAttachment
 * @text Front Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentFront:str
 * @text Filename
 * @parent StatusWindowFrontAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the front of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentFrontOffsetX:num
 * @text Offset: X
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentFrontOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param UiElements
 * @text UI Elements
 *
 * @param AntiTintUiElements:eval
 * @text Anti-Tint UI?
 * @parent UiElements
 * @type boolean
 * @on Prevent Tint
 * @off Allow Tint
 * @desc Prevent UI Elements from being tinted?
 * @default true
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Log Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLog:
 *
 * @param General
 *
 * @param BackColor:str
 * @text Back Color
 * @parent General
 * @desc Use #rrggbb for a hex color.
 * @default #000000
 *
 * @param MaxLines:num
 * @text Max Lines
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of lines to be displayed.
 * @default 10
 *
 * @param MessageWait:num
 * @text Message Wait
 * @parent General
 * @type number
 * @min 1
 * @desc Number of frames for a usual message wait.
 * @default 16
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent General
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Window_BattleLog.
 * @default center
 *
 * @param BattleLogRectJS:func
 * @text JS: X, Y, W, H
 * @parent General
 * @type note
 * @desc Code used to determine the dimensions for the battle log.
 * @default "const wx = 0;\nconst wy = 0;\nconst ww = Graphics.boxWidth;\nconst wh = this.calcWindowHeight(10, false);\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 * @param StartTurn
 * @text Start Turn
 *
 * @param StartTurnShow:eval
 * @text Show Start Turn?
 * @parent StartTurn
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display turn changes at the start of the turn?
 * @default false
 *
 * @param StartTurnMsg:str
 * @text Start Turn Message
 * @parent StartTurn
 * @desc Message displayed at turn start.
 * %1 - Turn Count
 * @default Turn %1
 *
 * @param StartTurnWait:num
 * @text Start Turn Wait
 * @parent StartTurn
 * @type number
 * @min 1
 * @desc Number of frames to wait after a turn started.
 * @default 40
 *
 * @param DisplayAction
 * @text Display Action
 *
 * @param ActionCenteredName:eval
 * @text Show Centered Action?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display a centered text of the action name?
 * @default true
 *
 * @param ActionSkillMsg1:eval
 * @text Show Skill Message 1?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 1st skill message?
 * @default false
 *
 * @param ActionSkillMsg2:eval
 * @text Show Skill Message 2?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 2nd skill message?
 * @default true
 *
 * @param ActionItemMsg:eval
 * @text Show Item Message?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the item use message?
 * @default false
 *
 * @param ActionChanges
 * @text Action Changes
 *
 * @param ShowCounter:eval
 * @text Show Counter?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display counter text?
 * @default true
 *
 * @param ShowCounterWait:eval
 * @text Wait Frames
 * @parent ShowCounter:eval
 * @type number
 * @desc How many frames should the battle log wait after text?
 * 60 frames = 1 second.
 * @default 0
 *
 * @param ShowReflect:eval
 * @text Show Reflect?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display magic reflection text?
 * @default true
 *
 * @param ShowReflectWait:eval
 * @text Wait Frames
 * @parent ShowReflect:eval
 * @type number
 * @desc How many frames should the battle log wait after text?
 * 60 frames = 1 second.
 * @default 0
 *
 * @param ShowSubstitute:eval
 * @text Show Substitute?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display substitute text?
 * @default true
 *
 * @param ShowSubstituteWait:eval
 * @text Wait Frames
 * @parent ShowSubstitute:eval
 * @type number
 * @desc How many frames should the battle log wait after text?
 * 60 frames = 1 second.
 * @default 0
 *
 * @param ActionResults
 * @text Action Results
 *
 * @param ShowFailure:eval
 * @text Show No Effect?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display no effect text?
 * @default false
 *
 * @param ShowCritical:eval
 * @text Show Critical?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display critical text?
 * @default false
 *
 * @param ShowMissEvasion:eval
 * @text Show Miss/Evasion?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display miss/evasion text?
 * @default false
 *
 * @param ShowHpDmg:eval
 * @text Show HP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display HP Damage text?
 * @default false
 *
 * @param ShowMpDmg:eval
 * @text Show MP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display MP Damage text?
 * @default false
 *
 * @param ShowTpDmg:eval
 * @text Show TP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display TP Damage text?
 * @default false
 *
 * @param DisplayStates
 * @text Display States
 *
 * @param ShowAddedState:eval
 * @text Show Added States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added states text?
 * @default false
 *
 * @param ShowRemovedState:eval
 * @text Show Removed States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed states text?
 * @default false
 *
 * @param ShowCurrentState:eval
 * @text Show Current States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the currently affected state text?
 * @default false
 *
 * @param ShowAddedBuff:eval
 * @text Show Added Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added buffs text?
 * @default false
 *
 * @param ShowAddedDebuff:eval
 * @text Show Added Debuffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added debuffs text?
 * @default false
 *
 * @param ShowRemovedBuff:eval
 * @text Show Removed Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed de/buffs text?
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Battleback Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Battleback:
 *
 * @param DefaultStyle:str
 * @text Default Style
 * @type select
 * @option MZ (MZ's default style)
 * @value MZ
 * @option 1:1 (No Scaling)
 * @value 1:1
 * @option Scale To Fit (Scale to screen size)
 * @value ScaleToFit
 * @option Scale Down (Scale Downward if Larger than Screen)
 * @value ScaleDown
 * @option Scale Up (Scale Upward if Smaller than Screen)
 * @value ScaleUp
 * @desc The default scaling style used for battlebacks.
 * @default MZ
 *
 * @param jsOneForOne:func
 * @text JS: 1:1
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst scale = 1.0;\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = 0;\nthis.y = 0;"
 *
 * @param jsScaleToFit:func
 * @text JS: Scale To Fit
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = this.width / this.bitmap.width;\nconst ratioY = this.height / this.bitmap.height;\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleDown:func
 * @text JS: Scale Down
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleUp:func
 * @text JS: Scale Up
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 */
/* ----------------------------------------------------------------------------
 * Party Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~PartyCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Party Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Party Command Window.
 * @default left
 *
 * @param CmdIconFight:num
 * @text Fight Icon
 * @parent Cmd
 * @desc The icon used for the Fight command.
 * @default 76
 *
 * @param CommandAddAutoBattle:eval
 * @text Add Auto Battle?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Auto Battle" command to the Command Window?
 * @default true
 *
 * @param CmdIconAutoBattle:num
 * @text Auto Battle Icon
 * @parent CommandAddAutoBattle:eval
 * @desc The icon used for the Auto Battle command.
 * @default 78
 *
 * @param CmdTextAutoBattle:str
 * @text Auto Battle Text
 * @parent CommandAddAutoBattle:eval
 * @desc The text used for the Auto Battle command.
 * @default Auto
 *
 * @param CommandAddStatus:eval
 * @text Add Status?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Status" command to the Command Window?
 * @default true
 *
 * @param CmdIconStatus:num
 * @text Status Icon
 * @parent CommandAddStatus:eval
 * @desc The icon used for the Status command.
 * @default 87
 *
 * @param CommandAddOptions:eval
 * @text Add Options?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Options" command to the Command Window?
 * @default true
 *
 * @param CmdIconOptions:num
 * @text Options Icon
 * @parent CommandAddOptions:eval
 * @desc The icon used for the Options command.
 * @default 83
 *
 * @param ActiveTpbOptionsMessage:str
 * @text Active TPB Message
 * @parent CommandAddOptions:eval
 * @desc Message that will be displayed when selecting options during the middle of an action.
 * @default Options Menu queued after action is complete.
 *
 * @param CmdIconEscape:num
 * @text Escape Icon
 * @parent Cmd
 * @desc The icon used for the Escape command.
 * @default 82
 *
 * @param Access
 *
 * @param SkipPartyCmd:eval
 * @text Skip Party Command
 * @parent Access
 * @type boolean
 * @on Skip
 * @off Don't
 * @desc DTB: Skip Party Command selection on turn start.
 * TPB: Skip Party Command selection at battle start.
 * @default true
 *
 * @param DisablePartyCmd:eval
 * @text Disable Party Command
 * @parent Access
 * @type boolean
 * @on Disable
 * @off Don't
 * @desc Disable the Party Command Window entirely?
 * @default false
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpFight:str
 * @text Fight
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Select actions to fight.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Sets party to Auto Battle mode.
 *
 * @param HelpOptions:str
 * @text Options
 * @parent HelpWindow
 * @desc Text displayed when selecting the Options command.
 * @default Opens up the Options Menu.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActorCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Actor Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Actor Command Window.
 * @default left
 *
 * @param CmdIconItem:num
 * @text Item Icon
 * @parent Cmd
 * @desc The icon used for the Item command.
 * @default 176
 *
 * @param IconStypeNorm:num
 * @text Normal SType Icon
 * @parent Cmd
 * @desc Icon used for normal skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 78
 *
 * @param IconStypeMagic:num
 * @text Magic SType Icon
 * @parent Cmd
 * @desc Icon used for magic skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 79
 *
 * @param BattleCmd
 * @text Battle Commands
 *
 * @param BattleCmdList:arraystr
 * @text Command List
 * @parent BattleCmd
 * @type combo[]
 * @option attack
 * @option skills
 * @option guard
 * @option item
 * @option status
 * @option party
 * @option escape
 * @option auto battle
 * @option stypes
 * @option stype: x
 * @option stype: name
 * @option all skills
 * @option skill: x
 * @option skill: name
 * @option combat log
 * @option talk
 * @option weapon swap
 * @desc List of battle commands that appear by default
 * if the <Battle Commands> notetag isn't present.
 * @default ["attack","skills","guard","party","item"]
 *
 * @param ShowCosts:eval
 * @text Show Command Costs
 * @parent BattleCmd
 * @type boolean
 * @on Show Costs
 * @off Hide Costs
 * @desc If a battle command has a resource cost, show it?
 * @default true
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpSkillType:str
 * @text Skill Types
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Opens up a list of skills under the \C[16]%1\C[0] category.
 *
 * @param HelpItem:str
 * @text Items
 * @parent HelpWindow
 * @desc Text displayed when selecting the item command.
 * @default Opens up a list of items that you can use.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Automatically choose an action suitable for combat.
 *
 * @param HelpParty:str
 * @text Party
 * @parent HelpWindow
 * @desc Text displayed when selecting the Party command.
 * Requires 
 * @default Automatically choose an action suitable for combat.
 *
 */
/* ----------------------------------------------------------------------------
 * In_Battle Status Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~InBattleStatus:
 *
 * @param General
 * @text General Settings
 *
 * @param CmdIconStatus:num
 * @text Status Icon
 * @parent General
 * @desc The icon used for the Status command.
 * @default 87
 *
 * @param StatusGraphic:str
 * @text Status Graphic
 * @parent General
 * @type select
 * @option None
 * @value none
 * @option Face
 * @value face
 * @option Map Sprite
 * @value sprite
 * @option Sideview Battler
 * @value svbattler
 * @desc Choose how the actor graphic appears for In-Battle Status.
 * @default face
 *
 * @param HelpStatus:str
 * @text Help Description
 * @parent General
 * @desc Text displayed when selecting the Status command.
 * @default View battle member status.
 *
 * @param Enemy
 * @text Enemy Settings
 *
 * @param enemyStatus:eval
 * @text Allow View Enemies?
 * @parent Enemy
 * @type boolean
 * @on Allow
 * @off Forbid
 * @desc Allows players to view enemy stats (even if limited)?
 * @default true
 *
 * @param enemyShowLevel:eval
 * @text Show Level?
 * @parent Enemy
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows the enemy's level in the In-Battle Status?
 * @default true
 *
 * @param enemyHiddenParameter:str
 * @text Hidden Parameter
 * @parent Enemy
 * @desc The text that appears if a parameter value is hidden.
 * @default ???
 *
 * @param enemyShowParametersAlways:eval
 * @text Show Params Always
 * @parent enemyHiddenParameter:str
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Always show exact enemy parameter values.
 * @default false
 *
 * @param enemyShowParametersIfBattleTest:eval
 * @text Show Battle Test
 * @parent enemyHiddenParameter:str
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show exact enemy parameter values in battle test.
 * @default true
 *
 * @param enemyShowParametersIfDefeated:eval
 * @text Show If Defeated
 * @parent enemyHiddenParameter:str
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show exact enemy parameter values if enemy has been defeated before.
 * @default true
 *
 * @param PageButtons
 * @text Page Buttons
 *
 * @param pageButtons:eval
 * @text Show Page Buttons?
 * @parent PageButtons
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows page buttons to switch between actors?
 * Still requires Touch UI option to be on.
 * @default true
 *
 * @param pageButtonPosition:str
 * @text Large UI Position?
 * @parent pageButtons:eval
 * @type select
 * @option left
 * @option right
 * @desc If using a large resolution, position the page buttons on which side?
 * @default left
 *
 * @param pageOffsetX:num
 * @text Offset X
 * @parent PageButtons
 * @desc Offsets the page buttons x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param pageOffsetY:num
 * @text Offset Y
 * @parent PageButtons
 * @desc Offsets the page buttons y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param Parameters
 * @text Parameter Display
 *
 * @param buffValueFmt:str
 * @text Increased Value
 * @parent Parameters
 * @desc How are increased parameter values displayed?
 * %1 - Parameter Value
 * @default ▲%1
 *
 * @param debuffValueFmt:str
 * @text Decreased Value
 * @parent Parameters
 * @desc How are increased parameter values displayed?
 * %1 - Parameter Value
 * @default ▼%1
 *
 * @param States
 * @text States Display
 *
 * @param statesMaxWidth:num
 * @text Max Width
 * @parent States
 * @desc Maximum width of the states list display.
 * @default 384
 *
 * @param drawStates:eval
 * @text List States?
 * @parent States
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Lists states in the states list display?
 * @default true
 *
 * @param drawBuffs:eval
 * @text List Buffs?
 * @parent States
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Lists buffs in the states list display?
 * @default true
 *
 * @param drawDebuffs:eval
 * @text List Debuffs?
 * @parent States
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Lists debuffs in the states list display?
 * @default true
 *
 * @param BuffsDebuffs
 * @text Buffs/Debuffs Display
 * @parent States
 *
 * @param buffNameFmt:str
 * @text Buff Name Format
 * @parent BuffsDebuffs
 * @desc Text format used to represent buffs.
 * %1 - Parameter Name
 * @default %1▲
 *
 * @param debuffNameFmt:str
 * @text Debuff Name Format
 * @parent BuffsDebuffs
 * @desc Text format used to represent debuffs.
 * %1 - Parameter Name
 * @default %1▼
 *
 * @param NormalState
 * @text Normal State
 * @parent States
 *
 * @param normalIcon:num
 * @text Normal Icon
 * @parent NormalState
 * @desc Icon used to represent normal state (unaffected by states, buffs, or debuffs).
 * @default 84
 *
 * @param normalText:str
 * @text Normal Text
 * @parent NormalState
 * @desc Text used to represent normal state (unaffected by states, buffs, or debuffs).
 * @default Normal
 *
 * @param HelpDesc
 * @text Help Descriptions
 *
 * @param stateHelpFmt:json
 * @text State Help Format
 * @parent HelpDesc
 * @type note
 * @desc Text format used for state help descriptions
 * %1 - Description; %2 - Turns/Actions Remaining
 * @default "%1 %2"
 *
 * @param buffHelpFmt:json
 * @text Buff Help Format
 * @parent HelpDesc
 * @type note
 * @desc Text format used for Buff help descriptions
 * %1 - Param; %2 - Percent; %3 - Color; %4 - Turns
 * @default "Increases %1 to %3%2\\C[0]. %4"
 *
 * @param debuffHelpFmt:json
 * @text Debuff Help Format
 * @parent HelpDesc
 * @type note
 * @desc Text format used for Debuff help descriptions
 * %1 - Param; %2 - Percent; %3 - Color; %4 - Turns
 * @default "Decreases %1 to %3%2\\C[0]. %4"
 *
 * @param normalHelp:json
 * @text Normal State
 * @parent HelpDesc
 * @type note
 * @desc Help description used to explain normal state (unaffected by states, buffs, or debuffs).
 * @default "Status is currently normal."
 *
 * @param TurnHelpDesc
 * @text Turns/Actions Left
 * @parent HelpDesc
 *
 * @param actionsFmt:str
 * @text Actions Format
 * @parent TurnHelpDesc
 * @desc Text format used to represent actions remaining.
 * %1 - Actions; %2 - Color
 * @default \C[6](Actions %2%1\C[6])\C[0]
 *
 * @param TurnsFmt:str
 * @text Turns Format
 * @parent TurnHelpDesc
 * @desc Text format used to represent turns remaining.
 * %1 - Turns; %2 - Color
 * @default \C[5](Turns %2%1\C[5])\C[0]
 *
 * @param passiveText:str
 * @text Passive Text
 * @parent TurnHelpDesc
 * @desc Text used to represent a passive.
 * @default \C[4](Passive)\C[0]
 *
 * @param Window
 * @text Window Settings
 *
 * @param StatusWindow_BgType:num
 * @text Background Type
 * @parent Window
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for this window.
 * @default 0
 *
 * @param StatusWindow_DrawJS:func
 * @text JS: Draw Data
 * @parent Window
 * @type note
 * @desc Code used to draw battler data.
 * @default "{ // Draw Face and Simple Status\n    const x = this.colSpacing() / 2;\n    const h = ImageManager.faceHeight;\n    const y = h / 2 - this.lineHeight() * 1.5;\n    this.drawActorGraphic(this._battler, x + 1, 0, ImageManager.faceWidth, h);\n    this.drawActorSimpleStatus(this._battler, x + 180, y);\n}\n{ // Draw Actor Parameters\n    let maxWidth = this.drawingAreaWidth();\n    let x1 = 0;\n    let x2 = Math.ceil(this.drawingAreaWidth() / 2);\n\n    let counter = 0;\n    const params = this.displayedParams();\n\n    let px = x1;\n    const availableHeight = this.innerHeight - ImageManager.faceHeight;\n    const paramHeight = Math.ceil(params.length / 2) * this.lineHeight();\n    let py = Math.ceil((availableHeight - paramHeight) / 2) + ImageManager.faceHeight;\n    let pw = Math.floor(maxWidth / 2);\n\n    if (this._statesWindow.y !== 0) {\n        this._statesWindow.y = py;\n    }\n\n    for (const param of params) {\n        this.drawDarkRect(px, py, pw, this.lineHeight());\n        this.drawParamData(param, px, py, pw);\n        counter++;\n        if (counter % 2 === 0) {\n            px = x1;\n            py += this.lineHeight();\n        } else {\n            px = x2;\n        }\n    }\n}"
 *
 * @param StatusWindow_RectJS:func
 * @text JS: X, Y, W, H
 * @parent Window
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const wx = Graphics.boxWidth > 1000 ? 120 : 0;\nconst wy = this._helpWindow.y + this._helpWindow.height;\nconst ww = Graphics.boxWidth - (wx * 2);\nconst wh = Graphics.boxHeight - wy - this.windowAreaHeight();\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 */
/* ----------------------------------------------------------------------------
 * Multi-Target Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~MultiTarget:
 *
 * @param Properties
 * 
 * @param WindowWidth:num
 * @text Window Width
 * @parent Properties
 * @type number
 * @min 1
 * @desc What is the width used for the Multi-Target Window?
 * @default 280
 *
 * @param BgType:num
 * @text Background Type
 * @parent Properties
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for these windows.
 * @default 2
 *
 * @param ShowButton:eval
 * @text Show Button
 * @parent Properties
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows the keyboard/controller button to press?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @param Vocab
 *
 * @param AllActorsText:str
 * @text All Actors
 * @parent Vocab
 * @desc What is the text used for the "All Actors" button?
 * @default All Allies
 *
 * @param AllEnemiesText:str
 * @text All Enemies
 * @parent Vocab
 * @desc What is the text used for the "All Enemies" button?
 * @default All Enemies
 * 
 * @param Offsets
 * 
 * @param ActorOffsets
 * @text Actor Offsets
 * @parent Offsets
 *
 * @param ActorOffsetX:num
 * @text Offset X
 * @parent ActorOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param ActorOffsetY:num
 * @text Offset Y
 * @parent ActorOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @param EnemyOffsets
 * @text Enemy Offsets
 * @parent Offsets
 *
 * @param EnemyOffsetX:num
 * @text Offset X
 * @parent EnemyOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param EnemyOffsetY:num
 * @text Offset Y
 * @parent EnemyOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Combo Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ComboWindow:
 *
 * @param General
 * @text General Settings
 *
 * @param Enable:eval
 * @text Enable?
 * @parent General
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Add the Combo Window to show in battle?
 * @default true
 *
 * @param Appearance
 * @text Appearance Settings
 *
 * @param CustomFontFace:str
 * @text Custom Font
 * @parent Appearance
 * @desc Insert the custom font face name here.
 * Use VisuMZ_1_MessageCore to register new fonts.
 * @default Arial
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent Appearance
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for this window?
 * @default left
 *
 * @param ComboWindow_DrawJS:func
 * @text JS: Draw Data
 * @parent Appearance
 * @type note
 * @desc Code used to draw the data in this window.
 * @default ""
 * 
 * @param Vocab
 * @text Vocabulary
 *
 * @param hitsDmgFmt:str
 * @text Damage Combo Format
 * @parent Vocab
 * @desc Text format used to display total hits for damage.
 * %1 - Total Hits
 * @default \C[6]%1\} \C[4]Hit Combo\C[0]\{
 *
 * @param hitsHealFmt:str
 * @text Healing Combo Format
 * @parent Vocab
 * @desc Text format used to display total hits for healing.
 * %1 - Total Hits
 * @default \C[6]%1\} \C[4]Heal Combo\C[0]\{
 *
 * @param totalDmgFmt:str
 * @text Damage Total Format
 * @parent Vocab
 * @desc Text format used to display total value for damage.
 * %1 - Total Damage
 * @default \}\C[21]Total Damage: \{\C[0]%1
 *
 * @param totalHealFmt:str
 * @text Healing Total Format
 * @parent Vocab
 * @desc Text format used to display total value for healing.
 * %1 - Total Healing
 * @default \}\C[21]Total Healing: \{\C[24]+%1\C[0]
 *
 * @param Position
 * @text Position Settings
 *
 * @param fadeShiftX:num
 * @text Fade Shift X
 * @parent Position
 * @desc Shifts the windows x position when fading.
 * Negative: left. Positive: right.
 * @default -2
 *
 * @param fadeShiftY:num
 * @text Fade Shift Y
 * @parent Position
 * @desc Shifts the windows y position when fading.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param PosOffsetX:num
 * @text Offset X
 * @parent Position
 * @desc Offsets the windows x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param PosOffsetY:num
 * @text Offset Y
 * @parent Position
 * @desc Offsets the windows y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param ComboWindow_RectJS:func
 * @text JS: X, Y, W, H
 * @parent Position
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const ww = Math.ceil(Graphics.width / 4);\nconst wh = this.calcWindowHeight(2, true);\nconst wx = 0 + this.comboWindowOffsetX();\nconst wy = Math.round(Graphics.boxHeight * 1 / 3) + this.comboWindowOffsetY();\nreturn new Rectangle(wx, wy, ww, wh);"
 * 
 * @param Update
 * @text Updating Settings
 *
 * @param updateDuration:num
 * @text Number Roll Duration
 * @parent Update
 * @type number
 * @min 1
 * @desc Frame duration to roll damage numbers.
 * 60 frames = 1 second.
 * @default 20
 *
 * @param minimumStayDuration:num
 * @text Minimum Stay Duration
 * @parent Update
 * @type number
 * @desc Frame duration to stay visible minimum.
 * 60 frames = 1 second.
 * @default 40
 *
 * @param minimumHits:num
 * @text Minimum Hit Visible
 * @parent Update
 * @type number
 * @min 1
 * @desc Minimum hits before combo window becomes visible?
 * @default 1
 *
 * @param opacitySpeed:num
 * @text Opacity Speed
 * @parent Update
 * @type number
 * @min 1
 * @desc Opacity speed when fading in/out.
 * @default 16
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Actor:
 *
 * @param Flinch
 *
 * @param FlinchDistanceX:num
 * @text Flinch Distance X
 * @parent Flinch
 * @desc The normal X distance when flinching.
 * @default 12
 *
 * @param FlinchDistanceY:num
 * @text Flinch Distance Y
 * @parent Flinch
 * @desc The normal Y distance when flinching.
 * @default 0
 *
 * @param FlinchDuration:num
 * @text Flinch Duration
 * @parent Flinch
 * @desc The number of frames for a flinch to complete.
 * @default 6
 *
 * @param ShakeFlinch:eval
 * @text Shake Flinch
 * @parent Flinch
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Perform a shake flinch when taking damage?
 * @default false
 *
 * @param ShakeFlinchDuration:num
 * @text Max Duration
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc Maximum duration a shake flinch can have.
 * This is reduced relative to the amount of damage taken.
 * @default 24
 *
 * @param ShakeFlinchPower:num
 * @text Max Power
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc The power rating of a shake flinch at full damage.
 * This is reduced relative to the amount of damage taken.
 * @default 48
 *
 * @param FvBattlers
 * @text Frontview Battlers
 * 
 * @param FvPortraitAni
 * @text Portrait Animations
 * @parent FvBattlers
 *
 * @param FvAniEachTarget:eval
 * @text Each Target
 * @parent FvPortraitAni
 * @type boolean
 * @on On Top
 * @off Behind
 * @desc Place animations on top for "Each Target" display types?
 * Does not apply to MV animations.
 * @default true
 *
 * @param FvAniCenterAll:eval
 * @text Center of All
 * @parent FvPortraitAni
 * @type boolean
 * @on On Top
 * @off Behind
 * @desc Place animations on top for "Center of All" display types?
 * Does not apply to MV animations.
 * @default true
 *
 * @param FvAniCenterScreen:eval
 * @text Center of Screen
 * @parent FvPortraitAni
 * @type boolean
 * @on On Top
 * @off Behind
 * @desc Place animations on top for "Center of Screen" display types?
 * Does not apply to MV animations.
 * @default false
 *
 * @param SvBattlers
 * @text Sideview Battlers
 * 
 * @param SvAnchor
 * @text Anchor
 * @parent SvBattlers
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvAnchor
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvAnchor
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param ChantStyle:eval
 * @text Chant Style
 * @parent SvBattlers
 * @type boolean
 * @on Magical Hit Type
 * @off Magical Skill Type
 * @desc What determines the chant motion?
 * Hit type or skill type?
 * @default true
 *
 * @param MotionSpeed:num
 * @text Motion Speed
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc The number of frames in between each motion.
 * @default 12
 * 
 * @param SvPosition
 * @text Position
 * @parent SvBattlers
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent SvPosition
 * @desc Offsets X position where actor is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent SvPosition
 * @desc Offsets Y position where actor is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PrioritySortActive:eval
 * @text Priority: Active
 * @parent SvBattlers
 * @type boolean
 * @on Active Actor over All Else
 * @off Active Actor is Sorted Normally
 * @desc Place the active actor on top of actor and enemy sprites.
 * @default false
 *
 * @param PrioritySortActors:eval
 * @text Priority: Actors
 * @parent SvBattlers
 * @type boolean
 * @on Actors over Enemies
 * @off Sort by Y Position
 * @desc Prioritize actors over enemies when placing sprites on top
 * of each other.
 * @default true
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 * 
 * @param SvStateOverlay
 * @text State Overlay
 * @parent SvBattlers
 *
 * @param StateOverlayOffsetX:num
 * @text Offset: X
 * @parent SvStateOverlay
 * @desc Offsets X position for state overlay on actor.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param StateOverlayOffsetY:num
 * @text Offset: Y
 * @parent SvStateOverlay
 * @desc Offsets Y position for state overlay on actor.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent SvBattlers
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default false
 *
 * @param HomePosJS:func
 * @text JS: Home Position
 * @parent SvBattlers
 * @type note
 * @desc Code used to calculate the home position of actors.
 * @default "// Declare Constants\nconst sprite = this;\nconst actor = this._actor;\nconst index = arguments[0];\n\n// Make Calculations\nlet x = Math.round((Graphics.width / 2) + 192)\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\nx += index * 32;\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\ny += index * 48;\n\n// Home Position Offsets\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\+\\-]\\d+),[ ]([\\+\\-]\\d+)>/i;\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\nx = xOffsets.reduce((r, offset) => r + offset, x);\ny = yOffsets.reduce((r, offset) => r + offset, y);\n\n// Set Home Position\nthis.setHome(x, y);"
 *
 */
/* ----------------------------------------------------------------------------
 * Enemy Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Enemy:
 *
 * @param Visual
 *
 * @param AttackAnimation:num
 * @text Attack Animation
 * @parent Visual
 * @type animation
 * @desc Default attack animation used for enemies.
 * Use <Attack Animation: x> for custom animations.
 * @default 1
 *
 * @param EmergeText:eval
 * @text Emerge Text
 * @parent Visual
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide the 'Enemy emerges!' text at the start of battle.
 * @default false
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent Visual
 * @desc Offsets X position where enemy is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent Visual
 * @desc Offsets Y position where enemy is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent Visual
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default true
 *
 * @param SelectWindow
 * @text Select Window
 *
 * @param LastSelected:eval
 * @text Any: Last Selected
 * @parent SelectWindow
 * @type boolean
 * @on Last Selected
 * @off FV/SV Priority
 * @desc Prioritize last selected enemy over front view or sideview settings?
 * @default true
 *
 * @param FrontViewSelect:eval
 * @text FV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using frontview, auto select the enemy furthest right.
 * @default false
 *
 * @param SideviewSelect:eval
 * @text SV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using sideview, auto select the enemy furthest right.
 * @default true
 * 
 * @param Name
 *
 * @param NameLegacy:eval
 * @text Legacy Option
 * @parent Name
 * @type boolean
 * @on Legacy Version
 * @off New Version (Sprite)
 * @desc Use the legacy version (window) or new version (sprite).
 * WARNING: Legacy version is no longer supported for bugs.
 * @default false
 *
 * @param NameFontSize:num
 * @text Font Size
 * @parent Name
 * @desc Font size used for enemy names.
 * @default 22
 * 
 * @param NamePosition
 * @text Name Position
 * @parent Name
 *
 * @param NameOffsetX:num
 * @text Offset X
 * @parent NamePosition
 * @desc Offset the enemy name's X position by this much.
 * Negative goes left. Positive goes right.
 * @default 0
 *
 * @param NameOffsetY:num
 * @text Offset Y
 * @parent NamePosition
 * @desc Offset the enemy name's Y position by this much.
 * Negative goes up. Positive goes down.
 * @default 0
 *
 * @param NameAttachStateIcon:eval
 * @text Attach States
 * @parent Name
 * @type boolean
 * @on Attach
 * @off Normal Position
 * @desc Attach the enemy's state icon to the enemy name?
 * @default false
 *
 * @param AttachStateOffsetX:num
 * @text Attach: Offset X
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's X position by?
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param AttachStateOffsetY:num
 * @text Attach: Offset Y
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's Y position by?
 * Negative goes up. Positive goes down.
 * @default +0
 * 
 * @param NameVisibility
 * @text Name Visibility
 * @parent Name
 *
 * @param NameAlwaysHidden:eval
 * @text Always Hidden
 * @parent NameVisibility
 * @type boolean
 * @on Always Hidden
 * @off No Priority
 * @desc Determines if the enemy name will always be visible.
 * Highest priority.
 * @default false
 *
 * @param NameAlwaysVisible:eval
 * @text Always Visible
 * @parent NameVisibility
 * @type boolean
 * @on Always Visible
 * @off Hide when Unselected
 * @desc Determines if the enemy name will always be visible.
 * Medium priority.
 * @default false
 *
 * @param NameAsTarget:eval
 * @text As Target
 * @parent NameVisibility
 * @type boolean
 * @on Visible As Target
 * @off No Priority
 * @desc Shows enemy name when enemy is a target.
 * Medium priority.
 * @default true
 *
 * @param NameAlwaysSelectOnly:eval
 * @text By Selection?
 * @parent NameVisibility
 * @type boolean
 * @on Visible when Selected
 * @off Visible when Targeting
 * @desc Determines the conditions for enemy name visibility.
 * Lowest priority.
 * @default false
 *
 * @param NameDamageVisibility:num
 * @text Temporary Visibility
 * @parent NameVisibility
 * @type number
 * @desc Number of frames enemy's name temporarily visible after
 * taking an action effect in battle. 60 frames = 1 second.
 * @default 0
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AllowCollapse:eval
 * @text Allow Collapse
 * @parent SvBattlers
 * @type boolean
 * @on Allow
 * @off Don't
 * @desc Causes defeated enemies with SV Battler graphics
 * to "fade away" when defeated?
 * @default false
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param MotionIdle:str
 * @text Motion: Idle
 * @parent SvBattlers
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Sets default idle animation used by Sideview Battlers.
 * @default walk
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param Width:num
 * @text Size: Width
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default width for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param Height:num
 * @text Size: Height
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default height for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param WtypeId:num
 * @text Weapon Type
 * @parent SvBattlers
 * @type number
 * @min 0
 * @desc Sets default weapon type used by Sideview Battlers.
 * Use 0 for Bare Hands.
 * @default 0
 *
 * @param Aspect
 * @text Aspect Defaults
 *
 * @param AspectNameFmt:str
 * @text Name Format
 * @parent Aspect
 * @desc Default name aspect format.
 * %1 - Original Enemy Name
 * @default %1 Aspect
 *
 * @param AspectColor:str
 * @text Name Color
 * @parent Aspect
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default 2
 *
 * @param AspectIcon:num
 * @text Icon
 * @parent Aspect
 * @desc Default icon used for aspect.
 * Use <Aspect Icon: x> to change icon.
 * @default 26
 *
 */
/* ----------------------------------------------------------------------------
 * HP Gauge Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~HpGauge:
 *
 * @param Display
 * @text Show Gauges For
 *
 * @param ShowActorGauge:eval
 * @text Actors
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the actor sprites' heads?
 * Requires SV Actors to be visible.
 * @default true
 *
 * @param ShowEnemyGauge:eval
 * @text Enemies
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the enemy sprites' heads?
 * Can be bypassed with <Hide HP Gauge> notetag.
 * @default true
 *
 * @param RequiresDefeat:eval
 * @text Requires Defeat?
 * @parent ShowEnemyGauge:eval
 * @type boolean
 * @on Require Defeat First
 * @off No Requirement
 * @desc Requires defeating the enemy once to show HP Gauge?
 * Can be bypassed with <Show HP Gauge> notetag.
 * @default true
 *
 * @param BTestBypass:eval
 * @text Battle Test Bypass?
 * @parent RequiresDefeat:eval
 * @type boolean
 * @on Bypass
 * @off Don't Bypass
 * @desc Bypass the defeat requirement in battle test?
 * @default true
 *
 * @param Settings
 *
 * @param AniDuration:num
 * @text Animation Duration
 * @parent Settings
 * @type number
 * @min 1
 * @desc How many frames should gauges animate themselves?
 * Default: 20 frames.
 * @default 20
 *
 * @param AnchorX:num
 * @text Anchor X
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor X to be?
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor Y
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor Y to be?
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param Scale:num
 * @text Scale
 * @parent Settings
 * @desc How large/small do you want the HP Gauge to be scaled?
 * @default 0.5
 *
 * @param OffsetX:num
 * @text Offset X
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's X by?
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset Y
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's Y by?
 * @default -3
 *
 * @param Options
 * @text Options
 *
 * @param AddHpGaugeOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the 'Show HP Gauge' option to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param Name:str
 * @text Option Name
 * @parent Options
 * @desc Command name of the option.
 * @default Show HP Gauge
 *
 */
/* ----------------------------------------------------------------------------
 * Action Sequence Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActionSequence:
 *
 * @param AutoSequences
 * @text Automatic Sequences
 *
 * @param AutoMeleeSolo:eval
 * @text Melee Single Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, single target actions?
 * @default true
 *
 * @param AutoMeleeAoE:eval
 * @text Melee Multi Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, multi-target actions?
 * @default true
 *
 * @param QoL
 * @text Quality of Life
 *
 * @param AutoNotetag:eval
 * @text Auto Notetag
 * @parent QoL
 * @type boolean
 * @on Automatic
 * @off Manual
 * @desc Automatically apply the <Custom Action Sequence> notetag
 * effect to any item or skill that has a Common Event?
 * @default false
 *
 * @param CastAnimations
 * @text Cast Animations
 *
 * @param CastCertain:num
 * @text Certain Hit
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Certain Hit skills.
 * @default 120
 *
 * @param CastPhysical:num
 * @text Physical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Physical skills.
 * @default 52
 *
 * @param CastMagical:num
 * @text Magical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Magical skills.
 * @default 51
 *
 * @param CounterReflection
 * @text Counter/Reflect
 *
 * @param CounterPlayback:eval
 * @text Counter Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param ReflectAnimation:num
 * @text Reflect Animation
 * @parent CounterReflection
 * @type animation
 * @desc Animation played when an action is reflected.
 * @default 53
 *
 * @param ReflectPlayback:eval
 * @text Reflect Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param Stepping
 *
 * @param MeleeDistance:num
 * @text Melee Distance
 * @parent Stepping
 * @desc Minimum distance in pixels for Movement Action Sequences.
 * @default 24
 *
 * @param StepDistanceX:num
 * @text Step Distance X
 * @parent Stepping
 * @desc The normal X distance when stepping forward.
 * @default 48
 *
 * @param StepDistanceY:num
 * @text Step Distance Y
 * @parent Stepping
 * @desc The normal Y distance when stepping forward.
 * @default 0
 *
 * @param StepDuration:num
 * @text Step Duration
 * @parent Stepping
 * @desc The number of frames for a stepping action to complete.
 * @default 12
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Start Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileStart:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Start from battler target(s)
 * @value target
 * @option Point - Start from a point on the screen
 * @value point
 * @desc Select where the projectile should start from.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to start the projectile from.
 * @default ["user"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Create one projectile at the center of the targets?
 * Or create a projectile for each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile from.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Goal Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileGoal:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Goal is battler target(s)
 * @value target
 * @option Point - Goal is a point on the screen
 * @value point
 * @desc Select where the projectile should go to.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for projectile to go to.
 * @default ["all targets"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Set goal in the center of targets?
 * Or create a projectile to go to each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile at.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Animation Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExAni:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the projectile's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 * 
 * @param Emulate
 * @text Effect Emulation
 * 
 * @param EmulateActionEffect:eval
 * @text Action Effect?
 * @parent Emulate
 * @type boolean
 * @on Emulate
 * @off Don't Emulate
 * @desc Emulate current Action Effect when projectile reaches
 * target? Only works with start/goal targets.
 * @default false
 * 
 * @param EmulateItemEffect:eval
 * @text Item Effect ID
 * @parent Emulate
 * @type item
 * @desc Emulate an Item Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 * 
 * @param EmulateSkillEffect:eval
 * @text Skill Effect ID
 * @parent Emulate
 * @type skill
 * @desc Emulate a Skill Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 *
 * @param OnceParallel:num
 * @text Common Event ID
 * @parent Emulate
 * @type common_event
 * @desc Plays a Once Parallel Common Event upon reaching target.
 * Use 0 to not use. Works regardless of start/goal targets.
 * @default 0
 * 
 * @param EndAnimationID:eval
 * @text End Animation ID
 * @type animation
 * @desc Plays an animation when projectile reaches target.
 * Use 0 to not use. Requires ActSeqProjectiles v1.09+.
 * @default 0
 *
 * @param EndAnimationMirror:eval
 * @text Mirror Animation
 * @parent EndAnimationID:eval
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the effect animation?
 * Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * @default false
 *
 * @param EndAnimationMute:eval
 * @text Mute Animation
 * @parent EndAnimationID:eval
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the effect animation?
 * Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExtra:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the projectile's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param BlendMode:num
 * @text Blend Mode
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the projectile?
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Hue:eval
 * @text Hue
 * @parent Settings
 * @desc Adjust the hue of the projectile.
 * Insert a number between 0 and 360.
 * @default 0
 * 
 * @param Scale:eval
 * @text Scale
 * @parent Settings
 * @desc Adjust the size scaling of the projectile.
 * Use decimals for exact control.
 * @default 1.0
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 * 
 * @param Emulate
 * @text Effect Emulation
 * 
 * @param EmulateActionEffect:eval
 * @text Action Effect?
 * @parent Emulate
 * @type boolean
 * @on Emulate
 * @off Don't Emulate
 * @desc Emulate current Action Effect when projectile reaches
 * target? Only works with start/goal targets.
 * @default false
 * 
 * @param EmulateItemEffect:eval
 * @text Item Effect ID
 * @parent Emulate
 * @type item
 * @desc Emulate an Item Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 * 
 * @param EmulateSkillEffect:eval
 * @text Skill Effect ID
 * @parent Emulate
 * @type skill
 * @desc Emulate a Skill Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 *
 * @param OnceParallel:num
 * @text Common Event ID
 * @parent Emulate
 * @type common_event
 * @desc Plays a Once Parallel Common Event upon reaching target.
 * Use 0 to not use. Works regardless of start/goal targets.
 * @default 0
 * 
 * @param EndAnimationID:eval
 * @text End Animation ID
 * @type animation
 * @desc Plays an animation when projectile reaches target.
 * Use 0 to not use. Requires ActSeqProjectiles v1.09+.
 * @default 0
 *
 * @param EndAnimationMirror:eval
 * @text Mirror Animation
 * @parent EndAnimationID:eval
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the effect animation?
 * Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * @default false
 *
 * @param EndAnimationMute:eval
 * @text Mute Animation
 * @parent EndAnimationID:eval
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the effect animation?
 * Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Visual Cutin Effect Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~VisualCutinEffect:
 *
 * @param Transition
 * 
 * @param enterDuration:num
 * @text Entrance Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully enter?
 * Used when a Visual Cutin Effect starts.
 * @default 12
 * 
 * @param exitDuration:num
 * @text Exit Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully exit?
 * Used when a Visual Cutin Effect ends.
 * @default 12
 *
 * @param Cutin
 * @text Cutin Settings
 *
 * @param bgShow:eval
 * @text Show BG Color?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Add a background color for this cutin?
 * Background colors appear behind the parallax.
 * @default true
 *
 * @param outlineShow:eval
 * @text Show Outline?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show the cutin outline?
 * @default true
 *
 * @param Portrait
 * @text Portrait Settings
 *
 * @param PortraitBase
 * @text Base Properties
 * @parent Portrait
 * 
 * @param portraitAnchorX:num
 * @text Anchor X
 * @parent PortraitBase
 * @desc Determines the sprite anchor X alignment.
 * 0.0: Left, 0.5: Center, 1.0: Right.
 * @default 0.5
 * 
 * @param portraitAnchorY:num
 * @text Anchor Y
 * @parent PortraitBase
 * @desc Determines the sprite anchor Y alignment.
 * 0.0: Top, 0.5: Middle, 1.0: Bottom.
 * @default 0.5
 *
 * @param portraitHue:num
 * @text Hue
 * @parent PortraitBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's portrait hue?
 * @default 0
 * 
 * @param portraitOpacity:num
 * @text Opacity
 * @parent PortraitBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's portrait?
 * @default 255
 * 
 * @param portraitOffsetX:num
 * @text Offset X
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's X location.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @param portraitOffsetY:num
 * @text Offset Y
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's Y location.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param PortraitEnter
 * @text Entrance Properties
 * @parent Portrait
 * 
 * @param portraitEnterX:num
 * @text Entrance X
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's X entrance.
 * Negative: from left. Positive: from right.
 * @default +0
 * 
 * @param portraitEnterY:num
 * @text Entrance Y
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's Y entrance.
 * Negative: from up. Positive: from down.
 * @default +0
 *
 * @param portraitEnterEasingType:str
 * @text Entrance Easing
 * @parent PortraitEnter
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitExit
 * @text Exit Properties
 * @parent Portrait
 * 
 * @param portraitExitX:num
 * @text Exit X
 * @parent PortraitExit
 * @desc Sets the cutin portrait's X exit.
 * Negative: to left. Positive: to right.
 * @default +0
 * 
 * @param portraitExitY:num
 * @text Exit Y
 * @parent PortraitExit
 * @desc Sets the cutin portrait's Y exit.
 * Negative: to up. Positive: to down.
 * @default +0
 *
 * @param portraitExitEasingType:str
 * @text Exit Easing
 * @parent PortraitExit
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitFlip
 * @text Flip Properties
 * @parent Portrait
 *
 * @param portraitFlipHorz:eval
 * @text Flip Horizontally?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait horizontally?
 * @default false
 *
 * @param portraitFlipVert:eval
 * @text Flip Vertically?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait vertically?
 * @default false
 *
 * @param PortraitScale
 * @text Scaling Properties
 * @parent Portrait
 * 
 * @param portraitForcedScale:num
 * @text Forced Scaling
 * @parent PortraitScale
 * @desc Do you want to force a scaling ratio?
 * Leave as 0 for none. Disables "Fit to Scale?".
 * @default 0.0
 *
 * @param portraitScaleToFit:eval
 * @text Fit to Scale?
 * @parent PortraitScale
 * @type boolean
 * @on Fit to Scale
 * @off Don't Scale
 * @desc Scale the cutin portrait to fit the cutin style?
 * Cannot be used with "Forced Scaling".
 * @default true
 *
 * @param portraitScaleMax:eval
 * @text Scale Max?
 * @parent portraitScaleToFit:eval
 * @type boolean
 * @on Scale Maximum
 * @off Scale Minimum
 * @desc Scale the cutin portrait to the maximum fit or
 * scale the cutin portrait to the minimum fit.
 * @default false
 *
 * @param PortraitAni
 * @text Animated Portraits
 * @parent Portrait
 *
 * @param animatedPortraitLooping:eval
 * @text Loop?
 * @parent PortraitAni
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Will loop back to beginning once ended.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default true
 *
 * @param animatedPortraitWaitFrames:num
 * @text Wait Frames
 * @parent PortraitAni
 * @type number
 * @min 1
 * @desc Frames to wait before moving to next cell.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default 4
 *
 * @param Parallax
 * @text Parallax Settings
 *
 * @param ParallaxBase
 * @text Base Settings
 * @parent Parallax
 *
 * @param parallaxBlendMode:num
 * @text Blend Mode
 * @parent ParallaxBase
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the cutin?
 * @default 0
 *
 * @param parallaxHue:num
 * @text Hue
 * @parent ParallaxBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's parallax hue?
 * @default 0
 *
 * @param parallaxHueEnemyModifier:num
 * @text Enemy Modifier
 * @parent parallaxHue:num
 * @desc Adjust the hue value by this if the cutin target is an enemy.
 * @default +0
 * 
 * @param parallaxOpacity:num
 * @text Opacity
 * @parent ParallaxBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's parallax?
 * @default 255
 *
 * @param ParallaxScroll
 * @text Scrolling Settings
 * @parent Parallax
 * 
 * @param parallaxOffsetX:num
 * @text Offset X
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's X location.
 * Negative: left. Positive: right.
 * @default +0.0
 * 
 * @param parallaxOffsetY:num
 * @text Offset Y
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's Y location.
 * Negative: up. Positive: down.
 * @default +0.0
 * 
 * @param parallaxScrollX:num
 * @text Scroll X
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll horizontally?
 * Negative: Scroll to right. Positive: Scroll to left.
 * @default +0.0
 *
 * @param parallaxScrollXinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollX:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the X scroll direction if the cutin target is an enemy?
 * @default false
 * 
 * @param parallaxScrollY:num
 * @text Scroll Y
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll vertically?
 * Negative: Scroll to down. Positive: Scroll to up.
 * @default +0.0
 *
 * @param parallaxScrollYinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollY:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the Y scroll direction if the cutin target is an enemy?
 * @default false
 *
 */
//=============================================================================

const _0x23168f=_0x56df;(function(_0xc76b61,_0x4e94f9){const _0x134a0e=_0x56df,_0x4f689f=_0xc76b61();while(!![]){try{const _0x2f6474=parseInt(_0x134a0e(0x4d3))/0x1+-parseInt(_0x134a0e(0xbf8))/0x2*(-parseInt(_0x134a0e(0xa16))/0x3)+parseInt(_0x134a0e(0x8e8))/0x4*(parseInt(_0x134a0e(0xb14))/0x5)+-parseInt(_0x134a0e(0x9b8))/0x6*(-parseInt(_0x134a0e(0x518))/0x7)+parseInt(_0x134a0e(0x9a1))/0x8+-parseInt(_0x134a0e(0xc4))/0x9*(parseInt(_0x134a0e(0x3cc))/0xa)+-parseInt(_0x134a0e(0x276))/0xb;if(_0x2f6474===_0x4e94f9)break;else _0x4f689f['push'](_0x4f689f['shift']());}catch(_0x5957b4){_0x4f689f['push'](_0x4f689f['shift']());}}}(_0x1f1e,0x314ef));var label=_0x23168f(0x895),tier=tier||0x0,dependencies=[],pluginData=$plugins['filter'](function(_0xe08e53){return _0xe08e53['status']&&_0xe08e53['description']['includes']('['+label+']');})[0x0];VisuMZ[label][_0x23168f(0xbac)]=VisuMZ[label]['Settings']||{},VisuMZ['ConvertParams']=function(_0x13a000,_0x48dccd){const _0x110c20=_0x23168f;for(const _0xb2fded in _0x48dccd){if(_0xb2fded[_0x110c20(0x26e)](/(.*):(.*)/i)){const _0x3ed9fc=String(RegExp['$1']),_0x1bfc38=String(RegExp['$2'])[_0x110c20(0x1ef)]()['trim']();let _0x48924e,_0x459d25,_0x556529;switch(_0x1bfc38){case _0x110c20(0xa12):_0x48924e=_0x48dccd[_0xb2fded]!==''?Number(_0x48dccd[_0xb2fded]):0x0;break;case _0x110c20(0x720):_0x459d25=_0x48dccd[_0xb2fded]!==''?JSON[_0x110c20(0x1c2)](_0x48dccd[_0xb2fded]):[],_0x48924e=_0x459d25['map'](_0x34b3cc=>Number(_0x34b3cc));break;case _0x110c20(0x164):_0x48924e=_0x48dccd[_0xb2fded]!==''?eval(_0x48dccd[_0xb2fded]):null;break;case'ARRAYEVAL':_0x459d25=_0x48dccd[_0xb2fded]!==''?JSON[_0x110c20(0x1c2)](_0x48dccd[_0xb2fded]):[],_0x48924e=_0x459d25[_0x110c20(0x37f)](_0x48bd53=>eval(_0x48bd53));break;case'JSON':_0x48924e=_0x48dccd[_0xb2fded]!==''?JSON[_0x110c20(0x1c2)](_0x48dccd[_0xb2fded]):'';break;case _0x110c20(0x499):_0x459d25=_0x48dccd[_0xb2fded]!==''?JSON[_0x110c20(0x1c2)](_0x48dccd[_0xb2fded]):[],_0x48924e=_0x459d25[_0x110c20(0x37f)](_0x1e56db=>JSON[_0x110c20(0x1c2)](_0x1e56db));break;case _0x110c20(0x212):_0x48924e=_0x48dccd[_0xb2fded]!==''?new Function(JSON[_0x110c20(0x1c2)](_0x48dccd[_0xb2fded])):new Function(_0x110c20(0x603));break;case _0x110c20(0xb99):_0x459d25=_0x48dccd[_0xb2fded]!==''?JSON[_0x110c20(0x1c2)](_0x48dccd[_0xb2fded]):[],_0x48924e=_0x459d25['map'](_0x1300ba=>new Function(JSON[_0x110c20(0x1c2)](_0x1300ba)));break;case _0x110c20(0x5b0):_0x48924e=_0x48dccd[_0xb2fded]!==''?String(_0x48dccd[_0xb2fded]):'';break;case _0x110c20(0x41f):_0x459d25=_0x48dccd[_0xb2fded]!==''?JSON['parse'](_0x48dccd[_0xb2fded]):[],_0x48924e=_0x459d25['map'](_0x156c02=>String(_0x156c02));break;case _0x110c20(0x94a):_0x556529=_0x48dccd[_0xb2fded]!==''?JSON['parse'](_0x48dccd[_0xb2fded]):{},_0x13a000[_0x3ed9fc]={},VisuMZ[_0x110c20(0x54f)](_0x13a000[_0x3ed9fc],_0x556529);continue;case _0x110c20(0x9dd):_0x459d25=_0x48dccd[_0xb2fded]!==''?JSON[_0x110c20(0x1c2)](_0x48dccd[_0xb2fded]):[],_0x48924e=_0x459d25[_0x110c20(0x37f)](_0x332791=>VisuMZ[_0x110c20(0x54f)]({},JSON[_0x110c20(0x1c2)](_0x332791)));break;default:continue;}_0x13a000[_0x3ed9fc]=_0x48924e;}}return _0x13a000;},(_0x20f894=>{const _0x1e8612=_0x23168f,_0x431a84=_0x20f894['name'];for(const _0x214336 of dependencies){if(!Imported[_0x214336]){alert(_0x1e8612(0x46d)[_0x1e8612(0x7d3)](_0x431a84,_0x214336)),SceneManager[_0x1e8612(0x46e)]();break;}}const _0x3134c4=_0x20f894['description'];if(_0x3134c4[_0x1e8612(0x26e)](/\[Version[ ](.*?)\]/i)){const _0x56bace=Number(RegExp['$1']);_0x56bace!==VisuMZ[label][_0x1e8612(0x82e)]&&(alert('%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.'['format'](_0x431a84,_0x56bace)),SceneManager[_0x1e8612(0x46e)]());}if(_0x3134c4[_0x1e8612(0x26e)](/\[Tier[ ](\d+)\]/i)){const _0x5b28df=Number(RegExp['$1']);_0x5b28df<tier?(alert(_0x1e8612(0x366)['format'](_0x431a84,_0x5b28df,tier)),SceneManager['exit']()):tier=Math[_0x1e8612(0x705)](_0x5b28df,tier);}VisuMZ[_0x1e8612(0x54f)](VisuMZ[label][_0x1e8612(0xbac)],_0x20f894[_0x1e8612(0x86a)]);})(pluginData),VisuMZ['CreateActionSequenceTargets']=function(_0x27122b){const _0x218952=_0x23168f;let _0x36520e=[];for(const _0x206645 of _0x27122b){_0x36520e=_0x36520e[_0x218952(0x23c)](VisuMZ[_0x218952(0x51e)](_0x206645));}return _0x36520e[_0x218952(0x239)](_0x3f4f8b=>_0x3f4f8b);},VisuMZ[_0x23168f(0x51e)]=function(_0x4ebf27){const _0x37854c=_0x23168f,_0x17bf37=BattleManager[_0x37854c(0x29e)]()['filter'](_0x55e533=>_0x55e533&&_0x55e533['isAppeared']()),_0x5581dc=BattleManager[_0x37854c(0x530)],_0x2b9c53=BattleManager['_target'],_0x192bbb=BattleManager[_0x37854c(0x51d)]?BattleManager[_0x37854c(0x51d)][_0x37854c(0x760)](0x0):_0x17bf37;_0x4ebf27=_0x4ebf27['toLowerCase']()['trim']();if(_0x4ebf27==='user')return[_0x5581dc];else{if(_0x4ebf27===_0x37854c(0x4e7))return[_0x2b9c53];else{if(_0x4ebf27==='prev\x20target'){if(_0x2b9c53){const _0x3abdd3=_0x192bbb[_0x37854c(0xb3c)](_0x2b9c53);return _0x3abdd3>=0x0?[_0x192bbb[_0x3abdd3-0x1]||_0x2b9c53]:[_0x2b9c53];}}else{if(_0x4ebf27===_0x37854c(0x734)){if(_0x2b9c53){const _0x25fb7d=_0x192bbb[_0x37854c(0xb3c)](_0x2b9c53);return _0x25fb7d>=0x0?[_0x192bbb[_0x25fb7d+0x1]||_0x2b9c53]:[_0x2b9c53];}}else{if(_0x4ebf27===_0x37854c(0x6e0))return _0x192bbb;else{if(_0x4ebf27===_0x37854c(0x262))return[_0x5581dc]['concat'](_0x192bbb);else{if(_0x4ebf27===_0x37854c(0x7c6))return _0x17bf37[_0x37854c(0x239)](_0x1043b1=>_0x1043b1!==_0x5581dc&&!_0x192bbb[_0x37854c(0x2d8)](_0x1043b1)&&_0x1043b1['notFocusValid']());else{if(_0x4ebf27===_0x37854c(0x440))return[VisuMZ[_0x37854c(0x2c3)]()];else{if(_0x4ebf27['match'](/SPECIAL (.*)>/i)){const _0x57577a=String(RegExp['$1'])[_0x37854c(0x221)](',')[_0x37854c(0x37f)](_0x2ab36d=>_0x2ab36d[_0x37854c(0xf4)]());return[VisuMZ[_0x37854c(0x94b)](_0x57577a)];}}}}}}}}}if(_0x5581dc){if(_0x4ebf27===_0x37854c(0x9cd))return _0x5581dc['friendsUnit']()[_0x37854c(0x2a6)]();else{if(_0x4ebf27===_0x37854c(0x5c9))return _0x5581dc[_0x37854c(0x337)]()[_0x37854c(0x2a6)]()['filter'](_0xc6d074=>_0xc6d074!==_0x5581dc);else{if(_0x4ebf27===_0x37854c(0x402))return _0x5581dc['friendsUnit']()[_0x37854c(0x2a6)]()[_0x37854c(0x239)](_0x2475d2=>_0x2475d2!==_0x2b9c53);else{if(_0x4ebf27===_0x37854c(0x446))return _0x5581dc[_0x37854c(0x337)]()[_0x37854c(0x4ed)]();else{if(_0x4ebf27[_0x37854c(0x26e)](/FRIEND INDEX (\d+)/i)){const _0x33df38=Number(RegExp['$1']);return[_0x5581dc[_0x37854c(0x337)]()[_0x37854c(0xa1d)]()[_0x33df38]];}}}}}if(_0x4ebf27===_0x37854c(0x474))return _0x5581dc['opponentsUnit']()['aliveMembers']();else{if(_0x4ebf27===_0x37854c(0xa8e))return _0x5581dc[_0x37854c(0x91e)]()[_0x37854c(0x2a6)]()[_0x37854c(0x239)](_0x52a8e4=>_0x52a8e4!==_0x2b9c53);else{if(_0x4ebf27==='dead\x20opponents')return _0x5581dc[_0x37854c(0x91e)]()[_0x37854c(0x4ed)]();else{if(_0x4ebf27[_0x37854c(0x26e)](/OPPONENT INDEX (\d+)/i)){const _0x167995=Number(RegExp['$1']);return[_0x5581dc[_0x37854c(0x91e)]()[_0x37854c(0xa1d)]()[_0x167995]];}}}}}if(_0x4ebf27===_0x37854c(0x1ed))return $gameParty['aliveMembers']();else{if(_0x4ebf27==='alive\x20actors\x20not\x20user')return $gameParty['aliveMembers']()[_0x37854c(0x239)](_0x4595a4=>_0x4595a4!==_0x5581dc);else{if(_0x4ebf27===_0x37854c(0x2d0))return $gameParty[_0x37854c(0x2a6)]()[_0x37854c(0x239)](_0x23eb59=>_0x23eb59!==_0x2b9c53);else{if(_0x4ebf27===_0x37854c(0x9bf))return $gameParty[_0x37854c(0x4ed)]();else{if(_0x4ebf27[_0x37854c(0x26e)](/ACTOR INDEX (\d+)/i)){const _0x1bdd53=Number(RegExp['$1']);return[$gameParty[_0x37854c(0xa1d)]()[_0x1bdd53]];}else{if(_0x4ebf27[_0x37854c(0x26e)](/ACTOR ID (\d+)/i)){const _0x48fad1=Number(RegExp['$1']);return[$gameActors['actor'](_0x48fad1)];}}}}}}if(_0x4ebf27==='alive\x20enemies')return $gameTroop[_0x37854c(0x2a6)]();else{if(_0x4ebf27===_0x37854c(0x4ca))return $gameTroop[_0x37854c(0x2a6)]()[_0x37854c(0x239)](_0x4cb769=>_0x4cb769!==_0x5581dc);else{if(_0x4ebf27===_0x37854c(0x78f))return $gameTroop['aliveMembers']()['filter'](_0x4c64df=>_0x4c64df!==_0x2b9c53);else{if(_0x4ebf27===_0x37854c(0x4f4))return $gameTroop['deadMembers']();else{if(_0x4ebf27[_0x37854c(0x26e)](/ENEMY INDEX (\d+)/i)){const _0x1aa6ce=Number(RegExp['$1']);return[$gameTroop['members']()[_0x1aa6ce]];}else{if(_0x4ebf27[_0x37854c(0x26e)](/ENEMY ID (\d+)/i)){const _0x527235=Number(RegExp['$1']);return $gameTroop[_0x37854c(0x2a6)]()[_0x37854c(0x239)](_0x5bf202=>_0x5bf202[_0x37854c(0xe2)]()===_0x527235);}}}}}}if(_0x4ebf27===_0x37854c(0xa5b))return _0x17bf37['filter'](_0x20e257=>_0x20e257[_0x37854c(0x942)]());else{if(_0x4ebf27==='alive\x20battlers\x20not\x20user')return _0x17bf37[_0x37854c(0x239)](_0x6883c6=>_0x6883c6[_0x37854c(0x942)]()&&_0x6883c6!==_0x5581dc);else{if(_0x4ebf27==='alive\x20battlers\x20not\x20target')return _0x17bf37['filter'](_0x5bcef4=>_0x5bcef4[_0x37854c(0x942)]()&&_0x5bcef4!==_0x2b9c53);else{if(_0x4ebf27==='dead\x20battlers')return _0x17bf37[_0x37854c(0x239)](_0x245cf5=>_0x245cf5[_0x37854c(0x14e)]());}}}return[];},VisuMZ[_0x23168f(0x2c3)]=function(){const _0x4d8a59=_0x23168f;return BattleManager[_0x4d8a59(0x54d)];},VisuMZ[_0x23168f(0x94b)]=function(_0x2fdc8f){const _0x3d4469=_0x23168f;return BattleManager[_0x3d4469(0x54d)];},PluginManager['registerCommand'](pluginData['name'],'ActSeq_Set_SetupAction',_0x29e1a7=>{const _0x3c6173=_0x23168f;if(!SceneManager[_0x3c6173(0xbef)]())return;VisuMZ[_0x3c6173(0x54f)](_0x29e1a7,_0x29e1a7);const _0x1a62dd=$gameTemp['getLastPluginCommandInterpreter'](),_0x4022ea=BattleManager[_0x3c6173(0x13a)],_0x28dc1a=BattleManager[_0x3c6173(0x530)],_0x722f62=BattleManager['_allTargets']?BattleManager[_0x3c6173(0x51d)][_0x3c6173(0x760)](0x0):[],_0x45740d=BattleManager[_0x3c6173(0x397)];if(!_0x1a62dd||!_0x4022ea||!_0x28dc1a)return;if(!_0x4022ea[_0x3c6173(0x42e)]())return;if(_0x29e1a7[_0x3c6173(0x2f9)])_0x45740d[_0x3c6173(0x51c)](_0x28dc1a,_0x4022ea['item']());_0x29e1a7[_0x3c6173(0x5ec)]&&_0x45740d[_0x3c6173(0x908)]('applyImmortal',_0x28dc1a,_0x722f62,!![]);if(_0x29e1a7[_0x3c6173(0xb5f)])_0x45740d[_0x3c6173(0x908)]('performActionStart',_0x28dc1a,_0x4022ea);if(_0x29e1a7[_0x3c6173(0xaad)])_0x45740d[_0x3c6173(0x908)](_0x3c6173(0xac7));if(_0x29e1a7['CastAnimation'])_0x45740d[_0x3c6173(0x908)](_0x3c6173(0x5e6),_0x28dc1a,_0x4022ea);if(_0x29e1a7[_0x3c6173(0x609)])_0x45740d[_0x3c6173(0x908)](_0x3c6173(0x273));_0x1a62dd['setWaitMode'](_0x3c6173(0xb86));}),PluginManager['registerCommand'](pluginData[_0x23168f(0x611)],_0x23168f(0x881),_0x1ae96c=>{const _0x14cbda=_0x23168f;if(!SceneManager[_0x14cbda(0xbef)]())return;VisuMZ[_0x14cbda(0x54f)](_0x1ae96c,_0x1ae96c);const _0x6b359a=$gameTemp[_0x14cbda(0x7aa)](),_0x3907a0=BattleManager[_0x14cbda(0x13a)],_0x6f313d=BattleManager[_0x14cbda(0x530)],_0x1f3e56=BattleManager[_0x14cbda(0x51d)]?BattleManager[_0x14cbda(0x51d)][_0x14cbda(0x760)](0x0):[],_0x21dbcb=BattleManager['_logWindow'],_0xc206c1=_0x1ae96c[_0x14cbda(0x223)]??![];if(!_0x6b359a||!_0x3907a0||!_0x6f313d)return;if(!_0x3907a0['item']())return;let _0x5bb5d3=_0xc206c1?_0x21dbcb['getDualWieldTimes'](_0x6f313d):0x1;for(let _0x300fc0=0x0;_0x300fc0<_0x5bb5d3;_0x300fc0++){_0xc206c1&&_0x6f313d[_0x14cbda(0x36b)]()&&_0x21dbcb['push']('setActiveWeaponSet',_0x6f313d,_0x300fc0);if(_0x1ae96c[_0x14cbda(0x124)])_0x21dbcb[_0x14cbda(0x908)](_0x14cbda(0xb80),_0x6f313d,_0x3907a0);if(_0x1ae96c[_0x14cbda(0x27e)]>0x0)_0x21dbcb[_0x14cbda(0x908)](_0x14cbda(0x13b),_0x1ae96c['WaitCount']);if(_0x1ae96c[_0x14cbda(0xaff)])_0x21dbcb[_0x14cbda(0x908)](_0x14cbda(0x7f7),_0x6f313d,_0x1f3e56,_0x3907a0[_0x14cbda(0x42e)]()[_0x14cbda(0x6b8)]);if(_0x1ae96c['WaitForAnimation'])_0x21dbcb[_0x14cbda(0x908)]('waitForAnimation');for(const _0x5c3085 of _0x1f3e56){if(!_0x5c3085)continue;if(_0x1ae96c[_0x14cbda(0x571)])_0x21dbcb[_0x14cbda(0x908)]('actionEffect',_0x6f313d,_0x5c3085);}}_0xc206c1&&_0x6f313d[_0x14cbda(0x36b)]()&&_0x21dbcb[_0x14cbda(0x908)](_0x14cbda(0x8c3),_0x6f313d);if(_0x1ae96c['ApplyImmortal'])_0x21dbcb['push'](_0x14cbda(0x940),_0x6f313d,_0x1f3e56,![]);_0x6b359a['setWaitMode'](_0x14cbda(0xb86));}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x4e8),_0x50a760=>{const _0x11c361=_0x23168f;if(!SceneManager[_0x11c361(0xbef)]())return;VisuMZ[_0x11c361(0x54f)](_0x50a760,_0x50a760);const _0x7e25cd=$gameTemp['getLastPluginCommandInterpreter'](),_0x367429=BattleManager[_0x11c361(0x13a)],_0xd44036=BattleManager[_0x11c361(0x530)],_0x44ee7b=BattleManager[_0x11c361(0x51d)]?BattleManager[_0x11c361(0x51d)][_0x11c361(0x760)](0x0):[],_0x157bd3=BattleManager['_logWindow'],_0x9c8316=_0x50a760[_0x11c361(0x223)]??![];if(!_0x7e25cd||!_0x367429||!_0xd44036)return;if(!_0x367429[_0x11c361(0x42e)]())return;let _0x51edc6=_0x9c8316?_0x157bd3[_0x11c361(0x7cb)](_0xd44036):0x1;for(let _0x53a3e3=0x0;_0x53a3e3<_0x51edc6;_0x53a3e3++){for(const _0x3bd475 of _0x44ee7b){if(!_0x3bd475)continue;_0x9c8316&&_0xd44036[_0x11c361(0x36b)]()&&_0x157bd3[_0x11c361(0x908)](_0x11c361(0x7df),_0xd44036,_0x53a3e3);if(_0x50a760[_0x11c361(0x124)])_0x157bd3[_0x11c361(0x908)](_0x11c361(0xb80),_0xd44036,_0x367429);if(_0x50a760[_0x11c361(0xed)]>0x0)_0x157bd3[_0x11c361(0x908)](_0x11c361(0x13b),_0x50a760['WaitCount1']);if(_0x50a760['ActionAnimation'])_0x157bd3[_0x11c361(0x908)](_0x11c361(0x7f7),_0xd44036,[_0x3bd475],_0x367429['item']()['animationId']);if(_0x50a760[_0x11c361(0x7db)]>0x0)_0x157bd3[_0x11c361(0x908)](_0x11c361(0x13b),_0x50a760[_0x11c361(0x7db)]);if(_0x50a760['ActionEffect'])_0x157bd3[_0x11c361(0x908)](_0x11c361(0x2b7),_0xd44036,_0x3bd475);}}_0x9c8316&&_0xd44036[_0x11c361(0x36b)]()&&_0x157bd3[_0x11c361(0x908)]('clearActiveWeaponSet',_0xd44036);if(_0x50a760[_0x11c361(0x5ec)])_0x157bd3[_0x11c361(0x908)](_0x11c361(0x940),_0xd44036,_0x44ee7b,![]);_0x7e25cd[_0x11c361(0x351)](_0x11c361(0xb86));}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],'ActSeq_Set_FinishAction',_0x406ea6=>{const _0x60ef94=_0x23168f;if(!SceneManager[_0x60ef94(0xbef)]())return;VisuMZ[_0x60ef94(0x54f)](_0x406ea6,_0x406ea6);const _0x1d9c71=$gameTemp['getLastPluginCommandInterpreter'](),_0x423652=BattleManager[_0x60ef94(0x13a)],_0x1bfc65=BattleManager[_0x60ef94(0x530)],_0xabb172=BattleManager[_0x60ef94(0x51d)]?BattleManager[_0x60ef94(0x51d)][_0x60ef94(0x760)](0x0):[],_0x5326f3=BattleManager[_0x60ef94(0x397)];if(!_0x1d9c71||!_0x423652||!_0x1bfc65)return;if(!_0x423652[_0x60ef94(0x42e)]())return;if(_0x406ea6[_0x60ef94(0x5ec)])_0x5326f3[_0x60ef94(0x908)]('applyImmortal',_0x1bfc65,_0xabb172,![]);if(_0x406ea6[_0x60ef94(0x32d)])_0x5326f3[_0x60ef94(0x908)](_0x60ef94(0x547));if(_0x406ea6[_0x60ef94(0xb08)])_0x5326f3[_0x60ef94(0x908)](_0x60ef94(0x31a));if(_0x406ea6[_0x60ef94(0x879)])_0x5326f3['push'](_0x60ef94(0x176));if(_0x406ea6[_0x60ef94(0x206)])_0x5326f3[_0x60ef94(0x908)](_0x60ef94(0xf1),_0x1bfc65);if(_0x406ea6[_0x60ef94(0xaad)])_0x5326f3['push'](_0x60ef94(0xac7));_0x1d9c71['setWaitMode'](_0x60ef94(0xb86));}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],'ActSeq_ChangeAngle',_0x344765=>{const _0x116933=_0x23168f;if(!SceneManager[_0x116933(0xbef)]())return;if(!Imported[_0x116933(0x6f9)])return;VisuMZ[_0x116933(0x54f)](_0x344765,_0x344765);const _0x51f301=$gameTemp[_0x116933(0x7aa)](),_0x5798f5=_0x344765[_0x116933(0x275)];if(!_0x51f301)return;$gameScreen[_0x116933(0xa7d)](_0x344765[_0x116933(0x5a9)],_0x344765['Duration'],_0x344765[_0x116933(0xa34)]);if(_0x5798f5)_0x51f301[_0x116933(0x351)](_0x116933(0x3b7));}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x3d0),_0x31fd2f=>{const _0xbd0af0=_0x23168f;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0xbd0af0(0x6f9)])return;VisuMZ[_0xbd0af0(0x54f)](_0x31fd2f,_0x31fd2f);const _0x3b3684=$gameTemp[_0xbd0af0(0x7aa)](),_0x1c1d66=_0x31fd2f[_0xbd0af0(0x275)];if(!_0x3b3684)return;$gameScreen[_0xbd0af0(0xa7d)](0x0,_0x31fd2f[_0xbd0af0(0xaaf)],_0x31fd2f[_0xbd0af0(0xa34)]);if(_0x1c1d66)_0x3b3684['setWaitMode']('battleAngle');}),PluginManager['registerCommand'](pluginData[_0x23168f(0x611)],_0x23168f(0x188),_0x19952e=>{const _0x4c2f0f=_0x23168f;if(!SceneManager[_0x4c2f0f(0xbef)]())return;if(!Imported[_0x4c2f0f(0x6f9)])return;const _0x577013=$gameTemp[_0x4c2f0f(0x7aa)]();if(!_0x577013)return;_0x577013[_0x4c2f0f(0x351)](_0x4c2f0f(0x3b7));}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x39a),_0x132f2d=>{const _0x2695b2=_0x23168f;if(!SceneManager[_0x2695b2(0xbef)]())return;VisuMZ[_0x2695b2(0x54f)](_0x132f2d,_0x132f2d);const _0x425a37=$gameTemp['getLastPluginCommandInterpreter'](),_0x2abf1d=BattleManager['_action'],_0x5c1df4=BattleManager[_0x2695b2(0x530)],_0x473915=VisuMZ[_0x2695b2(0x31f)](_0x132f2d[_0x2695b2(0xbc7)]),_0x45c14e=_0x132f2d[_0x2695b2(0x5a4)],_0xfcc4c9=BattleManager[_0x2695b2(0x397)];if(!_0x425a37||!_0x2abf1d||!_0x5c1df4)return;if(!_0x2abf1d[_0x2695b2(0x42e)]())return;let _0x59c0a3=_0x2abf1d['item']()[_0x2695b2(0x6b8)];if(_0x59c0a3<0x0)_0x59c0a3=_0x5c1df4[_0x2695b2(0x7c8)]();$gameTemp[_0x2695b2(0x582)](_0x473915,_0x59c0a3,_0x45c14e),_0x132f2d['WaitForAnimation']&&_0x425a37[_0x2695b2(0x351)](_0x2695b2(0x938));}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x811),_0x1f9611=>{const _0x115dd1=_0x23168f;if(!SceneManager[_0x115dd1(0xbef)]())return;VisuMZ[_0x115dd1(0x54f)](_0x1f9611,_0x1f9611);const _0x1114ef=$gameTemp[_0x115dd1(0x7aa)](),_0x19f635=BattleManager['_subject'],_0x55129e=VisuMZ['CreateActionSequenceTargets'](_0x1f9611[_0x115dd1(0xbc7)]),_0x5e7e9f=_0x1f9611[_0x115dd1(0x5a4)],_0x2ca2bf=BattleManager[_0x115dd1(0x397)];if(!_0x1114ef||!_0x19f635)return;const _0x23688f=_0x19f635['attackAnimationId1']();$gameTemp[_0x115dd1(0x582)](_0x55129e,_0x23688f,_0x5e7e9f),_0x1f9611['WaitForAnimation']&&_0x1114ef[_0x115dd1(0x351)](_0x115dd1(0x938));}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x4d0),_0x81a522=>{const _0x7db5d0=_0x23168f;if(!SceneManager[_0x7db5d0(0xbef)]())return;VisuMZ[_0x7db5d0(0x54f)](_0x81a522,_0x81a522);const _0x147ac0=_0x2f6c01[_0x7db5d0(0x870)](_0x81a522[_0x7db5d0(0x552)]);if(_0x147ac0<=0x0)return;const _0x561903=$gameTemp[_0x7db5d0(0x7aa)](),_0x2f6c01=BattleManager[_0x7db5d0(0x530)],_0x1e9e4f=VisuMZ[_0x7db5d0(0x31f)](_0x81a522['Targets']),_0x52a56c=_0x81a522[_0x7db5d0(0x5a4)],_0x597c2f=BattleManager[_0x7db5d0(0x397)];if(!_0x561903||!_0x2f6c01)return;$gameTemp['requestAnimation'](_0x1e9e4f,_0x147ac0,_0x52a56c),_0x81a522[_0x7db5d0(0x609)]&&_0x561903[_0x7db5d0(0x351)](_0x7db5d0(0x938));}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0xbd0),_0x398a72=>{const _0x14745c=_0x23168f;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x14745c(0x54f)](_0x398a72,_0x398a72);const _0x49e048=$gameTemp[_0x14745c(0x7aa)](),_0x1cc848=VisuMZ[_0x14745c(0x31f)](_0x398a72['Targets']),_0x597d14=_0x398a72[_0x14745c(0x97e)];let _0x57c7ba=0x0;switch(_0x597d14['toUpperCase']()[_0x14745c(0xf4)]()){case'!':case _0x14745c(0x9b0):_0x57c7ba=0x1;break;case'?':case _0x14745c(0x172):_0x57c7ba=0x2;break;case'MUSIC':case'NOTE':case _0x14745c(0x6dd):case _0x14745c(0x6e9):case'MUSICNOTE':_0x57c7ba=0x3;break;case'HEART':case _0x14745c(0x2f7):_0x57c7ba=0x4;break;case _0x14745c(0x574):case'ANGER':_0x57c7ba=0x5;break;case _0x14745c(0xb8c):_0x57c7ba=0x6;break;case'COBWEB':case _0x14745c(0x4ce):case'FRUSTRATION':_0x57c7ba=0x7;break;case _0x14745c(0x408):case _0x14745c(0x487):_0x57c7ba=0x8;break;case _0x14745c(0x7b8):case _0x14745c(0xab2):case _0x14745c(0xb2c):case'LIGHT-BULB':case _0x14745c(0x5c1):_0x57c7ba=0x9;break;case'Z':case'ZZ':case _0x14745c(0x84c):case _0x14745c(0xbd9):_0x57c7ba=0xa;break;case'USER-DEFINED\x201':_0x57c7ba=0xb;break;case _0x14745c(0x4bb):_0x57c7ba=0xc;break;case _0x14745c(0xb6):_0x57c7ba=0xd;break;case _0x14745c(0x9da):_0x57c7ba=0xe;break;case _0x14745c(0x295):_0x57c7ba=0xf;break;}for(const _0x4a4d69 of _0x1cc848){if(!_0x4a4d69)continue;$gameTemp[_0x14745c(0x5ca)](_0x4a4d69,_0x57c7ba);}_0x398a72[_0x14745c(0x871)]&&_0x49e048&&(_0x49e048[_0x14745c(0x707)](0x1),_0x49e048[_0x14745c(0x351)](_0x14745c(0x1d0)));}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x901),_0x2e248f=>{const _0x3bcbe3=_0x23168f;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x3bcbe3(0x842)])return;VisuMZ['ConvertParams'](_0x2e248f,_0x2e248f);const _0x50beb0=$gameTemp[_0x3bcbe3(0x7aa)](),_0x1748eb=VisuMZ['CreateActionSequenceTargets'](_0x2e248f['Targets']),_0x404fff=_0x2e248f['IconIndex'];for(const _0x3b2bfc of _0x1748eb){if(!_0x3b2bfc)continue;$gameTemp[_0x3bcbe3(0x5ca)](_0x3b2bfc,[_0x404fff]);}_0x2e248f[_0x3bcbe3(0x871)]&&_0x50beb0&&(_0x50beb0[_0x3bcbe3(0x707)](0x1),_0x50beb0[_0x3bcbe3(0x351)](_0x3bcbe3(0x1d0)));}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0xbf4),_0x87a583=>{const _0x4729bf=_0x23168f;if(!SceneManager[_0x4729bf(0xbef)]())return;if(!Imported[_0x4729bf(0x842)])return;VisuMZ['ConvertParams'](_0x87a583,_0x87a583);const _0x52252e=$gameTemp[_0x4729bf(0x7aa)](),_0x2c36a8=VisuMZ[_0x4729bf(0x31f)](_0x87a583[_0x4729bf(0xbc7)]),_0x52b929=Math['min'](Number(_0x87a583[_0x4729bf(0xbda)]||0x0),Number(_0x87a583[_0x4729bf(0x2ed)]||0x0)),_0x1ad9ef=Math[_0x4729bf(0x705)](Number(_0x87a583[_0x4729bf(0xbda)]||0x0),Number(_0x87a583['endIcon']||0x0)),_0x56636c=[];for(let _0x1cf342=_0x52b929;_0x1cf342<=_0x1ad9ef;_0x1cf342++){_0x56636c[_0x4729bf(0x908)](_0x1cf342);}for(const _0x4fa1c0 of _0x2c36a8){if(!_0x4fa1c0)continue;$gameTemp[_0x4729bf(0x5ca)](_0x4fa1c0,_0x56636c);}_0x87a583[_0x4729bf(0x871)]&&_0x52252e&&(_0x52252e['wait'](0x1),_0x52252e[_0x4729bf(0x351)](_0x4729bf(0x1d0)));}),PluginManager[_0x23168f(0x594)](pluginData['name'],'ActSeq_Animation_BalloonIconSpecific',_0x31abe9=>{const _0x2dc71e=_0x23168f;if(!SceneManager[_0x2dc71e(0xbef)]())return;if(!Imported[_0x2dc71e(0x842)])return;VisuMZ[_0x2dc71e(0x54f)](_0x31abe9,_0x31abe9);const _0x201f91=$gameTemp[_0x2dc71e(0x7aa)](),_0x33dfa3=VisuMZ[_0x2dc71e(0x31f)](_0x31abe9[_0x2dc71e(0xbc7)]),_0x304714=_0x31abe9[_0x2dc71e(0x8c1)];for(const _0x30c289 of _0x33dfa3){if(!_0x30c289)continue;$gameTemp[_0x2dc71e(0x5ca)](_0x30c289,_0x304714);}_0x31abe9[_0x2dc71e(0x871)]&&_0x201f91&&(_0x201f91[_0x2dc71e(0x707)](0x1),_0x201f91[_0x2dc71e(0x351)](_0x2dc71e(0x1d0)));}),PluginManager[_0x23168f(0x594)](pluginData['name'],_0x23168f(0xb09),_0x98b3d6=>{const _0x19bbce=_0x23168f;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x19bbce(0x54f)](_0x98b3d6,_0x98b3d6);const _0x233426=$gameTemp[_0x19bbce(0x7aa)](),_0x48365b=BattleManager[_0x19bbce(0x13a)],_0x58b4b5=_0x98b3d6[_0x19bbce(0x5a4)],_0x1bb4c6=VisuMZ[_0x19bbce(0x31f)](_0x98b3d6['Targets']);if(!_0x233426||!_0x48365b)return;if(!_0x48365b[_0x19bbce(0x42e)]())return;for(const _0xfb7477 of _0x1bb4c6){if(!_0xfb7477)continue;_0xfb7477[_0x19bbce(0x5e6)](_0x48365b,_0x58b4b5);}if(_0x98b3d6[_0x19bbce(0x609)])_0x233426[_0x19bbce(0x351)](_0x19bbce(0x938));}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x3ab),_0xcb51bf=>{const _0x30f55a=_0x23168f;VisuMZ['ConvertParams'](_0xcb51bf,_0xcb51bf);const _0x3e7adb=$gameTemp[_0x30f55a(0x7aa)](),_0x5d4afc=VisuMZ[_0x30f55a(0x31f)](_0xcb51bf['Targets']),_0x4948a0=_0xcb51bf[_0x30f55a(0x68c)];if(!_0x4948a0)return;for(const _0x423bd4 of _0x5d4afc){if(!_0x423bd4)continue;if(!_0x423bd4['isActor']())continue;_0x423bd4[_0x30f55a(0x25e)](_0x4948a0);}}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],'ActSeq_Animation_ChangeBattlePortrait_JS',_0x67fbe7=>{const _0x3e027b=_0x23168f;VisuMZ['ConvertParams'](_0x67fbe7,_0x67fbe7);const _0x467cfb=_0x67fbe7[_0x3e027b(0x364)](),_0x23c3fb=$gameActors['actor'](_0x467cfb)||null;if(!_0x23c3fb){console[_0x3e027b(0x7dc)](_0x3e027b(0x1e6));return;}const _0x1bc53e=_0x67fbe7[_0x3e027b(0xa02)]();_0x23c3fb[_0x3e027b(0x25e)](_0x1bc53e);}),PluginManager[_0x23168f(0x594)](pluginData['name'],_0x23168f(0x4bc),_0x54e4eb=>{const _0x137825=_0x23168f;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x137825(0x54f)](_0x54e4eb,_0x54e4eb);const _0x773b99=$gameTemp[_0x137825(0x7aa)](),_0x1e115a=BattleManager[_0x137825(0x530)],_0x444f6f=VisuMZ['CreateActionSequenceTargets'](_0x54e4eb[_0x137825(0xbc7)]),_0x32b309=_0x54e4eb[_0x137825(0x5a4)];if(!_0x773b99||!_0x1e115a)return;const _0x37a74e=$dataSkilles[_0x1e115a[_0x137825(0x6de)]()],_0x579a3c=_0x37a74e[_0x137825(0x6b8)];$gameTemp['requestAnimation'](_0x444f6f,_0x579a3c,_0x32b309),_0x54e4eb[_0x137825(0x609)]&&_0x773b99[_0x137825(0x351)](_0x137825(0x938));}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x1de),_0x432a45=>{const _0x2737a3=_0x23168f;if(!SceneManager[_0x2737a3(0xbef)]())return;VisuMZ[_0x2737a3(0x54f)](_0x432a45,_0x432a45);const _0x381fcb=$gameTemp[_0x2737a3(0x7aa)](),_0x560e2b=VisuMZ[_0x2737a3(0x31f)](_0x432a45[_0x2737a3(0xbc7)]),_0x534f50=Number(_0x432a45['ItemID']||0x1),_0x236d00=$dataItems[_0x534f50],_0x101ddf=_0x432a45[_0x2737a3(0x5a4)];if(!_0x381fcb)return;if(!_0x236d00)return;let _0x56d8d5=_0x236d00[_0x2737a3(0x6b8)];$gameTemp[_0x2737a3(0x582)](_0x560e2b,_0x56d8d5,_0x101ddf),_0x432a45[_0x2737a3(0x609)]&&_0x381fcb[_0x2737a3(0x351)](_0x2737a3(0x938));}),PluginManager[_0x23168f(0x594)](pluginData['name'],_0x23168f(0x317),_0xc447d=>{const _0x4233dc=_0x23168f;if(!SceneManager['_scene'])return;if(!SceneManager['_scene'][_0x4233dc(0xa73)])return;if(!Imported[_0x4233dc(0x74a)])return;VisuMZ[_0x4233dc(0x54f)](_0xc447d,_0xc447d);const _0x5ea197=$gameTemp[_0x4233dc(0x7aa)](),_0x124887=Math[_0x4233dc(0x1fc)](_0xc447d['pointX']),_0x23f24c=Math[_0x4233dc(0x1fc)](_0xc447d[_0x4233dc(0x955)]);$gameTemp[_0x4233dc(0x498)](_0x124887,_0x23f24c,_0xc447d[_0x4233dc(0x5c4)],_0xc447d['Mirror'],_0xc447d[_0x4233dc(0x215)]),_0xc447d[_0x4233dc(0x871)]&&_0x5ea197&&(SceneManager[_0x4233dc(0x23e)][_0x4233dc(0xa73)][_0x4233dc(0x6c7)](),_0x5ea197['setWaitMode'](_0x4233dc(0x938)));}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x14f),_0x36a445=>{const _0x25193b=_0x23168f;if(!SceneManager[_0x25193b(0xbef)]())return;VisuMZ[_0x25193b(0x54f)](_0x36a445,_0x36a445);const _0x50394b=$gameTemp['getLastPluginCommandInterpreter'](),_0x2de2cd=VisuMZ['CreateActionSequenceTargets'](_0x36a445['Targets']),_0x305dc8=_0x36a445['AnimationID'],_0x37a3d8=_0x36a445['Mirror'];if(!_0x50394b)return;$gameTemp['requestAnimation'](_0x2de2cd,_0x305dc8,_0x37a3d8);if(_0x36a445[_0x25193b(0x609)])_0x50394b[_0x25193b(0x351)](_0x25193b(0x938));}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x6b6),_0x23bd6f=>{const _0x2c45cc=_0x23168f;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x23bd6f,_0x23bd6f);const _0x7d91bb=$gameTemp[_0x2c45cc(0x7aa)](),_0x1b3acc=VisuMZ[_0x2c45cc(0x31f)](_0x23bd6f[_0x2c45cc(0xbc7)]),_0x530114=Number(_0x23bd6f[_0x2c45cc(0x5c4)])||0x1,_0x5e5c35=_0x23bd6f[_0x2c45cc(0x5a4)];if(!_0x7d91bb)return;$gameTemp['requestAnimation'](_0x1b3acc,_0x530114,_0x5e5c35);if(_0x23bd6f['WaitForAnimation'])_0x7d91bb[_0x2c45cc(0x351)]('battleAnimation');}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x43a),_0x35972b=>{const _0x5bd4ab=_0x23168f;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5bd4ab(0x54f)](_0x35972b,_0x35972b);const _0x329608=$gameTemp[_0x5bd4ab(0x7aa)](),_0x408baf=VisuMZ[_0x5bd4ab(0x31f)](_0x35972b[_0x5bd4ab(0xbc7)]),_0x1e7033=Number(_0x35972b[_0x5bd4ab(0xfd)]||0x1),_0x1d06aa=$dataSkills[_0x1e7033],_0xcdeca=_0x35972b[_0x5bd4ab(0x5a4)];if(!_0x329608)return;if(!_0x1d06aa)return;let _0x354fe0=_0x1d06aa[_0x5bd4ab(0x6b8)];$gameTemp[_0x5bd4ab(0x582)](_0x408baf,_0x354fe0,_0xcdeca),_0x35972b[_0x5bd4ab(0x609)]&&_0x329608[_0x5bd4ab(0x351)](_0x5bd4ab(0x938));}),PluginManager[_0x23168f(0x594)](pluginData['name'],_0x23168f(0x33a),_0x43694f=>{const _0x36b43c=_0x23168f;if(!SceneManager['isSceneBattle']())return;const _0x417425=$gameTemp[_0x36b43c(0x7aa)]();if(!_0x417425)return;_0x417425['setWaitMode']('battleAnimation');}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0xa9e),_0x558a03=>{const _0x576a75=_0x23168f;if(!SceneManager[_0x576a75(0xbef)]())return;VisuMZ[_0x576a75(0x54f)](_0x558a03,_0x558a03);const _0x1d59b0=BattleManager[_0x576a75(0x397)],_0x41d084=_0x558a03[_0x576a75(0x3e5)]&&Imported[_0x576a75(0x453)];_0x1d59b0[_0x576a75(0x86c)](_0x558a03[_0x576a75(0x3fd)]),_0x41d084&&Imported[_0x576a75(0x453)]&&$gameSystem['addTextToCombatLog'](_0x558a03['Text']||'',_0x558a03[_0x576a75(0x76f)]||0x0);}),PluginManager['registerCommand'](pluginData['name'],_0x23168f(0x109),_0x561d9e=>{const _0x1b6a34=_0x23168f;if(!SceneManager['isSceneBattle']())return;const _0x179ee5=BattleManager[_0x1b6a34(0x397)];_0x179ee5[_0x1b6a34(0x176)]();}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x5fd),_0x5b2579=>{const _0x2a3d5d=_0x23168f;if(!SceneManager[_0x2a3d5d(0xbef)]())return;const _0x286429=$gameTemp[_0x2a3d5d(0x7aa)](),_0x25ec56=BattleManager[_0x2a3d5d(0x13a)],_0x4eaf36=BattleManager[_0x2a3d5d(0x530)],_0x1914d5=BattleManager[_0x2a3d5d(0x397)];if(!_0x286429||!_0x25ec56||!_0x4eaf36)return;if(!_0x25ec56[_0x2a3d5d(0x42e)]())return;_0x1914d5[_0x2a3d5d(0x51c)](_0x4eaf36,_0x25ec56[_0x2a3d5d(0x42e)]()),_0x286429[_0x2a3d5d(0x351)](_0x2a3d5d(0xb86));}),PluginManager['registerCommand'](pluginData[_0x23168f(0x611)],_0x23168f(0xaa1),_0x4138b4=>{const _0x4dc475=_0x23168f;if(!SceneManager[_0x4dc475(0xbef)]())return;const _0x123aa0=BattleManager[_0x4dc475(0x397)];_0x123aa0[_0x4dc475(0x452)]();}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],'ActSeq_BattleLog_PushBaseLine',_0x3a2faf=>{const _0x3e66aa=_0x23168f;if(!SceneManager[_0x3e66aa(0xbef)]())return;const _0x4e291d=BattleManager[_0x3e66aa(0x397)];_0x4e291d[_0x3e66aa(0x928)]();}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0xb34),_0x55843b=>{const _0x46ce92=_0x23168f;if(!SceneManager['isSceneBattle']())return;const _0x393d08=BattleManager[_0x46ce92(0x397)];_0x393d08[_0x46ce92(0xa39)]();}),PluginManager[_0x23168f(0x594)](pluginData['name'],_0x23168f(0x863),_0x12f5e8=>{const _0x1cb4b8=_0x23168f;if(!SceneManager[_0x1cb4b8(0xbef)]())return;VisuMZ['ConvertParams'](_0x12f5e8,_0x12f5e8),SceneManager['_scene'][_0x1cb4b8(0x583)](_0x12f5e8['ShowHide']);}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x26a),_0x15383b=>{const _0x1b198b=_0x23168f;if(!SceneManager[_0x1b198b(0xbef)]())return;const _0x5284a1=$gameTemp[_0x1b198b(0x7aa)]();_0x5284a1[_0x1b198b(0x351)](_0x1b198b(0xb86));}),PluginManager['registerCommand'](pluginData[_0x23168f(0x611)],_0x23168f(0x503),_0x1507f4=>{const _0x401945=_0x23168f;if(!SceneManager[_0x401945(0xbef)]())return;const _0x4e072c=$gameTemp[_0x401945(0x7aa)](),_0x595aa8=BattleManager[_0x401945(0x397)];_0x595aa8['waitForNewLine'](),_0x4e072c[_0x401945(0x351)](_0x401945(0xb86));}),PluginManager['registerCommand'](pluginData['name'],_0x23168f(0xcc),_0x3b5daa=>{const _0x1b1c0b=_0x23168f;if(!SceneManager[_0x1b1c0b(0xbef)]())return;if(!Imported[_0x1b1c0b(0x6f9)])return;VisuMZ[_0x1b1c0b(0x54f)](_0x3b5daa,_0x3b5daa);const _0x2cbd33=$gameScreen[_0x1b1c0b(0x6e8)]();_0x2cbd33[_0x1b1c0b(0x466)]=_0x3b5daa[_0x1b1c0b(0x3f9)];}),PluginManager['registerCommand'](pluginData[_0x23168f(0x611)],'ActSeq_Camera_FocusPoint',_0x347780=>{const _0x5a2672=_0x23168f;if(!SceneManager[_0x5a2672(0xbef)]())return;if(!Imported[_0x5a2672(0x6f9)])return;VisuMZ['ConvertParams'](_0x347780,_0x347780);const _0x4bd04a=$gameTemp[_0x5a2672(0x7aa)](),_0x20e681=_0x347780['WaitForCamera'];$gameScreen[_0x5a2672(0x406)](_0x347780[_0x5a2672(0x900)],_0x347780['FocusY'],_0x347780['Duration'],_0x347780['EasingType']);if(_0x20e681)_0x4bd04a['setWaitMode'](_0x5a2672(0x8f3));}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0xb70),_0x957535=>{const _0x121f9d=_0x23168f;if(!SceneManager[_0x121f9d(0xbef)]())return;if(!Imported[_0x121f9d(0x6f9)])return;VisuMZ[_0x121f9d(0x54f)](_0x957535,_0x957535);const _0x15ac35=$gameTemp[_0x121f9d(0x7aa)](),_0x4f05f1=VisuMZ[_0x121f9d(0x31f)](_0x957535[_0x121f9d(0xbc7)]),_0x275d38=_0x957535[_0x121f9d(0x87f)];$gameScreen[_0x121f9d(0x53f)](_0x4f05f1,_0x957535[_0x121f9d(0xaaf)],_0x957535[_0x121f9d(0xa34)]);if(_0x275d38)_0x15ac35[_0x121f9d(0x351)]('battleCamera');}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],'ActSeq_Camera_Offset',_0x17bb02=>{const _0x37b727=_0x23168f;if(!SceneManager[_0x37b727(0xbef)]())return;if(!Imported[_0x37b727(0x6f9)])return;VisuMZ['ConvertParams'](_0x17bb02,_0x17bb02);const _0x1f319a=$gameTemp[_0x37b727(0x7aa)](),_0x45739d=_0x17bb02['WaitForCamera'];$gameScreen[_0x37b727(0x1da)](_0x17bb02[_0x37b727(0x9c0)],_0x17bb02[_0x37b727(0x5a5)],_0x17bb02[_0x37b727(0xaaf)],_0x17bb02['EasingType']);if(_0x45739d)_0x1f319a[_0x37b727(0x351)](_0x37b727(0x8f3));}),PluginManager['registerCommand'](pluginData[_0x23168f(0x611)],'ActSeq_Camera_Reset',_0x1a0c61=>{const _0x336d42=_0x23168f;if(!SceneManager[_0x336d42(0xbef)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x336d42(0x54f)](_0x1a0c61,_0x1a0c61);const _0x5dd1c2=$gameTemp['getLastPluginCommandInterpreter'](),_0x58c891=_0x1a0c61[_0x336d42(0x8b7)],_0x9e3aa1=_0x1a0c61['ResetOffset'],_0xc26d46=_0x1a0c61[_0x336d42(0x87f)];if(_0x58c891){const _0xcb1c3b=Math[_0x336d42(0x1fc)](Graphics[_0x336d42(0x2e0)]/0x2),_0x270368=Math['round'](Graphics['height']/0x2);$gameScreen[_0x336d42(0x406)](_0xcb1c3b,_0x270368,_0x1a0c61['Duration'],_0x1a0c61[_0x336d42(0xa34)]);}_0x9e3aa1&&$gameScreen['setBattleCameraOffset'](0x0,0x0,_0x1a0c61[_0x336d42(0xaaf)],_0x1a0c61[_0x336d42(0xa34)]);if(_0xc26d46)_0x5dd1c2[_0x336d42(0x351)](_0x336d42(0x8f3));}),PluginManager['registerCommand'](pluginData[_0x23168f(0x611)],'ActSeq_Camera_WaitForCamera',_0x512b6f=>{const _0x1e58e4=_0x23168f;if(!SceneManager[_0x1e58e4(0xbef)]())return;if(!Imported[_0x1e58e4(0x6f9)])return;const _0x3e2a1f=$gameTemp[_0x1e58e4(0x7aa)]();if(!_0x3e2a1f)return;_0x3e2a1f[_0x1e58e4(0x351)](_0x1e58e4(0x8f3));}),VisuMZ[_0x23168f(0x895)][_0x23168f(0x4fa)]=function(_0x2d71b2){const _0x3782dc=_0x23168f;_0x2d71b2['portraitFilename']='';const _0x4b7dd2=VisuMZ[_0x3782dc(0x9c4)][_0x3782dc(0x4fa)](_0x2d71b2),_0x4b00e5=VisuMZ[_0x3782dc(0x31f)](_0x2d71b2[_0x3782dc(0xbc7)])[0x0]||null;return _0x4b00e5&&(_0x4b7dd2[_0x3782dc(0x866)]=_0x4b00e5[_0x3782dc(0x3c8)](),_0x4b7dd2[_0x3782dc(0x9eb)]=_0x4b00e5[_0x3782dc(0x48e)](),_0x4b7dd2[_0x3782dc(0x864)]=_0x4b00e5[_0x3782dc(0x4dc)](),_0x4b7dd2[_0x3782dc(0x19a)]=_0x4b00e5[_0x3782dc(0x34c)](),_0x4b00e5[_0x3782dc(0x77b)]()&&(_0x4b00e5['flipVisualCutinHorz']()&&(_0x4b7dd2[_0x3782dc(0x815)]=!_0x4b7dd2[_0x3782dc(0x815)]),_0x4b00e5[_0x3782dc(0x9cb)]()&&(_0x4b7dd2[_0x3782dc(0x910)]=!_0x4b7dd2['portraitFlipVert']),_0x4b7dd2['portraitType']==='svActor'&&(_0x4b7dd2[_0x3782dc(0x815)]=!_0x4b7dd2[_0x3782dc(0x815)]),_0x2d71b2[_0x3782dc(0xace)][_0x3782dc(0x650)]&&(_0x4b7dd2['parallaxScrollX']*=-0x1),_0x2d71b2[_0x3782dc(0xace)][_0x3782dc(0x2d3)]&&(_0x4b7dd2[_0x3782dc(0xa93)]*=-0x1),_0x4b7dd2[_0x3782dc(0x68b)]+=_0x2d71b2[_0x3782dc(0xace)]['parallaxHueEnemyModifier']??0x0)),_0x4b7dd2;},PluginManager['registerCommand'](pluginData[_0x23168f(0x611)],_0x23168f(0x8e2),_0x242bc1=>{const _0x1782fd=_0x23168f;if(!SceneManager[_0x1782fd(0xbef)]())return;if(!Imported['VisuMZ_3_VisualCutinEffect'])return;VisuMZ[_0x1782fd(0x54f)](_0x242bc1,_0x242bc1);const _0x425e45=VisuMZ['BattleCore'][_0x1782fd(0x4fa)](_0x242bc1);SceneManager['_scene']['startVisualCutin'](_0x425e45);const _0x5291df=$gameTemp[_0x1782fd(0x7aa)]();_0x5291df&&_0x242bc1[_0x1782fd(0x91c)]&&_0x5291df[_0x1782fd(0x351)](_0x1782fd(0xb7a));}),PluginManager['registerCommand'](pluginData[_0x23168f(0x611)],_0x23168f(0x9fb),_0x3b486b=>{const _0x155f4f=_0x23168f;if(!SceneManager[_0x155f4f(0xbef)]())return;if(!Imported[_0x155f4f(0x116)])return;VisuMZ[_0x155f4f(0x54f)](_0x3b486b,_0x3b486b),SceneManager[_0x155f4f(0x23e)][_0x155f4f(0x37d)]();const _0x12b91f=$gameTemp[_0x155f4f(0x7aa)]();_0x12b91f&&_0x3b486b[_0x155f4f(0x61d)]&&_0x12b91f['setWaitMode'](_0x155f4f(0x6ce));}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x21f),_0x534929=>{const _0xb68fdd=_0x23168f;if(!SceneManager[_0xb68fdd(0xbef)]())return;if(!Imported[_0xb68fdd(0x116)])return;VisuMZ[_0xb68fdd(0x54f)](_0x534929,_0x534929);const _0x862187=_0x534929['type'][_0xb68fdd(0x645)]()[_0xb68fdd(0xf4)]();SceneManager[_0xb68fdd(0x23e)][_0xb68fdd(0x359)](_0x862187);const _0x27c866=$gameTemp[_0xb68fdd(0x7aa)]();_0x27c866&&_0x534929[_0xb68fdd(0x61d)]&&_0x27c866[_0xb68fdd(0x351)](_0xb68fdd(0x6ce));}),PluginManager[_0x23168f(0x594)](pluginData['name'],_0x23168f(0x8fc),_0x2e9698=>{const _0x1f04ac=_0x23168f;if(!SceneManager[_0x1f04ac(0xbef)]())return;if(!Imported['VisuMZ_3_VisualCutinEffect'])return;const _0x490723=$gameTemp[_0x1f04ac(0x7aa)]();_0x490723['setWaitMode'](_0x1f04ac(0xb7a));}),PluginManager[_0x23168f(0x594)](pluginData['name'],_0x23168f(0x820),_0x29b7ad=>{const _0x4bf67c=_0x23168f;if(!SceneManager[_0x4bf67c(0xbef)]())return;if(!Imported[_0x4bf67c(0x116)])return;const _0x780f22=$gameTemp[_0x4bf67c(0x7aa)]();_0x780f22[_0x4bf67c(0x351)]('cutinExit');}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x981),_0x5628c2=>{const _0x2065a4=_0x23168f;if(!SceneManager[_0x2065a4(0xbef)]())return;if(!Imported[_0x2065a4(0x588)])return;VisuMZ['ConvertParams'](_0x5628c2,_0x5628c2);const _0x132752=VisuMZ[_0x2065a4(0x31f)](_0x5628c2[_0x2065a4(0xbc7)]),_0x4e6e3d=_0x5628c2[_0x2065a4(0x12f)][_0x2065a4(0x645)]()[_0x2065a4(0xf4)]();for(const _0x1d0c93 of _0x132752){if(!_0x1d0c93)continue;_0x1d0c93[_0x2065a4(0x64c)](_0x4e6e3d);}}),PluginManager['registerCommand'](pluginData[_0x23168f(0x611)],_0x23168f(0xb6f),_0x15dc9d=>{const _0x50b9f7=_0x23168f;if(!SceneManager[_0x50b9f7(0xbef)]())return;if(!Imported[_0x50b9f7(0x588)])return;VisuMZ[_0x50b9f7(0x54f)](_0x15dc9d,_0x15dc9d);const _0x302f01=VisuMZ['CreateActionSequenceTargets'](_0x15dc9d[_0x50b9f7(0xbc7)]),_0x58564a=_0x15dc9d[_0x50b9f7(0x6f2)];for(const _0x3c3d0f of _0x302f01){if(!_0x3c3d0f)continue;_0x3c3d0f[_0x50b9f7(0x99c)]()[_0x50b9f7(0xa71)]=_0x58564a;}}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0xa75),_0x473308=>{const _0xeeac5f=_0x23168f;if(!SceneManager[_0xeeac5f(0xbef)]())return;if(!Imported[_0xeeac5f(0x6f8)])return;VisuMZ[_0xeeac5f(0x54f)](_0x473308,_0x473308);const _0x532b92=BattleManager['_action'],_0x5a4f71=_0x473308[_0xeeac5f(0xa09)];if(!_0x532b92)return;_0x532b92['_battleCoreAddedElements']=_0x5a4f71;}),PluginManager['registerCommand'](pluginData[_0x23168f(0x611)],_0x23168f(0x4dd),_0x26dca6=>{const _0xe63c9a=_0x23168f;if(!SceneManager[_0xe63c9a(0xbef)]())return;if(!Imported['VisuMZ_1_ElementStatusCore'])return;const _0x8d0bb3=BattleManager['_action'];if(!_0x8d0bb3)return;_0x8d0bb3[_0xe63c9a(0x669)]();}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x288),_0x14c66f=>{const _0x3ecfb4=_0x23168f;if(!SceneManager[_0x3ecfb4(0xbef)]())return;if(!Imported[_0x3ecfb4(0x6f8)])return;VisuMZ[_0x3ecfb4(0x54f)](_0x14c66f,_0x14c66f);const _0x5a9888=BattleManager[_0x3ecfb4(0x13a)],_0x27bfa9=_0x14c66f[_0x3ecfb4(0xa09)];if(!_0x5a9888)return;_0x5a9888[_0x3ecfb4(0xbdf)]=_0x27bfa9;}),PluginManager['registerCommand'](pluginData['name'],_0x23168f(0x736),_0x423fa8=>{const _0x4e106f=_0x23168f;if(!SceneManager[_0x4e106f(0xbef)]())return;if(!Imported[_0x4e106f(0x6f8)])return;const _0x1ac130=BattleManager[_0x4e106f(0x13a)];if(!_0x1ac130)return;_0x1ac130[_0x4e106f(0xbc9)]=!![];}),PluginManager[_0x23168f(0x594)](pluginData['name'],_0x23168f(0x492),_0x48f5d6=>{VisuMZ['BattleGridSystem']['ActSeq_Grid_ActionAnimationAtNode'](_0x48f5d6);}),PluginManager['registerCommand'](pluginData['name'],_0x23168f(0x386),_0x3403e6=>{const _0x4fd695=_0x23168f;VisuMZ['BattleGridSystem'][_0x4fd695(0x386)](_0x3403e6);}),PluginManager['registerCommand'](pluginData[_0x23168f(0x611)],_0x23168f(0x234),_0x269239=>{const _0x5796db=_0x23168f;VisuMZ['BattleGridSystem'][_0x5796db(0x234)](_0x269239);}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x6a3),_0x4db106=>{const _0xf810b4=_0x23168f;VisuMZ[_0xf810b4(0x7af)]['ActSeq_Grid_AddTriggerToNode'](_0x4db106);}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],'ActSeq_Grid_AnimationIDAtNode',_0x21ecd7=>{const _0x5c9bf8=_0x23168f;VisuMZ[_0x5c9bf8(0x7af)][_0x5c9bf8(0x43d)](_0x21ecd7);}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x140),_0x2a3df1=>{const _0x342213=_0x23168f;VisuMZ[_0x342213(0x7af)][_0x342213(0x140)](_0x2a3df1);}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x30c),_0x2d3db7=>{const _0x38e093=_0x23168f;VisuMZ[_0x38e093(0x7af)][_0x38e093(0x30c)](_0x2d3db7);}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x2a0),_0xea7ece=>{const _0x1ae43a=_0x23168f;VisuMZ[_0x1ae43a(0x7af)]['ActSeq_Grid_ClearPassiveStatesFromNode'](_0xea7ece);}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],'ActSeq_Grid_MoveTargetsInDirection',_0x17843c=>{const _0x2c3127=_0x23168f;VisuMZ[_0x2c3127(0x7af)][_0x2c3127(0x346)](_0x17843c);}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],'ActSeq_Grid_PullToTargetNode',_0x2eea72=>{const _0x5c07ef=_0x23168f;VisuMZ[_0x5c07ef(0x7af)][_0x5c07ef(0x3d2)](_0x2eea72);}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x7b4),_0x17e190=>{const _0x359846=_0x23168f;VisuMZ[_0x359846(0x7af)]['ActSeq_Grid_PushFromTargetNode'](_0x17e190);}),PluginManager['registerCommand'](pluginData[_0x23168f(0x611)],_0x23168f(0x456),_0x24f6e5=>{const _0x558b09=_0x23168f;VisuMZ[_0x558b09(0x7af)][_0x558b09(0x456)](_0x24f6e5);}),PluginManager['registerCommand'](pluginData[_0x23168f(0x611)],'ActSeq_Grid_RemoveTriggerFromNode',_0x55ee16=>{const _0x301542=_0x23168f;VisuMZ[_0x301542(0x7af)][_0x301542(0xa66)](_0x55ee16);}),PluginManager[_0x23168f(0x594)](pluginData['name'],_0x23168f(0x9ad),_0x28f2a5=>{const _0x427ac1=_0x23168f;VisuMZ[_0x427ac1(0x7af)][_0x427ac1(0x9ad)](_0x28f2a5);}),PluginManager['registerCommand'](pluginData[_0x23168f(0x611)],_0x23168f(0xb76),_0x54b182=>{const _0xdedcb8=_0x23168f;VisuMZ[_0xdedcb8(0x7af)][_0xdedcb8(0xb76)](_0x54b182);}),PluginManager[_0x23168f(0x594)](pluginData['name'],'ActSeq_Horror_Clear',_0x423510=>{const _0x52b5b2=_0x23168f;if(!Imported[_0x52b5b2(0xba1)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x423510,_0x423510);const _0x4d7cd9=VisuMZ[_0x52b5b2(0x31f)](_0x423510[_0x52b5b2(0xbc7)]);for(const _0x5e36c4 of _0x4d7cd9){if(!_0x5e36c4)continue;_0x5e36c4[_0x52b5b2(0x115)](_0x52b5b2(0xb8d)),_0x5e36c4[_0x52b5b2(0x115)]('glitch'),_0x5e36c4[_0x52b5b2(0x115)]('tv'),_0x5e36c4[_0x52b5b2(0xfe)]();}$gamePlayer[_0x52b5b2(0xa39)]();}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x3e6),_0x3f60cf=>{const _0x2eb58b=_0x23168f;if(!Imported[_0x2eb58b(0xba1)])return;if(!SceneManager[_0x2eb58b(0xbef)]())return;VisuMZ['ConvertParams'](_0x3f60cf,_0x3f60cf);const _0x25ae84=VisuMZ[_0x2eb58b(0x31f)](_0x3f60cf['Targets']),_0x5922ea=_0x2eb58b(0xb2a);_0x3f60cf[_0x2eb58b(0x49d)]=Math[_0x2eb58b(0x330)](_0x3f60cf[_0x2eb58b(0x1ac)]/0x2),_0x3f60cf[_0x2eb58b(0x286)]=_0x3f60cf[_0x2eb58b(0x1ac)],_0x3f60cf['refreshRequest']=!![];for(const _0x38934b of _0x25ae84){if(!_0x38934b)continue;_0x38934b['setHorrorEffectSettings'](_0x5922ea,_0x3f60cf);}$gamePlayer[_0x2eb58b(0xa39)]();}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x2e9),_0xc7424=>{const _0xf21c1e=_0x23168f;if(!Imported[_0xf21c1e(0xba1)])return;if(!SceneManager[_0xf21c1e(0xbef)]())return;VisuMZ[_0xf21c1e(0x54f)](_0xc7424,_0xc7424);const _0x5e0a08=VisuMZ[_0xf21c1e(0x31f)](_0xc7424['Targets']);for(const _0x2c1e10 of _0x5e0a08){if(!_0x2c1e10)continue;_0x2c1e10[_0xf21c1e(0x115)]('glitch');}$gamePlayer[_0xf21c1e(0xa39)]();}),PluginManager['registerCommand'](pluginData[_0x23168f(0x611)],_0x23168f(0xa36),_0x17946a=>{const _0x4f02f0=_0x23168f;if(!Imported[_0x4f02f0(0xba1)])return;if(!SceneManager[_0x4f02f0(0xbef)]())return;VisuMZ['ConvertParams'](_0x17946a,_0x17946a);const _0x4d47ca=VisuMZ[_0x4f02f0(0x31f)](_0x17946a[_0x4f02f0(0xbc7)]),_0x924cf2=_0x4f02f0(0xb8d);for(const _0x219587 of _0x4d47ca){if(!_0x219587)continue;_0x219587[_0x4f02f0(0x8af)](_0x924cf2,_0x17946a);}$gamePlayer['refresh']();}),PluginManager['registerCommand'](pluginData['name'],_0x23168f(0xb0e),_0x29d4f4=>{const _0x4b4f45=_0x23168f;if(!Imported[_0x4b4f45(0xba1)])return;if(!SceneManager[_0x4b4f45(0xbef)]())return;VisuMZ[_0x4b4f45(0x54f)](_0x29d4f4,_0x29d4f4);const _0x10b7e7=VisuMZ[_0x4b4f45(0x31f)](_0x29d4f4[_0x4b4f45(0xbc7)]);for(const _0x392e6a of _0x10b7e7){if(!_0x392e6a)continue;_0x392e6a[_0x4b4f45(0x115)](_0x4b4f45(0xb8d));}$gamePlayer[_0x4b4f45(0xa39)]();}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x92d),_0x5351af=>{const _0xee3b00=_0x23168f;if(!Imported[_0xee3b00(0xba1)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0xee3b00(0x54f)](_0x5351af,_0x5351af);const _0x33def2=VisuMZ[_0xee3b00(0x31f)](_0x5351af[_0xee3b00(0xbc7)]),_0x4208f2='tv';for(const _0x5801b9 of _0x33def2){if(!_0x5801b9)continue;_0x5801b9['setHorrorEffectSettings'](_0x4208f2,_0x5351af);}$gamePlayer['refresh']();}),PluginManager[_0x23168f(0x594)](pluginData['name'],_0x23168f(0x84f),_0x201d72=>{const _0x54e8a6=_0x23168f;if(!Imported[_0x54e8a6(0xba1)])return;if(!SceneManager[_0x54e8a6(0xbef)]())return;VisuMZ['ConvertParams'](_0x201d72,_0x201d72);const _0x6d21d3=VisuMZ[_0x54e8a6(0x31f)](_0x201d72[_0x54e8a6(0xbc7)]);for(const _0x41b80b of _0x6d21d3){if(!_0x41b80b)continue;_0x41b80b[_0x54e8a6(0x115)]('tv');}$gamePlayer[_0x54e8a6(0xa39)]();}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x3ad),_0x23b91b=>{const _0x31d210=_0x23168f;if(!Imported[_0x31d210(0x965)])return;const _0x566754=SceneManager['_scene']['_spriteset'];if(!_0x566754)return;if(VisuMZ['ActSeqImpact'][_0x31d210(0x82e)]<=1.04){alert(_0x31d210(0x851)),SceneManager[_0x31d210(0x46e)]();return;}VisuMZ[_0x31d210(0x54f)](_0x23b91b,_0x23b91b);const _0x4a0f2c=_0x23b91b[_0x31d210(0x77d)];_0x566754[_0x31d210(0x36a)](_0x4a0f2c);}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x72e),_0x4ee881=>{const _0x36fdf4=_0x23168f;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x36fdf4(0x965)])return;const _0x3156b8=SceneManager[_0x36fdf4(0x23e)][_0x36fdf4(0xa73)];if(!_0x3156b8)return;VisuMZ[_0x36fdf4(0x54f)](_0x4ee881,_0x4ee881);const _0x2c5419=_0x4ee881[_0x36fdf4(0x163)]||0x1,_0x2d7c0c=_0x4ee881[_0x36fdf4(0xaaf)]||0x1,_0x2d7870=_0x4ee881[_0x36fdf4(0xa34)]||_0x36fdf4(0xa7f);_0x3156b8[_0x36fdf4(0xa3d)](_0x2c5419,_0x2d7c0c,_0x2d7870);}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0xb57),_0xa9402d=>{const _0x105a99=_0x23168f;if(!Imported[_0x105a99(0x965)])return;const _0x467dbf=SceneManager[_0x105a99(0x23e)][_0x105a99(0xa73)];if(!_0x467dbf)return;if(VisuMZ[_0x105a99(0x723)][_0x105a99(0x82e)]<=1.04){alert(_0x105a99(0x851)),SceneManager['exit']();return;}VisuMZ[_0x105a99(0x54f)](_0xa9402d,_0xa9402d);const _0xf7eb3=_0xa9402d[_0x105a99(0x77d)];_0x467dbf[_0x105a99(0x7be)](_0xf7eb3);}),PluginManager[_0x23168f(0x594)](pluginData['name'],_0x23168f(0x90c),_0x153c03=>{const _0x25df7b=_0x23168f;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x25df7b(0x965)])return;const _0x1a5247=SceneManager['_scene'][_0x25df7b(0xa73)];if(!_0x1a5247)return;VisuMZ[_0x25df7b(0x54f)](_0x153c03,_0x153c03);const _0x20c68c=Number(_0x153c03[_0x25df7b(0x5a9)])||0x0,_0x32d600=Number(_0x153c03[_0x25df7b(0x748)]),_0x1f0dd7=_0x153c03['Duration']||0x1,_0x300cca=_0x153c03[_0x25df7b(0xa34)]||_0x25df7b(0xa7f);_0x1a5247[_0x25df7b(0xa51)](_0x20c68c,_0x32d600,_0x1f0dd7,_0x300cca);}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x8d5),_0x2621e4=>{const _0x3fcbe6=_0x23168f;if(!SceneManager[_0x3fcbe6(0xbef)]())return;if(!Imported[_0x3fcbe6(0x965)])return;const _0x3ec7e4=SceneManager[_0x3fcbe6(0x23e)][_0x3fcbe6(0xa73)];if(!_0x3ec7e4)return;VisuMZ['ConvertParams'](_0x2621e4,_0x2621e4);const _0x211f1d=Number(_0x2621e4['Angle'])||0x0,_0x512f37=Number(_0x2621e4['Rate']),_0x33aa11=_0x2621e4[_0x3fcbe6(0xaaf)]||0x1,_0x25e6bc=_0x2621e4[_0x3fcbe6(0xa34)]||_0x3fcbe6(0xa7f),_0x3d3e3a=VisuMZ[_0x3fcbe6(0x31f)](_0x2621e4[_0x3fcbe6(0xbc7)]);for(const _0x41b656 of _0x3d3e3a){if(!_0x41b656)continue;if(!_0x41b656[_0x3fcbe6(0xbb5)]())continue;_0x41b656[_0x3fcbe6(0xbb5)]()[_0x3fcbe6(0xa51)](_0x211f1d,_0x512f37,_0x33aa11,_0x25e6bc);}}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x924),_0x5bc30a=>{const _0x42104a=_0x23168f;if(!SceneManager[_0x42104a(0xbef)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;VisuMZ[_0x42104a(0x54f)](_0x5bc30a,_0x5bc30a);const _0x4c4e66={'delay':_0x5bc30a[_0x42104a(0x2bb)],'duration':_0x5bc30a[_0x42104a(0x75f)],'hue':_0x5bc30a[_0x42104a(0xa25)],'opacityStart':_0x5bc30a[_0x42104a(0x2f4)],'tone':_0x5bc30a[_0x42104a(0x5a3)],'visible':!![]},_0x2b3fba=VisuMZ[_0x42104a(0x31f)](_0x5bc30a[_0x42104a(0xbc7)]);for(const _0x88e7e6 of _0x2b3fba){if(!_0x88e7e6)continue;_0x88e7e6[_0x42104a(0x294)](_0x4c4e66);}}),PluginManager['registerCommand'](pluginData[_0x23168f(0x611)],_0x23168f(0xa0c),_0x2d1483=>{const _0x4e9141=_0x23168f;if(!SceneManager[_0x4e9141(0xbef)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;VisuMZ[_0x4e9141(0x54f)](_0x2d1483,_0x2d1483);const _0x5d792c=VisuMZ['CreateActionSequenceTargets'](_0x2d1483[_0x4e9141(0xbc7)]);for(const _0x1aaebc of _0x5d792c){if(!_0x1aaebc)continue;_0x1aaebc['clearBattlerMotionTrailData']();}}),PluginManager[_0x23168f(0x594)](pluginData['name'],_0x23168f(0xb37),_0x305724=>{const _0x491b81=_0x23168f;if(!Imported[_0x491b81(0x965)])return;const _0x5635ca=SceneManager['_scene']['_spriteset'];if(!_0x5635ca)return;if(VisuMZ['ActSeqImpact'][_0x491b81(0x82e)]<=1.04){alert(_0x491b81(0x851)),SceneManager[_0x491b81(0x46e)]();return;}VisuMZ['ConvertParams'](_0x305724,_0x305724);const _0x5c2074=_0x305724[_0x491b81(0x77d)];_0x5635ca[_0x491b81(0x4ad)](_0x5c2074);}),PluginManager['registerCommand'](pluginData[_0x23168f(0x611)],_0x23168f(0x303),_0x5a25f5=>{const _0x53962a=_0x23168f;if(!Imported[_0x53962a(0x965)])return;const _0x1f89e1=SceneManager[_0x53962a(0x23e)]['_spriteset'];if(!_0x1f89e1)return;if(VisuMZ[_0x53962a(0x723)][_0x53962a(0x82e)]<=1.04){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager['exit']();return;}VisuMZ[_0x53962a(0x54f)](_0x5a25f5,_0x5a25f5);const _0xe5aac0=_0x5a25f5['Enable'];_0x1f89e1[_0x53962a(0x5b6)](_0xe5aac0);}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0xa83),_0x40a114=>{const _0x5837ee=_0x23168f;if(!Imported[_0x5837ee(0x965)])return;const _0x62aedd=SceneManager[_0x5837ee(0x23e)][_0x5837ee(0xa73)];if(!_0x62aedd)return;VisuMZ[_0x5837ee(0x54f)](_0x40a114,_0x40a114);const _0xbdf268=_0x40a114['X']||0x0,_0x58445b=_0x40a114['Y']||0x0,_0x56ac5b=_0x40a114['Amp']||0x0,_0x1797d3=_0x40a114[_0x5837ee(0x378)]||0x0,_0x5a0bd8=_0x40a114['Duration']||0x1;_0x62aedd[_0x5837ee(0x98c)](_0xbdf268,_0x58445b,_0x56ac5b,_0x1797d3,_0x5a0bd8);}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x284),_0x334044=>{const _0x4d8445=_0x23168f;if(!SceneManager[_0x4d8445(0xbef)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x384478=SceneManager[_0x4d8445(0x23e)]['_spriteset'];if(!_0x384478)return;VisuMZ[_0x4d8445(0x54f)](_0x334044,_0x334044);const _0x5c110d=VisuMZ[_0x4d8445(0x31f)](_0x334044['Targets']),_0x149a19=_0x334044[_0x4d8445(0x3df)],_0x3a484f=_0x334044[_0x4d8445(0x9c0)]||0x0,_0x1e0056=_0x334044[_0x4d8445(0x5a5)]||0x0,_0xe37a78=_0x334044[_0x4d8445(0x9cc)]||0x0,_0x29e928=_0x334044[_0x4d8445(0x378)]||0x0,_0x302f2c=_0x334044[_0x4d8445(0xaaf)]||0x1;for(const _0x248998 of _0x5c110d){if(!_0x248998)continue;if(!_0x248998[_0x4d8445(0xbb5)]())continue;const _0x57c550=_0x248998[_0x4d8445(0xbb5)]();let _0xbf6b63=_0x57c550[_0x4d8445(0x9af)],_0x4835bc=_0x57c550[_0x4d8445(0x489)];_0xbf6b63+=(Graphics[_0x4d8445(0x2e0)]-Graphics['boxWidth'])/0x2,_0x4835bc+=(Graphics[_0x4d8445(0xb1c)]-Graphics[_0x4d8445(0x493)])/0x2;if(_0x149a19[_0x4d8445(0x26e)](/front/i))_0xbf6b63+=(_0x248998[_0x4d8445(0x77b)]()?0x1:-0x1)*_0x57c550[_0x4d8445(0x56b)]()/0x2;else _0x149a19[_0x4d8445(0x26e)](/back/i)&&(_0xbf6b63+=(_0x248998[_0x4d8445(0x77b)]()?-0x1:0x1)*_0x57c550['mainSpriteWidth']()/0x2);if(_0x149a19[_0x4d8445(0x26e)](/head/i))_0x4835bc-=_0x57c550[_0x4d8445(0x371)]();else _0x149a19[_0x4d8445(0x26e)](/center/i)&&(_0x4835bc-=_0x57c550[_0x4d8445(0x371)]()/0x2);_0xbf6b63+=_0x3a484f,_0x4835bc+=_0x1e0056,_0x384478[_0x4d8445(0x98c)](_0xbf6b63,_0x4835bc,_0xe37a78,_0x29e928,_0x302f2c);}}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],'ActSeq_Impact_ShockwaveCenterTargets',_0x23d1b6=>{const _0x4bce5c=_0x23168f;if(!SceneManager[_0x4bce5c(0xbef)]())return;if(!Imported[_0x4bce5c(0x965)])return;const _0x54a5a1=SceneManager[_0x4bce5c(0x23e)][_0x4bce5c(0xa73)];if(!_0x54a5a1)return;VisuMZ[_0x4bce5c(0x54f)](_0x23d1b6,_0x23d1b6);const _0x53eca5=VisuMZ['CreateActionSequenceTargets'](_0x23d1b6[_0x4bce5c(0xbc7)]),_0x313c36=_0x23d1b6['TargetLocation'],_0x105b35=_0x23d1b6[_0x4bce5c(0x9c0)]||0x0,_0x55838f=_0x23d1b6[_0x4bce5c(0x5a5)]||0x0,_0x58de71=_0x23d1b6[_0x4bce5c(0x9cc)]||0x0,_0x5cbe63=_0x23d1b6[_0x4bce5c(0x378)]||0x0,_0x563602=_0x23d1b6['Duration']||0x1,_0x18a7ab=Math[_0x4bce5c(0x690)](..._0x53eca5[_0x4bce5c(0x37f)](_0x51b588=>_0x51b588[_0x4bce5c(0xbb5)]()[_0x4bce5c(0x9af)]-_0x51b588[_0x4bce5c(0xbb5)]()['mainSpriteWidth']()/0x2)),_0x3ba258=Math[_0x4bce5c(0x705)](..._0x53eca5[_0x4bce5c(0x37f)](_0x50632f=>_0x50632f[_0x4bce5c(0xbb5)]()['_baseX']+_0x50632f[_0x4bce5c(0xbb5)]()['mainSpriteWidth']()/0x2)),_0x42e50e=Math[_0x4bce5c(0x690)](..._0x53eca5[_0x4bce5c(0x37f)](_0x263c7a=>_0x263c7a[_0x4bce5c(0xbb5)]()[_0x4bce5c(0x489)]-_0x263c7a[_0x4bce5c(0xbb5)]()[_0x4bce5c(0x371)]())),_0x126669=Math[_0x4bce5c(0x705)](..._0x53eca5[_0x4bce5c(0x37f)](_0x4595c6=>_0x4595c6[_0x4bce5c(0xbb5)]()[_0x4bce5c(0x489)])),_0x822234=_0x53eca5['filter'](_0x381113=>_0x381113[_0x4bce5c(0x36b)]())[_0x4bce5c(0x312)],_0x4afac4=_0x53eca5[_0x4bce5c(0x239)](_0x107d4b=>_0x107d4b[_0x4bce5c(0x77b)]())['length'];let _0x477031=0x0,_0x3f5739=0x0;if(_0x313c36[_0x4bce5c(0x26e)](/front/i))_0x477031=_0x822234>=_0x4afac4?_0x18a7ab:_0x3ba258;else{if(_0x313c36[_0x4bce5c(0x26e)](/middle/i))_0x477031=(_0x18a7ab+_0x3ba258)/0x2,melee=-0x1;else _0x313c36[_0x4bce5c(0x26e)](/back/i)&&(_0x477031=_0x822234>=_0x4afac4?_0x3ba258:_0x18a7ab);}if(_0x313c36['match'](/head/i))_0x3f5739=_0x42e50e;else{if(_0x313c36[_0x4bce5c(0x26e)](/center/i))_0x3f5739=(_0x42e50e+_0x126669)/0x2;else _0x313c36['match'](/base/i)&&(_0x3f5739=_0x126669);}_0x477031+=(Graphics['width']-Graphics[_0x4bce5c(0x2d7)])/0x2,_0x3f5739+=(Graphics[_0x4bce5c(0xb1c)]-Graphics[_0x4bce5c(0x493)])/0x2,_0x477031+=_0x105b35,_0x3f5739+=_0x55838f,_0x54a5a1[_0x4bce5c(0x98c)](_0x477031,_0x3f5739,_0x58de71,_0x5cbe63,_0x563602);}),PluginManager['registerCommand'](pluginData[_0x23168f(0x611)],_0x23168f(0x55d),_0x2e970b=>{const _0x265b7a=_0x23168f;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x3e10e3=SceneManager[_0x265b7a(0x23e)][_0x265b7a(0xa73)];if(!_0x3e10e3)return;if(VisuMZ[_0x265b7a(0x723)]['version']<=1.04){alert(_0x265b7a(0x851)),SceneManager[_0x265b7a(0x46e)]();return;}VisuMZ[_0x265b7a(0x54f)](_0x2e970b,_0x2e970b);const _0x232373=$gameTemp[_0x265b7a(0x7aa)](),_0x4745f0=Math[_0x265b7a(0x705)](0.01,_0x2e970b[_0x265b7a(0x482)]);$gameTemp[_0x265b7a(0x3cd)](_0x4745f0,_0x232373);}),PluginManager['registerCommand'](pluginData[_0x23168f(0x611)],_0x23168f(0xaa2),_0x2c33bd=>{const _0x21964a=_0x23168f;if(!Imported[_0x21964a(0x965)])return;const _0x17d775=SceneManager[_0x21964a(0x23e)]['_spriteset'];if(!_0x17d775)return;if(VisuMZ['ActSeqImpact'][_0x21964a(0x82e)]<=1.04){alert(_0x21964a(0x851)),SceneManager[_0x21964a(0x46e)]();return;}VisuMZ[_0x21964a(0x54f)](_0x2c33bd,_0x2c33bd);const _0x18f814=$gameTemp[_0x21964a(0x7aa)](),_0x1b8aa6=_0x2c33bd['ms']||0x1;VisuMZ[_0x21964a(0x723)]['freezeTime'](_0x1b8aa6,_0x18f814);}),PluginManager[_0x23168f(0x594)](pluginData['name'],_0x23168f(0xa46),_0x5d1260=>{const _0x2f847e=_0x23168f;if(!Imported[_0x2f847e(0x965)])return;const _0x2f4f1f=SceneManager[_0x2f847e(0x23e)][_0x2f847e(0xa73)];if(!_0x2f4f1f)return;VisuMZ[_0x2f847e(0x54f)](_0x5d1260,_0x5d1260);const _0x47f0de=_0x5d1260['X']||0x0,_0x3b511b=_0x5d1260['Y']||0x0,_0x5a64b1=_0x5d1260[_0x2f847e(0xc0)]||0x0,_0x2be1e0=_0x5d1260[_0x2f847e(0xb41)]||0x0,_0x302dd6=_0x5d1260['Duration']||0x1,_0x5af520=_0x5d1260[_0x2f847e(0xa34)]||_0x2f847e(0xa7f);_0x2f4f1f['setupZoomBlurImpactFilter'](_0x5a64b1,_0x47f0de,_0x3b511b,_0x2be1e0,_0x302dd6,_0x5af520);}),PluginManager['registerCommand'](pluginData[_0x23168f(0x611)],_0x23168f(0x55b),_0x3af409=>{const _0x578daa=_0x23168f;if(!Imported[_0x578daa(0x965)])return;const _0x2761fd=SceneManager[_0x578daa(0x23e)][_0x578daa(0xa73)];if(!_0x2761fd)return;VisuMZ[_0x578daa(0x54f)](_0x3af409,_0x3af409);const _0x342740=VisuMZ['CreateActionSequenceTargets'](_0x3af409[_0x578daa(0xbc7)]),_0xc555ca=_0x3af409[_0x578daa(0x3df)],_0x3f01da=_0x3af409[_0x578daa(0x9c0)]||0x0,_0x10c642=_0x3af409[_0x578daa(0x5a5)]||0x0,_0x17764a=_0x3af409[_0x578daa(0xc0)]||0x0,_0x3878ee=_0x3af409[_0x578daa(0xb41)]||0x0,_0x1d61df=_0x3af409[_0x578daa(0xaaf)]||0x1,_0x50a81d=_0x3af409[_0x578daa(0xa34)]||_0x578daa(0xa7f),_0x1a87dd=Math['min'](..._0x342740[_0x578daa(0x37f)](_0x996c1b=>_0x996c1b[_0x578daa(0xbb5)]()[_0x578daa(0x9af)]-_0x996c1b[_0x578daa(0xbb5)]()['mainSpriteWidth']()/0x2)),_0x2acfd5=Math[_0x578daa(0x705)](..._0x342740[_0x578daa(0x37f)](_0x364b88=>_0x364b88[_0x578daa(0xbb5)]()[_0x578daa(0x9af)]+_0x364b88[_0x578daa(0xbb5)]()[_0x578daa(0x56b)]()/0x2)),_0x35ec04=Math[_0x578daa(0x690)](..._0x342740[_0x578daa(0x37f)](_0x137cd2=>_0x137cd2[_0x578daa(0xbb5)]()[_0x578daa(0x489)]-_0x137cd2[_0x578daa(0xbb5)]()[_0x578daa(0x371)]())),_0xf0bb62=Math[_0x578daa(0x705)](..._0x342740[_0x578daa(0x37f)](_0x5cc88b=>_0x5cc88b[_0x578daa(0xbb5)]()[_0x578daa(0x489)])),_0xdc98a9=_0x342740[_0x578daa(0x239)](_0x39dc84=>_0x39dc84['isActor']())['length'],_0x1405bf=_0x342740['filter'](_0x109984=>_0x109984['isEnemy']())['length'];let _0x284282=0x0,_0x1f243f=0x0;if(_0xc555ca[_0x578daa(0x26e)](/front/i))_0x284282=_0xdc98a9>=_0x1405bf?_0x1a87dd:_0x2acfd5;else{if(_0xc555ca['match'](/middle/i))_0x284282=(_0x1a87dd+_0x2acfd5)/0x2,melee=-0x1;else _0xc555ca[_0x578daa(0x26e)](/back/i)&&(_0x284282=_0xdc98a9>=_0x1405bf?_0x2acfd5:_0x1a87dd);}if(_0xc555ca['match'](/head/i))_0x1f243f=_0x35ec04;else{if(_0xc555ca[_0x578daa(0x26e)](/center/i))_0x1f243f=(_0x35ec04+_0xf0bb62)/0x2;else _0xc555ca[_0x578daa(0x26e)](/base/i)&&(_0x1f243f=_0xf0bb62);}_0x284282+=(Graphics[_0x578daa(0x2e0)]-Graphics['boxWidth'])/0x2,_0x1f243f+=(Graphics[_0x578daa(0xb1c)]-Graphics[_0x578daa(0x493)])/0x2,_0x284282+=_0x3f01da,_0x1f243f+=_0x10c642,_0x2761fd['setupZoomBlurImpactFilter'](_0x17764a,_0x284282,_0x1f243f,_0x3878ee,_0x1d61df,_0x50a81d);}),PluginManager[_0x23168f(0x594)](pluginData['name'],_0x23168f(0x19d),_0x60936a=>{const _0x3903ea=_0x23168f;if(!Imported[_0x3903ea(0x965)])return;const _0x179ecd=SceneManager[_0x3903ea(0x23e)]['_spriteset'];if(!_0x179ecd)return;if(VisuMZ[_0x3903ea(0x723)]['version']<=1.05){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x3903ea(0x46e)]();return;}VisuMZ[_0x3903ea(0x54f)](_0x60936a,_0x60936a);const _0x3b8334=VisuMZ['CreateActionSequenceTargets'](_0x60936a[_0x3903ea(0xbc7)]),_0x299605={'filename':_0x60936a[_0x3903ea(0x68c)],'horzCells':_0x60936a[_0x3903ea(0x711)]||0x1,'vertCells':_0x60936a[_0x3903ea(0x479)]||0x1,'frameDelay':_0x60936a[_0x3903ea(0xab5)]||0x1,'smooth':_0x60936a[_0x3903ea(0x97c)]||![],'anchorX':_0x60936a[_0x3903ea(0xa2a)]||0x0,'anchorY':_0x60936a[_0x3903ea(0x6d5)]||0x0,'offsetX':_0x60936a[_0x3903ea(0x7dd)]||0x0,'offsetY':_0x60936a['offsetY']||0x0};for(const _0x257476 of _0x3b8334){if(!_0x257476)continue;if(!_0x257476[_0x3903ea(0xbb5)]())continue;_0x257476[_0x3903ea(0xbb5)]()[_0x3903ea(0xcd)](_0x299605);}const _0x27ab8e=$gameTemp[_0x3903ea(0x7aa)]();_0x27ab8e&&_0x27ab8e[_0x3903ea(0x351)](_0x3903ea(0x251));}),PluginManager['registerCommand'](pluginData[_0x23168f(0x611)],'ActSeq_Inject_AnimationEnd',_0x951680=>{const _0x1088ea=_0x23168f;if(!Imported[_0x1088ea(0x965)])return;const _0x5a6d76=SceneManager[_0x1088ea(0x23e)]['_spriteset'];if(!_0x5a6d76)return;if(VisuMZ['ActSeqImpact'][_0x1088ea(0x82e)]<=1.05){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x1088ea(0x46e)]();return;}VisuMZ[_0x1088ea(0x54f)](_0x951680,_0x951680);const _0xfbc312=VisuMZ[_0x1088ea(0x31f)](_0x951680['Targets']);for(const _0x2d5c6b of _0xfbc312){if(!_0x2d5c6b)continue;if(!_0x2d5c6b[_0x1088ea(0xbb5)]())continue;_0x2d5c6b[_0x1088ea(0xbb5)]()[_0x1088ea(0xba2)]();}}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0xbed),_0x40bced=>{const _0x5e9390=_0x23168f;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x10cb2c=SceneManager[_0x5e9390(0x23e)][_0x5e9390(0xa73)];if(!_0x10cb2c)return;if(VisuMZ[_0x5e9390(0x723)][_0x5e9390(0x82e)]<=1.05){alert(_0x5e9390(0x851)),SceneManager['exit']();return;}VisuMZ[_0x5e9390(0x54f)](_0x40bced,_0x40bced);const _0xb03b08=VisuMZ[_0x5e9390(0x31f)](_0x40bced[_0x5e9390(0xbc7)]),_0x31273a=_0x40bced['pause'];for(const _0x1df852 of _0xb03b08){if(!_0x1df852)continue;if(!_0x1df852[_0x5e9390(0xbb5)]())continue;_0x1df852[_0x5e9390(0xbb5)]()['pauseInjectAnimation'](_0x31273a);}}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x2b6),_0x5cde3b=>{const _0x16373f=_0x23168f;if(!SceneManager[_0x16373f(0xbef)]())return;const _0x443657=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x443657)return;_0x443657[_0x16373f(0x351)](_0x16373f(0xac0));}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],'ActSeq_Mechanics_ActionEffect',_0x4d906d=>{const _0x2c35bd=_0x23168f;if(!SceneManager[_0x2c35bd(0xbef)]())return;VisuMZ['ConvertParams'](_0x4d906d,_0x4d906d);const _0x3d355e=$gameTemp[_0x2c35bd(0x7aa)](),_0x400eae=BattleManager[_0x2c35bd(0x13a)],_0x1e9ca0=BattleManager['_subject'],_0x4dd95b=BattleManager[_0x2c35bd(0x397)];if(!_0x3d355e||!_0x400eae||!_0x1e9ca0)return;if(!_0x400eae[_0x2c35bd(0x42e)]())return;const _0x423f39=VisuMZ['CreateActionSequenceTargets'](_0x4d906d[_0x2c35bd(0xbc7)]);for(const _0x3563e7 of _0x423f39){if(!_0x3563e7)continue;_0x4dd95b[_0x2c35bd(0x908)](_0x2c35bd(0x2b7),_0x1e9ca0,_0x3563e7);}_0x3d355e[_0x2c35bd(0x351)](_0x2c35bd(0xb86));}),PluginManager[_0x23168f(0x594)](pluginData['name'],_0x23168f(0x61b),_0x4ed2d2=>{const _0x31e415=_0x23168f;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActiveChainSkills'])return;$gameTemp[_0x31e415(0x909)]=!![];}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x8ec),_0x50a7c3=>{const _0x4db80d=_0x23168f;if(!SceneManager[_0x4db80d(0xbef)]())return;VisuMZ[_0x4db80d(0x54f)](_0x50a7c3,_0x50a7c3);const _0x163d28=[_0x4db80d(0xbb2),_0x4db80d(0x368),_0x4db80d(0x677),_0x4db80d(0xac9),_0x4db80d(0x602),'MDF',_0x4db80d(0x9ac),'LUK'],_0xc9770=_0x50a7c3[_0x4db80d(0x451)],_0x136715=_0x50a7c3['Debuffs'],_0xc4e128=_0x50a7c3[_0x4db80d(0x2ef)],_0x12c145=VisuMZ['CreateActionSequenceTargets'](_0x50a7c3[_0x4db80d(0xbc7)]);for(const _0x5a7b8b of _0x12c145){if(!_0x5a7b8b)continue;for(const _0x166951 of _0xc9770){const _0x57cd76=_0x163d28[_0x4db80d(0xb3c)](_0x166951['toUpperCase']()[_0x4db80d(0xf4)]());_0x57cd76>=0x0&&_0x57cd76<=0x7&&_0x5a7b8b[_0x4db80d(0x40b)](_0x57cd76,_0xc4e128);}for(const _0x5aa0a0 of _0x136715){const _0x111d62=_0x163d28[_0x4db80d(0xb3c)](_0x5aa0a0[_0x4db80d(0x1ef)]()[_0x4db80d(0xf4)]());_0x111d62>=0x0&&_0x111d62<=0x7&&_0x5a7b8b[_0x4db80d(0x2f0)](_0x111d62,_0xc4e128);}}}),PluginManager[_0x23168f(0x594)](pluginData['name'],_0x23168f(0xac2),_0x46009f=>{const _0x3630c0=_0x23168f;if(!SceneManager[_0x3630c0(0xbef)]())return;VisuMZ['ConvertParams'](_0x46009f,_0x46009f);const _0xefe9f1=_0x46009f[_0x3630c0(0x134)],_0x1f9e0e=VisuMZ[_0x3630c0(0x31f)](_0x46009f[_0x3630c0(0xbc7)]);for(const _0x1a60da of _0x1f9e0e){if(!_0x1a60da)continue;for(const _0x221afd of _0xefe9f1){_0x1a60da['addState'](_0x221afd);}}}),PluginManager[_0x23168f(0x594)](pluginData['name'],'ActSeq_Mechanics_ArmorPenetration',_0x1d4541=>{const _0x500657=_0x23168f;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x500657(0x54f)](_0x1d4541,_0x1d4541);const _0xf6d681=BattleManager[_0x500657(0x13a)],_0x46b021={'arPenRate':_0x1d4541[_0x500657(0x209)],'arPenFlat':_0x1d4541[_0x500657(0x29c)],'arRedRate':_0x1d4541['ArRedRate'],'arRedFlat':_0x1d4541[_0x500657(0x79d)]};_0xf6d681[_0x500657(0xd2)]=_0x46b021;}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x299),_0x1eed2f=>{const _0x59b9f1=_0x23168f;if(!SceneManager[_0x59b9f1(0xbef)]())return;if(!Imported[_0x59b9f1(0x6d9)])return;VisuMZ[_0x59b9f1(0x54f)](_0x1eed2f,_0x1eed2f);const _0x41e384=VisuMZ['CreateActionSequenceTargets'](_0x1eed2f[_0x59b9f1(0xbc7)]),_0x581541=_0x1eed2f[_0x59b9f1(0x702)]||0x1;for(const _0x482566 of _0x41e384){if(!_0x482566)continue;if(!_0x482566[_0x59b9f1(0x77b)]())continue;_0x482566[_0x59b9f1(0x8a0)](_0x581541);}}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x222),_0x5b0dc1=>{const _0x36d518=_0x23168f;if(!SceneManager[_0x36d518(0xbef)]())return;if(!Imported[_0x36d518(0x85e)])return;if(!BattleManager[_0x36d518(0x3d4)]())return;VisuMZ[_0x36d518(0x54f)](_0x5b0dc1,_0x5b0dc1);const _0x3311a9=VisuMZ['CreateActionSequenceTargets'](_0x5b0dc1['Targets']),_0x86af70=_0x5b0dc1[_0x36d518(0x30e)],_0xb477ff=_0x5b0dc1[_0x36d518(0x30e)],_0x292c4f=_0x5b0dc1['Interrupt'];for(const _0x438d7e of _0x3311a9){if(!_0x438d7e)continue;if(_0x438d7e[_0x36d518(0x8a5)]())_0x438d7e[_0x36d518(0x151)](_0x86af70);else{if(_0x438d7e['isAtbCastingState']()){_0x438d7e[_0x36d518(0x435)](_0xb477ff);if(_0x292c4f)_0x438d7e[_0x36d518(0x5cd)]();}}}}),PluginManager[_0x23168f(0x594)](pluginData['name'],_0x23168f(0xb83),_0x418ec0=>{const _0x260be7=_0x23168f;if(!SceneManager[_0x260be7(0xbef)]())return;if(!Imported[_0x260be7(0x3d5)])return;VisuMZ[_0x260be7(0x54f)](_0x418ec0,_0x418ec0);const _0x48d05d=VisuMZ[_0x260be7(0x31f)](_0x418ec0['Targets']),_0x17e5c3=_0x418ec0[_0x260be7(0x65c)];for(const _0x2a6b21 of _0x48d05d){if(!_0x2a6b21)continue;_0x2a6b21[_0x260be7(0x737)](_0x17e5c3);}}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x400),_0x511488=>{const _0xc0b2fa=_0x23168f;if(!SceneManager[_0xc0b2fa(0xbef)]())return;if(!Imported[_0xc0b2fa(0x3d5)])return;if(!BattleManager[_0xc0b2fa(0x530)])return;VisuMZ[_0xc0b2fa(0x54f)](_0x511488,_0x511488);const _0x10cf80=_0x511488[_0xc0b2fa(0x577)];$gameVariables[_0xc0b2fa(0xa45)](_0x10cf80,BattleManager['_subject'][_0xc0b2fa(0x834)]());}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x488),_0xcffbf6=>{const _0x204b03=_0x23168f;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x204b03(0x1be)])return;VisuMZ[_0x204b03(0x54f)](_0xcffbf6,_0xcffbf6);const _0x505eac=VisuMZ[_0x204b03(0x31f)](_0xcffbf6[_0x204b03(0xbc7)]),_0x53cb8f=_0xcffbf6[_0x204b03(0xa07)];for(const _0xc8f60d of _0x505eac){if(!_0xc8f60d)continue;if(_0xc8f60d[_0x204b03(0xa0b)]())continue;if(!_0xc8f60d[_0x204b03(0x7f9)]())continue;_0xc8f60d[_0x204b03(0x79c)](_0x53cb8f);}}),PluginManager[_0x23168f(0x594)](pluginData['name'],_0x23168f(0x8de),_0x613f86=>{const _0x2c550f=_0x23168f;if(!SceneManager[_0x2c550f(0xbef)]())return;if(!Imported['VisuMZ_4_BreakShields'])return;VisuMZ['ConvertParams'](_0x613f86,_0x613f86);const _0x31e2cd=VisuMZ['CreateActionSequenceTargets'](_0x613f86[_0x2c550f(0xbc7)]);for(const _0x489107 of _0x31e2cd){if(!_0x489107)continue;if(_0x489107[_0x2c550f(0xa0b)]())continue;if(!_0x489107['isAffectedByBreakShield']())continue;_0x489107[_0x2c550f(0x6ee)]();}}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x147),_0x25e6e1=>{const _0x3ce7e3=_0x23168f;if(!SceneManager[_0x3ce7e3(0xbef)]())return;if(!Imported[_0x3ce7e3(0x7ef)])return;if(!BattleManager['isBTB']())return;VisuMZ[_0x3ce7e3(0x54f)](_0x25e6e1,_0x25e6e1);const _0x518f06=VisuMZ[_0x3ce7e3(0x31f)](_0x25e6e1[_0x3ce7e3(0xbc7)]),_0x39464b=_0x25e6e1['BravePoints'];for(const _0x52614d of _0x518f06){if(!_0x52614d)continue;_0x52614d[_0x3ce7e3(0x43c)](_0x39464b);}}),PluginManager[_0x23168f(0x594)](pluginData['name'],_0x23168f(0xa44),_0x159523=>{const _0x41ada9=_0x23168f;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x159523,_0x159523);const _0x5678ff=$gameTemp[_0x41ada9(0x7aa)](),_0x354556=BattleManager[_0x41ada9(0x13a)],_0x57c6b5=BattleManager['_subject'];if(!_0x5678ff||!_0x354556||!_0x57c6b5)return;if(!_0x354556[_0x41ada9(0x42e)]())return;const _0x5fbd59=VisuMZ[_0x41ada9(0x31f)](_0x159523[_0x41ada9(0xbc7)]);for(const _0x43d914 of _0x5fbd59){if(!_0x43d914)continue;_0x159523[_0x41ada9(0x13d)]&&(_0x43d914['removeImmortal'](),_0x43d914[_0x41ada9(0x5c5)](_0x43d914[_0x41ada9(0x915)]())),_0x43d914[_0x41ada9(0x43f)]()&&_0x43d914[_0x41ada9(0x5dd)]();}_0x5678ff[_0x41ada9(0x351)](_0x41ada9(0x62a));}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x38a),_0x5b101a=>{const _0x263c88=_0x23168f;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x263c88(0x8a1)])return;if(!BattleManager[_0x263c88(0xb05)]())return;VisuMZ['ConvertParams'](_0x5b101a,_0x5b101a);const _0x2031a6=VisuMZ['CreateActionSequenceTargets'](_0x5b101a[_0x263c88(0xbc7)]),_0x37ac03=_0x5b101a[_0x263c88(0x125)];for(const _0x404f8b of _0x2031a6){if(!_0x404f8b)continue;_0x404f8b[_0x263c88(0x1f0)](_0x37ac03);}}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x8fa),_0x5a4459=>{const _0x541194=_0x23168f;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x541194(0x8a1)])return;if(!BattleManager['isCTB']())return;VisuMZ[_0x541194(0x54f)](_0x5a4459,_0x5a4459);const _0xdf799=VisuMZ[_0x541194(0x31f)](_0x5a4459[_0x541194(0xbc7)]),_0x442946=_0x5a4459[_0x541194(0x30e)],_0x27595b=_0x5a4459[_0x541194(0x30e)];for(const _0x1c7448 of _0xdf799){if(!_0x1c7448)continue;if(_0x1c7448[_0x541194(0x70c)]===_0x541194(0x4b0))_0x1c7448['changeCtbChargeTime'](_0x442946);else _0x1c7448['_tpbState']===_0x541194(0x241)&&_0x1c7448[_0x541194(0x985)](_0x27595b);}}),PluginManager[_0x23168f(0x594)](pluginData['name'],_0x23168f(0xaf9),_0x2c26c6=>{const _0x4555a8=_0x23168f;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x4555a8(0x54f)](_0x2c26c6,_0x2c26c6);const _0x27e94d=BattleManager[_0x4555a8(0x13a)];if(!_0x27e94d)return;let _0x29c18e=_0x2c26c6['Formula'];_0x27e94d[_0x4555a8(0x7e4)](_0x29c18e);}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],'ActSeq_Mechanics_DamagePopup',_0x227a8d=>{const _0x2aa9b2=_0x23168f;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x2aa9b2(0x54f)](_0x227a8d,_0x227a8d);const _0x5821d4=VisuMZ[_0x2aa9b2(0x31f)](_0x227a8d[_0x2aa9b2(0xbc7)]);for(const _0x46ea71 of _0x5821d4){if(!_0x46ea71)continue;if(_0x46ea71['shouldPopupDamage']())_0x46ea71[_0x2aa9b2(0x292)]();}}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x62d),_0x5c7158=>{const _0x144cb8=_0x23168f;if(!SceneManager[_0x144cb8(0xbef)]())return;VisuMZ[_0x144cb8(0x54f)](_0x5c7158,_0x5c7158);const _0x577576=$gameTemp[_0x144cb8(0x7aa)](),_0xa1d883=BattleManager['_subject'],_0x879ca0=_0x5c7158[_0x144cb8(0x59e)];if(!_0x577576)return;if(!_0xa1d883)return;_0xa1d883&&_0xa1d883[_0x144cb8(0x14e)]()&&_0x879ca0['toUpperCase']()[_0x144cb8(0xf4)]()!==_0x144cb8(0x1ee)&&_0x577576[_0x144cb8(0x632)]([_0x879ca0]);}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x5ee),_0x56e4b8=>{const _0x1f331f=_0x23168f;if(!SceneManager[_0x1f331f(0xbef)]())return;VisuMZ[_0x1f331f(0x54f)](_0x56e4b8,_0x56e4b8);const _0x3bf3fd=$gameTemp[_0x1f331f(0x7aa)](),_0x318f55=BattleManager[_0x1f331f(0x397)];if(!_0x3bf3fd)return;const _0x5084a2=VisuMZ[_0x1f331f(0x31f)](_0x56e4b8[_0x1f331f(0x531)]),_0x39db8f=VisuMZ[_0x1f331f(0x31f)](_0x56e4b8['Targets']);for(const _0x39c31f of _0x5084a2){for(const _0x140ea9 of _0x39db8f){if(!_0x140ea9)continue;const _0x2b9f0a=$dataSkills[_0x39c31f[_0x1f331f(0x65b)]()];_0x318f55['push'](_0x1f331f(0x789),_0x39c31f,_0x140ea9,_0x2b9f0a);}}_0x3bf3fd['setWaitMode']('battlelog');}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x357),_0x3fd9f3=>{const _0x897961=_0x23168f;if(!SceneManager[_0x897961(0xbef)]())return;VisuMZ[_0x897961(0x54f)](_0x3fd9f3,_0x3fd9f3);const _0x55b8d1=$gameTemp[_0x897961(0x7aa)](),_0xdb722=BattleManager[_0x897961(0x397)];if(!_0x55b8d1)return;const _0x717644=VisuMZ[_0x897961(0x31f)](_0x3fd9f3[_0x897961(0x531)]),_0x3f1ad6=VisuMZ[_0x897961(0x31f)](_0x3fd9f3[_0x897961(0xbc7)]);for(const _0x3ce05c of _0x717644){for(const _0x3c7164 of _0x3f1ad6){if(!_0x3c7164)continue;const _0x4d09a4=$dataSkills[_0x3ce05c['guardSkillId']()];_0xdb722[_0x897961(0x908)]('emulateActionEffect',_0x3ce05c,_0x3c7164,_0x4d09a4);}}_0x55b8d1['setWaitMode'](_0x897961(0xb86));}),PluginManager[_0x23168f(0x594)](pluginData['name'],'ActSeq_Mechanics_EmulateItemEffect',_0x523834=>{const _0x3103e6=_0x23168f;if(!SceneManager[_0x3103e6(0xbef)]())return;VisuMZ[_0x3103e6(0x54f)](_0x523834,_0x523834);const _0x3bd9bb=$gameTemp[_0x3103e6(0x7aa)](),_0x1f5d4e=BattleManager[_0x3103e6(0x397)],_0x4b8ba8=Number(_0x523834[_0x3103e6(0x5f8)]||0x1),_0x16518b=$dataItems[_0x4b8ba8];if(!_0x3bd9bb)return;if(!_0x16518b)return;const _0x406475=VisuMZ[_0x3103e6(0x31f)](_0x523834['Users']),_0x5354a7=VisuMZ[_0x3103e6(0x31f)](_0x523834[_0x3103e6(0xbc7)]);for(const _0x12ea3c of _0x406475){for(const _0x129e62 of _0x5354a7){if(!_0x129e62)continue;_0x1f5d4e[_0x3103e6(0x908)]('emulateActionEffect',_0x12ea3c,_0x129e62,_0x16518b);}}_0x3bd9bb[_0x3103e6(0x351)](_0x3103e6(0xb86));}),PluginManager['registerCommand'](pluginData['name'],_0x23168f(0x11b),_0x1e36f8=>{const _0x2aca79=_0x23168f;if(!SceneManager[_0x2aca79(0xbef)]())return;VisuMZ[_0x2aca79(0x54f)](_0x1e36f8,_0x1e36f8);let _0x5331eb=Number(_0x1e36f8['SkillID']||0x0);if(_0x5331eb<=0x0){const _0x8bd51c=BattleManager[_0x2aca79(0x13a)];if(_0x8bd51c&&_0x8bd51c[_0x2aca79(0x243)]())_0x5331eb=_0x8bd51c['item']()['id'];else return;}const _0x428e32=$dataSkills[_0x5331eb];if(!_0x428e32)return;const _0x26cbfe=VisuMZ[_0x2aca79(0x31f)](_0x1e36f8[_0x2aca79(0x531)]);for(const _0x290278 of _0x26cbfe){_0x290278[_0x2aca79(0xb56)](_0x428e32);}}),PluginManager[_0x23168f(0x594)](pluginData['name'],_0x23168f(0xbd4),_0x5e5cf2=>{const _0x45b596=_0x23168f;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x45b596(0x54f)](_0x5e5cf2,_0x5e5cf2);const _0x159c1a=$gameTemp[_0x45b596(0x7aa)](),_0x32c679=BattleManager[_0x45b596(0x397)],_0x38ba6f=Number(_0x5e5cf2['SkillID']||0x1),_0x138aa4=$dataSkills[_0x38ba6f];if(!_0x159c1a)return;if(!_0x138aa4)return;const _0x19148e=VisuMZ['CreateActionSequenceTargets'](_0x5e5cf2[_0x45b596(0x531)]),_0x4a5005=VisuMZ[_0x45b596(0x31f)](_0x5e5cf2[_0x45b596(0xbc7)]);for(const _0x2c7bbb of _0x19148e){for(const _0x503b68 of _0x4a5005){if(!_0x503b68)continue;_0x32c679[_0x45b596(0x908)](_0x45b596(0x789),_0x2c7bbb,_0x503b68,_0x138aa4);}}_0x159c1a[_0x45b596(0x351)]('battlelog');}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],'ActSeq_Mechanics_EnemyEscape',_0xd20fb4=>{const _0x2526ee=_0x23168f;if(!SceneManager[_0x2526ee(0xbef)]())return;VisuMZ[_0x2526ee(0x54f)](_0xd20fb4,_0xd20fb4);const _0x5a8042=VisuMZ[_0x2526ee(0x31f)](_0xd20fb4[_0x2526ee(0xbc7)]);for(const _0x4161ee of _0x5a8042){if(!_0x4161ee)continue;if(!_0x4161ee[_0x2526ee(0x77b)]())continue;_0x4161ee[_0x2526ee(0xb96)]();}}),PluginManager['registerCommand'](pluginData['name'],_0x23168f(0xae4),_0x12d6e1=>{const _0x307fac=_0x23168f;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_2_BattleSystemETB'])return;if(!BattleManager[_0x307fac(0x144)]())return;VisuMZ[_0x307fac(0x54f)](_0x12d6e1,_0x12d6e1);const _0x25de73=_0x12d6e1[_0x307fac(0x8a4)];BattleManager[_0x307fac(0x530)]&&BattleManager[_0x307fac(0x530)]['friendsUnit']()[_0x307fac(0x73f)](_0x25de73);}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],'ActSeq_Mechanics_FtbAction',_0x359582=>{const _0x1bc75b=_0x23168f;if(!SceneManager[_0x1bc75b(0xbef)]())return;if(!Imported[_0x1bc75b(0x2d1)])return;if(!BattleManager[_0x1bc75b(0x5e1)]())return;VisuMZ[_0x1bc75b(0x54f)](_0x359582,_0x359582);const _0x29f9cc=_0x359582[_0x1bc75b(0x8a4)];BattleManager['_subject']&&BattleManager[_0x1bc75b(0x530)][_0x1bc75b(0x337)]()[_0x1bc75b(0x9d2)](_0x29f9cc);}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x94e),_0x25ce08=>{const _0x36e71d=_0x23168f;if(!SceneManager[_0x36e71d(0xbef)]())return;VisuMZ[_0x36e71d(0x54f)](_0x25ce08,_0x25ce08);const _0xd9d4d6=VisuMZ[_0x36e71d(0x31f)](_0x25ce08[_0x36e71d(0xbc7)]),_0x1d1f1f=_0x25ce08[_0x36e71d(0x710)],_0x42a08e=_0x25ce08['HP_Flat'],_0x2e8186=_0x25ce08[_0x36e71d(0x4a6)],_0x13b00a=_0x25ce08[_0x36e71d(0x105)],_0x741f00=_0x25ce08['TP_Rate'],_0x5357fa=_0x25ce08[_0x36e71d(0x719)],_0x40aed6=_0x25ce08[_0x36e71d(0xb5d)];for(const _0x412dc8 of _0xd9d4d6){if(!_0x412dc8)continue;const _0x1b8253=_0x412dc8[_0x36e71d(0x942)](),_0x592b8e=Math[_0x36e71d(0x1fc)](_0x1d1f1f*_0x412dc8[_0x36e71d(0x7c5)]+_0x42a08e),_0x356178=Math['round'](_0x2e8186*_0x412dc8['mmp']+_0x13b00a),_0x4fa69c=Math['round'](_0x741f00*_0x412dc8[_0x36e71d(0x893)]()+_0x5357fa);if(_0x592b8e!==0x0)_0x412dc8[_0x36e71d(0x714)](_0x592b8e);if(_0x356178!==0x0)_0x412dc8[_0x36e71d(0x7ee)](_0x356178);if(_0x4fa69c!==0x0)_0x412dc8[_0x36e71d(0x606)](_0x4fa69c);if(_0x40aed6)_0x412dc8[_0x36e71d(0x292)]();_0x1b8253&&_0x412dc8[_0x36e71d(0x14e)]()&&_0x412dc8[_0x36e71d(0x5dd)]();}}),PluginManager['registerCommand'](pluginData[_0x23168f(0x611)],_0x23168f(0x532),_0x3f83fb=>{const _0x6d9f89=_0x23168f;if(!SceneManager[_0x6d9f89(0xbef)]())return;VisuMZ[_0x6d9f89(0x54f)](_0x3f83fb,_0x3f83fb);const _0x4e2ec6=VisuMZ['CreateActionSequenceTargets'](_0x3f83fb['Targets']);for(const _0x34b688 of _0x4e2ec6){if(!_0x34b688)continue;_0x34b688[_0x6d9f89(0x49c)](_0x3f83fb[_0x6d9f89(0x980)]);}}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x4ae),_0x509885=>{const _0x496db9=_0x23168f;if(!SceneManager[_0x496db9(0xbef)]())return;VisuMZ[_0x496db9(0x54f)](_0x509885,_0x509885);const _0x12e273=BattleManager[_0x496db9(0x13a)],_0xecf6cc={'criticalHitRate':_0x509885[_0x496db9(0x2b1)],'criticalHitFlat':_0x509885[_0x496db9(0x104)],'criticalDmgRate':_0x509885[_0x496db9(0x68a)],'criticalDmgFlat':_0x509885[_0x496db9(0x100)],'damageRate':_0x509885[_0x496db9(0x2e1)],'damageFlat':_0x509885[_0x496db9(0xb24)],'hitRate':_0x509885[_0x496db9(0xb66)],'hitFlat':_0x509885[_0x496db9(0xa91)]};_0x12e273['_multipliers']=_0xecf6cc;}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x999),_0x29c29b=>{const _0x5418d4=_0x23168f;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x29c29b,_0x29c29b);const _0x236df8=_0x29c29b[_0x5418d4(0x14b)];SceneManager[_0x5418d4(0x23e)][_0x5418d4(0xb2d)](_0x236df8);}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0xa00),_0x577ddb=>{const _0x2dda7c=_0x23168f;if(!SceneManager[_0x2dda7c(0xbef)]())return;if(!Imported['VisuMZ_2_BattleSystemOTB'])return;if(!BattleManager[_0x2dda7c(0x2dd)]())return;VisuMZ[_0x2dda7c(0x54f)](_0x577ddb,_0x577ddb);const _0x58e54c=VisuMZ[_0x2dda7c(0x31f)](_0x577ddb[_0x2dda7c(0xbc7)]);for(const _0x1e92d8 of _0x58e54c){if(!_0x1e92d8)continue;let _0x141002=_0x577ddb['CurrentTurn'],_0x4fcb94=_0x577ddb[_0x2dda7c(0x1f7)],_0xde0570=_0x577ddb['FollowTurn'];BattleManager[_0x2dda7c(0x4a3)][_0x2dda7c(0x2d8)](_0x1e92d8)?_0x141002+=_0xde0570:_0x4fcb94+=_0xde0570,BattleManager[_0x2dda7c(0x830)](_0x1e92d8,-_0x141002,![]),BattleManager[_0x2dda7c(0x830)](_0x1e92d8,-_0x4fcb94,!![]);}}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x1b7),_0x58acdc=>{const _0x55a290=_0x23168f;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x55a290(0x38c)])return;if(!BattleManager[_0x55a290(0xb00)]())return;VisuMZ[_0x55a290(0x54f)](_0x58acdc,_0x58acdc);const _0x113d58=BattleManager['_subject']['friendsUnit'](),_0x16013e=_0x58acdc[_0x55a290(0x69c)],_0x300220=_0x58acdc['alterChange']||_0x55a290(0x984),_0x1d0fcc=_0x58acdc[_0x55a290(0x9a0)]||'unchanged',_0x1e2bf0=_0x58acdc[_0x55a290(0x97d)]||0x0,_0x5c6433=_0x58acdc[_0x55a290(0x50c)]||0x0;(_0x113d58['canAlterActionCostPTB']()||_0x16013e)&&(_0x16013e&&(_0x113d58[_0x55a290(0xb7c)]=_0x113d58[_0x55a290(0xb7c)]||{},_0x113d58[_0x55a290(0xb7c)][_0x55a290(0x47c)]=0x0),_0x113d58['alterActionCostPTB'](_0x300220,_0x1d0fcc,_0x1e2bf0,_0x5c6433));}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x1f9),_0x277028=>{const _0x446efd=_0x23168f;if(!SceneManager[_0x446efd(0xbef)]())return;if(!Imported[_0x446efd(0x38c)])return;if(!BattleManager['isPTB']())return;VisuMZ['ConvertParams'](_0x277028,_0x277028);const _0x1b277a=BattleManager['_subject'][_0x446efd(0x337)]();let _0x3c2043=Math[_0x446efd(0x705)](_0x277028[_0x446efd(0x95e)],0x0),_0x29de1b=_0x1b277a[_0x446efd(0x622)](),_0x5f1bf6=_0x1b277a[_0x446efd(0x4f3)]();while(_0x3c2043--){if(_0x29de1b<=0x0&&_0x5f1bf6<=0x0)break;else _0x29de1b>0x0?(_0x29de1b--,_0x5f1bf6++):_0x5f1bf6--;}_0x1b277a[_0x446efd(0x4f1)](_0x29de1b),_0x1b277a[_0x446efd(0xb1d)](_0x5f1bf6);}),PluginManager[_0x23168f(0x594)](pluginData['name'],_0x23168f(0x93d),_0x359232=>{const _0x47a621=_0x23168f;if(!SceneManager[_0x47a621(0xbef)]())return;if(!Imported['VisuMZ_2_BattleSystemPTB'])return;if(!BattleManager[_0x47a621(0xb00)]())return;VisuMZ[_0x47a621(0x54f)](_0x359232,_0x359232);const _0x3e2ae7=BattleManager[_0x47a621(0x530)]['friendsUnit']();let _0x13b11e=_0x359232[_0x47a621(0x30d)],_0x5d957f=_0x359232[_0x47a621(0x137)];_0x3e2ae7[_0x47a621(0xa54)](_0x13b11e),_0x3e2ae7[_0x47a621(0x790)](_0x5d957f);}),PluginManager[_0x23168f(0x594)](pluginData['name'],'ActSeq_Mechanics_RemoveBuffDebuff',_0x1c5a05=>{const _0x3d1eb1=_0x23168f;if(!SceneManager[_0x3d1eb1(0xbef)]())return;VisuMZ[_0x3d1eb1(0x54f)](_0x1c5a05,_0x1c5a05);const _0x443fdd=['MAXHP',_0x3d1eb1(0x368),_0x3d1eb1(0x677),_0x3d1eb1(0xac9),_0x3d1eb1(0x602),_0x3d1eb1(0x916),_0x3d1eb1(0x9ac),_0x3d1eb1(0x167)],_0x399770=_0x1c5a05['Buffs'],_0xc1640=_0x1c5a05[_0x3d1eb1(0x813)],_0x349cf7=VisuMZ[_0x3d1eb1(0x31f)](_0x1c5a05[_0x3d1eb1(0xbc7)]);for(const _0x91d584 of _0x349cf7){if(!_0x91d584)continue;for(const _0x2678ce of _0x399770){const _0x420c9a=_0x443fdd['indexOf'](_0x2678ce[_0x3d1eb1(0x1ef)]()['trim']());_0x420c9a>=0x0&&_0x420c9a<=0x7&&_0x91d584[_0x3d1eb1(0x83f)](_0x420c9a)&&_0x91d584[_0x3d1eb1(0x4b5)](_0x420c9a);}for(const _0x4bb24b of _0xc1640){const _0x4b8386=_0x443fdd[_0x3d1eb1(0xb3c)](_0x4bb24b[_0x3d1eb1(0x1ef)]()[_0x3d1eb1(0xf4)]());_0x4b8386>=0x0&&_0x4b8386<=0x7&&_0x91d584[_0x3d1eb1(0x589)](_0x4b8386)&&_0x91d584['removeBuff'](_0x4b8386);}}}),PluginManager[_0x23168f(0x594)](pluginData['name'],'ActSeq_Mechanics_RemoveState',_0x9214d6=>{const _0x138edd=_0x23168f;if(!SceneManager[_0x138edd(0xbef)]())return;VisuMZ['ConvertParams'](_0x9214d6,_0x9214d6);const _0xff4600=_0x9214d6['States'],_0x593ae6=VisuMZ['CreateActionSequenceTargets'](_0x9214d6[_0x138edd(0xbc7)]);for(const _0x1e6562 of _0x593ae6){if(!_0x1e6562)continue;for(const _0x306112 of _0xff4600){_0x1e6562[_0x138edd(0x20d)](_0x306112);}}}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],'ActSeq_Mechanics_StateTurnsChangeBy',_0x1ac99e=>{const _0x122dd3=_0x23168f;if(!SceneManager[_0x122dd3(0xbef)]())return;if(!Imported['VisuMZ_1_SkillsStatesCore'])return;VisuMZ['ConvertParams'](_0x1ac99e,_0x1ac99e);const _0x39b3c6=VisuMZ['CreateActionSequenceTargets'](_0x1ac99e['Targets']),_0x150fc5=Number(_0x1ac99e[_0x122dd3(0x361)]),_0xafc612=Number(_0x1ac99e['Turns']),_0x40ee6d=_0x1ac99e[_0x122dd3(0x7e7)];for(const _0x465639 of _0x39b3c6){if(!_0x465639)continue;_0x40ee6d&&!_0x465639['isStateAffected'](_0x150fc5)?(_0x465639[_0x122dd3(0x5c5)](_0x150fc5),_0x465639[_0x122dd3(0x98f)](_0x150fc5,_0xafc612)):_0x465639[_0x122dd3(0x9f2)](_0x150fc5,_0xafc612);}}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x31c),_0x3f91c4=>{const _0x508500=_0x23168f;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x508500(0x9a3)])return;VisuMZ[_0x508500(0x54f)](_0x3f91c4,_0x3f91c4);const _0x534fdb=VisuMZ[_0x508500(0x31f)](_0x3f91c4['Targets']),_0x34bcbe=Number(_0x3f91c4[_0x508500(0x361)]),_0x50a2c0=Math[_0x508500(0x705)](Number(_0x3f91c4[_0x508500(0x2ef)]),0x0),_0x289a15=_0x3f91c4[_0x508500(0x7e7)];for(const _0x20b2b8 of _0x534fdb){if(!_0x20b2b8)continue;_0x289a15&&!_0x20b2b8[_0x508500(0x550)](_0x34bcbe)&&_0x20b2b8[_0x508500(0x5c5)](_0x34bcbe),_0x20b2b8[_0x508500(0x98f)](_0x34bcbe,_0x50a2c0);}}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x342),_0x374efd=>{const _0x36ee29=_0x23168f;if(!SceneManager[_0x36ee29(0xbef)]())return;if(!Imported[_0x36ee29(0x636)])return;if(!BattleManager['isSTB']())return;VisuMZ['ConvertParams'](_0x374efd,_0x374efd);const _0x4ee26a=_0x374efd[_0x36ee29(0xb81)],_0xd5400=VisuMZ[_0x36ee29(0x31f)](_0x374efd[_0x36ee29(0xbc7)]),_0x577e68=_0x374efd[_0x36ee29(0x810)],_0x27ff5e=_0x374efd['Exploiter'],_0x37a18a=_0x374efd[_0x36ee29(0x8d9)],_0x332c16=BattleManager[_0x36ee29(0x13a)];if(_0x4ee26a)for(const _0x27cf9f of _0xd5400){if(!_0x27cf9f)continue;if(_0x27cf9f===BattleManager[_0x36ee29(0x530)])continue;if(_0x577e68)_0x27cf9f[_0x36ee29(0x9a8)](![]);_0x27cf9f[_0x36ee29(0x6d4)](BattleManager[_0x36ee29(0x530)],_0x332c16);}if(_0x27ff5e&&BattleManager[_0x36ee29(0x530)]){if(_0x37a18a)BattleManager['_subject']['setSTBExploited'](![]);const _0x392eaa=_0xd5400[0x0];BattleManager[_0x36ee29(0x530)]['performSTBExploiter'](_0x392eaa,_0x332c16);}}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x6e5),_0x877fae=>{const _0x193b25=_0x23168f;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x193b25(0x636)])return;if(!BattleManager[_0x193b25(0x22f)]())return;VisuMZ[_0x193b25(0x54f)](_0x877fae,_0x877fae);const _0x30e312=_0x877fae[_0x193b25(0x1d2)];BattleManager[_0x193b25(0x530)]&&BattleManager[_0x193b25(0x530)][_0x193b25(0x521)](_0x30e312);}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x4d8),_0x149c64=>{const _0x2d0c7c=_0x23168f;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x2d0c7c(0x636)])return;if(!BattleManager['isSTB']())return;VisuMZ[_0x2d0c7c(0x54f)](_0x149c64,_0x149c64);let _0x305537=_0x149c64[_0x2d0c7c(0x1d2)];if(BattleManager['_subject']){BattleManager['_subject'][_0x2d0c7c(0x394)]=BattleManager['_subject'][_0x2d0c7c(0x394)]||[];while(_0x305537--){if(BattleManager['_subject'][_0x2d0c7c(0x394)][_0x2d0c7c(0x312)]<=0x0)break;BattleManager['_subject']['_actions'][_0x2d0c7c(0xa30)]();}}}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x45a),_0xa9cea9=>{const _0x24e0e5=_0x23168f;if(!SceneManager[_0x24e0e5(0xbef)]())return;if(!Imported[_0x24e0e5(0x92f)])return;VisuMZ['ConvertParams'](_0xa9cea9,_0xa9cea9);const _0x230b43=VisuMZ[_0x24e0e5(0x31f)](_0xa9cea9[_0x24e0e5(0xbc7)]),_0xddc9c=_0xa9cea9[_0x24e0e5(0xb01)];for(const _0x68d61f of _0x230b43){if(!_0x68d61f)continue;if(!_0x68d61f[_0x24e0e5(0x36b)]())continue;_0x68d61f[_0x24e0e5(0x331)](_0xddc9c);}}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0xa2c),_0x273b94=>{const _0x115f39=_0x23168f;if(!SceneManager[_0x115f39(0xbef)]())return;VisuMZ['ConvertParams'](_0x273b94,_0x273b94);const _0x113a21=VisuMZ[_0x115f39(0x31f)](_0x273b94[_0x115f39(0xbc7)]),_0x20531d=_0x273b94[_0x115f39(0x3fd)],_0x37b00b={'textColor':ColorManager[_0x115f39(0xfc)](_0x273b94[_0x115f39(0x743)]),'flashColor':_0x273b94[_0x115f39(0x3c5)],'flashDuration':_0x273b94[_0x115f39(0x2df)]};for(const _0x4cd2a2 of _0x113a21){if(!_0x4cd2a2)continue;_0x4cd2a2['setupTextPopup'](_0x20531d,_0x37b00b);}}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],'ActSeq_Mechanics_VariablePopup',_0x5354f7=>{const _0x1993e6=_0x23168f;if(!SceneManager[_0x1993e6(0xbef)]())return;VisuMZ[_0x1993e6(0x54f)](_0x5354f7,_0x5354f7);const _0x5ca32c=VisuMZ['CreateActionSequenceTargets'](_0x5354f7[_0x1993e6(0xbc7)]);let _0x16568c=$gameVariables[_0x1993e6(0x706)](_0x5354f7[_0x1993e6(0x4d9)]);Imported['VisuMZ_0_CoreEngine']&&_0x5354f7['DigitGrouping']&&(_0x16568c=VisuMZ[_0x1993e6(0x833)](_0x16568c));const _0x252d89=String(_0x16568c),_0x5f37bf={'textColor':ColorManager[_0x1993e6(0xfc)](_0x5354f7[_0x1993e6(0x743)]),'flashColor':_0x5354f7[_0x1993e6(0x3c5)],'flashDuration':_0x5354f7[_0x1993e6(0x2df)]};for(const _0x80e1b7 of _0x5ca32c){if(!_0x80e1b7)continue;_0x80e1b7[_0x1993e6(0x138)](_0x252d89,_0x5f37bf);}}),PluginManager[_0x23168f(0x594)](pluginData['name'],'ActSeq_Mechanics_WaitForEffect',_0x199264=>{const _0x331af5=_0x23168f;if(!SceneManager[_0x331af5(0xbef)]())return;const _0x5a96eb=$gameTemp[_0x331af5(0x7aa)]();if(!_0x5a96eb)return;_0x5a96eb['setWaitMode'](_0x331af5(0x62a));}),PluginManager['registerCommand'](pluginData[_0x23168f(0x611)],'ActSeq_Motion_ClearFreezeFrame',_0x218273=>{const _0x4bcb73=_0x23168f;if(!SceneManager[_0x4bcb73(0xbef)]())return;VisuMZ['ConvertParams'](_0x218273,_0x218273);const _0x80f3ef=VisuMZ['CreateActionSequenceTargets'](_0x218273[_0x4bcb73(0xbc7)]);for(const _0x519199 of _0x80f3ef){if(!_0x519199)continue;_0x519199['clearFreezeMotion']();}}),PluginManager['registerCommand'](pluginData[_0x23168f(0x611)],_0x23168f(0xbdd),_0x1a997f=>{const _0x1c889a=_0x23168f;if(!SceneManager[_0x1c889a(0xbef)]())return;VisuMZ[_0x1c889a(0x54f)](_0x1a997f,_0x1a997f);const _0x278424=VisuMZ[_0x1c889a(0x31f)](_0x1a997f[_0x1c889a(0xbc7)]),_0x404aec=_0x1a997f[_0x1c889a(0x738)]['toLowerCase']()[_0x1c889a(0xf4)]();let _0x54f711=_0x1a997f[_0x1c889a(0x988)];const _0x2924d7=_0x1a997f[_0x1c889a(0xbc8)];![_0x1c889a(0xada),_0x1c889a(0x245),'swing','missile'][_0x1c889a(0x2d8)](_0x404aec)&&(_0x54f711=![]);for(const _0x40c6e9 of _0x278424){if(!_0x40c6e9)continue;_0x40c6e9[_0x1c889a(0x3c1)](_0x404aec,_0x54f711,_0x2924d7);}}),PluginManager[_0x23168f(0x594)](pluginData['name'],'ActSeq_Motion_MotionType',_0xda41a4=>{const _0x434289=_0x23168f;if(!SceneManager[_0x434289(0xbef)]())return;VisuMZ['ConvertParams'](_0xda41a4,_0xda41a4);const _0x5e75a8=VisuMZ[_0x434289(0x31f)](_0xda41a4[_0x434289(0xbc7)]),_0x551bb1=_0xda41a4[_0x434289(0x738)]['toLowerCase']()[_0x434289(0xf4)](),_0x466133=_0xda41a4['ShowWeapon'];for(const _0x39625d of _0x5e75a8){if(!_0x39625d)continue;_0x39625d[_0x434289(0xaf5)]=_0x466133;if(_0x551bb1[_0x434289(0x26e)](/ATTACK[ ](\d+)/i))_0x39625d[_0x434289(0x2c1)](Number(RegExp['$1']));else _0x551bb1===_0x434289(0xada)?_0x39625d[_0x434289(0xa9f)]():_0x39625d[_0x434289(0x67a)](_0x551bb1);if(!_0x466133)_0x39625d[_0x434289(0xa72)](0x0);else{if(_0x466133&&['thrust',_0x434289(0x4de),_0x434289(0x217)]['includes'](_0x551bb1)){}}_0x39625d[_0x434289(0xaf5)]=undefined;}}),PluginManager[_0x23168f(0x594)](pluginData['name'],'ActSeq_Motion_PerformAction',_0x33628a=>{const _0x104778=_0x23168f;if(!SceneManager[_0x104778(0xbef)]())return;VisuMZ[_0x104778(0x54f)](_0x33628a,_0x33628a);const _0x515837=BattleManager[_0x104778(0x13a)];if(!_0x515837)return;if(!_0x515837[_0x104778(0x42e)]())return;const _0x4491e7=VisuMZ[_0x104778(0x31f)](_0x33628a['Targets']);for(const _0xa260f1 of _0x4491e7){if(!_0xa260f1)continue;_0xa260f1[_0x104778(0xb80)](_0x515837);}}),PluginManager[_0x23168f(0x594)](pluginData['name'],_0x23168f(0x170),_0x20e96a=>{const _0x1b5b5a=_0x23168f;if(!SceneManager[_0x1b5b5a(0xbef)]())return;VisuMZ[_0x1b5b5a(0x54f)](_0x20e96a,_0x20e96a);const _0x82e84b=VisuMZ[_0x1b5b5a(0x31f)](_0x20e96a['Targets']);for(const _0x7cf76b of _0x82e84b){if(!_0x7cf76b)continue;if(!_0x7cf76b['battler']())continue;_0x7cf76b[_0x1b5b5a(0xbb5)]()[_0x1b5b5a(0xa7b)]();}}),PluginManager[_0x23168f(0x594)](pluginData['name'],_0x23168f(0x345),_0x284fb7=>{const _0xa474ec=_0x23168f;if(!SceneManager[_0xa474ec(0xbef)]())return;VisuMZ[_0xa474ec(0x54f)](_0x284fb7,_0x284fb7);const _0x39a4bb=$gameTemp[_0xa474ec(0x7aa)](),_0x2564b1=_0x284fb7[_0xa474ec(0x7d2)]*Sprite_Battler[_0xa474ec(0x651)];_0x39a4bb[_0xa474ec(0x707)](_0x2564b1);}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],'ActSeq_Movement_BattleStep',_0x3ce12c=>{const _0xc9ae1a=_0x23168f;if(!SceneManager[_0xc9ae1a(0xbef)]())return;VisuMZ[_0xc9ae1a(0x54f)](_0x3ce12c,_0x3ce12c);const _0x2b3adb=$gameTemp[_0xc9ae1a(0x7aa)](),_0x269449=BattleManager[_0xc9ae1a(0x13a)];if(!_0x2b3adb||!_0x269449)return;if(!_0x269449['item']())return;const _0x4225a9=VisuMZ[_0xc9ae1a(0x31f)](_0x3ce12c[_0xc9ae1a(0xbc7)]);for(const _0x4bd139 of _0x4225a9){if(!_0x4bd139)continue;_0x4bd139[_0xc9ae1a(0xb9a)](_0x269449);}if(_0x3ce12c[_0xc9ae1a(0xaad)])_0x2b3adb[_0xc9ae1a(0x351)]('battleMove');}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x3b2),_0x3fe5f5=>{const _0x57f109=_0x23168f;if(!SceneManager[_0x57f109(0xbef)]())return;if(!$gameSystem[_0x57f109(0x18f)]())return;VisuMZ[_0x57f109(0x54f)](_0x3fe5f5,_0x3fe5f5);const _0x3424cd=$gameTemp[_0x57f109(0x7aa)](),_0x5f04d1=VisuMZ[_0x57f109(0x31f)](_0x3fe5f5['Targets']),_0x1ff2a6=_0x3fe5f5[_0x57f109(0x9a2)],_0x3bf7fc=_0x3fe5f5[_0x57f109(0xa64)],_0x33f02c=_0x3fe5f5[_0x57f109(0x3a8)],_0x922b2b=_0x3fe5f5[_0x57f109(0xaaf)],_0x50c749=_0x3fe5f5[_0x57f109(0x78a)],_0x5a6de4=_0x3fe5f5['EasingType'],_0x1b3fb9=_0x3fe5f5[_0x57f109(0x738)],_0x6b7061=_0x3fe5f5[_0x57f109(0xaad)];if(!_0x3424cd)return;for(const _0x3d19e3 of _0x5f04d1){if(!_0x3d19e3)continue;let _0x293802=_0x3bf7fc,_0x3f2e58=_0x33f02c;if(_0x1ff2a6[_0x57f109(0x26e)](/horz/i))_0x293802*=_0x3d19e3[_0x57f109(0x36b)]()?-0x1:0x1;if(_0x1ff2a6[_0x57f109(0x26e)](/vert/i))_0x3f2e58*=_0x3d19e3[_0x57f109(0x36b)]()?-0x1:0x1;_0x3d19e3[_0x57f109(0x1b3)](_0x293802,_0x3f2e58,_0x922b2b,_0x50c749,_0x5a6de4),_0x3d19e3[_0x57f109(0x67a)](_0x1b3fb9);}if(_0x6b7061)_0x3424cd[_0x57f109(0x351)]('battleMove');}),PluginManager['registerCommand'](pluginData[_0x23168f(0x611)],'ActSeq_Movement_HomeMoveToJsPoint',_0x338e42=>{const _0x5d53e9=_0x23168f;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x5d53e9(0x18f)]())return;VisuMZ[_0x5d53e9(0x54f)](_0x338e42,_0x338e42);const _0x463f06=$gameTemp[_0x5d53e9(0x7aa)](),_0x25d54d=VisuMZ[_0x5d53e9(0x31f)](_0x338e42[_0x5d53e9(0xbc7)]),_0x516d29=_0x338e42[_0x5d53e9(0x70a)],_0x104465=_0x338e42[_0x5d53e9(0x9c0)],_0x7816e7=_0x338e42[_0x5d53e9(0x5a5)],_0x14d37f=_0x338e42[_0x5d53e9(0xaaf)],_0x40fd7f=_0x338e42[_0x5d53e9(0x78a)],_0x4c37c4=_0x338e42['EasingType'],_0x5b1f5d=_0x338e42['MotionType'],_0xe603bb=_0x338e42[_0x5d53e9(0xaad)];if(!_0x463f06)return;for(const _0x6fb121 of _0x25d54d){if(!_0x6fb121)continue;const _0x5ce458=_0x338e42['DestinationJS'](_0x6fb121)||{'x':0x0,'y':0x0};let _0x1d439d=_0x5ce458['x'],_0x53c259=_0x5ce458['y'];if(_0x516d29['match'](/none/i))_0x1d439d+=_0x104465,_0x53c259+=_0x7816e7;else{if(_0x516d29[_0x5d53e9(0x26e)](/horz/i)&&_0x516d29[_0x5d53e9(0x26e)](/vert/i))_0x1d439d+=_0x6fb121[_0x5d53e9(0x36b)]()?-_0x104465:_0x104465,_0x53c259+=_0x6fb121[_0x5d53e9(0x36b)]()?-_0x7816e7:_0x7816e7;else{if(_0x516d29[_0x5d53e9(0x26e)](/horz/i))_0x1d439d+=_0x6fb121['isActor']()?-_0x104465:_0x104465,_0x53c259+=_0x7816e7;else _0x516d29[_0x5d53e9(0x26e)](/vert/i)&&(_0x1d439d+=_0x104465,_0x53c259+=_0x6fb121[_0x5d53e9(0x36b)]()?-_0x7816e7:_0x7816e7);}}_0x6fb121[_0x5d53e9(0x49b)](_0x1d439d,_0x53c259,_0x14d37f,_0x40fd7f,_0x4c37c4,-0x1),_0x6fb121[_0x5d53e9(0x67a)](_0x5b1f5d);}if(_0xe603bb)_0x463f06[_0x5d53e9(0x351)]('battleMove');}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0xae5),_0x58f899=>{const _0x3de6e1=_0x23168f;if(!SceneManager[_0x3de6e1(0xbef)]())return;if(!$gameSystem[_0x3de6e1(0x18f)]())return;VisuMZ['ConvertParams'](_0x58f899,_0x58f899);const _0x2734b5=$gameTemp[_0x3de6e1(0x7aa)](),_0x3050e7=VisuMZ[_0x3de6e1(0x31f)](_0x58f899[_0x3de6e1(0xbc7)]),_0x4014ed=_0x58f899[_0x3de6e1(0x4c9)],_0x14200c=_0x58f899[_0x3de6e1(0x70a)],_0x417d6b=_0x58f899[_0x3de6e1(0x9c0)],_0x43e385=_0x58f899[_0x3de6e1(0x5a5)],_0x55c5a2=_0x58f899['Duration'],_0x190a10=_0x58f899[_0x3de6e1(0x78a)],_0x55b4c1=_0x58f899[_0x3de6e1(0xa34)],_0x5e0929=_0x58f899['MotionType'],_0x29a9d9=_0x58f899['WaitForMovement'];if(!_0x2734b5)return;for(const _0x55f97e of _0x3050e7){if(!_0x55f97e)continue;let _0x4174d3=_0x55f97e[_0x3de6e1(0xbb5)]()[_0x3de6e1(0x9af)],_0x248f48=_0x55f97e[_0x3de6e1(0xbb5)]()['_baseY'];if(_0x4014ed[_0x3de6e1(0x26e)](/home/i))_0x4174d3=_0x55f97e[_0x3de6e1(0xbb5)]()[_0x3de6e1(0x1c6)],_0x248f48=_0x55f97e[_0x3de6e1(0xbb5)]()[_0x3de6e1(0x22d)];else{if(_0x4014ed[_0x3de6e1(0x26e)](/center/i))_0x4174d3=Graphics['boxWidth']/0x2,_0x248f48=Graphics[_0x3de6e1(0x493)]/0x2;else _0x4014ed[_0x3de6e1(0x26e)](/point (\d+), (\d+)/i)&&(_0x4174d3=Number(RegExp['$1']),_0x248f48=Number(RegExp['$2']));}if(_0x14200c['match'](/none/i))_0x4174d3+=_0x417d6b,_0x248f48+=_0x43e385;else{if(_0x14200c['match'](/horz/i)&&_0x14200c[_0x3de6e1(0x26e)](/vert/i))_0x4174d3+=_0x55f97e[_0x3de6e1(0x36b)]()?-_0x417d6b:_0x417d6b,_0x248f48+=_0x55f97e['isActor']()?-_0x43e385:_0x43e385;else{if(_0x14200c[_0x3de6e1(0x26e)](/horz/i))_0x4174d3+=_0x55f97e[_0x3de6e1(0x36b)]()?-_0x417d6b:_0x417d6b,_0x248f48+=_0x43e385;else _0x14200c[_0x3de6e1(0x26e)](/vert/i)&&(_0x4174d3+=_0x417d6b,_0x248f48+=_0x55f97e['isActor']()?-_0x43e385:_0x43e385);}}_0x55f97e['moveBattlerHomeToPoint'](_0x4174d3,_0x248f48,_0x55c5a2,_0x190a10,_0x55b4c1,-0x1),_0x55f97e[_0x3de6e1(0x67a)](_0x5e0929);}if(_0x29a9d9)_0x2734b5[_0x3de6e1(0x351)](_0x3de6e1(0xacc));}),PluginManager[_0x23168f(0x594)](pluginData['name'],_0x23168f(0x8e9),_0x1a7a57=>{const _0x5a238e=_0x23168f;if(!SceneManager[_0x5a238e(0xbef)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x5a238e(0x54f)](_0x1a7a57,_0x1a7a57);const _0x3e0f0b=$gameTemp['getLastPluginCommandInterpreter'](),_0x283eea=VisuMZ[_0x5a238e(0x31f)](_0x1a7a57[_0x5a238e(0x3bc)]),_0x120975=VisuMZ['CreateActionSequenceTargets'](_0x1a7a57[_0x5a238e(0x675)]),_0x4d62c9=_0x1a7a57[_0x5a238e(0x3df)];let _0x3391b4=_0x1a7a57[_0x5a238e(0x2fb)];const _0x1ad6f2=_0x1a7a57['OffsetAdjust'],_0x4b9a4d=_0x1a7a57[_0x5a238e(0x9c0)],_0x13fc69=_0x1a7a57[_0x5a238e(0x5a5)],_0x5804e0=_0x1a7a57[_0x5a238e(0xaaf)],_0x41faca=_0x1a7a57['FaceDirection'],_0x5d9095=_0x1a7a57['EasingType'],_0x2b8459=_0x1a7a57[_0x5a238e(0x738)],_0x22240c=_0x1a7a57[_0x5a238e(0xaad)],_0x4e3030=Math[_0x5a238e(0x690)](..._0x120975['map'](_0x459534=>_0x459534[_0x5a238e(0xbb5)]()['_baseX']-_0x459534[_0x5a238e(0xbb5)]()[_0x5a238e(0x56b)]()/0x2)),_0xd8a25e=Math['max'](..._0x120975[_0x5a238e(0x37f)](_0x5196e7=>_0x5196e7['battler']()['_baseX']+_0x5196e7['battler']()[_0x5a238e(0x56b)]()/0x2)),_0x5f3d2d=Math[_0x5a238e(0x690)](..._0x120975[_0x5a238e(0x37f)](_0x36d45d=>_0x36d45d[_0x5a238e(0xbb5)]()[_0x5a238e(0x489)]-_0x36d45d['battler']()['mainSpriteHeight']())),_0x18d619=Math[_0x5a238e(0x705)](..._0x120975[_0x5a238e(0x37f)](_0x2095bc=>_0x2095bc[_0x5a238e(0xbb5)]()[_0x5a238e(0x489)])),_0xc64b4f=_0x120975[_0x5a238e(0x239)](_0x1ed7cd=>_0x1ed7cd[_0x5a238e(0x36b)]())['length'],_0xd4683e=_0x120975['filter'](_0x44eb1a=>_0x44eb1a['isEnemy']())['length'];let _0x5bed48=0x0,_0x392610=0x0;if(_0x4d62c9['match'](/front/i))_0x5bed48=_0xc64b4f>=_0xd4683e?_0x4e3030:_0xd8a25e;else{if(_0x4d62c9['match'](/middle/i))_0x5bed48=(_0x4e3030+_0xd8a25e)/0x2,_0x3391b4=-0x1;else _0x4d62c9['match'](/back/i)&&(_0x5bed48=_0xc64b4f>=_0xd4683e?_0xd8a25e:_0x4e3030);}if(_0x4d62c9[_0x5a238e(0x26e)](/head/i))_0x392610=_0x5f3d2d;else{if(_0x4d62c9['match'](/center/i))_0x392610=(_0x5f3d2d+_0x18d619)/0x2;else _0x4d62c9[_0x5a238e(0x26e)](/base/i)&&(_0x392610=_0x18d619);}if(!_0x3e0f0b)return;for(const _0x5e1aa9 of _0x283eea){if(!_0x5e1aa9)continue;let _0x2141eb=_0x5bed48,_0x5abc87=_0x392610;if(_0x1ad6f2[_0x5a238e(0x26e)](/none/i))_0x2141eb+=_0x4b9a4d,_0x5abc87+=_0x13fc69;else{if(_0x1ad6f2['match'](/horz/i)&&_0x1ad6f2[_0x5a238e(0x26e)](/vert/i))_0x2141eb+=_0x5e1aa9[_0x5a238e(0x36b)]()?-_0x4b9a4d:_0x4b9a4d,_0x5abc87+=_0x5e1aa9[_0x5a238e(0x36b)]()?-_0x13fc69:_0x13fc69;else{if(_0x1ad6f2['match'](/horz/i))_0x2141eb+=_0x5e1aa9['isActor']()?-_0x4b9a4d:_0x4b9a4d,_0x5abc87+=_0x13fc69;else _0x1ad6f2[_0x5a238e(0x26e)](/vert/i)&&(_0x2141eb+=_0x4b9a4d,_0x5abc87+=_0x5e1aa9[_0x5a238e(0x36b)]()?-_0x13fc69:_0x13fc69);}}_0x5e1aa9[_0x5a238e(0x49b)](_0x2141eb,_0x5abc87,_0x5804e0,_0x41faca,_0x5d9095,_0x3391b4),_0x5e1aa9[_0x5a238e(0x67a)](_0x2b8459);}if(_0x22240c)_0x3e0f0b[_0x5a238e(0x351)]('battleMove');}),PluginManager['registerCommand'](pluginData[_0x23168f(0x611)],_0x23168f(0x369),_0x3a6518=>{const _0x592779=_0x23168f;if(!SceneManager[_0x592779(0xbef)]())return;if(!$gameSystem[_0x592779(0x18f)]())return;VisuMZ['ConvertParams'](_0x3a6518,_0x3a6518);const _0x52b9d7=VisuMZ['CreateActionSequenceTargets'](_0x3a6518['Targets']);let _0x17cacb=_0x3a6518['Direction']['match'](/back/i);for(const _0x355bf1 of _0x52b9d7){if(!_0x355bf1)continue;if(_0x3a6518['Direction']['match'](/rand/i))_0x17cacb=Math['randomInt'](0x2);_0x355bf1[_0x592779(0xd8)](!!_0x17cacb);}}),PluginManager['registerCommand'](pluginData['name'],_0x23168f(0x8a2),_0x42e44a=>{const _0x483a89=_0x23168f;if(!SceneManager[_0x483a89(0xbef)]())return;if(!$gameSystem[_0x483a89(0x18f)]())return;VisuMZ[_0x483a89(0x54f)](_0x42e44a,_0x42e44a);const _0x57be18=VisuMZ[_0x483a89(0x31f)](_0x42e44a[_0x483a89(0xbc7)]),_0x11f6b0=_0x42e44a[_0x483a89(0x590)];for(const _0xef9651 of _0x57be18){if(!_0xef9651)continue;const _0x334fc9=_0x42e44a['PointJS'](_0xef9651)||{'x':0x0,'y':0x0};let _0x3be4ec=_0x334fc9['x'],_0xddbf4b=_0x334fc9['y'];_0xef9651[_0x483a89(0x5e2)](Math[_0x483a89(0x1fc)](_0x3be4ec),Math[_0x483a89(0x1fc)](_0xddbf4b),!!_0x11f6b0);}}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x2c6),_0x40361e=>{const _0x3cff9c=_0x23168f;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x3cff9c(0x18f)]())return;VisuMZ[_0x3cff9c(0x54f)](_0x40361e,_0x40361e);const _0x47792c=VisuMZ['CreateActionSequenceTargets'](_0x40361e[_0x3cff9c(0xbc7)]);let _0x27d25b=_0x40361e[_0x3cff9c(0x74c)];const _0x589863=_0x40361e[_0x3cff9c(0x590)];for(const _0x25171a of _0x47792c){if(!_0x25171a)continue;let _0x4119a0=_0x25171a[_0x3cff9c(0xbb5)]()[_0x3cff9c(0x9af)],_0x26f7c0=_0x25171a[_0x3cff9c(0xbb5)]()['_baseY'];if(_0x27d25b[_0x3cff9c(0x26e)](/home/i))_0x4119a0=_0x25171a[_0x3cff9c(0xbb5)]()[_0x3cff9c(0x1c6)],_0x26f7c0=_0x25171a[_0x3cff9c(0xbb5)]()[_0x3cff9c(0x22d)];else{if(_0x27d25b['match'](/center/i))_0x4119a0=Graphics[_0x3cff9c(0x2d7)]/0x2,_0x26f7c0=Graphics[_0x3cff9c(0x493)]/0x2;else _0x27d25b[_0x3cff9c(0x26e)](/point (\d+), (\d+)/i)&&(_0x4119a0=Number(RegExp['$1']),_0x26f7c0=Number(RegExp['$2']));}_0x25171a[_0x3cff9c(0x5e2)](Math[_0x3cff9c(0x1fc)](_0x4119a0),Math['round'](_0x26f7c0),!!_0x589863);}}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x232),_0x1e6ee5=>{const _0x372d95=_0x23168f;if(!SceneManager[_0x372d95(0xbef)]())return;if(!$gameSystem[_0x372d95(0x18f)]())return;VisuMZ['ConvertParams'](_0x1e6ee5,_0x1e6ee5);const _0x55573c=VisuMZ[_0x372d95(0x31f)](_0x1e6ee5[_0x372d95(0x3bc)]),_0x45b3aa=VisuMZ[_0x372d95(0x31f)](_0x1e6ee5[_0x372d95(0x675)]),_0x367ec3=_0x45b3aa[_0x372d95(0x37f)](_0x425ec7=>_0x425ec7&&_0x425ec7[_0x372d95(0xbb5)]()?_0x425ec7[_0x372d95(0xbb5)]()[_0x372d95(0x9af)]:0x0)/(_0x45b3aa[_0x372d95(0x312)]||0x1),_0x50783e=_0x45b3aa[_0x372d95(0x37f)](_0x29d540=>_0x29d540&&_0x29d540[_0x372d95(0xbb5)]()?_0x29d540['battler']()[_0x372d95(0x489)]:0x0)/(_0x45b3aa[_0x372d95(0x312)]||0x1),_0xa9f3cb=_0x1e6ee5[_0x372d95(0x590)];for(const _0x597eca of _0x55573c){if(!_0x597eca)continue;_0x597eca['setBattlerFacePoint'](Math[_0x372d95(0x1fc)](_0x367ec3),Math['round'](_0x50783e),!!_0xa9f3cb);}}),PluginManager[_0x23168f(0x594)](pluginData['name'],_0x23168f(0xb98),_0x120310=>{const _0x2d288c=_0x23168f;if(!SceneManager[_0x2d288c(0xbef)]())return;VisuMZ[_0x2d288c(0x54f)](_0x120310,_0x120310);const _0x5f5391=$gameTemp[_0x2d288c(0x7aa)](),_0x5d605f=VisuMZ[_0x2d288c(0x31f)](_0x120310[_0x2d288c(0xbc7)]),_0x43a67b=_0x120310[_0x2d288c(0x5e0)],_0x31d81e=_0x120310['Duration'],_0x5b7e33=_0x120310[_0x2d288c(0xa34)],_0x2e7f26=_0x120310[_0x2d288c(0x950)];if(!_0x5f5391)return;for(const _0x543e1b of _0x5d605f){if(!_0x543e1b)continue;_0x543e1b[_0x2d288c(0xbb6)](_0x43a67b,_0x31d81e,_0x5b7e33);}if(_0x2e7f26)_0x5f5391[_0x2d288c(0x351)]('battleFloat');}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x936),_0x53c62a=>{const _0x33fec3=_0x23168f;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x53c62a,_0x53c62a);const _0x4011ce=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x4011ce)return;const _0x3ff635=VisuMZ[_0x33fec3(0x31f)](_0x53c62a['Targets']);for(const _0x74a3ad of _0x3ff635){if(!_0x74a3ad)continue;_0x74a3ad[_0x33fec3(0x630)]();}BattleManager[_0x33fec3(0x530)]&&BattleManager['_subject'][_0x33fec3(0xf1)]();if(_0x53c62a[_0x33fec3(0xaad)])_0x4011ce['setWaitMode'](_0x33fec3(0xacc));}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x184),_0x509fdf=>{const _0x41c0a1=_0x23168f;if(!SceneManager[_0x41c0a1(0xbef)]())return;VisuMZ[_0x41c0a1(0x54f)](_0x509fdf,_0x509fdf);const _0x372c47=$gameTemp[_0x41c0a1(0x7aa)](),_0x473a00=VisuMZ[_0x41c0a1(0x31f)](_0x509fdf[_0x41c0a1(0xbc7)]),_0x4e64e5=_0x509fdf['Height'],_0x3d7a07=_0x509fdf[_0x41c0a1(0xaaf)],_0x3ded5e=_0x509fdf[_0x41c0a1(0x934)];if(!_0x372c47)return;for(const _0x575039 of _0x473a00){if(!_0x575039)continue;_0x575039[_0x41c0a1(0x8e1)](_0x4e64e5,_0x3d7a07);}if(_0x3ded5e)_0x372c47['setWaitMode'](_0x41c0a1(0x46b));}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],'ActSeq_Movement_MoveBy',_0x5e7943=>{const _0x29e3cb=_0x23168f;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x29e3cb(0x18f)]())return;VisuMZ[_0x29e3cb(0x54f)](_0x5e7943,_0x5e7943);const _0x56c07f=$gameTemp['getLastPluginCommandInterpreter'](),_0x1111e2=VisuMZ['CreateActionSequenceTargets'](_0x5e7943[_0x29e3cb(0xbc7)]),_0x34395a=_0x5e7943[_0x29e3cb(0x9a2)],_0x138efb=_0x5e7943[_0x29e3cb(0xa64)],_0x121704=_0x5e7943['DistanceY'],_0xbc7e70=_0x5e7943[_0x29e3cb(0xaaf)],_0x22adf2=_0x5e7943[_0x29e3cb(0x78a)],_0xba1760=_0x5e7943[_0x29e3cb(0xa34)],_0x10778f=_0x5e7943['MotionType'],_0x2fcdb2=_0x5e7943['WaitForMovement'];if(!_0x56c07f)return;for(const _0x4277a2 of _0x1111e2){if(!_0x4277a2)continue;let _0x257b1f=_0x138efb,_0x2a5823=_0x121704;if(_0x34395a['match'](/horz/i))_0x257b1f*=_0x4277a2[_0x29e3cb(0x36b)]()?-0x1:0x1;if(_0x34395a[_0x29e3cb(0x26e)](/vert/i))_0x2a5823*=_0x4277a2[_0x29e3cb(0x36b)]()?-0x1:0x1;_0x4277a2[_0x29e3cb(0x7d4)](_0x257b1f,_0x2a5823,_0xbc7e70,_0x22adf2,_0xba1760),_0x4277a2[_0x29e3cb(0x67a)](_0x10778f);}if(_0x2fcdb2)_0x56c07f[_0x29e3cb(0x351)]('battleMove');}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x4ab),_0x4145d2=>{const _0x44a63a=_0x23168f;if(!SceneManager[_0x44a63a(0xbef)]())return;if(!$gameSystem[_0x44a63a(0x18f)]())return;VisuMZ[_0x44a63a(0x54f)](_0x4145d2,_0x4145d2);const _0x2bd710=$gameTemp['getLastPluginCommandInterpreter'](),_0x38dba2=VisuMZ[_0x44a63a(0x31f)](_0x4145d2[_0x44a63a(0xbc7)]),_0x139b6b=_0x4145d2[_0x44a63a(0x70a)],_0x1fb499=_0x4145d2[_0x44a63a(0x9c0)],_0x280499=_0x4145d2[_0x44a63a(0x5a5)],_0x5eac03=_0x4145d2['Duration'],_0xc0fb62=_0x4145d2[_0x44a63a(0x78a)],_0x4dd8ae=_0x4145d2['EasingType'],_0x53a2c7=_0x4145d2['MotionType'],_0x18a691=_0x4145d2[_0x44a63a(0xaad)];if(!_0x2bd710)return;for(const _0x407294 of _0x38dba2){if(!_0x407294)continue;const _0x559df1=_0x4145d2['DestinationJS'](_0x407294)||{'x':0x0,'y':0x0};let _0x260951=_0x559df1['x'],_0x2326e0=_0x559df1['y'];if(_0x139b6b[_0x44a63a(0x26e)](/none/i))_0x260951+=_0x1fb499,_0x2326e0+=_0x280499;else{if(_0x139b6b['match'](/horz/i)&&_0x139b6b[_0x44a63a(0x26e)](/vert/i))_0x260951+=_0x407294['isActor']()?-_0x1fb499:_0x1fb499,_0x2326e0+=_0x407294[_0x44a63a(0x36b)]()?-_0x280499:_0x280499;else{if(_0x139b6b[_0x44a63a(0x26e)](/horz/i))_0x260951+=_0x407294[_0x44a63a(0x36b)]()?-_0x1fb499:_0x1fb499,_0x2326e0+=_0x280499;else _0x139b6b[_0x44a63a(0x26e)](/vert/i)&&(_0x260951+=_0x1fb499,_0x2326e0+=_0x407294[_0x44a63a(0x36b)]()?-_0x280499:_0x280499);}}_0x407294[_0x44a63a(0x87c)](_0x260951,_0x2326e0,_0x5eac03,_0xc0fb62,_0x4dd8ae,-0x1),_0x407294['requestMotion'](_0x53a2c7);}if(_0x18a691)_0x2bd710[_0x44a63a(0x351)](_0x44a63a(0xacc));}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x398),_0x5d15c7=>{const _0x3fd1f7=_0x23168f;if(!SceneManager[_0x3fd1f7(0xbef)]())return;if(!$gameSystem[_0x3fd1f7(0x18f)]())return;VisuMZ[_0x3fd1f7(0x54f)](_0x5d15c7,_0x5d15c7);const _0x5075e7=$gameTemp[_0x3fd1f7(0x7aa)](),_0xf662d7=VisuMZ['CreateActionSequenceTargets'](_0x5d15c7[_0x3fd1f7(0xbc7)]),_0x5a8fcd=_0x5d15c7[_0x3fd1f7(0x4c9)],_0x26ebee=_0x5d15c7[_0x3fd1f7(0x70a)],_0x17f878=_0x5d15c7[_0x3fd1f7(0x9c0)],_0x1ebb59=_0x5d15c7['OffsetY'],_0x229370=_0x5d15c7[_0x3fd1f7(0xaaf)],_0x2e2d00=_0x5d15c7[_0x3fd1f7(0x78a)],_0x451a54=_0x5d15c7[_0x3fd1f7(0xa34)],_0x39fd43=_0x5d15c7[_0x3fd1f7(0x738)],_0x1afcfa=_0x5d15c7[_0x3fd1f7(0xaad)];if(!_0x5075e7)return;for(const _0x201c71 of _0xf662d7){if(!_0x201c71)continue;let _0x4f0383=_0x201c71[_0x3fd1f7(0xbb5)]()[_0x3fd1f7(0x9af)],_0x8cd96f=_0x201c71[_0x3fd1f7(0xbb5)]()[_0x3fd1f7(0x489)];if(_0x5a8fcd[_0x3fd1f7(0x26e)](/home/i))_0x4f0383=_0x201c71[_0x3fd1f7(0xbb5)]()[_0x3fd1f7(0x1c6)],_0x8cd96f=_0x201c71[_0x3fd1f7(0xbb5)]()['_homeY'];else{if(_0x5a8fcd[_0x3fd1f7(0x26e)](/center/i))_0x4f0383=Graphics[_0x3fd1f7(0x2d7)]/0x2,_0x8cd96f=Graphics['boxHeight']/0x2;else _0x5a8fcd[_0x3fd1f7(0x26e)](/point (\d+), (\d+)/i)&&(_0x4f0383=Number(RegExp['$1']),_0x8cd96f=Number(RegExp['$2']));}if(_0x26ebee[_0x3fd1f7(0x26e)](/none/i))_0x4f0383+=_0x17f878,_0x8cd96f+=_0x1ebb59;else{if(_0x26ebee[_0x3fd1f7(0x26e)](/horz/i)&&_0x26ebee['match'](/vert/i))_0x4f0383+=_0x201c71['isActor']()?-_0x17f878:_0x17f878,_0x8cd96f+=_0x201c71['isActor']()?-_0x1ebb59:_0x1ebb59;else{if(_0x26ebee[_0x3fd1f7(0x26e)](/horz/i))_0x4f0383+=_0x201c71[_0x3fd1f7(0x36b)]()?-_0x17f878:_0x17f878,_0x8cd96f+=_0x1ebb59;else _0x26ebee['match'](/vert/i)&&(_0x4f0383+=_0x17f878,_0x8cd96f+=_0x201c71['isActor']()?-_0x1ebb59:_0x1ebb59);}}_0x201c71[_0x3fd1f7(0x87c)](_0x4f0383,_0x8cd96f,_0x229370,_0x2e2d00,_0x451a54,-0x1),_0x201c71[_0x3fd1f7(0x67a)](_0x39fd43);}if(_0x1afcfa)_0x5075e7[_0x3fd1f7(0x351)](_0x3fd1f7(0xacc));}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x6d2),_0x3f336e=>{const _0x3f9cdb=_0x23168f;if(!SceneManager[_0x3f9cdb(0xbef)]())return;if(!$gameSystem[_0x3f9cdb(0x18f)]())return;VisuMZ[_0x3f9cdb(0x54f)](_0x3f336e,_0x3f336e);const _0x581ba7=$gameTemp[_0x3f9cdb(0x7aa)](),_0x7367f1=VisuMZ['CreateActionSequenceTargets'](_0x3f336e[_0x3f9cdb(0x3bc)]),_0x2eab91=VisuMZ[_0x3f9cdb(0x31f)](_0x3f336e[_0x3f9cdb(0x675)]),_0x400ffc=_0x3f336e[_0x3f9cdb(0x3df)];let _0x140cc2=_0x3f336e[_0x3f9cdb(0x2fb)];const _0x3dc30b=_0x3f336e[_0x3f9cdb(0x70a)],_0x7a0414=_0x3f336e[_0x3f9cdb(0x9c0)],_0x19e6a6=_0x3f336e[_0x3f9cdb(0x5a5)],_0x4fad4f=_0x3f336e[_0x3f9cdb(0xaaf)],_0x502eaa=_0x3f336e[_0x3f9cdb(0x78a)],_0x6af467=_0x3f336e[_0x3f9cdb(0xa34)],_0x29beb=_0x3f336e[_0x3f9cdb(0x738)],_0x4adcdc=_0x3f336e['WaitForMovement'],_0x309bf9=Math[_0x3f9cdb(0x690)](..._0x2eab91['map'](_0x44e9ca=>_0x44e9ca[_0x3f9cdb(0xbb5)]()[_0x3f9cdb(0x9af)]-_0x44e9ca['battler']()[_0x3f9cdb(0x56b)]()/0x2)),_0x1b863c=Math['max'](..._0x2eab91[_0x3f9cdb(0x37f)](_0x1ddb1b=>_0x1ddb1b[_0x3f9cdb(0xbb5)]()[_0x3f9cdb(0x9af)]+_0x1ddb1b['battler']()[_0x3f9cdb(0x56b)]()/0x2)),_0x4bf6bc=Math[_0x3f9cdb(0x690)](..._0x2eab91[_0x3f9cdb(0x37f)](_0x5470da=>_0x5470da[_0x3f9cdb(0xbb5)]()['_baseY']-_0x5470da[_0x3f9cdb(0xbb5)]()[_0x3f9cdb(0x371)]())),_0x1eac95=Math[_0x3f9cdb(0x705)](..._0x2eab91[_0x3f9cdb(0x37f)](_0x32d5e7=>_0x32d5e7[_0x3f9cdb(0xbb5)]()['_baseY'])),_0x387071=_0x2eab91['filter'](_0xcdbbac=>_0xcdbbac[_0x3f9cdb(0x36b)]())[_0x3f9cdb(0x312)],_0x25b9b1=_0x2eab91[_0x3f9cdb(0x239)](_0x3e8c6f=>_0x3e8c6f[_0x3f9cdb(0x77b)]())[_0x3f9cdb(0x312)];let _0x4a7adb=0x0,_0x33021b=0x0;if(_0x400ffc[_0x3f9cdb(0x26e)](/front/i))_0x4a7adb=_0x387071>=_0x25b9b1?_0x309bf9:_0x1b863c;else{if(_0x400ffc[_0x3f9cdb(0x26e)](/middle/i))_0x4a7adb=(_0x309bf9+_0x1b863c)/0x2,_0x140cc2=-0x1;else _0x400ffc[_0x3f9cdb(0x26e)](/back/i)&&(_0x4a7adb=_0x387071>=_0x25b9b1?_0x1b863c:_0x309bf9);}if(_0x400ffc[_0x3f9cdb(0x26e)](/head/i))_0x33021b=_0x4bf6bc;else{if(_0x400ffc[_0x3f9cdb(0x26e)](/center/i))_0x33021b=(_0x4bf6bc+_0x1eac95)/0x2;else _0x400ffc[_0x3f9cdb(0x26e)](/base/i)&&(_0x33021b=_0x1eac95);}if(!_0x581ba7)return;for(const _0x594818 of _0x7367f1){if(!_0x594818)continue;let _0x4b19a1=_0x4a7adb,_0x28f433=_0x33021b;if(_0x3dc30b[_0x3f9cdb(0x26e)](/none/i))_0x4b19a1+=_0x7a0414,_0x28f433+=_0x19e6a6;else{if(_0x3dc30b[_0x3f9cdb(0x26e)](/horz/i)&&_0x3dc30b[_0x3f9cdb(0x26e)](/vert/i))_0x4b19a1+=_0x594818['isActor']()?-_0x7a0414:_0x7a0414,_0x28f433+=_0x594818['isActor']()?-_0x19e6a6:_0x19e6a6;else{if(_0x3dc30b[_0x3f9cdb(0x26e)](/horz/i))_0x4b19a1+=_0x594818[_0x3f9cdb(0x36b)]()?-_0x7a0414:_0x7a0414,_0x28f433+=_0x19e6a6;else _0x3dc30b[_0x3f9cdb(0x26e)](/vert/i)&&(_0x4b19a1+=_0x7a0414,_0x28f433+=_0x594818['isActor']()?-_0x19e6a6:_0x19e6a6);}}_0x594818[_0x3f9cdb(0x87c)](_0x4b19a1,_0x28f433,_0x4fad4f,_0x502eaa,_0x6af467,_0x140cc2),_0x594818[_0x3f9cdb(0x67a)](_0x29beb);}if(_0x4adcdc)_0x581ba7['setWaitMode'](_0x3f9cdb(0xacc));}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x565),_0x52a3e3=>{const _0x2b8b58=_0x23168f;if(!SceneManager[_0x2b8b58(0xbef)]())return;VisuMZ[_0x2b8b58(0x54f)](_0x52a3e3,_0x52a3e3);const _0x30325c=$gameTemp[_0x2b8b58(0x7aa)](),_0x16dbcf=VisuMZ['CreateActionSequenceTargets'](_0x52a3e3[_0x2b8b58(0xbc7)]),_0x1eb921=_0x52a3e3[_0x2b8b58(0x296)],_0x127f2c=_0x52a3e3[_0x2b8b58(0xaaf)],_0x442452=_0x52a3e3[_0x2b8b58(0xa34)],_0x3b887e=_0x52a3e3[_0x2b8b58(0x835)];if(!_0x30325c)return;for(const _0xf12e42 of _0x16dbcf){if(!_0xf12e42)continue;_0xf12e42[_0x2b8b58(0xaf6)](_0x1eb921,_0x127f2c,_0x442452);}if(_0x3b887e)_0x30325c[_0x2b8b58(0x351)](_0x2b8b58(0x524));}),PluginManager['registerCommand'](pluginData[_0x23168f(0x611)],_0x23168f(0xb3e),_0x133729=>{const _0x384886=_0x23168f;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x384886(0x54f)](_0x133729,_0x133729);const _0x3e0059=$gameTemp[_0x384886(0x7aa)](),_0x9b7b0a=VisuMZ[_0x384886(0x31f)](_0x133729[_0x384886(0xbc7)]),_0x5d4296=_0x133729[_0x384886(0x43e)],_0x19f3c0=_0x133729[_0x384886(0x1bd)],_0x52762e=_0x133729[_0x384886(0xaaf)],_0x177237=_0x133729[_0x384886(0xa34)],_0xb05d00=_0x133729[_0x384886(0xe4)];if(!_0x3e0059)return;for(const _0x4a9f89 of _0x9b7b0a){if(!_0x4a9f89)continue;_0x4a9f89[_0x384886(0x86b)](_0x5d4296,_0x19f3c0,_0x52762e,_0x177237);}if(_0xb05d00)_0x3e0059[_0x384886(0x351)](_0x384886(0x508));}),PluginManager[_0x23168f(0x594)](pluginData['name'],_0x23168f(0x72c),_0x5f5461=>{const _0x2cd1a0=_0x23168f;if(!SceneManager[_0x2cd1a0(0xbef)]())return;VisuMZ[_0x2cd1a0(0x54f)](_0x5f5461,_0x5f5461);const _0x103b66=$gameTemp['getLastPluginCommandInterpreter'](),_0x51f70e=VisuMZ[_0x2cd1a0(0x31f)](_0x5f5461[_0x2cd1a0(0xbc7)]),_0x136795=_0x5f5461['SkewX'],_0x12ce08=_0x5f5461[_0x2cd1a0(0x491)],_0x4a3332=_0x5f5461[_0x2cd1a0(0xaaf)],_0x659b2a=_0x5f5461[_0x2cd1a0(0xa34)],_0x5cf5ee=_0x5f5461[_0x2cd1a0(0x281)];if(!_0x103b66)return;for(const _0x599eb0 of _0x51f70e){if(!_0x599eb0)continue;_0x599eb0['skewBattler'](_0x136795,_0x12ce08,_0x4a3332,_0x659b2a);}if(_0x5cf5ee)_0x103b66[_0x2cd1a0(0x351)](_0x2cd1a0(0xaea));}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x8df),_0x30ad07=>{const _0x10ab05=_0x23168f;if(!SceneManager[_0x10ab05(0xbef)]())return;VisuMZ[_0x10ab05(0x54f)](_0x30ad07,_0x30ad07);const _0x37d5db=$gameTemp[_0x10ab05(0x7aa)](),_0x479774=VisuMZ[_0x10ab05(0x31f)](_0x30ad07['Targets']),_0x35dda5=_0x30ad07['Angle'],_0x474ad3=_0x30ad07[_0x10ab05(0xaaf)],_0x1cc055=_0x30ad07[_0x10ab05(0xa34)],_0x879736=_0x30ad07[_0x10ab05(0xac4)],_0x8d4e2f=_0x30ad07[_0x10ab05(0xd6)];if(!_0x37d5db)return;for(const _0x27a2b0 of _0x479774){if(!_0x27a2b0)continue;_0x27a2b0[_0x10ab05(0x593)](_0x35dda5,_0x474ad3,_0x1cc055,_0x879736);}if(_0x8d4e2f)_0x37d5db[_0x10ab05(0x351)](_0x10ab05(0x23a));}),PluginManager[_0x23168f(0x594)](pluginData['name'],'ActSeq_Movement_WaitForFloat',_0x2f865d=>{const _0x17a7b6=_0x23168f;if(!SceneManager[_0x17a7b6(0xbef)]())return;const _0x31875c=$gameTemp[_0x17a7b6(0x7aa)]();if(!_0x31875c)return;_0x31875c[_0x17a7b6(0x351)]('battleFloat');}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0xb22),_0xc991ea=>{const _0x4542af=_0x23168f;if(!SceneManager[_0x4542af(0xbef)]())return;const _0x51eb1f=$gameTemp[_0x4542af(0x7aa)]();if(!_0x51eb1f)return;_0x51eb1f['setWaitMode'](_0x4542af(0x46b));}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0xa2f),_0x94ee35=>{const _0xacad26=_0x23168f;if(!SceneManager[_0xacad26(0xbef)]())return;const _0x1fd92b=$gameTemp[_0xacad26(0x7aa)]();if(!_0x1fd92b)return;_0x1fd92b['setWaitMode'](_0xacad26(0xacc));}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x448),_0xc009bc=>{const _0x115784=_0x23168f;if(!SceneManager[_0x115784(0xbef)]())return;const _0x53d410=$gameTemp[_0x115784(0x7aa)]();if(!_0x53d410)return;_0x53d410['setWaitMode'](_0x115784(0x524));}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x220),_0x2359d4=>{const _0x3a0ae4=_0x23168f;if(!SceneManager['isSceneBattle']())return;const _0x4989cd=$gameTemp[_0x3a0ae4(0x7aa)]();if(!_0x4989cd)return;_0x4989cd[_0x3a0ae4(0x351)](_0x3a0ae4(0x508));}),PluginManager['registerCommand'](pluginData[_0x23168f(0x611)],_0x23168f(0x18e),_0x649156=>{const _0x492fd4=_0x23168f;if(!SceneManager['isSceneBattle']())return;const _0xadf108=$gameTemp[_0x492fd4(0x7aa)]();if(!_0xadf108)return;_0xadf108[_0x492fd4(0x351)](_0x492fd4(0xaea));}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x544),_0x14e5de=>{const _0x5e3d30=_0x23168f;if(!SceneManager[_0x5e3d30(0xbef)]())return;const _0x5e54b9=$gameTemp[_0x5e3d30(0x7aa)]();if(!_0x5e54b9)return;_0x5e54b9['setWaitMode'](_0x5e3d30(0x23a));}),VisuMZ[_0x23168f(0x895)]['CheckActSeqProjectileVersion']=function(){const _0x4a2629=_0x23168f;if(!Imported['VisuMZ_3_ActSeqProjectiles'])return;if(VisuMZ[_0x4a2629(0x522)][_0x4a2629(0x82e)]<1.08){let _0x204b42='';_0x204b42+='VisuMZ_3_ActSeqProjectiles\x20needs\x20to\x20be\x20updated\x20',_0x204b42+='in\x20order\x20for\x20VisuMZ_1_BattleCore\x20to\x20work.',alert(_0x204b42),SceneManager[_0x4a2629(0x46e)]();}},PluginManager[_0x23168f(0x594)](pluginData['name'],_0x23168f(0x235),_0x22ff63=>{const _0x50d4ea=_0x23168f;if(!SceneManager[_0x50d4ea(0xbef)]())return;if(!Imported[_0x50d4ea(0x94f)])return;VisuMZ[_0x50d4ea(0x54f)](_0x22ff63,_0x22ff63),VisuMZ[_0x50d4ea(0x895)][_0x50d4ea(0xbc)]();const _0x47fe28=$gameTemp[_0x50d4ea(0x7aa)](),_0x27f6af=_0x22ff63['WaitForProjectile'];if(!_0x47fe28)return;const _0x53991f=BattleManager['_spriteset'];if(!_0x53991f)return;_0x53991f[_0x50d4ea(0x5b8)](_0x22ff63);if(_0x27f6af)_0x47fe28['setWaitMode'](_0x50d4ea(0x60d));}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0xa23),_0x20ea20=>{const _0x25a00c=_0x23168f;if(!SceneManager[_0x25a00c(0xbef)]())return;if(!Imported[_0x25a00c(0x94f)])return;VisuMZ[_0x25a00c(0x54f)](_0x20ea20,_0x20ea20),VisuMZ[_0x25a00c(0x895)][_0x25a00c(0xbc)]();const _0x5db977=$gameTemp['getLastPluginCommandInterpreter'](),_0x134d5d=_0x20ea20['WaitForProjectile'];if(!_0x5db977)return;const _0x31755c=BattleManager['_spriteset'];if(!_0x31755c)return;_0x31755c[_0x25a00c(0x5b8)](_0x20ea20);if(_0x134d5d)_0x5db977[_0x25a00c(0x351)](_0x25a00c(0x60d));}),PluginManager[_0x23168f(0x594)](pluginData['name'],_0x23168f(0x682),_0xe1aca5=>{const _0x856ab4=_0x23168f;if(!SceneManager[_0x856ab4(0xbef)]())return;if(!Imported[_0x856ab4(0x94f)])return;VisuMZ['ConvertParams'](_0xe1aca5,_0xe1aca5),VisuMZ[_0x856ab4(0x895)][_0x856ab4(0xbc)]();const _0x5dcbf=$gameTemp['getLastPluginCommandInterpreter'](),_0x542930=_0xe1aca5[_0x856ab4(0x272)];if(!_0x5dcbf)return;const _0x12cb81=BattleManager[_0x856ab4(0xa73)];if(!_0x12cb81)return;_0x12cb81[_0x856ab4(0x5b8)](_0xe1aca5);if(_0x542930)_0x5dcbf[_0x856ab4(0x351)]('battleProjectiles');}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x5d9),_0x3ce19e=>{const _0x1f094c=_0x23168f;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1f094c(0x6f9)])return;VisuMZ[_0x1f094c(0x54f)](_0x3ce19e,_0x3ce19e);const _0x4e1c6d=$gameTemp[_0x1f094c(0x7aa)](),_0x21db9c=_0x3ce19e[_0x1f094c(0x281)];if(!_0x4e1c6d)return;$gameScreen['setBattleSkew'](_0x3ce19e['SkewX'],_0x3ce19e['SkewY'],_0x3ce19e[_0x1f094c(0xaaf)],_0x3ce19e[_0x1f094c(0xa34)]);if(_0x21db9c)_0x4e1c6d[_0x1f094c(0x351)]('battleSkew');}),PluginManager[_0x23168f(0x594)](pluginData['name'],_0x23168f(0xa6d),_0x535d44=>{const _0x2c7804=_0x23168f;if(!SceneManager[_0x2c7804(0xbef)]())return;if(!Imported[_0x2c7804(0x6f9)])return;VisuMZ['ConvertParams'](_0x535d44,_0x535d44);const _0x43f1aa=$gameTemp[_0x2c7804(0x7aa)](),_0x325c03=_0x535d44[_0x2c7804(0x281)];if(!_0x43f1aa)return;$gameScreen['setBattleSkew'](0x0,0x0,_0x535d44['Duration'],_0x535d44[_0x2c7804(0xa34)]);if(_0x325c03)_0x43f1aa[_0x2c7804(0x351)]('battleSkew');}),PluginManager[_0x23168f(0x594)](pluginData['name'],_0x23168f(0x972),_0x125b40=>{const _0x414775=_0x23168f;if(!SceneManager[_0x414775(0xbef)]())return;if(!Imported[_0x414775(0x6f9)])return;const _0x5a74ba=$gameTemp[_0x414775(0x7aa)]();if(!_0x5a74ba)return;_0x5a74ba[_0x414775(0x351)](_0x414775(0x9dc));}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],'ActSeq_Target_CurrentIndex',_0x5153aa=>{const _0x3c2d71=_0x23168f;if(!SceneManager[_0x3c2d71(0xbef)]())return;VisuMZ['ConvertParams'](_0x5153aa,_0x5153aa);const _0x824556=$gameTemp['getLastPluginCommandInterpreter'](),_0x134fc8=_0x5153aa[_0x3c2d71(0xb68)],_0x25965c=_0x5153aa[_0x3c2d71(0x59e)];if(!_0x824556)return;BattleManager[_0x3c2d71(0x3dd)]=_0x134fc8,BattleManager[_0x3c2d71(0x54d)]=BattleManager[_0x3c2d71(0x51d)]?BattleManager[_0x3c2d71(0x51d)][BattleManager['_targetIndex']]||null:null,BattleManager[_0x3c2d71(0x54d)]&&_0x25965c[_0x3c2d71(0x1ef)]()[_0x3c2d71(0xf4)]()!=='UNTITLED'&&_0x824556[_0x3c2d71(0x632)]([_0x25965c]);}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],'ActSeq_Target_NextTarget',_0x5d311b=>{const _0x37c519=_0x23168f;if(!SceneManager[_0x37c519(0xbef)]())return;VisuMZ[_0x37c519(0x54f)](_0x5d311b,_0x5d311b);const _0x20d026=$gameTemp[_0x37c519(0x7aa)](),_0x148110=_0x5d311b[_0x37c519(0x59e)];if(!_0x20d026)return;BattleManager[_0x37c519(0x3dd)]++,BattleManager[_0x37c519(0x54d)]=BattleManager[_0x37c519(0x51d)][BattleManager[_0x37c519(0x3dd)]]||null,BattleManager[_0x37c519(0x54d)]&&_0x148110['toUpperCase']()[_0x37c519(0xf4)]()!==_0x37c519(0x1ee)&&_0x20d026[_0x37c519(0x632)]([_0x148110]);}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],'ActSeq_Target_PrevTarget',_0x414797=>{const _0x2117e6=_0x23168f;if(!SceneManager[_0x2117e6(0xbef)]())return;VisuMZ['ConvertParams'](_0x414797,_0x414797);const _0x283221=$gameTemp[_0x2117e6(0x7aa)](),_0x18c21a=_0x414797['JumpToLabel'];if(!_0x283221)return;BattleManager[_0x2117e6(0x3dd)]--,BattleManager[_0x2117e6(0x54d)]=BattleManager['_allTargets'][BattleManager[_0x2117e6(0x3dd)]]||null,BattleManager[_0x2117e6(0x54d)]&&_0x18c21a[_0x2117e6(0x1ef)]()[_0x2117e6(0xf4)]()!==_0x2117e6(0x1ee)&&_0x283221[_0x2117e6(0x632)]([_0x18c21a]);}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x762),_0xab4c14=>{const _0x23c068=_0x23168f;if(!SceneManager[_0x23c068(0xbef)]())return;VisuMZ[_0x23c068(0x54f)](_0xab4c14,_0xab4c14);const _0x177235=$gameTemp[_0x23c068(0x7aa)](),_0x152ce2=_0xab4c14[_0x23c068(0xaa7)],_0x2a506f=_0xab4c14[_0x23c068(0x59e)];if(!_0x177235)return;const _0x473dbb=BattleManager[_0x23c068(0x3dd)];for(;;){BattleManager['_targetIndex']=Math['randomInt'](BattleManager[_0x23c068(0x51d)][_0x23c068(0x312)]);if(!_0x152ce2)break;if(BattleManager[_0x23c068(0x3dd)]!==_0x473dbb)break;if(BattleManager['_allTargets']['length']<=0x1){BattleManager[_0x23c068(0x3dd)]=0x0;break;}}BattleManager['_target']=BattleManager[_0x23c068(0x51d)][BattleManager[_0x23c068(0x3dd)]]||null,BattleManager['_target']&&_0x2a506f[_0x23c068(0x1ef)]()[_0x23c068(0xf4)]()!=='UNTITLED'&&_0x177235[_0x23c068(0x632)]([_0x2a506f]);}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x505),_0x15e7e8=>{const _0x3f4e11=_0x23168f;if(!SceneManager[_0x3f4e11(0xbef)]())return;if(!Imported[_0x3f4e11(0x48c)])return;if(!ConfigManager['battleVoices'])return;VisuMZ[_0x3f4e11(0x54f)](_0x15e7e8,_0x15e7e8);const _0x42bc8a=VisuMZ[_0x3f4e11(0x31f)](_0x15e7e8[_0x3f4e11(0xbc7)]);let _0x461657=_0x15e7e8[_0x3f4e11(0x429)]||'';for(const _0x59f2ee of _0x42bc8a){if(!_0x59f2ee)continue;_0x59f2ee[_0x3f4e11(0x2fe)](_0x461657);}}),PluginManager['registerCommand'](pluginData[_0x23168f(0x611)],'ActSeq_BattleVoice_PlaySpecialLine',_0x2c9f87=>{const _0x218257=_0x23168f;if(!SceneManager[_0x218257(0xbef)]())return;if(!Imported[_0x218257(0x48c)])return;if(!ConfigManager[_0x218257(0x558)])return;VisuMZ[_0x218257(0x54f)](_0x2c9f87,_0x2c9f87);const _0x3bf90c=VisuMZ[_0x218257(0x31f)](_0x2c9f87[_0x218257(0xbc7)]);let _0x1108a6=(_0x2c9f87[_0x218257(0x36d)]||'')+(_0x2c9f87[_0x218257(0x5f3)]||'');for(const _0x5e8f5e of _0x3bf90c){if(!_0x5e8f5e)continue;_0x5e8f5e[_0x218257(0x2fe)](_0x1108a6);}}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x2f5),_0x23ec04=>{const _0x46b7f2=_0x23168f;if(!SceneManager[_0x46b7f2(0xbef)]())return;VisuMZ['ConvertParams'](_0x23ec04,_0x23ec04);const _0x2937cc=VisuMZ['CreateActionSequenceTargets'](_0x23ec04[_0x46b7f2(0xbc7)]);for(const _0x20360d of _0x2937cc){if(!_0x20360d)continue;if(!_0x20360d[_0x46b7f2(0x36b)]())continue;_0x20360d[_0x46b7f2(0x2a2)]();}}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x63b),_0x4cb7d5=>{const _0x2d2ba6=_0x23168f;if(!SceneManager[_0x2d2ba6(0xbef)]())return;VisuMZ['ConvertParams'](_0x4cb7d5,_0x4cb7d5);const _0x2bfedf=$gameTemp[_0x2d2ba6(0x7aa)]();let _0x3449a4=![];const _0x1363c5=_0x4cb7d5['JumpToLabel'],_0x1f19a5=VisuMZ['CreateActionSequenceTargets'](_0x4cb7d5[_0x2d2ba6(0xbc7)]);for(const _0x134234 of _0x1f19a5){if(!_0x134234)continue;if(!_0x134234[_0x2d2ba6(0x36b)]())continue;_0x134234[_0x2d2ba6(0x8ef)](),_0x134234[_0x2d2ba6(0x58c)]()['length']>0x0?_0x3449a4=!![]:_0x134234[_0x2d2ba6(0x2a2)]();}_0x3449a4&&_0x1363c5['toUpperCase']()[_0x2d2ba6(0xf4)]()!==_0x2d2ba6(0x1ee)&&_0x2bfedf['command119']([_0x1363c5]);}),PluginManager[_0x23168f(0x594)](pluginData[_0x23168f(0x611)],_0x23168f(0x564),_0x3418dc=>{const _0x1dcdb9=_0x23168f;if(!SceneManager[_0x1dcdb9(0xbef)]())return;VisuMZ[_0x1dcdb9(0x54f)](_0x3418dc,_0x3418dc);let _0x51939f=_0x3418dc[_0x1dcdb9(0x3f7)];_0x51939f--,_0x51939f=Math['max'](_0x51939f,0x0);const _0x4b5747=VisuMZ[_0x1dcdb9(0x31f)](_0x3418dc[_0x1dcdb9(0xbc7)]);for(const _0x6014aa of _0x4b5747){if(!_0x6014aa)continue;if(!_0x6014aa[_0x1dcdb9(0x36b)]())continue;_0x6014aa[_0x1dcdb9(0x377)](_0x51939f);}}),PluginManager[_0x23168f(0x594)](pluginData['name'],_0x23168f(0x379),_0x304905=>{const _0x4e176c=_0x23168f;if(!SceneManager[_0x4e176c(0xbef)]())return;if(!Imported[_0x4e176c(0x6f9)])return;VisuMZ[_0x4e176c(0x54f)](_0x304905,_0x304905);const _0x1353dd=$gameTemp[_0x4e176c(0x7aa)](),_0x6e927=_0x304905['WaitForZoom'];if(!_0x1353dd)return;$gameScreen[_0x4e176c(0x888)](_0x304905['Scale'],_0x304905[_0x4e176c(0xaaf)],_0x304905[_0x4e176c(0xa34)]);if(_0x6e927)_0x1353dd[_0x4e176c(0x351)]('battleZoom');}),PluginManager['registerCommand'](pluginData[_0x23168f(0x611)],_0x23168f(0x141),_0x4e6f01=>{const _0x1c2636=_0x23168f;if(!SceneManager[_0x1c2636(0xbef)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x1c2636(0x54f)](_0x4e6f01,_0x4e6f01);const _0x30c673=$gameTemp[_0x1c2636(0x7aa)](),_0x230f07=_0x4e6f01[_0x1c2636(0x805)];if(!_0x30c673)return;$gameScreen['setBattleZoom'](0x1,_0x4e6f01['Duration'],_0x4e6f01[_0x1c2636(0xa34)]);if(_0x230f07)_0x30c673[_0x1c2636(0x351)](_0x1c2636(0xbcb));}),PluginManager[_0x23168f(0x594)](pluginData['name'],_0x23168f(0xb1b),_0xf32f47=>{const _0x1ab5fc=_0x23168f;if(!SceneManager[_0x1ab5fc(0xbef)]())return;if(!Imported[_0x1ab5fc(0x6f9)])return;const _0x103b8d=$gameTemp[_0x1ab5fc(0x7aa)]();if(!_0x103b8d)return;_0x103b8d[_0x1ab5fc(0x351)]('battleZoom');}),VisuMZ[_0x23168f(0x895)]['Scene_Boot_onDatabaseLoaded']=Scene_Boot['prototype'][_0x23168f(0x310)],Scene_Boot[_0x23168f(0xa01)][_0x23168f(0x310)]=function(){const _0x36931c=_0x23168f;this[_0x36931c(0x74d)](),this[_0x36931c(0x848)](),this[_0x36931c(0x231)](),this[_0x36931c(0x6b7)](),VisuMZ['BattleCore'][_0x36931c(0x823)][_0x36931c(0x88f)](this),this[_0x36931c(0x511)](),this[_0x36931c(0x415)](),this[_0x36931c(0x7bf)](),this[_0x36931c(0xba)]();},Scene_Boot[_0x23168f(0xa01)][_0x23168f(0x511)]=function(){const _0x75834d=_0x23168f;if(VisuMZ['ParseAllNotetags'])return;this[_0x75834d(0x1d1)](),this[_0x75834d(0xbb7)](),this['process_VisuMZ_BattleCore_jsFunctions']();},Scene_Boot[_0x23168f(0xa01)][_0x23168f(0x74d)]=function(){const _0x3ad67=_0x23168f,_0xcc9e02=$dataSystem[_0x3ad67(0x179)]['length'];for(let _0x117bc0=0x0;_0x117bc0<_0xcc9e02;_0x117bc0++){const _0x189c70=$dataSystem[_0x3ad67(0x818)][_0x117bc0];if(_0x189c70)continue;$dataSystem[_0x3ad67(0x818)][_0x117bc0]={'type':0x1,'weaponImageId':0x1};}},Scene_Boot[_0x23168f(0xa01)][_0x23168f(0x848)]=function(){const _0x17079f=_0x23168f,_0x33c489=VisuMZ[_0x17079f(0x895)][_0x17079f(0xbac)];_0x33c489[_0x17079f(0x642)][_0x17079f(0x82d)]===undefined&&(_0x33c489['Damage'][_0x17079f(0x82d)]=_0x17079f(0xa85)),_0x33c489[_0x17079f(0x33d)][_0x17079f(0x579)]===undefined&&(_0x33c489[_0x17079f(0x33d)]['SmoothImage']=![]),_0x33c489[_0x17079f(0xbeb)]['SmoothImage']===undefined&&(_0x33c489[_0x17079f(0xbeb)][_0x17079f(0x579)]=!![]),_0x33c489['Actor'][_0x17079f(0x912)]===undefined&&(_0x33c489[_0x17079f(0x33d)][_0x17079f(0x912)]=![]),_0x33c489[_0x17079f(0x33d)][_0x17079f(0xbe)]===undefined&&(_0x33c489['Actor'][_0x17079f(0xbe)]=!![]);},VisuMZ[_0x23168f(0xc2)]={},Scene_Boot[_0x23168f(0xa01)]['process_VisuMZ_BattleCore_DamageStyles']=function(){const _0xb8fa8e=_0x23168f;for(const _0x2a85d4 of VisuMZ[_0xb8fa8e(0x895)][_0xb8fa8e(0xbac)]['Damage'][_0xb8fa8e(0x252)]){if(!_0x2a85d4)continue;const _0x269570=_0x2a85d4[_0xb8fa8e(0x4cc)]['toUpperCase']()[_0xb8fa8e(0xf4)]();VisuMZ[_0xb8fa8e(0xc2)][_0x269570]=_0x2a85d4;}},VisuMZ['BattleCore'][_0x23168f(0x55c)]={'jsAccuracy':/<JS (?:ACCURACY|ACC|HIT|EVA)>\s*([\s\S]*?)\s*<\/JS (?:ACCURACY|ACC|HIT|EVA)>/i,'jsAccuracyAsUser':/<JS (?:ACCURACY|ACC|HIT|EVA) AS USER>\s*([\s\S]*?)\s*<\/JS (?:ACCURACY|ACC|HIT|EVA) AS USER>/i,'jsAccuracyAsTarget':/<JS (?:ACCURACY|ACC|HIT|EVA) AS TARGET>\s*([\s\S]*?)\s*<\/JS (?:ACCURACY|ACC|HIT|EVA) AS TARGET>/i,'jsCritRateAsUser':/<JS (?:CRITICAL RATE|CRI) AS USER>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS USER>/i,'jsCritRateAsTarget':/<JS (?:CRITICAL RATE|CRI) AS TARGET>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS TARGET>/i},Scene_Boot[_0x23168f(0xa01)]['process_VisuMZ_BattleCore_CreateRegExp']=function(){const _0x5a9719=_0x23168f,_0x1222b3=VisuMZ[_0x5a9719(0x895)]['RegExp'],_0x2b2330=_0x5a9719(0x6b4),_0x31135e=[[_0x5a9719(0x50d),'PRE-'],[_0x5a9719(0x8b8),_0x5a9719(0x91f)]],_0x3c02fe=[[_0x5a9719(0x3c4),_0x5a9719(0x6ba)],[_0x5a9719(0x766),'JS\x20%1DAMAGE\x20%2']],_0x49997a=[['',''],['AsUser',_0x5a9719(0x7a2)],[_0x5a9719(0x783),_0x5a9719(0x661)]];for(const _0x21f094 of _0x3c02fe){for(const _0xf29583 of _0x49997a){for(const _0x3af9d1 of _0x31135e){const _0x413a77=_0x21f094[0x0][_0x5a9719(0x7d3)](_0x3af9d1[0x0],_0xf29583[0x0]),_0x220e7c=_0x21f094[0x1]['format'](_0x3af9d1[0x1],_0xf29583[0x1])[_0x5a9719(0xf4)](),_0x2584ea=new RegExp(_0x2b2330[_0x5a9719(0x7d3)](_0x220e7c),'i');_0x1222b3[_0x413a77]=_0x2584ea;}}}const _0x2a4f65=[['%1StartActionJS',_0x5a9719(0x4a7)],[_0x5a9719(0x433),'JS\x20%1END\x20ACTION']];for(const _0x3400a2 of _0x2a4f65){for(const _0x190563 of _0x31135e){const _0x470abc=_0x3400a2[0x0][_0x5a9719(0x7d3)](_0x190563[0x0]),_0x2775a9=_0x3400a2[0x1][_0x5a9719(0x7d3)](_0x190563[0x1]),_0x53ca34=new RegExp(_0x2b2330[_0x5a9719(0x7d3)](_0x2775a9),'i');_0x1222b3[_0x470abc]=_0x53ca34;}}const _0x353810=[[_0x5a9719(0xbb9),'JS\x20%1START\x20BATTLE'],[_0x5a9719(0x81d),'JS\x20%1END\x20BATTLE'],[_0x5a9719(0x71a),_0x5a9719(0x11d)],[_0x5a9719(0x935),_0x5a9719(0xf2)],[_0x5a9719(0x333),_0x5a9719(0x320)],[_0x5a9719(0x631),'JS\x20ESCAPE\x20FAILURE'],[_0x5a9719(0x701),_0x5a9719(0x259)],['%1EndTurnJS',_0x5a9719(0xaeb)],[_0x5a9719(0x92b),_0x5a9719(0x850)]];for(const _0x4bca54 of _0x353810){for(const _0x179a01 of _0x31135e){const _0x5bbcf7=_0x4bca54[0x0][_0x5a9719(0x7d3)](_0x179a01[0x0]),_0xbf9a26=_0x4bca54[0x1]['format'](_0x179a01[0x1]),_0x93b13f=new RegExp(_0x2b2330[_0x5a9719(0x7d3)](_0xbf9a26),'i');_0x1222b3[_0x5bbcf7]=_0x93b13f;}}},Scene_Boot['prototype'][_0x23168f(0x1d1)]=function(){const _0x673607=_0x23168f,_0x226006=$dataSkills['concat']($dataItems);for(const _0x32facc of _0x226006){if(!_0x32facc)continue;VisuMZ[_0x673607(0x895)][_0x673607(0x302)](_0x32facc);}},Scene_Boot[_0x23168f(0xa01)][_0x23168f(0xbb7)]=function(){const _0x12a2df=_0x23168f,_0x1b1f76=$dataActors[_0x12a2df(0x23c)]($dataClasses,$dataWeapons,$dataArmors,$dataEnemies,$dataStates);for(const _0x47cc62 of _0x1b1f76){if(!_0x47cc62)continue;VisuMZ[_0x12a2df(0x895)]['Parse_Notetags_TraitObjects'](_0x47cc62),_0x47cc62[_0x12a2df(0x4ea)]!==undefined&&VisuMZ[_0x12a2df(0x895)]['Parse_Notetags_HelpDescription'](_0x47cc62);}},Scene_Boot['prototype']['process_VisuMZ_BattleCore_BaseTroops']=function(){const _0x31a5c8=_0x23168f,_0x5a3e9e=VisuMZ[_0x31a5c8(0x895)]['Settings']['Mechanics'][_0x31a5c8(0x99d)],_0x15da9d=[];for(const _0x552df5 of _0x5a3e9e){const _0x2de564=$dataTroops[_0x552df5];if(_0x2de564)_0x15da9d['push'](JsonEx['makeDeepCopy'](_0x2de564));}for(const _0x58fcf9 of $dataTroops){if(!_0x58fcf9)continue;for(const _0x3c7120 of _0x15da9d){if(_0x3c7120['id']===_0x58fcf9['id'])continue;_0x58fcf9['pages']=_0x58fcf9[_0x31a5c8(0x923)]['concat'](_0x3c7120[_0x31a5c8(0x923)]);}}},Scene_Boot['prototype']['process_VisuMZ_BattleCore_PreBattleCommonEvent']=function(){const _0x1660ff=_0x23168f,_0x43f370=VisuMZ[_0x1660ff(0x895)][_0x1660ff(0xbac)]['Mechanics'];if(_0x43f370[_0x1660ff(0xbd)]>0x0&&$dataCommonEvents[_0x43f370['BattleStartEvent']]){const _0x37e268=$dataCommonEvents[_0x43f370['BattleStartEvent']],_0x10a681=_0x37e268[_0x1660ff(0x290)][_0x1660ff(0x312)]-0x2,_0x19c041=_0x37e268['list'][_0x10a681];if(_0x19c041&&_0x19c041['code']!==0xe6){const _0x3dd52c={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x42bfec=_0x37e268[_0x1660ff(0x290)]['pop']();_0x37e268[_0x1660ff(0x290)]['unshift'](_0x3dd52c),_0x37e268['list'][_0x1660ff(0xb93)](_0x42bfec);}}},Scene_Boot['prototype'][_0x23168f(0xba)]=function(){const _0x5f1d50=_0x23168f;VisuMZ[_0x5f1d50(0x895)][_0x5f1d50(0x6a4)](),VisuMZ['BattleCore']['BindCommonEventKeysForGroup']($dataSkills),VisuMZ[_0x5f1d50(0x895)][_0x5f1d50(0x643)]($dataItems);},VisuMZ[_0x23168f(0x895)]['CreateCommonEventKeys']=function(){const _0x146e83=_0x23168f;VisuMZ[_0x146e83(0x895)][_0x146e83(0x9a7)]={};for(const _0x110ef7 of $dataCommonEvents){if(!_0x110ef7)continue;if(_0x110ef7[_0x146e83(0x611)][_0x146e83(0x26e)](/\[(.*)\]/i)){let _0x34b759=String(RegExp['$1'])['replace'](/,/g,'')[_0x146e83(0x1ef)]()['trim']();VisuMZ[_0x146e83(0x895)][_0x146e83(0x9a7)][_0x34b759]=_0x110ef7['id'];}}},VisuMZ[_0x23168f(0x895)][_0x23168f(0x643)]=function(_0x32cdcc){const _0x49b8f0=_0x23168f;for(const _0x3f457b of _0x32cdcc){if(!_0x3f457b)continue;VisuMZ['BattleCore'][_0x49b8f0(0x2ac)](_0x3f457b);}},VisuMZ[_0x23168f(0x895)][_0x23168f(0x2ac)]=function(_0x2c957f){const _0x52ba9d=_0x23168f;if(!_0x2c957f)return;if(!_0x2c957f[_0x52ba9d(0x2cc)])return;VisuMZ['BattleCore'][_0x52ba9d(0x9a7)]=VisuMZ[_0x52ba9d(0x895)]['_commonEventKey']||{};const _0x4cf046=/<COMMON EVENT (?:KEY|KEYS):[ ](.*)>/gi,_0xa95726=/<COMMON EVENT (?:KEY|KEYS)>\s*([\s\S]*)\s*<\/COMMON EVENT (?:KEY|KEYS)>/i;let _0x5394ff=[];const _0x3a4cb2=_0x2c957f['note'][_0x52ba9d(0x26e)](_0x4cf046);if(_0x3a4cb2){for(const _0x300a14 of _0x3a4cb2){_0x300a14['match'](_0x4cf046);const _0x4eec03=String(RegExp['$1'])[_0x52ba9d(0x221)](',')[_0x52ba9d(0x37f)](_0x3312d5=>String(_0x3312d5)['toUpperCase']()[_0x52ba9d(0xf4)]());_0x5394ff=_0x5394ff[_0x52ba9d(0x23c)](_0x4eec03);}!_0x2c957f[_0x52ba9d(0xae7)][_0x52ba9d(0x26e)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x2c957f[_0x52ba9d(0xae7)]+=_0x52ba9d(0x58b));;}if(_0x2c957f[_0x52ba9d(0xae7)][_0x52ba9d(0x26e)](_0xa95726)){const _0x5a2415=String(RegExp['$1'])[_0x52ba9d(0x221)](/[\r\n]+/)[_0x52ba9d(0x37f)](_0x176816=>String(_0x176816)[_0x52ba9d(0x1ef)]()['trim']());_0x5394ff=_0x5394ff['concat'](_0x5a2415);!_0x2c957f[_0x52ba9d(0xae7)][_0x52ba9d(0x26e)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x2c957f[_0x52ba9d(0xae7)]+=_0x52ba9d(0x58b));;}for(const _0xe3dfd1 of _0x5394ff){if(VisuMZ[_0x52ba9d(0x895)]['_commonEventKey'][_0xe3dfd1]){const _0xfadae7=VisuMZ[_0x52ba9d(0x895)]['_commonEventKey'][_0xe3dfd1],_0x355222={'code':0x2c,'dataId':_0xfadae7,'value1':0x1,'value2':0x0};_0x2c957f[_0x52ba9d(0x2cc)]['push'](_0x355222);}}},Scene_Boot[_0x23168f(0xa01)][_0x23168f(0x1fd)]=function(){const _0x2cba3f=_0x23168f,_0x444382=$dataSkills[_0x2cba3f(0x23c)]($dataItems);for(const _0x196c87 of _0x444382){if(!_0x196c87)continue;VisuMZ['BattleCore'][_0x2cba3f(0x265)](_0x196c87);}},VisuMZ[_0x23168f(0x895)]['ParseActorNotetags']=VisuMZ[_0x23168f(0x24e)],VisuMZ[_0x23168f(0x24e)]=function(_0x1b570b){const _0x229aa4=_0x23168f;VisuMZ[_0x229aa4(0x895)][_0x229aa4(0x24e)]&&VisuMZ['BattleCore'][_0x229aa4(0x24e)][_0x229aa4(0x88f)](this,_0x1b570b),VisuMZ[_0x229aa4(0x895)][_0x229aa4(0x4fe)](_0x1b570b);},VisuMZ['BattleCore'][_0x23168f(0x4fb)]=VisuMZ['ParseClassNotetags'],VisuMZ[_0x23168f(0x4fb)]=function(_0x1392d1){const _0x41df56=_0x23168f;VisuMZ[_0x41df56(0x895)][_0x41df56(0x4fb)]&&VisuMZ[_0x41df56(0x895)][_0x41df56(0x4fb)][_0x41df56(0x88f)](this,_0x1392d1),VisuMZ[_0x41df56(0x895)][_0x41df56(0x4fe)](_0x1392d1);},VisuMZ[_0x23168f(0x895)][_0x23168f(0xa48)]=VisuMZ[_0x23168f(0xa48)],VisuMZ[_0x23168f(0xa48)]=function(_0x35b08f){const _0x1b4b23=_0x23168f;VisuMZ[_0x1b4b23(0x895)][_0x1b4b23(0xa48)]&&VisuMZ[_0x1b4b23(0x895)][_0x1b4b23(0xa48)][_0x1b4b23(0x88f)](this,_0x35b08f),VisuMZ[_0x1b4b23(0x895)][_0x1b4b23(0x302)](_0x35b08f),VisuMZ['BattleCore'][_0x1b4b23(0x265)](_0x35b08f);},VisuMZ[_0x23168f(0x895)]['ParseItemNotetags']=VisuMZ[_0x23168f(0xbde)],VisuMZ['ParseItemNotetags']=function(_0x5b7cf3){const _0x38e3f3=_0x23168f;VisuMZ[_0x38e3f3(0x895)][_0x38e3f3(0xbde)]&&VisuMZ['BattleCore'][_0x38e3f3(0xbde)][_0x38e3f3(0x88f)](this,_0x5b7cf3),VisuMZ[_0x38e3f3(0x895)][_0x38e3f3(0x302)](_0x5b7cf3),VisuMZ[_0x38e3f3(0x895)][_0x38e3f3(0x265)](_0x5b7cf3);},VisuMZ[_0x23168f(0x895)]['ParseWeaponNotetags']=VisuMZ[_0x23168f(0x4c8)],VisuMZ['ParseWeaponNotetags']=function(_0x46f9c8){const _0x4ddf5d=_0x23168f;VisuMZ[_0x4ddf5d(0x895)][_0x4ddf5d(0x4c8)]&&VisuMZ['BattleCore'][_0x4ddf5d(0x4c8)]['call'](this,_0x46f9c8),VisuMZ[_0x4ddf5d(0x895)][_0x4ddf5d(0x4fe)](_0x46f9c8);},VisuMZ[_0x23168f(0x895)]['ParseArmorNotetags']=VisuMZ['ParseArmorNotetags'],VisuMZ[_0x23168f(0x7fc)]=function(_0x2e0f20){const _0x508fa4=_0x23168f;VisuMZ[_0x508fa4(0x895)][_0x508fa4(0x7fc)]&&VisuMZ[_0x508fa4(0x895)]['ParseArmorNotetags'][_0x508fa4(0x88f)](this,_0x2e0f20),VisuMZ['BattleCore']['Parse_Notetags_TraitObjects'](_0x2e0f20);},VisuMZ['BattleCore'][_0x23168f(0xa6f)]=VisuMZ['ParseEnemyNotetags'],VisuMZ[_0x23168f(0xa6f)]=function(_0x18e04b){const _0x497f97=_0x23168f;VisuMZ[_0x497f97(0x895)]['ParseEnemyNotetags']&&VisuMZ['BattleCore'][_0x497f97(0xa6f)][_0x497f97(0x88f)](this,_0x18e04b),VisuMZ[_0x497f97(0x895)][_0x497f97(0x4fe)](_0x18e04b);},VisuMZ[_0x23168f(0x895)][_0x23168f(0x393)]=VisuMZ[_0x23168f(0x393)],VisuMZ['ParseStateNotetags']=function(_0x177461){const _0x577434=_0x23168f;VisuMZ['BattleCore'][_0x577434(0x393)]&&VisuMZ[_0x577434(0x895)][_0x577434(0x393)][_0x577434(0x88f)](this,_0x177461),VisuMZ[_0x577434(0x895)][_0x577434(0x4fe)](_0x177461),VisuMZ[_0x577434(0x895)][_0x577434(0x1e3)](_0x177461);},VisuMZ[_0x23168f(0x895)][_0x23168f(0x302)]=function(_0x42880b){const _0x2c7101=_0x23168f,_0x2c65f4=[_0x2c7101(0x441),_0x2c7101(0x343),_0x2c7101(0x5e5),'PostDamageJS',_0x2c7101(0x8da),'PostStartActionJS',_0x2c7101(0x203),_0x2c7101(0x2d6)];for(const _0x57cbd0 of _0x2c65f4){VisuMZ['BattleCore'][_0x2c7101(0x9de)](_0x42880b,_0x57cbd0);}const _0x4e8b1d=_0x42880b[_0x2c7101(0xae7)];_0x4e8b1d['match'](/<ALWAYS CRITICAL/i)&&(_0x42880b[_0x2c7101(0x96e)][_0x2c7101(0xb9d)]=!![]),_0x4e8b1d[_0x2c7101(0x26e)](/<(?:REPEAT|REPEATS|REPEAT HITS):[ ](\d+)/i)&&(_0x42880b[_0x2c7101(0x994)]=Math['max'](0x1,Number(RegExp['$1']))),_0x4e8b1d['match'](/<TARGET:[ ](.*)>/i)&&(_0x42880b[_0x2c7101(0xb4c)]=String(RegExp['$1'])['toUpperCase']()[_0x2c7101(0xf4)]());},VisuMZ['BattleCore'][_0x23168f(0x4fe)]=function(_0x1e5e08){const _0x36d2bb=_0x23168f,_0x208e67=['PreApplyAsUserJS',_0x36d2bb(0x17f),_0x36d2bb(0x42d),'PostDamageAsUserJS','PreApplyAsTargetJS',_0x36d2bb(0x19b),_0x36d2bb(0x77e),_0x36d2bb(0x1e5),_0x36d2bb(0x8da),'PostStartActionJS',_0x36d2bb(0x203),_0x36d2bb(0x2d6),_0x36d2bb(0x7ea),_0x36d2bb(0x672),_0x36d2bb(0x2bf),_0x36d2bb(0x55e),_0x36d2bb(0x71a),_0x36d2bb(0x935),_0x36d2bb(0x333),'EscapeFailureJS',_0x36d2bb(0x44d),'PostStartTurnJS','PreEndTurnJS','PostEndTurnJS',_0x36d2bb(0x825),_0x36d2bb(0x66c)];for(const _0x1cb809 of _0x208e67){VisuMZ[_0x36d2bb(0x895)][_0x36d2bb(0x9de)](_0x1e5e08,_0x1cb809);}const _0x16ad87=[_0x36d2bb(0xd9),_0x36d2bb(0x258),'jsAccuracyAsTarget',_0x36d2bb(0x92e),'jsCritRateAsTarget'];for(const _0x1d0fd6 of _0x16ad87){VisuMZ[_0x36d2bb(0x895)]['createRateJS'](_0x1e5e08,_0x1d0fd6);}},VisuMZ[_0x23168f(0x895)][_0x23168f(0x265)]=function(_0x3968df){const _0x2dda48=_0x23168f,_0x2f85a7=_0x3968df['note'];if(_0x2f85a7['match'](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x172376=String(RegExp['$1']),_0x3bf42d=VisuMZ[_0x2dda48(0x895)]['createKeyJS'](_0x3968df,_0x2dda48(0xbc7));VisuMZ[_0x2dda48(0x895)]['createTargetsJS'](_0x172376,_0x3bf42d);}if(_0x2f85a7[_0x2dda48(0x26e)](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){const _0x4ff9d0=String(RegExp['$1']),_0x35ca38=VisuMZ[_0x2dda48(0x895)][_0x2dda48(0x7b2)](_0x3968df,_0x2dda48(0xb1a));VisuMZ['BattleCore'][_0x2dda48(0xae9)](_0x4ff9d0,_0x35ca38);}},VisuMZ[_0x23168f(0x895)]['JS']={},VisuMZ[_0x23168f(0x895)]['createJS']=function(_0x10df94,_0x191867){const _0xc8d717=_0x23168f,_0x24d6f3=_0x10df94[_0xc8d717(0xae7)];if(_0x24d6f3[_0xc8d717(0x26e)](VisuMZ[_0xc8d717(0x895)][_0xc8d717(0x55c)][_0x191867])){const _0x371956=RegExp['$1'],_0x2ccc6f=_0xc8d717(0xd3)[_0xc8d717(0x7d3)](_0x371956),_0x27f681=VisuMZ[_0xc8d717(0x895)][_0xc8d717(0x7b2)](_0x10df94,_0x191867);VisuMZ['BattleCore']['JS'][_0x27f681]=new Function(_0x2ccc6f);}},VisuMZ[_0x23168f(0x895)]['createKeyJS']=function(_0x2ec1af,_0x4cd5cd){const _0x3b9e95=_0x23168f;if(VisuMZ[_0x3b9e95(0x7b2)])return VisuMZ[_0x3b9e95(0x7b2)](_0x2ec1af,_0x4cd5cd);let _0x12d805='';if($dataActors['includes'](_0x2ec1af))_0x12d805=_0x3b9e95(0x6eb)[_0x3b9e95(0x7d3)](_0x2ec1af['id'],_0x4cd5cd);if($dataClasses['includes'](_0x2ec1af))_0x12d805=_0x3b9e95(0x1b8)[_0x3b9e95(0x7d3)](_0x2ec1af['id'],_0x4cd5cd);if($dataSkills[_0x3b9e95(0x2d8)](_0x2ec1af))_0x12d805=_0x3b9e95(0xa6c)['format'](_0x2ec1af['id'],_0x4cd5cd);if($dataItems[_0x3b9e95(0x2d8)](_0x2ec1af))_0x12d805=_0x3b9e95(0x67e)[_0x3b9e95(0x7d3)](_0x2ec1af['id'],_0x4cd5cd);if($dataWeapons[_0x3b9e95(0x2d8)](_0x2ec1af))_0x12d805=_0x3b9e95(0x229)[_0x3b9e95(0x7d3)](_0x2ec1af['id'],_0x4cd5cd);if($dataArmors[_0x3b9e95(0x2d8)](_0x2ec1af))_0x12d805=_0x3b9e95(0xa42)[_0x3b9e95(0x7d3)](_0x2ec1af['id'],_0x4cd5cd);if($dataEnemies[_0x3b9e95(0x2d8)](_0x2ec1af))_0x12d805=_0x3b9e95(0x3aa)[_0x3b9e95(0x7d3)](_0x2ec1af['id'],_0x4cd5cd);if($dataStates[_0x3b9e95(0x2d8)](_0x2ec1af))_0x12d805='State-%1-%2'['format'](_0x2ec1af['id'],_0x4cd5cd);return _0x12d805;},VisuMZ[_0x23168f(0x895)][_0x23168f(0x87e)]=function(_0x4fe7a7,_0x4a77d3){const _0x314915=_0x23168f,_0xc3f355=_0x314915(0x3fb)[_0x314915(0x7d3)](_0x4fe7a7);VisuMZ[_0x314915(0x895)]['JS'][_0x4a77d3]=new Function(_0xc3f355);},VisuMZ[_0x23168f(0x895)][_0x23168f(0xae9)]=function(_0x2ef648,_0x1a7ad2){const _0x2811f4=_0x23168f,_0x4e14c8='\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20'[_0x2811f4(0x7d3)](_0x2ef648);VisuMZ['BattleCore']['JS'][_0x1a7ad2]=new Function(_0x4e14c8);},VisuMZ[_0x23168f(0x895)][_0x23168f(0x538)]=function(_0x34923f,_0x20881e){const _0x690cc2=_0x23168f,_0x231f0d=_0x34923f[_0x690cc2(0xae7)];if(_0x231f0d[_0x690cc2(0x26e)](VisuMZ[_0x690cc2(0x895)][_0x690cc2(0x55c)][_0x20881e])){const _0x3cdaa3=RegExp['$1'],_0x152b47=_0x690cc2(0xde)[_0x690cc2(0x7d3)](_0x3cdaa3),_0x2390d7=VisuMZ[_0x690cc2(0x895)][_0x690cc2(0x7b2)](_0x34923f,_0x20881e);VisuMZ[_0x690cc2(0x895)]['JS'][_0x2390d7]=new Function(_0x152b47);}},VisuMZ[_0x23168f(0x895)][_0x23168f(0x1e3)]=function(_0x1ae4d8){const _0x317e26=_0x23168f;_0x1ae4d8['description']='-';const _0x141820=_0x1ae4d8[_0x317e26(0xae7)];_0x141820['match'](/<(?:HELP|HELP DESCRIPTION|DESCRIPTION)>\s*([\s\S]*)\s*<\/(?:HELP|HELP DESCRIPTION|DESCRIPTION)>/i)&&(_0x1ae4d8[_0x317e26(0x3ef)]=String(RegExp['$1'])[_0x317e26(0xf4)]()),_0x141820[_0x317e26(0x26e)](/<(?:IN-BATTLE |)STATUS DESCRIPTION>\s*([\s\S]*)\s*<\/(?:IN-BATTLE |)STATUS DESCRIPTION>/i)&&(_0x1ae4d8['statusDescription']=String(RegExp['$1'])['trim']()),_0x141820['match'](/<EXCLUDE FROM (?:HELP|STATUS|STATUS LIST|LISTING|STATUS LISTING)>/i)&&(_0x1ae4d8[_0x317e26(0xab4)]=!![]);},TextManager['autoBattle']=VisuMZ['BattleCore'][_0x23168f(0xbac)][_0x23168f(0xabb)][_0x23168f(0x770)],TextManager[_0x23168f(0x51a)]=VisuMZ[_0x23168f(0x895)][_0x23168f(0xbac)][_0x23168f(0x771)][_0x23168f(0x4b3)],TextManager[_0x23168f(0x507)]=VisuMZ['BattleCore']['Settings'][_0x23168f(0x771)]['StyleName'],TextManager[_0x23168f(0x786)]=VisuMZ[_0x23168f(0x895)]['Settings'][_0x23168f(0x382)][_0x23168f(0x4cc)],ColorManager[_0x23168f(0xfc)]=function(_0x3f40d2){const _0x567cd0=_0x23168f;return _0x3f40d2=String(_0x3f40d2),_0x3f40d2[_0x567cd0(0x26e)](/#(.*)/i)?'#%1'[_0x567cd0(0x7d3)](String(RegExp['$1'])):this['textColor'](Number(_0x3f40d2));},DataManager['getDamageStyle']=function(_0x1a5b4d){const _0x51b686=_0x23168f;if(_0x1a5b4d[_0x51b686(0xae7)][_0x51b686(0x26e)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x4f0046=String(RegExp['$1'])['toUpperCase']()[_0x51b686(0xf4)]();if(_0x4f0046===_0x51b686(0xb52))return _0x51b686(0xb52);if(VisuMZ['DamageStyles'][_0x4f0046])return _0x4f0046;}const _0x6eb94a=VisuMZ[_0x51b686(0x895)][_0x51b686(0xbac)]['Damage']['DefaultDamageStyle'][_0x51b686(0x1ef)]()[_0x51b686(0xf4)]();if(VisuMZ[_0x51b686(0xc2)][_0x6eb94a])return _0x6eb94a;return _0x51b686(0xb52);},DataManager['getStypeIdWithName']=function(_0x113a36){const _0x1d4ddc=_0x23168f;_0x113a36=_0x113a36['toUpperCase']()[_0x1d4ddc(0xf4)](),this[_0x1d4ddc(0x7d1)]=this[_0x1d4ddc(0x7d1)]||{};if(this[_0x1d4ddc(0x7d1)][_0x113a36])return this[_0x1d4ddc(0x7d1)][_0x113a36];for(let _0x2320e5=0x1;_0x2320e5<0x64;_0x2320e5++){if(!$dataSystem['skillTypes'][_0x2320e5])continue;let _0x3f5ca4=$dataSystem['skillTypes'][_0x2320e5]['toUpperCase']()['trim']();_0x3f5ca4=_0x3f5ca4[_0x1d4ddc(0x5c0)](/\x1I\[(\d+)\]/gi,''),_0x3f5ca4=_0x3f5ca4[_0x1d4ddc(0x5c0)](/\\I\[(\d+)\]/gi,''),this[_0x1d4ddc(0x7d1)][_0x3f5ca4]=_0x2320e5;}return this[_0x1d4ddc(0x7d1)][_0x113a36]||0x0;},DataManager['getSkillIdWithName']=function(_0x54bd9b){const _0x22be27=_0x23168f;_0x54bd9b=_0x54bd9b[_0x22be27(0x1ef)]()[_0x22be27(0xf4)](),this[_0x22be27(0x338)]=this[_0x22be27(0x338)]||{};if(this[_0x22be27(0x338)][_0x54bd9b])return this['_skillIDs'][_0x54bd9b];for(const _0x386fd9 of $dataSkills){if(!_0x386fd9)continue;this['_skillIDs'][_0x386fd9[_0x22be27(0x611)][_0x22be27(0x1ef)]()[_0x22be27(0xf4)]()]=_0x386fd9['id'];}return this[_0x22be27(0x338)][_0x54bd9b]||0x0;},DataManager[_0x23168f(0x27b)]=function(_0xda28cb){const _0x2dd33a=_0x23168f;_0xda28cb=_0xda28cb['toUpperCase']()['trim'](),this['_enemyIDs']=this[_0x2dd33a(0x418)]||{};if(this[_0x2dd33a(0x418)][_0xda28cb])return this['_enemyIDs'][_0xda28cb];for(const _0x47af77 of $dataEnemies){if(!_0x47af77)continue;this[_0x2dd33a(0x418)][_0x47af77[_0x2dd33a(0x611)][_0x2dd33a(0x1ef)]()[_0x2dd33a(0xf4)]()]=_0x47af77['id'];}return this['_enemyIDs'][_0xda28cb]||0x0;},DataManager[_0x23168f(0x2ea)]=function(_0x18e59e){const _0x212bb0=_0x23168f;_0x18e59e=_0x18e59e[_0x212bb0(0x1ef)]()[_0x212bb0(0xf4)](),this[_0x212bb0(0x1f5)]=this['_wtypeIDs']||{};if(this[_0x212bb0(0x1f5)][_0x18e59e])return this[_0x212bb0(0x1f5)][_0x18e59e];for(let _0x4d5ba9=0x1;_0x4d5ba9<0x64;_0x4d5ba9++){if(!$dataSystem[_0x212bb0(0x179)][_0x4d5ba9])continue;let _0x2cbab1=$dataSystem[_0x212bb0(0x179)][_0x4d5ba9]['toUpperCase']()[_0x212bb0(0xf4)]();_0x2cbab1=_0x2cbab1['replace'](/\x1I\[(\d+)\]/gi,''),_0x2cbab1=_0x2cbab1[_0x212bb0(0x5c0)](/\\I\[(\d+)\]/gi,''),this[_0x212bb0(0x1f5)][_0x2cbab1]=_0x4d5ba9;}return this[_0x212bb0(0x1f5)][_0x212bb0(0x663)]=0x0,this[_0x212bb0(0x1f5)][_0x18e59e]||0x0;},DataManager[_0x23168f(0x71c)]=function(_0x3dbd4a){const _0x21b689=_0x23168f,_0x1353de=_0x21b689(0xee);let _0xd6bfb5=_0x3dbd4a[_0x21b689(0x761)],_0x2fa810=_0x3dbd4a['name'];const _0x580ca6=_0x3dbd4a[_0x21b689(0xae7)];return _0x580ca6[_0x21b689(0x26e)](/<DISPLAY ICON: (\d+)>/i)&&(_0xd6bfb5=Number(RegExp['$1'])),_0x580ca6[_0x21b689(0x26e)](/<DISPLAY TEXT: (.*)>/i)&&(_0x2fa810=String(RegExp['$1'])),_0x1353de[_0x21b689(0x7d3)](_0xd6bfb5,_0x2fa810);},DataManager[_0x23168f(0x56d)]=function(_0x40b8f1){const _0x2e8268=_0x23168f;return _0x40b8f1[_0x2e8268(0xae7)][_0x2e8268(0x26e)](/<COMMAND TEXT: (.*)>/i)?String(RegExp['$1']):_0x40b8f1[_0x2e8268(0x611)];},DataManager[_0x23168f(0x8a7)]=function(_0x2139ef){const _0x201b75=_0x23168f;return _0x2139ef['note'][_0x201b75(0x26e)](/<COMMAND ICON: (\d+)>/i)?Number(RegExp['$1']):_0x2139ef[_0x201b75(0x761)];},DataManager['swapEnemyIDs']=function(_0x1553ab){const _0x59afe6=_0x23168f,_0x6284c8=$dataEnemies[_0x1553ab];if(_0x6284c8){if(_0x6284c8[_0x59afe6(0xae7)]['match'](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x285107=String(RegExp['$1'])[_0x59afe6(0x221)](/[\r\n]+/)['remove'](''),_0x4e4c5d=this[_0x59afe6(0xb3b)](_0x285107);_0x1553ab=this[_0x59afe6(0x27b)](_0x4e4c5d)||_0x1553ab,_0x1553ab=DataManager[_0x59afe6(0x247)](_0x1553ab);}}return _0x1553ab;},DataManager[_0x23168f(0xb3b)]=function(_0x216b3f){const _0x58ad73=_0x23168f;let _0x47f273=0x0;const _0x231065={};for(const _0x44f84d of _0x216b3f){if(_0x44f84d[_0x58ad73(0x26e)](/(.*):[ ](\d+)/i)){const _0x18a65a=String(RegExp['$1'])['trim'](),_0x56039c=Number(RegExp['$2']);_0x231065[_0x18a65a]=_0x56039c,_0x47f273+=_0x56039c;}else{if(_0x44f84d[_0x58ad73(0x26e)](/(.*):[ ](\d+\.?\d+)/i)){const _0x38e34e=String(RegExp['$1'])[_0x58ad73(0xf4)](),_0x1a148c=Number(RegExp['$2']);_0x231065[_0x38e34e]=_0x1a148c,_0x47f273+=_0x1a148c;}else _0x44f84d!==''&&(_0x231065[_0x44f84d]=0x1,_0x47f273++);}}if(_0x47f273<=0x0)return'';let _0x3a52fd=Math['random']()*_0x47f273;for(const _0x545742 in _0x231065){_0x3a52fd-=_0x231065[_0x545742];if(_0x3a52fd<=0x0)return _0x545742;}return'';},DataManager[_0x23168f(0x501)]=function(_0x7b47f0){const _0x16973c=_0x23168f;if(!_0x7b47f0)return![];if(!VisuMZ['BattleCore']['Settings'][_0x16973c(0x8d2)][_0x16973c(0xe1)])return![];if(_0x7b47f0[_0x16973c(0xae7)][_0x16973c(0x26e)](/<AUTO ACTION SEQUENCE>/i))return![];if(_0x7b47f0['note'][_0x16973c(0x26e)](/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi))return!![];for(const _0x1b8218 of _0x7b47f0[_0x16973c(0x2cc)]){if(!_0x1b8218)continue;if(_0x1b8218[_0x16973c(0x142)]===Game_Action[_0x16973c(0x81b)])return!![];}return![];},DataManager[_0x23168f(0x600)]=function(_0x27ecfa){const _0x140313=_0x23168f,_0x44841a=$dataTroops[_0x27ecfa];if(!_0x44841a)return'';let _0x51a437='';_0x51a437+=_0x44841a[_0x140313(0x611)];for(const _0x3137e6 of _0x44841a['pages']){for(const _0x19bce4 of _0x3137e6[_0x140313(0x290)]){[0x6c,0x198][_0x140313(0x2d8)](_0x19bce4['code'])&&(_0x51a437+='\x0a',_0x51a437+=_0x19bce4[_0x140313(0x86a)][0x0]);}}return _0x51a437;},ConfigManager[_0x23168f(0x969)]=ConfigManager[_0x23168f(0x969)]??![],ConfigManager[_0x23168f(0x2ce)]=ConfigManager['autoBattleUseSkills']??![],ConfigManager[_0x23168f(0x786)]=ConfigManager[_0x23168f(0x786)]??!![],VisuMZ[_0x23168f(0x895)][_0x23168f(0xab1)]=ConfigManager[_0x23168f(0xa6a)],ConfigManager[_0x23168f(0xa6a)]=function(){const _0x1b8d90=_0x23168f,_0x5bdbf1=VisuMZ[_0x1b8d90(0x895)][_0x1b8d90(0xab1)][_0x1b8d90(0x88f)](this);return _0x5bdbf1[_0x1b8d90(0x969)]=this[_0x1b8d90(0x969)],_0x5bdbf1[_0x1b8d90(0x2ce)]=this[_0x1b8d90(0x2ce)],_0x5bdbf1[_0x1b8d90(0x786)]=this['visualHpGauge'],_0x5bdbf1;},VisuMZ['BattleCore'][_0x23168f(0x248)]=ConfigManager['applyData'],ConfigManager['applyData']=function(_0x113c10){const _0x3adc0e=_0x23168f;VisuMZ[_0x3adc0e(0x895)][_0x3adc0e(0x248)][_0x3adc0e(0x88f)](this,_0x113c10),'autoBattleAtStart'in _0x113c10?this[_0x3adc0e(0x969)]=_0x113c10[_0x3adc0e(0x969)]:this[_0x3adc0e(0x969)]=![],_0x3adc0e(0x2ce)in _0x113c10?this[_0x3adc0e(0x2ce)]=_0x113c10[_0x3adc0e(0x2ce)]:this[_0x3adc0e(0x2ce)]=![],'visualHpGauge'in _0x113c10?this[_0x3adc0e(0x786)]=_0x113c10[_0x3adc0e(0x786)]:this[_0x3adc0e(0x786)]=!![];},ImageManager[_0x23168f(0x413)]=ImageManager['svActorHorzCells']||0x9,ImageManager[_0x23168f(0x160)]=ImageManager[_0x23168f(0x160)]||0x6,VisuMZ[_0x23168f(0x895)]['BattleManager_setup']=BattleManager[_0x23168f(0x85b)],BattleManager['setup']=function(_0xd459d,_0x4fcc67,_0x3ce1d7){const _0x546597=_0x23168f;VisuMZ['BattleCore']['BattleManager_setup'][_0x546597(0x88f)](this,_0xd459d,_0x4fcc67,_0x3ce1d7),this[_0x546597(0xaf3)]={};},VisuMZ[_0x23168f(0x895)][_0x23168f(0x684)]=BattleManager[_0x23168f(0xadb)],BattleManager[_0x23168f(0xadb)]=function(){const _0x5c5180=_0x23168f;VisuMZ['BattleCore']['BattleManager_initMembers'][_0x5c5180(0x88f)](this),this['_forcedBattlers']=[];},BattleManager[_0x23168f(0xca)]=function(){const _0x165ac5=_0x23168f;if(!SceneManager[_0x165ac5(0xbef)]())return;const _0x40ec01=SceneManager[_0x165ac5(0x23e)]['_statusWindow'];if(_0x40ec01)_0x40ec01[_0x165ac5(0x14d)]();},BattleManager[_0x23168f(0x13e)]=function(){const _0x1cf16b=_0x23168f;if(BattleManager[_0x1cf16b(0x3da)]())return _0x1cf16b(0xbe8);return _0x1cf16b(0x9e7);},BattleManager[_0x23168f(0x3a6)]=function(_0x16b1f0){const _0x31f646=_0x23168f;return _0x16b1f0=_0x16b1f0['toUpperCase']()[_0x31f646(0xf4)](),this['battleSys']()===_0x16b1f0;},BattleManager[_0x23168f(0x9d3)]=function(){const _0x3f0475=_0x23168f;return this['isBattleSys'](_0x3f0475(0x9e7));},BattleManager[_0x23168f(0x242)]=function(){const _0x4da693=_0x23168f;return this[_0x4da693(0x9d3)]();},BattleManager[_0x23168f(0x383)]=function(){return!this['isTurnBased']();},BattleManager[_0x23168f(0xbc0)]=function(){const _0x5df5f0=_0x23168f;return!this[_0x5df5f0(0x242)]()&&!this[_0x5df5f0(0x383)]();},BattleManager[_0x23168f(0x89a)]=function(_0x1aff46){const _0x782fe=_0x23168f;this['_battlerKeyCache']=this[_0x782fe(0xaf3)]||{};if(this[_0x782fe(0xaf3)][_0x1aff46]!==undefined)return this[_0x782fe(0xaf3)][_0x1aff46];this[_0x782fe(0xaf3)][_0x1aff46]=null;const _0x195d51=this['allBattleMembers'](),_0x11a5fe=_0x195d51[_0x782fe(0x6a6)](_0x142c42=>_0x142c42['battlerKey']()===_0x1aff46);if(_0x11a5fe)this[_0x782fe(0xaf3)][_0x1aff46]=_0x11a5fe;return this[_0x782fe(0xaf3)][_0x1aff46];},Game_BattlerBase[_0x23168f(0xa01)][_0x23168f(0x81c)]=function(){const _0x173c99=_0x23168f;return _0x173c99(0x3a1)['format'](this[_0x173c99(0x36b)]()?'actor':_0x173c99(0x417),this['name']()+'-'+(this[_0x173c99(0x36b)]()?this[_0x173c99(0x5d0)]():this[_0x173c99(0x216)]()));},Game_Action[_0x23168f(0xa01)][_0x23168f(0x8c6)]=function(_0x4757b6){const _0x204b64=_0x23168f;if(this['_targetBattlerKey']!=='')return;typeof _0x4757b6===_0x204b64(0x562)?this[_0x204b64(0x654)]=_0x4757b6[_0x204b64(0x645)]()[_0x204b64(0xf4)]():this[_0x204b64(0x654)]=_0x4757b6[_0x204b64(0x81c)]();},Game_Action['prototype'][_0x23168f(0x7f0)]=function(){const _0x2e598b=_0x23168f;return[this[_0x2e598b(0x93f)]()];},Game_Action[_0x23168f(0xa01)][_0x23168f(0x93f)]=function(){const _0x22fd7f=_0x23168f,_0x3b4b23=this[_0x22fd7f(0x654)]||'',_0xc2b985=BattleManager['getBattlerFromKey'](_0x3b4b23);if(!_0xc2b985)return this['getBattlerKeyTargetReplacement']();if(!_0xc2b985['isAlive']())return this[_0x22fd7f(0x716)]();return _0xc2b985;},Game_Action[_0x23168f(0xa01)][_0x23168f(0x716)]=function(){const _0x50d06f=_0x23168f,_0x5af4fe=this[_0x50d06f(0x654)];return _0x5af4fe[_0x50d06f(0x26e)](/ACTOR/i)?this['friendsUnit']()['trueRandomTarget']():this[_0x50d06f(0x91e)]()[_0x50d06f(0x8ba)]();},BattleManager[_0x23168f(0x6e3)]=function(){const _0x59551b=_0x23168f;return this['allBattleMembers']()['filter'](_0x150fda=>_0x150fda[_0x59551b(0x794)]());},BattleManager[_0x23168f(0x5cf)]=function(_0x194e11){const _0x5d289b=_0x23168f;_0x194e11===_0x5d289b(0x71a)&&(this[_0x5d289b(0x61c)]=!![]),$gameParty[_0x5d289b(0x5cf)](_0x194e11),$gameTroop[_0x5d289b(0x5cf)](_0x194e11);},VisuMZ[_0x23168f(0x895)][_0x23168f(0x9ab)]=BattleManager[_0x23168f(0x77f)],BattleManager['startBattle']=function(){const _0x590d23=_0x23168f;this['_endBattle']=![],this[_0x590d23(0x174)]=ConfigManager[_0x590d23(0x969)],this[_0x590d23(0x61c)]=![],this[_0x590d23(0x5cf)](_0x590d23(0x7ea)),VisuMZ[_0x590d23(0x895)]['BattleManager_startBattle'][_0x590d23(0x88f)](this),this[_0x590d23(0x5cf)](_0x590d23(0x672));},BattleManager[_0x23168f(0x4cd)]=function(_0x4ab734){const _0x5143e4=_0x23168f,_0x170a02=VisuMZ[_0x5143e4(0x895)]['Settings'][_0x5143e4(0x929)];_0x4ab734!==_0x5143e4(0xae2)&&_0x170a02['BattleEndEvent']&&VisuMZ['BattleCore'][_0x5143e4(0x65f)](_0x170a02[_0x5143e4(0x2cd)])&&$gameTemp[_0x5143e4(0xb53)](_0x170a02[_0x5143e4(0x2cd)]);const _0x515cb6=_0x5143e4(0x5b5)[_0x5143e4(0x7d3)](_0x4ab734);_0x170a02[_0x515cb6]&&VisuMZ[_0x5143e4(0x895)][_0x5143e4(0x65f)](_0x170a02[_0x515cb6])&&$gameTemp[_0x5143e4(0xb53)](_0x170a02[_0x515cb6]);},VisuMZ['BattleCore'][_0x23168f(0x5dc)]=BattleManager[_0x23168f(0x71f)],BattleManager['abort']=function(){const _0x1401b0=_0x23168f;VisuMZ['BattleCore'][_0x1401b0(0x5dc)][_0x1401b0(0x88f)](this),SceneManager[_0x1401b0(0xbef)]()&&BattleManager['updateEvent']();},VisuMZ['BattleCore'][_0x23168f(0xad6)]=BattleManager[_0x23168f(0x328)],BattleManager[_0x23168f(0x328)]=function(){const _0x5bb530=_0x23168f;if(this[_0x5bb530(0xb38)]==='turn'){if($gameTemp['isCommonEventReserved']())return![];}return VisuMZ['BattleCore'][_0x5bb530(0xad6)][_0x5bb530(0x88f)](this);},VisuMZ['BattleCore'][_0x23168f(0x596)]=BattleManager[_0x23168f(0xd4)],BattleManager[_0x23168f(0xd4)]=function(){const _0x909398=_0x23168f;this[_0x909398(0x61c)]=!![],this[_0x909398(0x5cf)]('BattleVictoryJS'),VisuMZ[_0x909398(0x895)][_0x909398(0x596)]['call'](this),this[_0x909398(0x4cd)]('Victory');},VisuMZ['BattleCore'][_0x23168f(0x559)]=BattleManager[_0x23168f(0x226)],BattleManager[_0x23168f(0x226)]=function(){const _0x35dedb=_0x23168f;this['_endingBattle']=!![],VisuMZ[_0x35dedb(0x895)]['BattleManager_processAbort'][_0x35dedb(0x88f)](this);},VisuMZ[_0x23168f(0x895)][_0x23168f(0xaab)]=BattleManager[_0x23168f(0x35c)],BattleManager['processDefeat']=function(){const _0x137f98=_0x23168f;this[_0x137f98(0x61c)]=!![],this[_0x137f98(0x5cf)](_0x137f98(0x935)),VisuMZ[_0x137f98(0x895)][_0x137f98(0xaab)]['call'](this),this['processPostBattleCommonEvents'](_0x137f98(0x12c));},VisuMZ[_0x23168f(0x895)][_0x23168f(0x2f6)]=BattleManager[_0x23168f(0x837)],BattleManager[_0x23168f(0x837)]=function(_0x2027a7){const _0x187ae4=_0x23168f;this[_0x187ae4(0xb65)]=!![],this[_0x187ae4(0x174)]=![],this[_0x187ae4(0x5cf)](_0x187ae4(0x2bf)),VisuMZ[_0x187ae4(0x895)][_0x187ae4(0x2f6)][_0x187ae4(0x88f)](this,_0x2027a7),this[_0x187ae4(0x5cf)](_0x187ae4(0x55e));},VisuMZ[_0x23168f(0x895)]['BattleManager_startTurn']=BattleManager[_0x23168f(0x667)],BattleManager['startTurn']=function(){const _0xf96b7c=_0x23168f;if(this[_0xf96b7c(0x242)]())this[_0xf96b7c(0x5cf)]('PreStartTurnJS');VisuMZ['BattleCore'][_0xf96b7c(0x98b)][_0xf96b7c(0x88f)](this);if(this['isTurnBased']())this['processBattleCoreJS'](_0xf96b7c(0xb2f));},BattleManager[_0x23168f(0x3d9)]=function(){const _0x3445af=_0x23168f,_0x4369cb=this[_0x3445af(0x530)],_0x57124a=_0x4369cb['currentAction']();_0x57124a?(_0x57124a['prepare'](),_0x57124a['isValid']()?(this['startAction'](),_0x4369cb[_0x3445af(0x763)]()):(_0x4369cb[_0x3445af(0x763)](),this[_0x3445af(0x24b)]())):(this['endAction'](),this['_subject']=null);},VisuMZ[_0x23168f(0x895)][_0x23168f(0x3a4)]=BattleManager['startAction'],BattleManager[_0x23168f(0xbb8)]=function(){const _0x4944e6=_0x23168f,_0x30bd55=this[_0x4944e6(0x530)]['currentAction'](),_0x4a2330=this[_0x4944e6(0x530)];_0x30bd55&&_0x30bd55[_0x4944e6(0x541)]()===_0x4a2330&&_0x30bd55[_0x4944e6(0xbc6)](_0x4944e6(0x8da)),VisuMZ[_0x4944e6(0x895)][_0x4944e6(0x3a4)][_0x4944e6(0x88f)](this),_0x30bd55&&_0x30bd55[_0x4944e6(0x541)]()===_0x4a2330&&_0x30bd55[_0x4944e6(0xbc6)](_0x4944e6(0x33b));},VisuMZ['BattleCore']['BattleManager_endAction']=BattleManager[_0x23168f(0x24b)],BattleManager[_0x23168f(0x24b)]=function(){const _0x20fefc=_0x23168f,_0x5cc40d=this[_0x20fefc(0x13a)],_0x514369=this[_0x20fefc(0x530)];_0x5cc40d&&_0x5cc40d!==this[_0x20fefc(0x443)]&&_0x5cc40d[_0x20fefc(0x541)]()===_0x514369&&_0x5cc40d[_0x20fefc(0xbc6)]('PreEndActionJS'),this[_0x20fefc(0x530)]?VisuMZ[_0x20fefc(0x895)][_0x20fefc(0x6a1)]['call'](this):this[_0x20fefc(0xb38)]=_0x20fefc(0x85c),_0x5cc40d&&_0x5cc40d!==this['_lastAction']&&_0x5cc40d[_0x20fefc(0x541)]()===_0x514369&&_0x5cc40d[_0x20fefc(0xbc6)](_0x20fefc(0x2d6)),this[_0x20fefc(0x289)](this['allBattleMembers']()),this[_0x20fefc(0x443)]=this[_0x20fefc(0x13a)];},BattleManager['refreshBattlerMotions']=function(_0x2302f6){const _0x44c2da=_0x23168f;for(const _0x1e72f6 of _0x2302f6){if(!_0x1e72f6)continue;if(!_0x1e72f6[_0x44c2da(0xbb5)]())continue;_0x1e72f6[_0x44c2da(0xbb5)]()[_0x44c2da(0xa7b)]();}},BattleManager[_0x23168f(0x60a)]=function(){const _0x15fefb=_0x23168f;!this[_0x15fefb(0x397)][_0x15fefb(0x224)]()&&this[_0x15fefb(0x24b)]();},Game_Battler[_0x23168f(0xa01)][_0x23168f(0x9bb)]=function(){const _0x5a1e9b=_0x23168f;this[_0x5a1e9b(0xaed)]();if(Imported[_0x5a1e9b(0x9a3)]){const _0x4161bc=VisuMZ['SkillsStatesCore'][_0x5a1e9b(0xbac)][_0x5a1e9b(0x134)];_0x4161bc&&_0x4161bc[_0x5a1e9b(0xb54)]===![]&&this[_0x5a1e9b(0x6ff)](0x1);}else this[_0x5a1e9b(0x6ff)](0x1);this[_0x5a1e9b(0x8d7)]();},VisuMZ['BattleCore'][_0x23168f(0x500)]=BattleManager['invokeCounterAttack'],BattleManager[_0x23168f(0x154)]=function(_0x2618af,_0x23eb89){const _0x4f2c50=_0x23168f;this['_bypassCanCounterCheck']=!![],VisuMZ['BattleCore']['BattleManager_invokeCounterAttack'][_0x4f2c50(0x88f)](this,_0x2618af,_0x23eb89),this[_0x4f2c50(0x52b)]=undefined;},BattleManager['makeEscapeRatio']=function(){const _0x206667=_0x23168f;this['_escapeRatio']=VisuMZ[_0x206667(0x895)][_0x206667(0xbac)][_0x206667(0x929)][_0x206667(0xa81)][_0x206667(0x88f)](this);},VisuMZ[_0x23168f(0x895)][_0x23168f(0xa06)]=BattleManager['onEscapeSuccess'],BattleManager[_0x23168f(0x5d7)]=function(){const _0x1182b6=_0x23168f;this[_0x1182b6(0x5cf)]('EscapeSuccessJS'),BattleManager[_0x1182b6(0xa73)][_0x1182b6(0xb97)](),VisuMZ[_0x1182b6(0x895)][_0x1182b6(0xa06)][_0x1182b6(0x88f)](this),this[_0x1182b6(0x4cd)](_0x1182b6(0x3fe));},VisuMZ[_0x23168f(0x895)][_0x23168f(0x2dc)]=BattleManager[_0x23168f(0xb88)],BattleManager[_0x23168f(0xb88)]=function(){const _0x31d3ac=_0x23168f;this[_0x31d3ac(0x5cf)](_0x31d3ac(0x631));const _0x1c5bbc=this[_0x31d3ac(0x401)];VisuMZ['BattleCore']['BattleManager_onEscapeFailure']['call'](this),this[_0x31d3ac(0x401)]=_0x1c5bbc+VisuMZ[_0x31d3ac(0x895)][_0x31d3ac(0xbac)][_0x31d3ac(0x929)]['CalcEscapeRaiseJS'][_0x31d3ac(0x88f)](this),this[_0x31d3ac(0x551)]=![],this[_0x31d3ac(0x4cd)](_0x31d3ac(0xae2));},BattleManager[_0x23168f(0x5d4)]=function(){const _0x5236b6=_0x23168f;let _0x2a78c3=![];if(this[_0x5236b6(0xaaa)]())for(const _0x5746b9 of $gameTroop[_0x5236b6(0x889)]()){this[_0x5236b6(0x397)][_0x5236b6(0x908)]('addText',TextManager[_0x5236b6(0x4f0)][_0x5236b6(0x7d3)](_0x5746b9)),this[_0x5236b6(0x397)][_0x5236b6(0x908)](_0x5236b6(0x707)),_0x2a78c3=!![];}if(this[_0x5236b6(0xab3)])this['_logWindow']['push'](_0x5236b6(0x86c),TextManager[_0x5236b6(0x9cf)][_0x5236b6(0x7d3)]($gameParty[_0x5236b6(0x611)]())),this[_0x5236b6(0x397)][_0x5236b6(0x908)](_0x5236b6(0x707));else this[_0x5236b6(0x1a5)]&&(this[_0x5236b6(0x397)][_0x5236b6(0x908)]('addText',TextManager['surprise'][_0x5236b6(0x7d3)]($gameParty[_0x5236b6(0x611)]())),this['_logWindow'][_0x5236b6(0x908)](_0x5236b6(0x707)));_0x2a78c3&&(this['_logWindow']['push'](_0x5236b6(0x707)),this[_0x5236b6(0x397)]['push']('clear')),this[_0x5236b6(0x3da)]()&&this['isSkipPartyCommandWindow']()&&(this[_0x5236b6(0x9a9)]=![]);},BattleManager[_0x23168f(0xaaa)]=function(){const _0x4fb317=_0x23168f;if(BattleManager['_autoBattle'])return![];return VisuMZ[_0x4fb317(0x895)][_0x4fb317(0xbac)][_0x4fb317(0xbeb)]['EmergeText'];},VisuMZ[_0x23168f(0x895)]['BattleManager_startInput']=BattleManager['startInput'],BattleManager[_0x23168f(0x3e4)]=function(){const _0x20c349=_0x23168f;VisuMZ[_0x20c349(0x895)]['BattleManager_startInput'][_0x20c349(0x88f)](this),this[_0x20c349(0x9d3)]()&&this[_0x20c349(0xb21)]()&&!this[_0x20c349(0x1a5)]&&$gameParty[_0x20c349(0x6a9)]()&&this['selectNextCommand']();},BattleManager[_0x23168f(0xb21)]=function(){const _0x21836f=_0x23168f;return VisuMZ[_0x21836f(0x895)]['Settings'][_0x21836f(0xabb)][_0x21836f(0x277)];},BattleManager[_0x23168f(0x917)]=function(){const _0x7f20b8=_0x23168f;this['isPartyTpbInputtable']()&&this[_0x7f20b8(0xae8)]();},VisuMZ[_0x23168f(0x895)][_0x23168f(0x2c8)]=Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x3bd)],Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x3bd)]=function(){const _0x3aa10e=_0x23168f;VisuMZ['BattleCore'][_0x3aa10e(0x2c8)][_0x3aa10e(0x88f)](this),BattleManager['isTpb']()&&BattleManager['_tpbNeedsPartyCommand']&&(BattleManager[_0x3aa10e(0x9a9)]=![],this[_0x3aa10e(0xad7)]());},BattleManager[_0x23168f(0x3ff)]=function(_0x571938,_0x22ccf2,_0x151a4d){const _0x49e8c9=_0x23168f;if(!_0x151a4d)return;if(!_0x571938)return;if(!_0x22ccf2)return;const _0x3859f4=this[_0x49e8c9(0x13a)];this[_0x49e8c9(0x13a)]=new Game_Action(_0x571938);if(DataManager['isItem'](_0x151a4d))this[_0x49e8c9(0x13a)]['setItem'](_0x151a4d['id']);if(DataManager[_0x49e8c9(0x243)](_0x151a4d))this[_0x49e8c9(0x13a)][_0x49e8c9(0x426)](_0x151a4d['id']);if(this[_0x49e8c9(0x13a)][_0x49e8c9(0x42e)]())BattleManager[_0x49e8c9(0x32a)](_0x571938,_0x22ccf2);this['_action']=_0x3859f4;},BattleManager[_0x23168f(0x8fd)]=function(_0x1fe250,_0x151d6f){const _0x314735=_0x23168f;this[_0x314735(0x13a)]['_reflectionTarget']=_0x151d6f,this[_0x314735(0x397)][_0x314735(0x54a)](_0x151d6f),this['_logWindow'][_0x314735(0x471)](_0x1fe250,this['_action']),this[_0x314735(0x13a)][_0x314735(0x260)](_0x1fe250),this[_0x314735(0x397)][_0x314735(0x50a)](_0x1fe250,_0x1fe250);},VisuMZ[_0x23168f(0x895)][_0x23168f(0x7fd)]=BattleManager[_0x23168f(0x6bb)],BattleManager[_0x23168f(0x6bb)]=function(){const _0x540ed5=_0x23168f;VisuMZ['BattleCore'][_0x540ed5(0x7fd)][_0x540ed5(0x88f)](this),this[_0x540ed5(0x4a3)]=this[_0x540ed5(0x4a3)][_0x540ed5(0x239)](_0x266429=>_0x266429&&_0x266429[_0x540ed5(0x735)]());},VisuMZ['BattleCore'][_0x23168f(0x1c7)]=BattleManager[_0x23168f(0x74f)],BattleManager[_0x23168f(0x74f)]=function(_0x51f109){const _0x4fd639=_0x23168f;if(this[_0x4fd639(0xb38)]===_0x4fd639(0xdc))this[_0x4fd639(0x4d7)]();else this[_0x4fd639(0xb38)]===_0x4fd639(0x190)?this[_0x4fd639(0x75a)]():VisuMZ[_0x4fd639(0x895)][_0x4fd639(0x1c7)]['call'](this,_0x51f109);},BattleManager[_0x23168f(0x1a1)]=function(){const _0x171c78=_0x23168f;this[_0x171c78(0x51d)]=this[_0x171c78(0xa52)][_0x171c78(0x760)](0x0),this['_targetIndex']=0x0,this[_0x171c78(0x54d)]=this[_0x171c78(0x51d)][0x0]||null,this['_phase']='custom';},BattleManager[_0x23168f(0x4d7)]=function(){const _0x2a2f43=_0x23168f;!this[_0x2a2f43(0x907)]()&&!this[_0x2a2f43(0x397)][_0x2a2f43(0x224)]()&&(this['_phase']=_0x2a2f43(0x7a5));},BattleManager['forceAction']=function(_0x405c32){const _0x413507=_0x23168f;this[_0x413507(0x4a3)]['remove'](_0x405c32);if(_0x405c32===this[_0x413507(0x530)])return;const _0x2b00c6=JsonEx[_0x413507(0x5fe)](_0x405c32[_0x413507(0x7ad)]());this['_forcedBattlers'][_0x413507(0x908)]([_0x405c32,_0x2b00c6]);},BattleManager[_0x23168f(0x846)]=function(){},BattleManager['updateStart']=function(){const _0x5c8f2b=_0x23168f;if(this[_0x5c8f2b(0x3da)]())this[_0x5c8f2b(0xb38)]='turn';else this[_0x5c8f2b(0x6cd)][_0x5c8f2b(0x312)]>0x0?this[_0x5c8f2b(0xb38)]=_0x5c8f2b(0x85c):this[_0x5c8f2b(0x3e4)]();},BattleManager[_0x23168f(0xa7a)]=function(){const _0x1fe67a=_0x23168f,_0x30e640=this[_0x1fe67a(0x530)];_0x30e640&&this[_0x1fe67a(0x3da)]()&&_0x30e640['setActionState'](_0x1fe67a(0x4e5));for(;;){const _0x16f5f1=this[_0x1fe67a(0x8cb)]();if(!_0x16f5f1)return null;if(_0x16f5f1[_0x1fe67a(0x694)]()&&_0x16f5f1['isAlive']())return _0x16f5f1;}},BattleManager[_0x23168f(0x8cb)]=function(){const _0x57c656=_0x23168f;if(this[_0x57c656(0x6cd)]['length']>0x0){const _0xada7f9=this[_0x57c656(0x6cd)]['shift'](),_0xb36800=_0xada7f9[0x0];return _0xb36800[_0x57c656(0x394)]=_0xb36800[_0x57c656(0x394)]||[],_0xb36800[_0x57c656(0x394)][0x0]=_0xada7f9[0x1],_0xb36800;}else return this[_0x57c656(0x4a3)][_0x57c656(0xa30)]();},VisuMZ['BattleCore'][_0x23168f(0x89b)]=Game_Battler[_0x23168f(0xa01)][_0x23168f(0x190)],Game_Battler[_0x23168f(0xa01)][_0x23168f(0x190)]=function(_0x4a7428,_0x49b040){const _0x16493d=_0x23168f;VisuMZ[_0x16493d(0x895)][_0x16493d(0x89b)][_0x16493d(0x88f)](this,_0x4a7428,_0x49b040),this[_0x16493d(0x394)][this[_0x16493d(0x394)][_0x16493d(0x312)]-0x1]['_forceAction']=!![];},Game_Interpreter[_0x23168f(0xa01)][_0x23168f(0xda)]=function(_0x5e117c){return this['iterateBattler'](_0x5e117c[0x0],_0x5e117c[0x1],_0x1a6bad=>{const _0x27f385=_0x56df;!_0x1a6bad[_0x27f385(0x43f)]()&&(_0x1a6bad[_0x27f385(0x190)](_0x5e117c[0x2],_0x5e117c[0x3]),BattleManager[_0x27f385(0x190)](_0x1a6bad));}),!![];},VisuMZ[_0x23168f(0x895)][_0x23168f(0x662)]=Game_Battler[_0x23168f(0xa01)]['makeSpeed'],Game_Battler[_0x23168f(0xa01)][_0x23168f(0x30f)]=function(){const _0x5f3eb9=_0x23168f;VisuMZ[_0x5f3eb9(0x895)]['Game_Battler_makeSpeed'][_0x5f3eb9(0x88f)](this),this[_0x5f3eb9(0x394)]['length']<=0x0&&(this[_0x5f3eb9(0xa14)]=Number[_0x5f3eb9(0xadd)]);},BattleManager[_0x23168f(0x1bc)]=function(){const _0x745ae8=_0x23168f;if(VisuMZ['BattleCore']['Settings'][_0x745ae8(0x642)][_0x745ae8(0x266)]??!![])return![];return SceneManager[_0x745ae8(0xbef)]()&&this[_0x745ae8(0x61c)];},VisuMZ['BattleCore']['BattleManager_selectNextCommand']=BattleManager[_0x23168f(0xae8)],BattleManager[_0x23168f(0xae8)]=function(){const _0x25f50d=_0x23168f;this[_0x25f50d(0x3da)]()?this[_0x25f50d(0x731)]():VisuMZ[_0x25f50d(0x895)]['BattleManager_selectNextCommand']['call'](this);},BattleManager[_0x23168f(0x731)]=function(){const _0x382286=_0x23168f;if(this['_currentActor']){if(this[_0x382286(0x384)][_0x382286(0xae8)]())return;this[_0x382286(0x319)](),this['checkTpbInputClose'](),!this[_0x382286(0x530)]&&!this[_0x382286(0x384)]&&SceneManager[_0x382286(0x23e)][_0x382286(0x66d)]();}else!this['_subject']&&this[_0x382286(0x59c)]();},BattleManager[_0x23168f(0x7fa)]=function(){const _0xb27ff3=_0x23168f;(!this[_0xb27ff3(0x25f)]()||this[_0xb27ff3(0x920)]())&&(this[_0xb27ff3(0x685)]&&(!$gameParty[_0xb27ff3(0x4e1)]()[_0xb27ff3(0x2d8)](this['_tpbSceneChangeCacheActor'])&&(this[_0xb27ff3(0x685)]=null)),!this[_0xb27ff3(0x685)]?(this['cancelActorInput'](),this[_0xb27ff3(0x384)]=null,this[_0xb27ff3(0x551)]=![]):this['revertTpbCachedActor']());},BattleManager['revertTpbCachedActor']=function(){const _0x46652c=_0x23168f;!$gameParty[_0x46652c(0x4e1)]()[_0x46652c(0x2d8)](this[_0x46652c(0x685)])&&(this[_0x46652c(0x685)]=null),this[_0x46652c(0x685)]?(this[_0x46652c(0x384)]=this['_tpbSceneChangeCacheActor'],this['_currentActor'][_0x46652c(0x70c)]='charged',this[_0x46652c(0x551)]=!![],this['_tpbSceneChangeCacheActor']=null):(this[_0x46652c(0x3c9)](),this[_0x46652c(0x384)]=null,this[_0x46652c(0x551)]=![]);},VisuMZ['BattleCore'][_0x23168f(0x5ba)]=BattleManager[_0x23168f(0x28a)],BattleManager[_0x23168f(0x28a)]=function(){const _0x41b13b=_0x23168f;return this[_0x41b13b(0xb38)]===_0x41b13b(0xdc)?this[_0x41b13b(0x9ff)]():VisuMZ['BattleCore'][_0x41b13b(0x5ba)][_0x41b13b(0x88f)](this);},BattleManager[_0x23168f(0x9ff)]=function(){const _0x3d9b1c=_0x23168f;return this[_0x3d9b1c(0x966)]();},VisuMZ[_0x23168f(0x895)][_0x23168f(0x933)]=BattleManager[_0x23168f(0x3c9)],BattleManager[_0x23168f(0x3c9)]=function(){const _0x42aa81=_0x23168f;this[_0x42aa81(0x3da)]()&&this['_phase']===_0x42aa81(0xaa0)&&(this[_0x42aa81(0x384)]=null),VisuMZ[_0x42aa81(0x895)][_0x42aa81(0x933)][_0x42aa81(0x88f)](this);},VisuMZ['BattleCore'][_0x23168f(0x780)]=BattleManager[_0x23168f(0xaee)],BattleManager[_0x23168f(0xaee)]=function(){const _0xb5e87c=_0x23168f,_0x3a6b62=this[_0xb5e87c(0x384)];if(_0x3a6b62&&!_0x3a6b62['inputtingAction']()){const _0x53cac4=_0x3a6b62[_0xb5e87c(0x9ee)];_0x3a6b62[_0xb5e87c(0x394)][_0x53cac4]=new Game_Action(_0x3a6b62);}return VisuMZ[_0xb5e87c(0x895)][_0xb5e87c(0x780)]['call'](this);},VisuMZ[_0x23168f(0x895)]['BattleManager_checkSubstitute']=BattleManager[_0x23168f(0x680)],BattleManager[_0x23168f(0x680)]=function(_0x107288){const _0x259976=_0x23168f;if(this[_0x259976(0x13a)][_0x259976(0x788)]())return![];return VisuMZ['BattleCore'][_0x259976(0xb10)][_0x259976(0x88f)](this,_0x107288);},SceneManager[_0x23168f(0xbef)]=function(){const _0x5eee8f=_0x23168f;return this[_0x5eee8f(0x23e)]&&this[_0x5eee8f(0x23e)]['constructor']===Scene_Battle;},SceneManager[_0x23168f(0x195)]=function(){const _0x1cc24c=_0x23168f;return Spriteset_Battle['prototype'][_0x1cc24c(0xbc2)]();},SceneManager[_0x23168f(0x8a9)]=function(){const _0x59aeaa=_0x23168f;if(SceneManager[_0x59aeaa(0x29f)](Scene_Options))return!![];return![];},SceneManager['isNextSceneBattleTransitionable']=function(){if(SceneManager['isNextScene'](Scene_Options))return!![];return![];},SceneManager[_0x23168f(0x872)]=function(_0x4fb6ce){const _0x46e25b=_0x23168f;if(!SceneManager[_0x46e25b(0xbef)]())return!![];const _0x538154=[_0x46e25b(0x657),_0x46e25b(0xbd5),_0x46e25b(0xa4e)];return _0x538154[_0x46e25b(0x2d8)](_0x4fb6ce[_0x46e25b(0x611)]);},VisuMZ[_0x23168f(0x895)][_0x23168f(0x3b8)]=SceneManager[_0x23168f(0x908)],SceneManager[_0x23168f(0x908)]=function(_0x34cae8){const _0x5c71c3=_0x23168f;if(!SceneManager[_0x5c71c3(0x872)](_0x34cae8))return this[_0x5c71c3(0x3e1)](_0x34cae8);VisuMZ[_0x5c71c3(0x895)]['SceneManager_push'][_0x5c71c3(0x88f)](this,_0x34cae8);},SceneManager[_0x23168f(0x3e1)]=function(_0x295da8){const _0x30355c=_0x23168f;if(!$gameTemp[_0x30355c(0x66b)]())return;if(this[_0x30355c(0x7d7)])return;this[_0x30355c(0x7d7)]=!![];let _0x372a66='';_0x372a66+=_0x30355c(0x4f9),_0x372a66+='\x20to\x20%1\x20midbattle.'['format'](_0x295da8[_0x30355c(0x611)]),alert(_0x372a66);},VisuMZ[_0x23168f(0x895)][_0x23168f(0x11f)]=Game_Temp[_0x23168f(0xa01)][_0x23168f(0x8c9)],Game_Temp[_0x23168f(0xa01)][_0x23168f(0x8c9)]=function(){const _0x4e8052=_0x23168f;VisuMZ[_0x4e8052(0x895)][_0x4e8052(0x11f)][_0x4e8052(0x88f)](this),this[_0x4e8052(0x72d)]=[];},VisuMZ[_0x23168f(0x895)][_0x23168f(0x9e6)]=Game_Temp['prototype']['requestAnimation'],Game_Temp[_0x23168f(0xa01)][_0x23168f(0x582)]=function(_0x2d90c8,_0x11c181,_0x3b905f){const _0x2ccd7a=_0x23168f;_0x2d90c8=_0x2d90c8['filter']((_0x3e8d76,_0x1e2025,_0x474007)=>_0x474007[_0x2ccd7a(0xb3c)](_0x3e8d76)===_0x1e2025);SceneManager[_0x2ccd7a(0xbef)]()&&SceneManager[_0x2ccd7a(0x195)]()&&(_0x3b905f=!_0x3b905f);VisuMZ[_0x2ccd7a(0x895)]['Game_Temp_requestAnimation'][_0x2ccd7a(0x88f)](this,_0x2d90c8,_0x11c181,_0x3b905f);SceneManager[_0x2ccd7a(0xbef)]()&&BattleManager[_0x2ccd7a(0xa73)][_0x2ccd7a(0x52c)]();for(const _0x19ceb5 of _0x2d90c8){_0x19ceb5&&_0x19ceb5['isEnemy']&&_0x19ceb5['isEnemy']()&&_0x19ceb5['resetNameTempVisibility']();}},Game_Temp['prototype'][_0x23168f(0x9e4)]=function(_0x1c469){const _0x5cdb99=_0x23168f;this[_0x5cdb99(0x7c4)]=_0x1c469;},Game_Temp[_0x23168f(0xa01)][_0x23168f(0x7aa)]=function(){const _0x2b8b4d=_0x23168f;return this[_0x2b8b4d(0x7c4)];},Game_Temp[_0x23168f(0xa01)]['clearForcedGameTroopSettingsBattleCore']=function(){const _0x44a77a=_0x23168f;this[_0x44a77a(0xb45)]=undefined;},Game_Temp[_0x23168f(0xa01)][_0x23168f(0x11a)]=function(_0x549a7e){const _0xb08e68=_0x23168f;$gameMap&&$dataMap&&$dataMap['note']&&this['parseForcedGameTroopSettingsBattleCore']($dataMap[_0xb08e68(0xae7)]);const _0x2740e2=$dataTroops[_0x549a7e];if(_0x2740e2){let _0x45f5e8=DataManager[_0xb08e68(0x600)](_0x2740e2['id']);this[_0xb08e68(0x754)](_0x45f5e8);}},Game_Temp['prototype'][_0x23168f(0x754)]=function(_0x59555c){const _0x273373=_0x23168f;if(!_0x59555c)return;if(_0x59555c[_0x273373(0x26e)](/<(?:BATTLELAYOUT|BATTLE LAYOUT|LAYOUT):[ ](.*?)>/i)){const _0x8ed55a=String(RegExp['$1']);if(_0x8ed55a[_0x273373(0x26e)](/DEFAULT/i))this[_0x273373(0xb45)]=_0x273373(0xa7c);else{if(_0x8ed55a['match'](/LIST/i))this[_0x273373(0xb45)]='list';else{if(_0x8ed55a['match'](/XP/i))this[_0x273373(0xb45)]='xp';else{if(_0x8ed55a[_0x273373(0x26e)](/PORTRAIT/i))this[_0x273373(0xb45)]=_0x273373(0x9e8);else{if(_0x8ed55a[_0x273373(0x26e)](/BORDER/i))this[_0x273373(0xb45)]=_0x273373(0x829);else{if(_0x8ed55a[_0x273373(0x26e)](/(?:SIDEVIEW UI|SIDEVIEW)/i))Imported['VisuMZ_3_SideviewBattleUI']?this[_0x273373(0xb45)]=_0x273373(0x8c7):this['_forcedBattleLayout']='default';else _0x8ed55a[_0x273373(0x26e)](/(?:FRONTVIEW UI|FRONTVIEW)/i)&&(Imported[_0x273373(0x1f8)]?this['_forcedBattleLayout']=_0x273373(0x450):this[_0x273373(0xb45)]=_0x273373(0xa7c));}}}}}}},VisuMZ['BattleCore'][_0x23168f(0x4bd)]=Game_Temp['prototype'][_0x23168f(0xa1c)],Game_Temp[_0x23168f(0xa01)]['requestBalloon']=function(_0x270a1e,_0x451f66){const _0x197cbd=_0x23168f;SceneManager[_0x197cbd(0xbef)]()?this['requestBattleBalloon'](_0x270a1e,_0x451f66):VisuMZ[_0x197cbd(0x895)][_0x197cbd(0x4bd)][_0x197cbd(0x88f)](this,_0x270a1e,_0x451f66);},Game_Temp['prototype'][_0x23168f(0x5ca)]=function(_0x10423c,_0x420e63){const _0x5793da=_0x23168f,_0x172715={'target':_0x10423c,'balloonId':_0x420e63};this[_0x5793da(0x72d)]=this[_0x5793da(0x72d)]||[],this['_battleBalloonQueue'][_0x5793da(0x908)](_0x172715);},Game_Temp['prototype']['retrieveBattleBalloon']=function(){const _0x579a0f=_0x23168f;return this[_0x579a0f(0x72d)]=this[_0x579a0f(0x72d)]||[],this[_0x579a0f(0x72d)][_0x579a0f(0xa30)]();},Game_Temp[_0x23168f(0xa01)]['clearBattleBalloons']=function(){this['_battleBalloonQueue']=[];},Spriteset_Battle[_0x23168f(0xa01)][_0x23168f(0x2e5)]=function(){const _0x32cee5=_0x23168f;this['_battleBalloonSprites']===undefined&&(this[_0x32cee5(0x6bc)]=[]);for(const _0x4a7a20 of this[_0x32cee5(0x6bc)]){!_0x4a7a20['isPlaying']()&&this['removeBattleBalloon'](_0x4a7a20);}this['processBattleBalloonRequests']();},Spriteset_Battle[_0x23168f(0xa01)][_0x23168f(0xadc)]=function(){const _0x35b6d6=_0x23168f;for(;;){const _0x5d50=$gameTemp[_0x35b6d6(0x563)]();if(_0x5d50)this[_0x35b6d6(0x72b)](_0x5d50);else break;}},Spriteset_Battle['prototype'][_0x23168f(0x72b)]=function(_0x2ce22a){const _0x1416c8=_0x23168f,_0x12b5b2=this[_0x1416c8(0xacf)](_0x2ce22a[_0x1416c8(0x53d)]);if(_0x12b5b2){let _0x16fa0d=null;Imported[_0x1416c8(0x842)]&&Array['isArray'](_0x2ce22a[_0x1416c8(0xbae)])?_0x16fa0d=new Sprite_IconBalloon():_0x16fa0d=new Sprite_Balloon(),_0x16fa0d[_0x1416c8(0x4c5)]=_0x2ce22a[_0x1416c8(0x53d)],_0x16fa0d['_target']=_0x12b5b2,_0x16fa0d[_0x1416c8(0x54d)][_0x1416c8(0x88e)]=_0x12b5b2,_0x16fa0d[_0x1416c8(0x85b)](_0x12b5b2,_0x2ce22a[_0x1416c8(0xbae)]),BattleManager[_0x1416c8(0xba8)](_0x16fa0d),this[_0x1416c8(0x6bc)]['push'](_0x16fa0d);}},Spriteset_Battle[_0x23168f(0xa01)]['removeBattleBalloon']=function(_0x47a402){const _0x1ab02f=_0x23168f;this[_0x1ab02f(0x6bc)][_0x1ab02f(0xa32)](_0x47a402),BattleManager['removeChildFromUiContainer'](_0x47a402),_0x47a402[_0x1ab02f(0xb8e)]();},Sprite_Battler[_0x23168f(0xa01)][_0x23168f(0x2a1)]=function(_0x46887b,_0x468c58){},Sprite_Battler[_0x23168f(0xa01)][_0x23168f(0x4f8)]=function(){return![];},Spriteset_Battle[_0x23168f(0xa01)][_0x23168f(0x38d)]=function(){const _0x69fdc1=_0x23168f;return this[_0x69fdc1(0x6bc)]=this[_0x69fdc1(0x6bc)]||[],this[_0x69fdc1(0x6bc)][_0x69fdc1(0x312)]>0x0;},VisuMZ[_0x23168f(0x895)][_0x23168f(0xb5b)]=Game_System[_0x23168f(0xa01)][_0x23168f(0x8c9)],Game_System['prototype'][_0x23168f(0x8c9)]=function(){const _0x2c6bbf=_0x23168f;VisuMZ[_0x2c6bbf(0x895)]['Game_System_initialize']['call'](this),this[_0x2c6bbf(0x641)]();},Game_System[_0x23168f(0xa01)][_0x23168f(0x641)]=function(){this['_defeatedEnemies']=this['_defeatedEnemies']||[];},Game_System[_0x23168f(0xa01)][_0x23168f(0x9b2)]=function(){const _0x5e4e98=_0x23168f;if(this[_0x5e4e98(0x974)]===undefined)this['initBattleCore']();return this[_0x5e4e98(0x974)];},Game_System[_0x23168f(0xa01)]['registerDefeatedEnemy']=function(_0x5c36e2){const _0x4c90f8=_0x23168f;if(this[_0x4c90f8(0x974)]===undefined)this[_0x4c90f8(0x641)]();if(!_0x5c36e2)return;if(this[_0x4c90f8(0x974)][_0x4c90f8(0x2d8)](_0x5c36e2))return;this[_0x4c90f8(0x974)][_0x4c90f8(0x908)](_0x5c36e2),this[_0x4c90f8(0x974)][_0x4c90f8(0x244)]((_0x10ce66,_0x56601f)=>_0x10ce66-_0x56601f);},VisuMZ[_0x23168f(0x895)]['Game_BattlerBase_addNewState']=Game_BattlerBase['prototype'][_0x23168f(0x578)],Game_BattlerBase['prototype'][_0x23168f(0x578)]=function(_0x346807){const _0x1a4904=_0x23168f,_0x5ae696=this[_0x1a4904(0x942)](),_0x126783=this[_0x1a4904(0x7e9)]();VisuMZ[_0x1a4904(0x895)]['Game_BattlerBase_addNewState'][_0x1a4904(0x88f)](this,_0x346807),this[_0x1a4904(0x77b)]()&&_0x5ae696&&this[_0x1a4904(0x14e)]()&&(this['_visualHpGauge_JustDied']=!this[_0x1a4904(0x37e)](),$gameSystem[_0x1a4904(0x947)](this['enemyId']())),SceneManager['isSceneBattle']()&&_0x126783!==this[_0x1a4904(0x7e9)]()&&(this[_0x1a4904(0xbb5)]()&&this[_0x1a4904(0xbb5)]()[_0x1a4904(0xa7b)]());},Game_Enemy[_0x23168f(0xa01)][_0x23168f(0x37e)]=function(){const _0x2ee6d2=_0x23168f;return $gameSystem['getDefeatedEnemies']()[_0x2ee6d2(0x2d8)](this['_enemyId']);},VisuMZ[_0x23168f(0x895)][_0x23168f(0xb6b)]=Game_BattlerBase[_0x23168f(0xa01)][_0x23168f(0x891)],Game_BattlerBase[_0x23168f(0xa01)][_0x23168f(0x891)]=function(_0x570092){const _0x59a079=_0x23168f,_0x1395a1=this[_0x59a079(0x9e3)][_0x59a079(0x2d8)](_0x570092),_0x8b11cf=this[_0x59a079(0x7e9)]();VisuMZ[_0x59a079(0x895)][_0x59a079(0xb6b)]['call'](this,_0x570092),this[_0x59a079(0x77b)]()&&_0x570092===this['deathStateId']()&&this['isAlive']()&&(this[_0x59a079(0xa76)]=![]),!this[_0x59a079(0x781)]&&!this[_0x59a079(0x96d)]&&SceneManager[_0x59a079(0xbef)]()&&(_0x1395a1&&!this['_states'][_0x59a079(0x2d8)](_0x570092)&&this[_0x59a079(0xbec)](),_0x8b11cf!==this['stateMotionIndex']()&&(this[_0x59a079(0xbb5)]()&&this['battler']()[_0x59a079(0xa7b)]()));},VisuMZ['BattleCore'][_0x23168f(0xb02)]=Game_Action[_0x23168f(0xa01)][_0x23168f(0x176)],Game_Action['prototype']['clear']=function(){const _0x4a79ac=_0x23168f;VisuMZ['BattleCore'][_0x4a79ac(0xb02)][_0x4a79ac(0x88f)](this),this[_0x4a79ac(0xd2)]={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this[_0x4a79ac(0xa27)]={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this['_customDamageFormula']=_0x4a79ac(0xa7c),this[_0x4a79ac(0x502)]();},Game_Action[_0x23168f(0xa01)][_0x23168f(0x502)]=function(){const _0x36d1a6=_0x23168f;this[_0x36d1a6(0x654)]='';},VisuMZ[_0x23168f(0x895)][_0x23168f(0x336)]=Game_Action[_0x23168f(0xa01)][_0x23168f(0x5ff)],Game_Action[_0x23168f(0xa01)][_0x23168f(0x5ff)]=function(_0x3b4c41){const _0x25b931=_0x23168f;VisuMZ[_0x25b931(0x895)][_0x25b931(0x336)][_0x25b931(0x88f)](this,_0x3b4c41),this[_0x25b931(0x502)]();},VisuMZ[_0x23168f(0x895)][_0x23168f(0x301)]=Game_Action[_0x23168f(0xa01)][_0x23168f(0x426)],Game_Action['prototype'][_0x23168f(0x426)]=function(_0x53e49e){const _0x3c9802=_0x23168f;VisuMZ[_0x3c9802(0x895)][_0x3c9802(0x301)][_0x3c9802(0x88f)](this,_0x53e49e),this[_0x3c9802(0x502)]();},VisuMZ[_0x23168f(0x895)][_0x23168f(0x6fb)]=Game_Action[_0x23168f(0xa01)][_0x23168f(0x148)],Game_Action[_0x23168f(0xa01)][_0x23168f(0x148)]=function(_0x2f9121){const _0x139dff=_0x23168f;VisuMZ[_0x139dff(0x895)]['Game_Action_setItem'][_0x139dff(0x88f)](this,_0x2f9121),this[_0x139dff(0x502)]();},Game_Action['prototype'][_0x23168f(0x16f)]=function(_0x235b9b,_0x78cbcb){const _0x19fa9b=_0x23168f;return VisuMZ['BattleCore'][_0x19fa9b(0xbac)][_0x19fa9b(0x642)][_0x19fa9b(0x469)]['call'](this,_0x235b9b,_0x78cbcb);},Game_Action[_0x23168f(0xa01)]['applyVariance']=function(_0x39028e,_0x3bbd89){const _0x3f0f06=_0x23168f;return VisuMZ[_0x3f0f06(0x895)][_0x3f0f06(0xbac)][_0x3f0f06(0x642)][_0x3f0f06(0x4b9)]['call'](this,_0x39028e,_0x3bbd89);},Game_Action['prototype'][_0x23168f(0xa2e)]=function(_0x12da14,_0x59806c){const _0x513bc4=_0x23168f;return VisuMZ[_0x513bc4(0x895)]['Settings']['Damage'][_0x513bc4(0x341)][_0x513bc4(0x88f)](this,_0x12da14,_0x59806c);},VisuMZ['BattleCore'][_0x23168f(0xb9e)]=Game_Action['prototype'][_0x23168f(0x874)],Game_Action['prototype'][_0x23168f(0x874)]=function(_0x12a5b7){const _0xe5478c=_0x23168f,_0x1f4d3c=this[_0xe5478c(0x42e)]()[_0xe5478c(0xae7)];if(_0x1f4d3c[_0xe5478c(0x26e)](/<ALWAYS HIT>/i))return 0x1;else{if(_0x1f4d3c[_0xe5478c(0x26e)](/<ALWAYS HIT RATE: (\d+)([%％])>/i))return Number(RegExp['$1'])/0x64;else{let _0x12a077=VisuMZ[_0xe5478c(0x895)][_0xe5478c(0xb9e)][_0xe5478c(0x88f)](this,_0x12a5b7);return _0x12a077=this[_0xe5478c(0xa27)][_0xe5478c(0x9ec)]*_0x12a077+this[_0xe5478c(0xa27)]['hitFlat'],$gameParty[_0xe5478c(0x660)]()&&(_0x12a077=this[_0xe5478c(0x4b2)](_0x12a077,_0x12a5b7)),_0x12a077;}}},VisuMZ[_0x23168f(0x895)][_0x23168f(0x38b)]=Game_Action[_0x23168f(0xa01)][_0x23168f(0x261)],Game_Action['prototype']['updateLastTarget']=function(_0x541619){const _0x49fb37=_0x23168f;this[_0x49fb37(0x52d)]=!![],VisuMZ[_0x49fb37(0x895)]['Game_Action_updateLastTarget'][_0x49fb37(0x88f)](this,_0x541619),this[_0x49fb37(0x52d)]=undefined;},Game_Action[_0x23168f(0xa01)][_0x23168f(0x308)]=function(_0x36c3d0){const _0x5e2b31=_0x23168f;window['action']=this,window['a']=this[_0x5e2b31(0x541)](),window['b']=_0x36c3d0,window[_0x5e2b31(0x847)]=this['subject'](),window[_0x5e2b31(0x53d)]=_0x36c3d0,window['obj']=this[_0x5e2b31(0x42e)](),window['skill']=this[_0x5e2b31(0x42e)](),window[_0x5e2b31(0x42e)]=this['item']();},Game_Action[_0x23168f(0xa01)][_0x23168f(0x483)]=function(_0x1f3cbd){const _0x2e1662=_0x23168f;window[_0x2e1662(0x7a5)]=undefined,window['a']=undefined,window['b']=undefined,window[_0x2e1662(0x847)]=undefined,window[_0x2e1662(0x53d)]=undefined,window['obj']=undefined,window[_0x2e1662(0x28c)]=undefined,window[_0x2e1662(0x42e)]=undefined;},Game_Action['prototype']['applyBattleCoreHitRateJS']=function(_0x136ab5,_0x2603c5){const _0x3fc950=_0x23168f;if(this[_0x3fc950(0x52d)])return _0x136ab5;this[_0x3fc950(0x308)](_0x2603c5);if(this['item']()){let _0x4bd990=VisuMZ['BattleCore']['createKeyJS'](this[_0x3fc950(0x42e)](),_0x3fc950(0xd9));VisuMZ[_0x3fc950(0x895)]['JS'][_0x4bd990]&&(_0x136ab5=VisuMZ[_0x3fc950(0x895)]['JS'][_0x4bd990][_0x3fc950(0x88f)](this,this[_0x3fc950(0x541)](),_0x2603c5,this[_0x3fc950(0x42e)](),_0x136ab5));}for(const _0x85603 of this[_0x3fc950(0x541)]()['traitObjects']()){if(!_0x85603)continue;key=VisuMZ[_0x3fc950(0x895)][_0x3fc950(0x7b2)](_0x85603,_0x3fc950(0x258)),VisuMZ['BattleCore']['JS'][key]&&(_0x136ab5=VisuMZ[_0x3fc950(0x895)]['JS'][key]['call'](this,this['subject'](),_0x2603c5,this[_0x3fc950(0x42e)](),_0x136ab5));}for(const _0x33456e of _0x2603c5[_0x3fc950(0x88b)]()){if(!_0x33456e)continue;key=VisuMZ[_0x3fc950(0x895)][_0x3fc950(0x7b2)](_0x33456e,_0x3fc950(0x8bb)),VisuMZ[_0x3fc950(0x895)]['JS'][key]&&(_0x136ab5=VisuMZ['BattleCore']['JS'][key][_0x3fc950(0x88f)](this,this[_0x3fc950(0x541)](),_0x2603c5,this[_0x3fc950(0x42e)](),_0x136ab5));}return this[_0x3fc950(0x483)](_0x2603c5),_0x136ab5;},Game_Action[_0x23168f(0xa01)][_0x23168f(0x9e2)]=function(_0x2ebdfe){const _0xfa3a11=_0x23168f;if(!this[_0xfa3a11(0x42e)]()[_0xfa3a11(0x96e)][_0xfa3a11(0xb9d)])return 0x0;let _0x445482=VisuMZ['BattleCore']['Settings'][_0xfa3a11(0x642)][_0xfa3a11(0x8f4)][_0xfa3a11(0x88f)](this,_0x2ebdfe);return _0x445482=this[_0xfa3a11(0xa27)]['criticalHitRate']*_0x445482+this[_0xfa3a11(0xa27)]['criticalHitFlat'],$gameParty[_0xfa3a11(0x660)]()&&(_0x445482=this[_0xfa3a11(0x7b9)](_0x445482,_0x2ebdfe)),_0x445482;},Game_Action[_0x23168f(0xa01)][_0x23168f(0x7b9)]=function(_0x242abf,_0x5aca42){const _0x1067d3=_0x23168f;this['declareGlobalVariables'](_0x5aca42),window[_0x1067d3(0x802)]=_0x242abf;{const _0x55a7cd=this['subject']()['traitObjects']();for(const _0x19dad7 of _0x55a7cd){if(!_0x19dad7)continue;if(_0x19dad7[_0x1067d3(0xae7)]['match'](/<JS (?:CRITICAL RATE|CRI) AS USER>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS USER>/i)){const _0x1e3eeb=String(RegExp['$1']);try{eval(_0x1e3eeb);}catch(_0x13faf4){if($gameTemp[_0x1067d3(0x66b)]())console[_0x1067d3(0x7dc)](_0x13faf4);}}}}{const _0x43ed3d=_0x5aca42['traitObjects']();for(const _0x479ceb of _0x43ed3d){if(!_0x479ceb)continue;if(_0x479ceb[_0x1067d3(0xae7)][_0x1067d3(0x26e)](/<JS (?:CRITICAL RATE|CRI) AS TARGET>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS TARGET>/i)){const _0x41aaec=String(RegExp['$1']);try{eval(_0x41aaec);}catch(_0x39b44a){if($gameTemp[_0x1067d3(0x66b)]())console[_0x1067d3(0x7dc)](_0x39b44a);}}}}return _0x242abf=window['rate'],this[_0x1067d3(0x483)](_0x5aca42),_0x242abf;},Game_Action['prototype'][_0x23168f(0x7b9)]=function(_0x310b26,_0x7a7ac9){const _0x2422bc=_0x23168f;this[_0x2422bc(0x308)](_0x7a7ac9);for(const _0x265b50 of this[_0x2422bc(0x541)]()['traitObjects']()){if(!_0x265b50)continue;key=VisuMZ['BattleCore'][_0x2422bc(0x7b2)](_0x265b50,'jsCritRateAsUser'),VisuMZ[_0x2422bc(0x895)]['JS'][key]&&(_0x310b26=VisuMZ[_0x2422bc(0x895)]['JS'][key][_0x2422bc(0x88f)](this,this[_0x2422bc(0x541)](),_0x7a7ac9,this[_0x2422bc(0x42e)](),_0x310b26));}for(const _0x2a2d04 of _0x7a7ac9[_0x2422bc(0x88b)]()){if(!_0x2a2d04)continue;key=VisuMZ[_0x2422bc(0x895)][_0x2422bc(0x7b2)](_0x2a2d04,_0x2422bc(0xa0f)),VisuMZ[_0x2422bc(0x895)]['JS'][key]&&(_0x310b26=VisuMZ[_0x2422bc(0x895)]['JS'][key][_0x2422bc(0x88f)](this,this[_0x2422bc(0x541)](),_0x7a7ac9,this['item'](),_0x310b26));}return this[_0x2422bc(0x483)](_0x7a7ac9),_0x310b26;},Game_Action[_0x23168f(0xa01)]['applyCritical']=function(_0x1f45a2){const _0x267971=_0x23168f;return _0x1f45a2=VisuMZ[_0x267971(0x895)][_0x267971(0xbac)][_0x267971(0x642)][_0x267971(0x4b6)][_0x267971(0x88f)](this,_0x1f45a2),_0x1f45a2=this[_0x267971(0xa27)][_0x267971(0x60c)]*_0x1f45a2+this[_0x267971(0xa27)][_0x267971(0x391)],_0x1f45a2;},VisuMZ[_0x23168f(0x895)]['Game_Action_evalDamageFormula']=Game_Action[_0x23168f(0xa01)][_0x23168f(0x84e)],Game_Action[_0x23168f(0xa01)][_0x23168f(0x84e)]=function(_0x334979){const _0x430cb2=_0x23168f;if(this[_0x430cb2(0x55f)]!=='default')return this[_0x430cb2(0x555)](_0x334979);else return DataManager[_0x430cb2(0xb06)](this[_0x430cb2(0x42e)]())===_0x430cb2(0xb52)?VisuMZ['BattleCore'][_0x430cb2(0x114)]['call'](this,_0x334979):this[_0x430cb2(0xb1)](_0x334979);},Game_Action[_0x23168f(0xa01)][_0x23168f(0x7e4)]=function(_0x423d37){const _0xe2342d=_0x23168f;this[_0xe2342d(0x55f)]=_0x423d37;},Game_Action[_0x23168f(0xa01)]['customDamageFormula']=function(_0x5d50bf){const _0x1a2e9f=_0x23168f,_0x4a4948=this[_0x1a2e9f(0x42e)](),_0x5f0660=_0x4a4948[_0x1a2e9f(0x96e)][_0x1a2e9f(0x767)];_0x4a4948['damage'][_0x1a2e9f(0x767)]=this[_0x1a2e9f(0x55f)];let _0x303825=VisuMZ[_0x1a2e9f(0x895)][_0x1a2e9f(0x114)][_0x1a2e9f(0x88f)](this,_0x5d50bf);return _0x4a4948[_0x1a2e9f(0x96e)][_0x1a2e9f(0x767)]=_0x5f0660,_0x303825;},Game_Action[_0x23168f(0xa01)][_0x23168f(0x612)]=function(){const _0x1dd672=_0x23168f;if(this[_0x1dd672(0x42e)]()[_0x1dd672(0xae7)]['match'](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x450058=String(RegExp['$1'])[_0x1dd672(0x1ef)]()[_0x1dd672(0xf4)]();return _0x450058;}return _0x1dd672(0xb52);},Game_Action[_0x23168f(0xa01)][_0x23168f(0xb1)]=function(_0x51b822){const _0x1d025b=_0x23168f,_0x14c7b4=DataManager[_0x1d025b(0xb06)](this['item']()),_0x392509=VisuMZ['DamageStyles'][_0x14c7b4];try{return _0x392509[_0x1d025b(0x1d6)][_0x1d025b(0x88f)](this,_0x51b822);}catch(_0x2e9231){if($gameTemp[_0x1d025b(0x66b)]())console[_0x1d025b(0x7dc)](_0x2e9231);return VisuMZ['BattleCore'][_0x1d025b(0x114)]['call'](this);}},Game_Action['prototype'][_0x23168f(0x3db)]=function(_0x47f695,_0x495486){const _0x680c89=_0x23168f;if(this[_0x680c89(0x4a2)]())return _0x495486;const _0x105894=this['subject'](),_0x30eca2=_0x47f695;let _0x121a68=[],_0x5f63a4=[];_0x121a68[_0x680c89(0x908)](this[_0x680c89(0xd2)]['arPenFlat'],this[_0x680c89(0xd2)][_0x680c89(0x6ed)]),_0x5f63a4[_0x680c89(0x908)](this[_0x680c89(0xd2)][_0x680c89(0x686)],this[_0x680c89(0xd2)]['arRedRate']);const _0x2c392f=this['isPhysical']()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x3207af=this['isPhysical']()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x1e1344=this[_0x680c89(0x64b)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x389171=this[_0x680c89(0x64b)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;return _0x121a68=_0x121a68[_0x680c89(0x23c)](_0x30eca2[_0x680c89(0x88b)]()['map'](_0x3e68bf=>_0x3e68bf&&_0x3e68bf[_0x680c89(0xae7)][_0x680c89(0x26e)](_0x2c392f)?Number(RegExp['$1']):0x0)),_0x5f63a4=_0x5f63a4[_0x680c89(0x23c)](_0x30eca2[_0x680c89(0x88b)]()[_0x680c89(0x37f)](_0x578098=>_0x578098&&_0x578098[_0x680c89(0xae7)][_0x680c89(0x26e)](_0x3207af)?Number(RegExp['$1'])/0x64:0x0)),_0x121a68=_0x121a68[_0x680c89(0x23c)](_0x105894[_0x680c89(0x88b)]()[_0x680c89(0x37f)](_0x2d7c01=>_0x2d7c01&&_0x2d7c01[_0x680c89(0xae7)][_0x680c89(0x26e)](_0x1e1344)?Number(RegExp['$1']):0x0)),_0x5f63a4=_0x5f63a4['concat'](_0x105894['traitObjects']()[_0x680c89(0x37f)](_0x4aed1b=>_0x4aed1b&&_0x4aed1b[_0x680c89(0xae7)][_0x680c89(0x26e)](_0x389171)?Number(RegExp['$1'])/0x64:0x0)),this[_0x680c89(0x42e)]()[_0x680c89(0xae7)][_0x680c89(0x26e)](_0x1e1344)&&_0x121a68[_0x680c89(0x908)](Number(RegExp['$1'])),this[_0x680c89(0x42e)]()[_0x680c89(0xae7)]['match'](_0x389171)&&_0x5f63a4[_0x680c89(0x908)](Number(RegExp['$1'])),_0x495486=_0x121a68[_0x680c89(0x34f)]((_0x5e9c9d,_0xf8996d)=>_0x5e9c9d-_0xf8996d,_0x495486),_0x495486>0x0&&(_0x495486=_0x5f63a4[_0x680c89(0x34f)]((_0x830050,_0x3f6593)=>_0x830050*(0x1-_0x3f6593),_0x495486)),_0x495486;},VisuMZ['BattleCore'][_0x23168f(0x297)]=Game_Action[_0x23168f(0xa01)][_0x23168f(0x9ed)],Game_Action[_0x23168f(0xa01)][_0x23168f(0x9ed)]=function(_0x1e4105,_0x46cb20){const _0x4b7282=_0x23168f;_0x46cb20=_0x46cb20*this[_0x4b7282(0xa27)]['damageRate'],_0x46cb20+=this[_0x4b7282(0xa27)]['damageFlat']*(_0x46cb20>=0x0?0x1:-0x1),_0x46cb20=this[_0x4b7282(0xa74)](_0x4b7282(0x97f),_0x1e4105,_0x46cb20,![]),_0x46cb20=this[_0x4b7282(0x6d7)](_0x46cb20),_0x46cb20>0x0?_0x46cb20=Math[_0x4b7282(0x330)](_0x46cb20):_0x46cb20=Math[_0x4b7282(0x58e)](_0x46cb20),this[_0x4b7282(0x9fa)]=_0x46cb20,this['_totalValue']=this[_0x4b7282(0x718)]||0x0,this['_totalValue']+=_0x46cb20,VisuMZ[_0x4b7282(0x895)][_0x4b7282(0x297)][_0x4b7282(0x88f)](this,_0x1e4105,_0x46cb20),this[_0x4b7282(0xa74)]('PostDamage%1JS',_0x1e4105,_0x46cb20,!![]);},Game_Action[_0x23168f(0xa01)][_0x23168f(0x6d7)]=function(_0x1ac35b){const _0xe7c18e=_0x23168f;if(this[_0xe7c18e(0x6b1)]())return _0x1ac35b;return _0x1ac35b=this['applySoftDamageCap'](_0x1ac35b),_0x1ac35b=this[_0xe7c18e(0x60f)](_0x1ac35b),_0x1ac35b;},Game_Action['prototype'][_0x23168f(0x6b1)]=function(){const _0x7bce78=_0x23168f,_0x12ba07=/<BYPASS DAMAGE CAP>/i;if(this[_0x7bce78(0x42e)]()['note'][_0x7bce78(0x26e)](_0x12ba07))return!![];if(this['subject']()[_0x7bce78(0x88b)]()['some'](_0x30c848=>_0x30c848&&_0x30c848[_0x7bce78(0xae7)]['match'](_0x12ba07)))return!![];return!VisuMZ[_0x7bce78(0x895)][_0x7bce78(0xbac)][_0x7bce78(0x642)]['EnableDamageCap'];},Game_Action[_0x23168f(0xa01)][_0x23168f(0x56f)]=function(_0x501617){const _0x453892=_0x23168f;if(!VisuMZ[_0x453892(0x895)]['Settings'][_0x453892(0x642)][_0x453892(0x9d7)])return _0x501617;const _0x5d0930=/<BYPASS SOFT DAMAGE CAP>/i;if(this[_0x453892(0x42e)]()[_0x453892(0xae7)][_0x453892(0x26e)](_0x5d0930))return _0x501617;if(this[_0x453892(0x541)]()[_0x453892(0x88b)]()[_0x453892(0xdb)](_0x2f839c=>_0x2f839c&&_0x2f839c[_0x453892(0xae7)][_0x453892(0x26e)](_0x5d0930)))return _0x501617;const _0x2acfd1=_0x501617<0x0?-0x1:0x1;_0x501617=Math[_0x453892(0x1c8)](_0x501617);let _0xedfb50=this[_0x453892(0x541)]()[_0x453892(0x99a)]();this[_0x453892(0x42e)]()[_0x453892(0xae7)][_0x453892(0x26e)](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&(_0xedfb50+=Number(RegExp['$1'])/0x64);_0xedfb50=_0xedfb50['clamp'](0.01,0x1);const _0x50799c=this[_0x453892(0x958)](),_0x2ebcff=_0xedfb50*_0x50799c;if(_0x501617>_0x2ebcff&&_0x50799c>_0x2ebcff){_0x501617-=_0x2ebcff;const _0x3d9008=VisuMZ['BattleCore'][_0x453892(0xbac)]['Damage'][_0x453892(0x1aa)],_0x2f8f4c=Math[_0x453892(0x705)](0x1-_0x501617/((_0x50799c-_0x2ebcff)*_0x3d9008+_0x501617),0.01);_0x501617*=_0x2f8f4c,_0x501617+=_0x2ebcff;}return _0x501617*_0x2acfd1;},Game_Action['prototype'][_0x23168f(0x958)]=function(){const _0x28b34b=_0x23168f;return this[_0x28b34b(0x42e)]()['note'][_0x28b34b(0x26e)](/<DAMAGE CAP:[ ](\d+)>/i)?Number(RegExp['$1']):this[_0x28b34b(0x541)]()['hardDamageCap']();},Game_Action[_0x23168f(0xa01)][_0x23168f(0x60f)]=function(_0x1db020){const _0xb8ca75=_0x23168f;let _0x3d8f10=this[_0xb8ca75(0x958)]();return _0x1db020['clamp'](-_0x3d8f10,_0x3d8f10);},Game_Action[_0x23168f(0xa01)][_0x23168f(0x30b)]=function(){const _0x483048=_0x23168f;if(!this[_0x483048(0x42e)]())return![];if(!$gameParty[_0x483048(0x660)]())return![];return(this[_0x483048(0x42e)]()[_0x483048(0xae7)]||'')[_0x483048(0x26e)](/<DISPERSE DAMAGE>/i);},Game_Action[_0x23168f(0xa01)]['disperseDamage']=function(_0x1c3936){const _0x13031a=_0x23168f;if(this[_0x13031a(0x30b)]()){let _0x2e4291=BattleManager['_targets'];_0x1c3936/=_0x2e4291['length'],this[_0x13031a(0xa37)]()&&(_0x1c3936*=this[_0x13031a(0x541)]()[_0x13031a(0x976)]()+0x1),_0x1c3936=_0x1c3936>0x0?Math['ceil'](_0x1c3936):Math['floor'](_0x1c3936);}return _0x1c3936;},VisuMZ[_0x23168f(0x895)]['Game_Action_makeDamageValueDisperse']=Game_Action['prototype'][_0x23168f(0x16f)],Game_Action[_0x23168f(0xa01)][_0x23168f(0x16f)]=function(_0x2366f2,_0x29f353){const _0x3600ed=_0x23168f;let _0x157238=VisuMZ['BattleCore']['Game_Action_makeDamageValueDisperse'][_0x3600ed(0x88f)](this,_0x2366f2,_0x29f353);return this[_0x3600ed(0x257)](_0x157238);},Game_Action[_0x23168f(0xa01)][_0x23168f(0x32f)]=function(_0x3ef009,_0x3aa22c){const _0x4e0fa6=_0x23168f;let _0x383f38=(_0x3ef009[_0x4e0fa6(0x7c5)]*_0x3aa22c[_0x4e0fa6(0x122)]+_0x3aa22c[_0x4e0fa6(0x293)])*_0x3ef009[_0x4e0fa6(0x814)];_0x383f38=this['disperseDamage'](_0x383f38),this[_0x4e0fa6(0x93b)]()&&(_0x383f38*=this['subject']()['pha']),_0x383f38=Math[_0x4e0fa6(0x58e)](_0x383f38),_0x383f38!==0x0&&(_0x3ef009[_0x4e0fa6(0x714)](_0x383f38),this[_0x4e0fa6(0x6d3)](_0x3ef009));},Game_Action[_0x23168f(0xa01)][_0x23168f(0x44b)]=function(_0x45b89f,_0x28f10f){const _0x2b3694=_0x23168f;let _0xcf0f71=(_0x45b89f[_0x2b3694(0x88a)]*_0x28f10f[_0x2b3694(0x122)]+_0x28f10f[_0x2b3694(0x293)])*_0x45b89f[_0x2b3694(0x814)];_0xcf0f71=this[_0x2b3694(0x257)](_0xcf0f71),this['isItem']()&&(_0xcf0f71*=this[_0x2b3694(0x541)]()[_0x2b3694(0x638)]),_0xcf0f71=Math[_0x2b3694(0x58e)](_0xcf0f71),_0xcf0f71!==0x0&&(_0x45b89f['gainMp'](_0xcf0f71),this[_0x2b3694(0x6d3)](_0x45b89f));},Game_Action[_0x23168f(0xa01)]['itemEffectGainTp']=function(_0x11bbf2,_0x32c860){const _0x3302e4=_0x23168f;let _0x587a67=Math[_0x3302e4(0x58e)](_0x32c860[_0x3302e4(0x122)]);_0x587a67=this[_0x3302e4(0x257)](_0x587a67),_0x587a67!==0x0&&(_0x11bbf2['gainTp'](_0x587a67),this[_0x3302e4(0x6d3)](_0x11bbf2));},VisuMZ[_0x23168f(0x895)][_0x23168f(0x76a)]=Game_Action[_0x23168f(0xa01)]['apply'],Game_Action[_0x23168f(0xa01)][_0x23168f(0x260)]=function(_0x1a6a5b){const _0x450a60=_0x23168f;if(_0x1a6a5b&&_0x1a6a5b[_0x450a60(0x77b)]())_0x1a6a5b[_0x450a60(0x9a4)]();this[_0x450a60(0xa74)](_0x450a60(0xb44),_0x1a6a5b,0x0,!![]),VisuMZ[_0x450a60(0x895)]['Game_Action_apply'][_0x450a60(0x88f)](this,_0x1a6a5b),this[_0x450a60(0xa74)](_0x450a60(0x7b0),_0x1a6a5b,this[_0x450a60(0x9fa)]||0x0,!![]),this[_0x450a60(0x17d)](_0x1a6a5b);},Game_Action[_0x23168f(0xa01)][_0x23168f(0xa74)]=function(_0x278e3c,_0x152365,_0x2bbadd,_0x319dd9){const _0x2b4fbc=_0x23168f;if(this[_0x2b4fbc(0x96d)]||this['_tempActor'])return;_0x2bbadd=_0x2bbadd||0x0;const _0x19f4bb=_0x2bbadd,_0x5b869a=VisuMZ[_0x2b4fbc(0x895)][_0x2b4fbc(0xbac)][_0x2b4fbc(0x929)],_0x460478=_0x278e3c[_0x2b4fbc(0x7d3)]('');if(_0x5b869a[_0x460478]){_0x2bbadd=_0x5b869a[_0x460478][_0x2b4fbc(0x88f)](this,_0x2bbadd,_0x152365);if(_0x319dd9)_0x2bbadd=_0x19f4bb;}let _0x21080d=VisuMZ[_0x2b4fbc(0x895)][_0x2b4fbc(0x7b2)](this['item'](),_0x278e3c[_0x2b4fbc(0x7d3)](''));if(VisuMZ[_0x2b4fbc(0x895)]['JS'][_0x21080d]){_0x2bbadd=VisuMZ['BattleCore']['JS'][_0x21080d][_0x2b4fbc(0x88f)](this,this[_0x2b4fbc(0x541)](),_0x152365,this['item'](),_0x2bbadd);if(_0x319dd9)_0x2bbadd=_0x19f4bb;}for(const _0x23ac7e of this['subject']()[_0x2b4fbc(0x88b)]()){if(!_0x23ac7e)continue;_0x21080d=VisuMZ[_0x2b4fbc(0x895)][_0x2b4fbc(0x7b2)](_0x23ac7e,_0x278e3c['format'](_0x2b4fbc(0xa38)));if(VisuMZ['BattleCore']['JS'][_0x21080d]){_0x2bbadd=VisuMZ[_0x2b4fbc(0x895)]['JS'][_0x21080d][_0x2b4fbc(0x88f)](this,this[_0x2b4fbc(0x541)](),_0x152365,_0x23ac7e,_0x2bbadd);if(_0x319dd9)_0x2bbadd=_0x19f4bb;}}for(const _0x33784e of _0x152365['traitObjects']()){if(!_0x33784e)continue;_0x21080d=VisuMZ[_0x2b4fbc(0x895)]['createKeyJS'](_0x33784e,_0x278e3c['format']('AsTarget'));if(VisuMZ[_0x2b4fbc(0x895)]['JS'][_0x21080d]){_0x2bbadd=VisuMZ['BattleCore']['JS'][_0x21080d][_0x2b4fbc(0x88f)](this,this[_0x2b4fbc(0x541)](),_0x152365,_0x33784e,_0x2bbadd);if(_0x319dd9)_0x2bbadd=_0x19f4bb;}}return _0x2bbadd;},Game_Action['prototype'][_0x23168f(0xbc6)]=function(_0x3a52c5){const _0x4d1a62=_0x23168f,_0x4c11b9=this[_0x4d1a62(0x718)]||0x0,_0x280abc=VisuMZ[_0x4d1a62(0x895)]['Settings'][_0x4d1a62(0x929)],_0x305df2=_0x3a52c5[_0x4d1a62(0x7d3)]('');_0x280abc[_0x305df2]&&_0x280abc[_0x305df2]['call'](this,_0x4c11b9);let _0x4a0fad=VisuMZ[_0x4d1a62(0x895)]['createKeyJS'](this[_0x4d1a62(0x42e)](),_0x3a52c5);VisuMZ[_0x4d1a62(0x895)]['JS'][_0x4a0fad]&&VisuMZ[_0x4d1a62(0x895)]['JS'][_0x4a0fad][_0x4d1a62(0x88f)](this,this[_0x4d1a62(0x541)](),this[_0x4d1a62(0x541)](),this[_0x4d1a62(0x42e)](),_0x4c11b9);for(const _0x5aa2e1 of this[_0x4d1a62(0x541)]()[_0x4d1a62(0x88b)]()){if(!_0x5aa2e1)continue;_0x4a0fad=VisuMZ['BattleCore'][_0x4d1a62(0x7b2)](_0x5aa2e1,_0x3a52c5),VisuMZ[_0x4d1a62(0x895)]['JS'][_0x4a0fad]&&VisuMZ['BattleCore']['JS'][_0x4a0fad][_0x4d1a62(0x88f)](this,this[_0x4d1a62(0x541)](),this['subject'](),_0x5aa2e1,_0x4c11b9);}},Game_Action[_0x23168f(0xa01)][_0x23168f(0xa11)]=function(){const _0x571211=_0x23168f;return VisuMZ[_0x571211(0x895)]['Settings']['Mechanics'][_0x571211(0x7ab)][_0x571211(0x88f)](this);},Game_Action[_0x23168f(0xa01)][_0x23168f(0x12a)]=function(){const _0x171c2f=_0x23168f;return VisuMZ[_0x171c2f(0x895)][_0x171c2f(0xbac)][_0x171c2f(0x929)][_0x171c2f(0x458)];},Game_Action['prototype'][_0x23168f(0x6f6)]=function(){const _0x397ab4=_0x23168f;if(this[_0x397ab4(0x654)]===_0x397ab4(0x7a9))return![];if(this['_targetBattlerKey']==='all\x20enemies')return![];if(!this[_0x397ab4(0x42e)]())return![];return this[_0x397ab4(0x42e)]()[_0x397ab4(0xae7)]['match'](/<JS TARGETS>/i);},Game_Action[_0x23168f(0xa01)][_0x23168f(0x708)]=function(){const _0x53fc82=_0x23168f;if(this[_0x53fc82(0x654)]===_0x53fc82(0x7a9))return![];if(this['_targetBattlerKey']==='all\x20enemies')return![];if(!this[_0x53fc82(0xbcf)]&&this[_0x53fc82(0x541)]()['isConfused']())return![];if(this[_0x53fc82(0x6f6)]())return!![];if(!this[_0x53fc82(0x42e)]())return![];return typeof this[_0x53fc82(0x42e)]()['scope']==='string';},VisuMZ[_0x23168f(0x895)]['Game_Action_isForOpponent']=Game_Action['prototype'][_0x23168f(0x951)],Game_Action['prototype'][_0x23168f(0x951)]=function(){const _0x5cec9a=_0x23168f;if(this[_0x5cec9a(0x654)]===_0x5cec9a(0x7a9))return![];if(this[_0x5cec9a(0x654)]==='all\x20enemies')return!![];return this['isBattleCoreTargetScope']()&&!this[_0x5cec9a(0x6f6)]()?this[_0x5cec9a(0x5f1)]():VisuMZ['BattleCore'][_0x5cec9a(0x80a)][_0x5cec9a(0x88f)](this);},Game_Action[_0x23168f(0xa01)][_0x23168f(0x5f1)]=function(){const _0x29b3be=_0x23168f,_0x3356b2=String(this[_0x29b3be(0x42e)]()[_0x29b3be(0xb4c)]);if(_0x3356b2['match'](/ANY/i))return!![];return _0x3356b2['match'](/(?:ENEMY|ENEMIES|FOE|FOES)/i);},VisuMZ[_0x23168f(0x895)][_0x23168f(0x21a)]=Game_Action[_0x23168f(0xa01)][_0x23168f(0x788)],Game_Action['prototype'][_0x23168f(0x788)]=function(){const _0x1915ab=_0x23168f;if(this[_0x1915ab(0x654)]===_0x1915ab(0x7a9))return!![];if(this[_0x1915ab(0x654)]===_0x1915ab(0x512))return![];return this['isBattleCoreTargetScope']()&&!this[_0x1915ab(0x6f6)]()?this['isForFriendBattleCore']():VisuMZ[_0x1915ab(0x895)][_0x1915ab(0x21a)][_0x1915ab(0x88f)](this);},Game_Action[_0x23168f(0xa01)][_0x23168f(0x750)]=function(){const _0x5c41d4=_0x23168f,_0x25bd74=String(this['item']()[_0x5c41d4(0xb4c)]);return _0x25bd74[_0x5c41d4(0x26e)](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);},Game_Action['prototype'][_0x23168f(0x427)]=function(){const _0x3b0411=_0x23168f;if(this['isBattleCoreTargetScope']()&&!this['isCustomBattleScope']()){const _0x2a70e8=String(this[_0x3b0411(0x42e)]()[_0x3b0411(0xb4c)]);return _0x2a70e8['match'](/(?:ENEMY|FOE)/i)&&_0x2a70e8[_0x3b0411(0x26e)](/OR/i)&&_0x2a70e8['match'](/(?:ALLY|FRIEND)/i);}else return![];},Game_Action[_0x23168f(0xa01)][_0x23168f(0x307)]=function(){const _0x32f779=_0x23168f;if(this[_0x32f779(0x427)]()){const _0x18b102=String(this[_0x32f779(0x42e)]()[_0x32f779(0xb4c)]);if(_0x18b102[_0x32f779(0x26e)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];}return![];},Game_Action[_0x23168f(0xa01)]['isForAnyoneFocusOpponents']=function(){const _0x4e2927=_0x23168f;if(this['isForAnyone']()){const _0x27fae8=String(this['item']()[_0x4e2927(0xb4c)]);if(_0x27fae8[_0x4e2927(0x26e)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];}return![];},VisuMZ[_0x23168f(0x895)][_0x23168f(0x674)]=Game_Action[_0x23168f(0xa01)][_0x23168f(0x63e)],Game_Action[_0x23168f(0xa01)][_0x23168f(0x63e)]=function(){const _0x1e1795=_0x23168f;if(this['_targetBattlerKey']===_0x1e1795(0x7a9))return!![];return this[_0x1e1795(0x708)]()&&!this['isCustomBattleScope']()?this['isForAliveFriendBattleCore']():VisuMZ['BattleCore']['Game_Action_isForAliveFriend'][_0x1e1795(0x88f)](this);},VisuMZ[_0x23168f(0x895)]['Game_Action_isForDeadFriend']=Game_Action[_0x23168f(0xa01)]['isForDeadFriend'],Game_Action['prototype'][_0x23168f(0x4e2)]=function(){const _0x23ff99=_0x23168f;if(this[_0x23ff99(0x654)]===_0x23ff99(0x7a9))return VisuMZ[_0x23ff99(0x895)][_0x23ff99(0xa20)][_0x23ff99(0x88f)](this);return VisuMZ['BattleCore'][_0x23ff99(0xa20)][_0x23ff99(0x88f)](this);},Game_Action[_0x23168f(0xa01)]['isForAliveFriendBattleCore']=function(){const _0x3ac5dd=_0x23168f;if(this[_0x3ac5dd(0x427)]())return!![];return![];},Game_Action['prototype'][_0x23168f(0x581)]=function(){const _0x47529b=_0x23168f;return this[_0x47529b(0x42e)]()&&this[_0x47529b(0x42e)]()['note'][_0x47529b(0x26e)](/<CANNOT TARGET (?:USER|SELF)>/i);},VisuMZ[_0x23168f(0x895)]['Game_Action_isForOne']=Game_Action[_0x23168f(0xa01)][_0x23168f(0x83b)],Game_Action[_0x23168f(0xa01)][_0x23168f(0x83b)]=function(){const _0x104e07=_0x23168f;if(this[_0x104e07(0x654)]===_0x104e07(0x7a9))return![];if(this[_0x104e07(0x654)]===_0x104e07(0x512))return![];return this[_0x104e07(0x708)]()&&!this[_0x104e07(0x6f6)]()?this[_0x104e07(0x876)]():VisuMZ[_0x104e07(0x895)]['Game_Action_isForOne']['call'](this);},Game_Action[_0x23168f(0xa01)][_0x23168f(0x876)]=function(){const _0x44b8a8=_0x23168f;if(this[_0x44b8a8(0x427)]())return!![];return![];},VisuMZ[_0x23168f(0x895)][_0x23168f(0x6df)]=Game_Action[_0x23168f(0xa01)][_0x23168f(0x9be)],Game_Action[_0x23168f(0xa01)][_0x23168f(0x9be)]=function(){const _0x12066a=_0x23168f;if(this[_0x12066a(0x654)]==='all\x20actors')return![];if(this[_0x12066a(0x654)]===_0x12066a(0x512))return![];return this[_0x12066a(0x708)]()&&!this[_0x12066a(0x6f6)]()?this[_0x12066a(0x123)]():VisuMZ[_0x12066a(0x895)][_0x12066a(0x6df)][_0x12066a(0x88f)](this);},Game_Action[_0x23168f(0xa01)][_0x23168f(0x123)]=function(){const _0x2afc07=_0x23168f,_0x568c7f=String(this['item']()[_0x2afc07(0xb4c)]);return _0x568c7f[_0x2afc07(0x26e)](/(?:RAND|RANDOM)/i);},VisuMZ[_0x23168f(0x895)]['Game_Action_isForAll']=Game_Action[_0x23168f(0xa01)][_0x23168f(0x7e6)],Game_Action[_0x23168f(0xa01)]['isForAll']=function(){const _0x59387c=_0x23168f;if(this[_0x59387c(0x654)]==='all\x20actors')return!![];if(this[_0x59387c(0x654)]==='all\x20enemies')return!![];return VisuMZ[_0x59387c(0x895)][_0x59387c(0x9fe)]['call'](this);},Game_Action[_0x23168f(0xa01)]['canSingleOrMultipleSelect']=function(){const _0x5ec175=_0x23168f;if(!this[_0x5ec175(0x42e)]())return![];if(this[_0x5ec175(0x4e2)]())return![];return(this[_0x5ec175(0x42e)]()[_0x5ec175(0xae7)]||'')['match'](/<SINGLE OR MULTIPLE SELECT>/i);},VisuMZ[_0x23168f(0x895)][_0x23168f(0x44a)]=Game_Action[_0x23168f(0xa01)][_0x23168f(0x7cf)],Game_Action[_0x23168f(0xa01)][_0x23168f(0x7cf)]=function(_0x28a82d){const _0x492792=_0x23168f;if(this[_0x492792(0x581)]()&&_0x28a82d===this[_0x492792(0x541)]())return![];return VisuMZ[_0x492792(0x895)][_0x492792(0x44a)][_0x492792(0x88f)](this,_0x28a82d);},VisuMZ[_0x23168f(0x895)][_0x23168f(0x80e)]=Game_Action['prototype']['itemTargetCandidates'],Game_Action[_0x23168f(0xa01)][_0x23168f(0x853)]=function(){const _0x439330=_0x23168f,_0x5342aa=VisuMZ[_0x439330(0x895)][_0x439330(0x80e)]['call'](this);if(this[_0x439330(0x581)]())_0x5342aa[_0x439330(0xa32)](this[_0x439330(0x541)]());return _0x5342aa;},VisuMZ[_0x23168f(0x895)][_0x23168f(0x432)]=Game_Action['prototype']['needsSelection'],Game_Action[_0x23168f(0xa01)][_0x23168f(0x318)]=function(){const _0x52ee05=_0x23168f;return this[_0x52ee05(0x708)]()&&!this[_0x52ee05(0x6f6)]()?this[_0x52ee05(0xa79)]():VisuMZ['BattleCore'][_0x52ee05(0x432)][_0x52ee05(0x88f)](this);},Game_Action[_0x23168f(0xa01)][_0x23168f(0xa79)]=function(){const _0x3e1b93=_0x23168f,_0x5a3c05=String(this[_0x3e1b93(0x42e)]()[_0x3e1b93(0xb4c)]);if(_0x5a3c05['match'](/RANDOM/i))return![];if(_0x5a3c05[_0x3e1b93(0x26e)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x5a3c05['match'](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];if(_0x5a3c05['match'](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];if(_0x5a3c05[_0x3e1b93(0x26e)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];return VisuMZ[_0x3e1b93(0x895)][_0x3e1b93(0x432)][_0x3e1b93(0x88f)](this);},VisuMZ[_0x23168f(0x895)][_0x23168f(0xb0b)]=Game_Action['prototype'][_0x23168f(0x63f)],Game_Action[_0x23168f(0xa01)][_0x23168f(0x63f)]=function(){const _0x408070=_0x23168f;let _0x34b477=[];return this['isBattleCoreTargetScope']()?this[_0x408070(0x6f6)]()?_0x34b477=this[_0x408070(0x7f8)]():_0x34b477=this[_0x408070(0x7e1)]():_0x34b477=VisuMZ[_0x408070(0x895)][_0x408070(0xb0b)][_0x408070(0x88f)](this),_0x34b477=this[_0x408070(0xb8f)](_0x34b477),_0x34b477;},Game_Action[_0x23168f(0xa01)][_0x23168f(0x459)]=function(){const _0x4df0e8=_0x23168f;return this[_0x4df0e8(0x541)]()['isActor']()&&!this[_0x4df0e8(0x541)]()[_0x4df0e8(0x865)]();},Game_Action[_0x23168f(0xa01)][_0x23168f(0x7f8)]=function(){const _0x241c4b=_0x23168f,_0x45433c=VisuMZ['BattleCore'][_0x241c4b(0x7b2)](this['item'](),'Targets');if(VisuMZ['BattleCore']['JS'][_0x45433c]){targets=VisuMZ[_0x241c4b(0x895)][_0x241c4b(0xb0b)][_0x241c4b(0x88f)](this);const _0x2525a5=VisuMZ[_0x241c4b(0x895)][_0x241c4b(0x7b2)](this[_0x241c4b(0x42e)](),'Targets');return targets=VisuMZ[_0x241c4b(0x895)]['JS'][_0x2525a5]['call'](this,this['subject'](),targets),this['repeatTargets'](targets);}return this[_0x241c4b(0x7e1)]();},Game_Action[_0x23168f(0xa01)][_0x23168f(0x7e1)]=function(){const _0x70e3d1=_0x23168f;let _0xc5ba8a=[];const _0x212ef0=String(this[_0x70e3d1(0x42e)]()['scope']);if(this[_0x70e3d1(0x510)]())return this[_0x70e3d1(0x459)]()?(_0xc5ba8a=this[_0x70e3d1(0x7f0)](),this[_0x70e3d1(0x2bc)](_0xc5ba8a)):(this['_targetIndex']=-0x1,_0xc5ba8a[_0x70e3d1(0x908)](...this[_0x70e3d1(0x50f)]()),this[_0x70e3d1(0x2bc)](_0xc5ba8a));if(this['isForAnyoneFocusFriends']()){if(this[_0x70e3d1(0x459)]())return _0xc5ba8a=this[_0x70e3d1(0x7f0)](),this[_0x70e3d1(0x2bc)](_0xc5ba8a);else{if(Imported[_0x70e3d1(0x1ca)]){if(VisuMZ[_0x70e3d1(0x381)][_0x70e3d1(0x82e)]<1.19){let _0x1ab73e='';_0x1ab73e+='VisuMZ_3_BattleAI\x20needs\x20to\x20be\x20updated\x20',_0x1ab73e+=_0x70e3d1(0x6d6),_0x1ab73e+='with\x20latest\x20version\x20of\x20VisuMZ_1_BattleCore!',alert(_0x1ab73e),SceneManager[_0x70e3d1(0x46e)]();}}return this[_0x70e3d1(0x3dd)]=-0x1,_0xc5ba8a[_0x70e3d1(0x908)](...this['targetsForFriends']()),this[_0x70e3d1(0x2bc)](_0xc5ba8a);}}if(_0x212ef0[_0x70e3d1(0x26e)](/(\d+) RANDOM ANY/i)){let _0x412652=Number(RegExp['$1']);while(_0x412652--){const _0x1e03bd=Math[_0x70e3d1(0xa31)](0x2)===0x0?this['opponentsUnit']():this[_0x70e3d1(0x337)]();_0xc5ba8a['push'](_0x1e03bd['trueRandomTarget']());}return this[_0x70e3d1(0x2bc)](_0xc5ba8a);}if(_0x212ef0[_0x70e3d1(0x26e)](/(\d+) RANDOM (?:ENEMY|ENEMIES|FOE|FOES)/i)){let _0x31894a=Number(RegExp['$1']);while(_0x31894a--){_0xc5ba8a[_0x70e3d1(0x908)](this['opponentsUnit']()[_0x70e3d1(0x8ba)]());}return this[_0x70e3d1(0x2bc)](_0xc5ba8a);}if(_0x212ef0[_0x70e3d1(0x26e)](/(\d+) RANDOM (?:ALLY|ALLIES|FRIEND|FRIENDS)/i)){let _0x42781e=Number(RegExp['$1']);while(_0x42781e--){_0xc5ba8a['push'](this[_0x70e3d1(0x337)]()['trueRandomTarget']());}return this[_0x70e3d1(0x2bc)](_0xc5ba8a);}if(_0x212ef0['match'](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS) (?:BUT|EXCEPT) (?:USER|SELF)/i))return _0xc5ba8a['push'](...this['friendsUnit']()[_0x70e3d1(0x2a6)]()[_0x70e3d1(0x239)](_0x2d3712=>_0x2d3712!==this[_0x70e3d1(0x541)]())),this[_0x70e3d1(0x2bc)](_0xc5ba8a);return VisuMZ['BattleCore'][_0x70e3d1(0xb0b)][_0x70e3d1(0x88f)](this);},Game_Action['prototype']['randomTargets']=function(_0xd19c69){const _0x145e5b=_0x23168f,_0x2b871c=[];for(let _0x5e9e81=0x0;_0x5e9e81<this[_0x145e5b(0x79a)]();_0x5e9e81++){_0x2b871c['push'](_0xd19c69[_0x145e5b(0x8ba)]());}return _0x2b871c;},Game_Action[_0x23168f(0xa01)][_0x23168f(0xb8f)]=function(_0x4c8a7f){const _0xf0a1a5=_0x23168f;if(!this[_0xf0a1a5(0x42e)]())return _0x4c8a7f;const _0x470a4b=this['item']()['note'];if(this[_0xf0a1a5(0x581)]()){this['isForAll']()&&_0x4c8a7f[_0xf0a1a5(0xa32)](this[_0xf0a1a5(0x541)]());if(_0x4c8a7f[_0xf0a1a5(0x2d8)](this[_0xf0a1a5(0x541)]())){const _0x50220e=this[_0xf0a1a5(0x337)]()[_0xf0a1a5(0x2a6)]()[_0xf0a1a5(0xa32)](this['subject']());if(_0x50220e[_0xf0a1a5(0x312)]>0x0){_0x50220e[_0xf0a1a5(0x244)]((_0x3451e0,_0x185f41)=>_0x3451e0[_0xf0a1a5(0x3fc)]()-_0x185f41[_0xf0a1a5(0x3fc)]());while(_0x4c8a7f[_0xf0a1a5(0x2d8)](this[_0xf0a1a5(0x541)]())){const _0x45b56b=_0x4c8a7f[_0xf0a1a5(0xb3c)](this[_0xf0a1a5(0x541)]());_0x4c8a7f[_0x45b56b]=_0x50220e[Math[_0xf0a1a5(0xa31)](_0x50220e[_0xf0a1a5(0x312)])];}}else _0x4c8a7f[_0xf0a1a5(0xa32)](this['subject']());}}return _0x4c8a7f;},VisuMZ[_0x23168f(0x895)]['Game_Action_itemEffectAddAttackState']=Game_Action[_0x23168f(0xa01)]['itemEffectAddAttackState'],Game_Action[_0x23168f(0xa01)][_0x23168f(0x3ec)]=function(_0x5bb599,_0x5d75d5){const _0x45bc08=_0x23168f;VisuMZ['BattleCore']['Game_Action_itemEffectAddAttackState'][_0x45bc08(0x88f)](this,_0x5bb599,_0x5d75d5);if(!_0x5bb599[_0x45bc08(0x199)]())return;for(const _0x8b5f78 of this[_0x45bc08(0x541)]()[_0x45bc08(0x4c0)]()){if(_0x8b5f78===_0x5bb599[_0x45bc08(0x915)]()){let _0x44424e=_0x5d75d5['value1'];_0x44424e*=_0x5bb599['stateRate'](_0x8b5f78),_0x44424e*=this[_0x45bc08(0x541)]()[_0x45bc08(0x83d)](_0x8b5f78),_0x44424e*=this[_0x45bc08(0x536)](_0x5bb599),Math['random']()<_0x44424e&&(_0x5bb599[_0x45bc08(0x884)]=!![],this[_0x45bc08(0x6d3)](_0x5bb599));}}},VisuMZ[_0x23168f(0x895)][_0x23168f(0x7ac)]=Game_Action[_0x23168f(0xa01)]['itemEffectAddNormalState'],Game_Action['prototype']['itemEffectAddNormalState']=function(_0x1fd265,_0xfb1fee){const _0x337fb6=_0x23168f;VisuMZ[_0x337fb6(0x895)]['Game_Action_itemEffectAddNormalState'][_0x337fb6(0x88f)](this,_0x1fd265,_0xfb1fee);if(!_0x1fd265[_0x337fb6(0x199)]())return;if(_0xfb1fee[_0x337fb6(0x36f)]!==_0x1fd265['deathStateId']())return;let _0x230c33=_0xfb1fee[_0x337fb6(0x122)];!this['isCertainHit']()&&(_0x230c33*=_0x1fd265['stateRate'](_0xfb1fee[_0x337fb6(0x36f)]),_0x230c33*=this[_0x337fb6(0x536)](_0x1fd265)),Math['random']()<_0x230c33&&(_0x1fd265[_0x337fb6(0x884)]=!![],this['makeSuccess'](_0x1fd265));},VisuMZ['BattleCore'][_0x23168f(0xbf9)]=Game_Action[_0x23168f(0xa01)][_0x23168f(0x8cf)],Game_Action[_0x23168f(0xa01)][_0x23168f(0x8cf)]=function(){const _0x55f76f=_0x23168f;VisuMZ[_0x55f76f(0x895)][_0x55f76f(0xbf9)][_0x55f76f(0x88f)](this),this[_0x55f76f(0x70f)](),this[_0x55f76f(0x570)]();},Game_Action[_0x23168f(0xa01)]['applyGlobalCommonEventNotetags']=function(){const _0x2058ba=_0x23168f;if(!SceneManager[_0x2058ba(0xbef)]())return;const _0x1e20cf=/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi,_0x3e973b=this[_0x2058ba(0x42e)]()[_0x2058ba(0xae7)][_0x2058ba(0x26e)](_0x1e20cf);if(_0x3e973b)for(const _0x442230 of _0x3e973b){if(!_0x442230)continue;_0x442230[_0x2058ba(0x26e)](_0x1e20cf);const _0x7ccdc3=String(RegExp['$1'])[_0x2058ba(0x221)](',')['map'](_0x16e187=>String(_0x16e187)[_0x2058ba(0xf4)]()),_0x4a8dbe=_0x7ccdc3[_0x2058ba(0x37f)](_0x1edb55=>DataManager[_0x2058ba(0x39e)](_0x1edb55));for(const _0x47e9d1 of _0x4a8dbe){const _0x55a5c9=$dataCommonEvents[_0x47e9d1];_0x55a5c9&&$gameTemp[_0x2058ba(0xb53)](_0x47e9d1);}}},DataManager[_0x23168f(0x39e)]=function(_0x51cb5e){const _0x402dd4=_0x23168f;_0x51cb5e=_0x51cb5e[_0x402dd4(0x1ef)]()[_0x402dd4(0xf4)](),this[_0x402dd4(0x586)]=this[_0x402dd4(0x586)]||{};if(this[_0x402dd4(0x586)][_0x51cb5e])return this[_0x402dd4(0x586)][_0x51cb5e];for(const _0xc844b0 of $dataCommonEvents){if(!_0xc844b0)continue;let _0x4c39eb=_0xc844b0[_0x402dd4(0x611)];_0x4c39eb=_0x4c39eb[_0x402dd4(0x5c0)](/\x1I\[(\d+)\]/gi,''),_0x4c39eb=_0x4c39eb['replace'](/\\I\[(\d+)\]/gi,''),this['_commonEventIDs'][_0x4c39eb[_0x402dd4(0x1ef)]()['trim']()]=_0xc844b0['id'];}return this['_commonEventIDs'][_0x51cb5e]||0x0;},Game_Action[_0x23168f(0xa01)][_0x23168f(0x570)]=function(){const _0x12dbd7=_0x23168f;if(!SceneManager[_0x12dbd7(0xbef)]())return;const _0x4b11a3=VisuMZ[_0x12dbd7(0x895)][_0x12dbd7(0xbac)][_0x12dbd7(0x929)];_0x4b11a3[_0x12dbd7(0x2f3)]&&$gameSwitches[_0x12dbd7(0xa45)](_0x4b11a3['SwitchCritical'],![]),_0x4b11a3[_0x12dbd7(0x5fa)]&&$gameSwitches[_0x12dbd7(0xa45)](_0x4b11a3[_0x12dbd7(0x5fa)],![]),_0x4b11a3[_0x12dbd7(0x15c)]&&$gameVariables[_0x12dbd7(0xa45)](_0x4b11a3[_0x12dbd7(0x15c)],0x0),_0x4b11a3[_0x12dbd7(0x62f)]&&$gameVariables[_0x12dbd7(0xa45)](_0x4b11a3[_0x12dbd7(0x62f)],0x0);},Game_Action['prototype'][_0x23168f(0x17d)]=function(_0x20de8a){const _0x7b6d71=_0x23168f;if(!SceneManager[_0x7b6d71(0xbef)]())return;if(!_0x20de8a)return;const _0x3e65f9=_0x20de8a[_0x7b6d71(0x759)](),_0x4e07f7=VisuMZ['BattleCore'][_0x7b6d71(0xbac)]['Mechanics'];_0x4e07f7['SwitchCritical']&&_0x3e65f9[_0x7b6d71(0xb9d)]&&$gameSwitches[_0x7b6d71(0xa45)](_0x4e07f7[_0x7b6d71(0x2f3)],!![]);_0x4e07f7[_0x7b6d71(0x5fa)]&&(_0x3e65f9[_0x7b6d71(0x668)]||_0x3e65f9['evaded'])&&$gameSwitches['setValue'](_0x4e07f7['SwitchMissEvade'],!![]);if(_0x4e07f7[_0x7b6d71(0x15c)]){let _0x32c2c3=$gameVariables['value'](_0x4e07f7[_0x7b6d71(0x15c)]);_0x3e65f9[_0x7b6d71(0x187)]>0x0&&(_0x32c2c3+=Math[_0x7b6d71(0x1c8)](_0x3e65f9[_0x7b6d71(0x187)])),$gameVariables[_0x7b6d71(0xa45)](_0x4e07f7[_0x7b6d71(0x15c)],_0x32c2c3);}if(_0x4e07f7[_0x7b6d71(0x62f)]){let _0x5257b5=$gameVariables[_0x7b6d71(0x706)](_0x4e07f7['VariableHeal']);_0x3e65f9[_0x7b6d71(0x187)]<0x0&&(_0x5257b5+=Math[_0x7b6d71(0x1c8)](_0x3e65f9[_0x7b6d71(0x187)])),$gameVariables['setValue'](_0x4e07f7[_0x7b6d71(0x62f)],_0x5257b5);}},VisuMZ[_0x23168f(0x895)][_0x23168f(0x8f2)]={'lifeSteaItem':/<(.*?) (?:LIFE|MANA) STEAL:[ ](\d+)([%％])>/gi,'lifeStealTrait':/<(.*?) (?:LIFE|MANA) STEAL (.*?):[ ]([\+\-]\d+)([%％])>/gi,'cancelLifeSteal':/<CANCEL LIFE STEAL>/i,'cancelHpLifeSteal':/<CANCEL HP LIFE STEAL>/i,'cancelMpLifeSteal':/<CANCEL MP LIFE STEAL>/i,'guardLifeSteal':/<GUARD LIFE STEAL>/i,'guardHpLifeSteal':/<GUARD HP LIFE STEAL>/i,'guardMpLifeSteal':/<GUARD MP LIFE STEAL>/i,'disarmLifeSteal':/<DISARM LIFE STEAL>/i,'disarmHpLifeSteal':/<DISARM HP LIFE STEAL>/i,'disarmMpLifeSteal':/<DISARM MP LIFE STEAL>/i,'negativeLifeSteal':/<REVERSE LIFE STEAL>/i,'negativeHpLifeSteal':/<REVERSE HP LIFE STEAL>/i,'negativeMpLifeSteal':/<REVERSE MP LIFE STEAL>/i},VisuMZ[_0x23168f(0x895)]['Game_Action_executeHpDamage']=Game_Action[_0x23168f(0xa01)][_0x23168f(0x129)],Game_Action[_0x23168f(0xa01)][_0x23168f(0x129)]=function(_0x5befda,_0x5b1aab){const _0x2d8054=_0x23168f;VisuMZ[_0x2d8054(0x895)][_0x2d8054(0x210)][_0x2d8054(0x88f)](this,_0x5befda,_0x5b1aab);!this[_0x2d8054(0x490)]()&&_0x5befda&&_0x5befda[_0x2d8054(0x759)]()[_0x2d8054(0x187)]>0x0&&this['performLifeSteal']('HP',_0x5befda,_0x5befda[_0x2d8054(0x759)]()[_0x2d8054(0x187)]);if(_0x5befda){this[_0x2d8054(0x3f5)]=this[_0x2d8054(0x3f5)]||{};const _0x1f3ec0=_0x5befda[_0x2d8054(0x81c)]();this['_executeHpDamage'][_0x1f3ec0]=_0x5b1aab;}},Game_Action[_0x23168f(0xa01)][_0x23168f(0x1b1)]=function(_0x3789e7){const _0x4584d7=_0x23168f;this[_0x4584d7(0x3f5)]=this['_executeHpDamage']||{};const _0x4d08bb=_0x3789e7[_0x4584d7(0x81c)]();return this['_executeHpDamage'][_0x4d08bb]||0x0;},VisuMZ[_0x23168f(0x895)][_0x23168f(0x69b)]=Game_Action[_0x23168f(0xa01)][_0x23168f(0xa50)],Game_Action['prototype'][_0x23168f(0xa50)]=function(_0x28f13c,_0x2b4e60){const _0x364095=_0x23168f;VisuMZ['BattleCore'][_0x364095(0x69b)][_0x364095(0x88f)](this,_0x28f13c,_0x2b4e60),!this[_0x364095(0x490)]()&&_0x28f13c&&_0x28f13c['result']()[_0x364095(0x416)]>0x0&&this[_0x364095(0x757)]('MP',_0x28f13c,_0x28f13c[_0x364095(0x759)]()[_0x364095(0x416)]);},Game_Action[_0x23168f(0xa01)][_0x23168f(0x757)]=function(_0x3b7522,_0x1698b2,_0xe37a15){const _0x20ba2f=_0x23168f;_0x3b7522=_0x3b7522[_0x20ba2f(0x1ef)]()[_0x20ba2f(0xf4)]();const _0x40d99d=this[_0x20ba2f(0x8c8)](_0x3b7522,_0x1698b2);if(_0x40d99d<=0x0)return;const _0x4a7f05=Math[_0x20ba2f(0x1fc)](_0xe37a15*_0x40d99d);if(_0x4a7f05<=0x0)return;let _0x55976d=this['subject']();if(this[_0x20ba2f(0x6c8)])_0x55976d=this[_0x20ba2f(0x6c8)];const _0x4ff1e8=_0x1698b2['isNegativeLifeSteal'](_0x3b7522)?-0x1:0x1;if(_0x3b7522==='HP')_0x55976d[_0x20ba2f(0x714)](_0x4ff1e8*_0x4a7f05);if(_0x3b7522==='MP')_0x55976d[_0x20ba2f(0x7ee)](_0x4ff1e8*_0x4a7f05);},Game_Action[_0x23168f(0xa01)][_0x23168f(0x8c8)]=function(_0x218a5e,_0x15a158){const _0x3cc9ad=_0x23168f;if(this['isCancelLifeSteal'](_0x218a5e))return 0x0;if(this[_0x3cc9ad(0x541)]()[_0x3cc9ad(0xa24)](_0x218a5e))return 0x0;if(_0x15a158[_0x3cc9ad(0x411)](_0x218a5e))return 0x0;let _0x1caaa4=0x0;return _0x1caaa4+=this[_0x3cc9ad(0xabf)](_0x218a5e),_0x1caaa4+=this['subject']()[_0x3cc9ad(0x8c8)](_0x218a5e,this[_0x3cc9ad(0x42e)]()[_0x3cc9ad(0xa55)]),_0x1caaa4[_0x3cc9ad(0x159)](0x0,0x1);},Game_Action[_0x23168f(0xa01)][_0x23168f(0x943)]=function(_0x135e54){const _0x52313e=_0x23168f;_0x135e54=_0x135e54[_0x52313e(0x1ef)]()[_0x52313e(0xf4)]();const _0x15281e=VisuMZ['BattleCore'][_0x52313e(0x8f2)],_0x4833f0=this[_0x52313e(0x42e)]()[_0x52313e(0xae7)]||'';if(_0x4833f0[_0x52313e(0x26e)](_0x15281e[_0x52313e(0xad0)]))return!![];if(_0x135e54==='HP'&&_0x4833f0[_0x52313e(0x26e)](_0x15281e[_0x52313e(0x554)]))return!![];if(_0x135e54==='MP'&&_0x4833f0[_0x52313e(0x26e)](_0x15281e[_0x52313e(0x683)]))return!![];return![];},Game_Action[_0x23168f(0xa01)][_0x23168f(0xabf)]=function(_0x4d0ac0){const _0x363534=_0x23168f,_0x5a5d00=VisuMZ[_0x363534(0x895)]['LifeStealRegExp'],_0x522bb3=this[_0x363534(0x42e)]()['note']||'';_0x4d0ac0=_0x4d0ac0[_0x363534(0x1ef)]()[_0x363534(0xf4)]();const _0x303e85=_0x522bb3['match'](_0x5a5d00[_0x363534(0x747)]);if(_0x303e85)for(const _0x2b6af5 of _0x303e85){_0x2b6af5[_0x363534(0x26e)](_0x5a5d00[_0x363534(0x747)]);const _0x466b43=String(RegExp['$1'])['toUpperCase']()['trim'](),_0x522487=Number(RegExp['$2'])*0.01;if(_0x466b43!==_0x4d0ac0)continue;return _0x522487;}return 0x0;},Game_BattlerBase[_0x23168f(0xa01)][_0x23168f(0x8c8)]=function(_0x547091,_0x46a9a7){const _0x463e88=_0x23168f,_0x3a6131=VisuMZ['BattleCore'][_0x463e88(0x8f2)];let _0x1e7263=0x0;_0x547091=_0x547091['toUpperCase']()[_0x463e88(0xf4)]();for(const _0x1e3bc7 of this[_0x463e88(0x88b)]()){if(!_0x1e3bc7)continue;const _0x211e20=_0x1e3bc7[_0x463e88(0xae7)]||'',_0x5d0d94=_0x211e20[_0x463e88(0x26e)](_0x3a6131[_0x463e88(0x655)]);if(_0x5d0d94)for(const _0x476da9 of _0x5d0d94){_0x476da9[_0x463e88(0x26e)](_0x3a6131['lifeStealTrait']);const _0x1f2642=String(RegExp['$1'])[_0x463e88(0x1ef)]()[_0x463e88(0xf4)](),_0x390a17=String(RegExp['$2']),_0x2a6bfa=Number(RegExp['$3'])*0.01;if(_0x1f2642!==_0x547091)continue;if(_0x46a9a7===Game_Action[_0x463e88(0x8b9)]&&_0x390a17[_0x463e88(0x26e)](/CERTAIN/i))_0x1e7263+=_0x2a6bfa;else{if(_0x46a9a7===Game_Action[_0x463e88(0x7fb)]&&_0x390a17[_0x463e88(0x26e)](/PHYS/i))_0x1e7263+=_0x2a6bfa;else _0x46a9a7===Game_Action['HITTYPE_MAGICAL']&&_0x390a17[_0x463e88(0x26e)](/MAGIC/i)&&(_0x1e7263+=_0x2a6bfa);}}}return _0x1e7263;},Game_BattlerBase['prototype']['isDisarmLifeSteal']=function(_0x4d5cf6){const _0x59ffa2=_0x23168f;_0x4d5cf6=_0x4d5cf6[_0x59ffa2(0x1ef)]()['trim']();const _0x5a5a89=VisuMZ['BattleCore'][_0x59ffa2(0x8f2)];for(const _0x1cdef5 of this['traitObjects']()){if(!_0x1cdef5)continue;const _0x5dea84=_0x1cdef5['note']||'';if(_0x5dea84[_0x59ffa2(0x26e)](_0x5a5a89[_0x59ffa2(0xad1)]))return!![];if(_0x4d5cf6==='HP'&&_0x5dea84[_0x59ffa2(0x26e)](_0x5a5a89[_0x59ffa2(0x1e8)]))return!![];if(_0x4d5cf6==='MP'&&_0x5dea84['match'](_0x5a5a89[_0x59ffa2(0x5a6)]))return!![];}return![];},Game_BattlerBase[_0x23168f(0xa01)][_0x23168f(0x3d7)]=function(_0x202a52){const _0x6c3d6b=_0x23168f;_0x202a52=_0x202a52[_0x6c3d6b(0x1ef)]()[_0x6c3d6b(0xf4)]();const _0x29a500=VisuMZ[_0x6c3d6b(0x895)][_0x6c3d6b(0x8f2)];for(const _0x2c9afd of this[_0x6c3d6b(0x88b)]()){if(!_0x2c9afd)continue;const _0x24af29=_0x2c9afd['note']||'';if(_0x24af29[_0x6c3d6b(0x26e)](_0x29a500[_0x6c3d6b(0x69d)]))return!![];if(_0x202a52==='HP'&&_0x24af29[_0x6c3d6b(0x26e)](_0x29a500[_0x6c3d6b(0x913)]))return!![];if(_0x202a52==='MP'&&_0x24af29['match'](_0x29a500[_0x6c3d6b(0x96a)]))return!![];}return![];},Game_BattlerBase[_0x23168f(0xa01)][_0x23168f(0x411)]=function(_0x58cca2){const _0x125f56=_0x23168f;_0x58cca2=_0x58cca2[_0x125f56(0x1ef)]()[_0x125f56(0xf4)]();const _0xcd4fb6=VisuMZ['BattleCore']['LifeStealRegExp'];for(const _0x482696 of this[_0x125f56(0x88b)]()){if(!_0x482696)continue;const _0x5bf9dd=_0x482696[_0x125f56(0xae7)]||'';if(_0x5bf9dd['match'](_0xcd4fb6[_0x125f56(0x20b)]))return!![];if(_0x58cca2==='HP'&&_0x5bf9dd['match'](_0xcd4fb6[_0x125f56(0x83a)]))return!![];if(_0x58cca2==='MP'&&_0x5bf9dd[_0x125f56(0x26e)](_0xcd4fb6[_0x125f56(0x1dd)]))return!![];}return![];},VisuMZ['BattleCore']['Game_BattlerBase_initMembers']=Game_BattlerBase[_0x23168f(0xa01)]['initMembers'],Game_BattlerBase[_0x23168f(0xa01)][_0x23168f(0xadb)]=function(){const _0x5920ad=_0x23168f;VisuMZ[_0x5920ad(0x895)]['Game_BattlerBase_initMembers'][_0x5920ad(0x88f)](this),this[_0x5920ad(0x26b)]();},Game_BattlerBase[_0x23168f(0xa01)][_0x23168f(0x26b)]=function(){const _0x430f2a=_0x23168f;this[_0x430f2a(0x6f1)]=![];},VisuMZ[_0x23168f(0x895)][_0x23168f(0xbb4)]=Game_BattlerBase['prototype'][_0x23168f(0xa39)],Game_BattlerBase['prototype']['refresh']=function(){const _0x3809f5=_0x23168f;this['_cache']={},VisuMZ[_0x3809f5(0x895)][_0x3809f5(0xbb4)][_0x3809f5(0x88f)](this);},Game_BattlerBase[_0x23168f(0xa01)][_0x23168f(0x8d4)]=function(_0x54d769){const _0x58894e=_0x23168f;return this[_0x58894e(0x9f4)]=this[_0x58894e(0x9f4)]||{},this[_0x58894e(0x9f4)][_0x54d769]!==undefined;},Game_BattlerBase[_0x23168f(0xa01)][_0x23168f(0x9b5)]=function(){const _0x2d173a=_0x23168f;if(this[_0x2d173a(0x9f4)][_0x2d173a(0x9b5)]!==undefined)return this[_0x2d173a(0x9f4)][_0x2d173a(0x9b5)];const _0x1337db=/<DAMAGE CAP:[ ](\d+)>/i,_0x5bf35c=this[_0x2d173a(0x88b)]()[_0x2d173a(0x37f)](_0x240714=>_0x240714&&_0x240714[_0x2d173a(0xae7)][_0x2d173a(0x26e)](_0x1337db)?Number(RegExp['$1']):0x0);let _0x546756=_0x5bf35c[_0x2d173a(0x312)]>0x0?Math[_0x2d173a(0x705)](..._0x5bf35c):0x0;if(_0x546756<=0x0)_0x546756=VisuMZ[_0x2d173a(0x895)][_0x2d173a(0xbac)][_0x2d173a(0x642)][_0x2d173a(0x545)];return this[_0x2d173a(0x9f4)]['hardDamageCap']=_0x546756,this[_0x2d173a(0x9f4)]['hardDamageCap'];},Game_BattlerBase[_0x23168f(0xa01)]['softDamageCapRate']=function(){const _0x2921df=_0x23168f;if(this[_0x2921df(0x9f4)]['softDamageCap']!==undefined)return this['_cache']['softDamageCap'];let _0x28c413=VisuMZ[_0x2921df(0x895)][_0x2921df(0xbac)]['Damage']['DefaultSoftCap'];const _0x4c3d11=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0xa997fa=this['traitObjects']()['map'](_0x8f686e=>_0x8f686e&&_0x8f686e[_0x2921df(0xae7)][_0x2921df(0x26e)](_0x4c3d11)?Number(RegExp['$1'])/0x64:0x0);return _0x28c413=_0xa997fa[_0x2921df(0x34f)]((_0x305501,_0x494d81)=>_0x305501+_0x494d81,_0x28c413),this[_0x2921df(0x9f4)][_0x2921df(0x2ae)]=_0x28c413,this[_0x2921df(0x9f4)][_0x2921df(0x2ae)]['clamp'](0.01,0x1);},VisuMZ[_0x23168f(0x895)][_0x23168f(0xb42)]=Game_BattlerBase[_0x23168f(0xa01)][_0x23168f(0x9e5)],Game_BattlerBase['prototype'][_0x23168f(0x9e5)]=function(){const _0x4aba6c=_0x23168f;VisuMZ[_0x4aba6c(0x895)][_0x4aba6c(0xb42)][_0x4aba6c(0x88f)](this),SceneManager[_0x4aba6c(0xbef)]()&&(this[_0x4aba6c(0x67a)](_0x4aba6c(0x5ed)),this[_0x4aba6c(0x7da)]=undefined);},Game_BattlerBase[_0x23168f(0xa01)][_0x23168f(0xbb5)]=function(){const _0x46b1a0=_0x23168f;if(!SceneManager[_0x46b1a0(0xbef)]())return null;if(!SceneManager['_scene'][_0x46b1a0(0xa73)])return null;return SceneManager['_scene'][_0x46b1a0(0xa73)]['findTargetSprite'](this);},Game_BattlerBase['prototype'][_0x23168f(0x4e6)]=function(){const _0x5bd7e2=_0x23168f;return VisuMZ['BattleCore'][_0x5bd7e2(0xbac)][_0x5bd7e2(0x33d)][_0x5bd7e2(0x477)];},Game_BattlerBase[_0x23168f(0xa01)]['svBattlerAnchorY']=function(){const _0x5817d7=_0x23168f;return VisuMZ[_0x5817d7(0x895)]['Settings']['Actor'][_0x5817d7(0x695)];},Game_BattlerBase[_0x23168f(0xa01)]['svBattlerShadowVisible']=function(){const _0x11496c=_0x23168f;return this[_0x11496c(0x36b)]&&this['isActor']()?VisuMZ[_0x11496c(0x895)][_0x11496c(0xbac)][_0x11496c(0x33d)]['Shadow']:VisuMZ['BattleCore'][_0x11496c(0xbac)][_0x11496c(0xbeb)]['Shadow'];},Game_BattlerBase[_0x23168f(0xa01)][_0x23168f(0x178)]=function(){return!![];},Game_BattlerBase[_0x23168f(0xa01)]['battleUIOffsetX']=function(){return 0x0;},Game_BattlerBase['prototype'][_0x23168f(0x658)]=function(){return 0x0;},Game_BattlerBase[_0x23168f(0xa01)][_0x23168f(0x9d9)]=function(_0x1a58d2){const _0x12181b=_0x23168f;if(!_0x1a58d2)return 0x0;let _0x57442b=0x0;const _0x394091=_0x1a58d2[_0x12181b(0xae7)];return _0x394091[_0x12181b(0x26e)](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)&&(_0x57442b+=Number(RegExp['$1'])),_0x394091[_0x12181b(0x26e)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x57442b+=Number(RegExp['$1'])),_0x57442b;},Game_BattlerBase[_0x23168f(0xa01)][_0x23168f(0x9fc)]=function(_0x41695a){const _0x1b58eb=_0x23168f;if(!_0x41695a)return 0x0;let _0x5b7f5b=0x0;const _0x4da65e=_0x41695a['note'];return _0x4da65e['match'](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&(_0x5b7f5b+=Number(RegExp['$1'])),_0x4da65e[_0x1b58eb(0x26e)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x5b7f5b+=Number(RegExp['$2'])),_0x5b7f5b;},VisuMZ[_0x23168f(0x895)][_0x23168f(0x722)]=Game_BattlerBase[_0x23168f(0xa01)][_0x23168f(0x4c7)],Game_BattlerBase[_0x23168f(0xa01)][_0x23168f(0x4c7)]=function(_0x1fde3c){const _0x5cff95=_0x23168f;if(_0x1fde3c===this[_0x5cff95(0x915)]()&&this[_0x5cff95(0x199)]())return!![];return VisuMZ[_0x5cff95(0x895)][_0x5cff95(0x722)]['call'](this,_0x1fde3c);},Game_BattlerBase[_0x23168f(0xa01)][_0x23168f(0x199)]=function(){const _0x1346df=_0x23168f;return this[_0x1346df(0x6f1)];},Game_BattlerBase[_0x23168f(0xa01)]['setImmortal']=function(_0x321087){const _0x13efe6=_0x23168f;_0x321087?this['addImmortal']():this[_0x13efe6(0xb73)]();},Game_BattlerBase[_0x23168f(0xa01)][_0x23168f(0x5aa)]=function(){const _0x2a1b2e=_0x23168f;if(this[_0x2a1b2e(0x14e)]())return;this['_immortal']=!![],this[_0x2a1b2e(0x884)]=![];},Game_BattlerBase[_0x23168f(0xa01)][_0x23168f(0xb73)]=function(){const _0x282496=_0x23168f,_0x49ac5e=this['isAlive']();this[_0x282496(0x6f1)]=![],_0x49ac5e&&this[_0x282496(0x884)]&&this['die'](),this[_0x282496(0x884)]=![],this['refresh'](),this[_0x282496(0x14e)]()&&_0x49ac5e&&(this[_0x282496(0x5dd)](),this[_0x282496(0xbec)]());},VisuMZ[_0x23168f(0x895)][_0x23168f(0x457)]=Game_Action['prototype']['numRepeats'],Game_Action[_0x23168f(0xa01)][_0x23168f(0x323)]=function(){const _0x293209=_0x23168f;return this[_0x293209(0x42e)]()?VisuMZ[_0x293209(0x895)][_0x293209(0x457)][_0x293209(0x88f)](this):0x0;},VisuMZ[_0x23168f(0x895)][_0x23168f(0x21d)]=Game_Action[_0x23168f(0xa01)][_0x23168f(0x95f)],Game_Action['prototype'][_0x23168f(0x95f)]=function(){const _0x104b73=_0x23168f;if(this[_0x104b73(0x541)]()&&this['subject']()[_0x104b73(0x73a)]())VisuMZ[_0x104b73(0x895)][_0x104b73(0x21d)]['call'](this);else BattleManager['_bypassCanCounterCheck']?VisuMZ[_0x104b73(0x895)][_0x104b73(0x21d)][_0x104b73(0x88f)](this):this[_0x104b73(0x176)]();},VisuMZ[_0x23168f(0x895)]['Game_BattlerBase_canAttack']=Game_BattlerBase[_0x23168f(0xa01)][_0x23168f(0x73a)],Game_BattlerBase[_0x23168f(0xa01)][_0x23168f(0x73a)]=function(){const _0x50f0f0=_0x23168f;if(!this[_0x50f0f0(0x8ed)]())return![];return VisuMZ[_0x50f0f0(0x895)][_0x50f0f0(0xb6a)][_0x50f0f0(0x88f)](this);},Game_BattlerBase['prototype']['canAttackBattleCore']=function(){const _0x125986=_0x23168f;for(const _0xc5a15b of this['traitObjects']()){if(!_0xc5a15b)continue;if(_0xc5a15b['note'][_0x125986(0x26e)](/<(?:ATTACK SEAL|SEAL ATTACK)>/i))return![];}return!![];},VisuMZ[_0x23168f(0x895)][_0x23168f(0xad9)]=Game_Action[_0x23168f(0xa01)][_0x23168f(0xa69)],Game_Action[_0x23168f(0xa01)][_0x23168f(0xa69)]=function(){const _0x2dac9f=_0x23168f;this['subject']()['canGuard']()&&VisuMZ[_0x2dac9f(0x895)][_0x2dac9f(0xad9)][_0x2dac9f(0x88f)](this);},VisuMZ[_0x23168f(0x895)][_0x23168f(0xbbc)]=Game_BattlerBase[_0x23168f(0xa01)][_0x23168f(0x629)],Game_BattlerBase[_0x23168f(0xa01)]['canGuard']=function(){const _0x1cc201=_0x23168f;if(!this[_0x1cc201(0x925)]())return![];return VisuMZ[_0x1cc201(0x895)][_0x1cc201(0xbbc)]['call'](this);},Game_BattlerBase[_0x23168f(0xa01)][_0x23168f(0x925)]=function(){const _0x1e8589=_0x23168f;for(const _0x6d1818 of this['traitObjects']()){if(!_0x6d1818)continue;if(_0x6d1818[_0x1e8589(0xae7)]['match'](/<(?:GUARD SEAL|SEAL GUARD)>/i))return![];}return!![];},Game_BattlerBase[_0x23168f(0xa01)][_0x23168f(0x2f1)]=function(){const _0x27d455=_0x23168f;for(const _0x3e9bc3 of this[_0x27d455(0x88b)]()){if(!_0x3e9bc3)continue;if(_0x3e9bc3[_0x27d455(0xae7)][_0x27d455(0x26e)](/<(?:ITEM SEAL|SEAL ITEM|SEAL ITEMS)>/i))return![];}return!![];},VisuMZ[_0x23168f(0x895)][_0x23168f(0x70d)]=Game_BattlerBase['prototype'][_0x23168f(0x2e8)],Game_BattlerBase['prototype'][_0x23168f(0x2e8)]=function(_0x27edc3){const _0xa01cec=_0x23168f;if(_0x27edc3&&_0x27edc3['note'][_0xa01cec(0x26e)](/<CANNOT TARGET (?:USER|SELF)>/i)){const _0x259438=this[_0xa01cec(0x337)]()[_0xa01cec(0x2a6)]();if(_0x259438['length']===0x1&&_0x259438[0x0]===this)return![];}return VisuMZ['BattleCore'][_0xa01cec(0x70d)][_0xa01cec(0x88f)](this,_0x27edc3);},Game_Battler[_0x23168f(0xa01)][_0x23168f(0x12a)]=function(){const _0x4ba279=_0x23168f;return VisuMZ[_0x4ba279(0x895)]['Settings'][_0x4ba279(0x929)][_0x4ba279(0x458)];},VisuMZ[_0x23168f(0x895)][_0x23168f(0x8e6)]=Game_Battler[_0x23168f(0xa01)][_0x23168f(0x880)],Game_Battler[_0x23168f(0xa01)][_0x23168f(0x880)]=function(){const _0x5ee4f4=_0x23168f;if(SceneManager[_0x5ee4f4(0xbef)]()){if(BattleManager['isTpb']()){if(this[_0x5ee4f4(0xaf1)]()<=0x0)return;}else{if($gameTroop[_0x5ee4f4(0xaf1)]()<=0x0)return;}}if(SceneManager[_0x5ee4f4(0xbef)]()&&BattleManager['isTpb']()&&this[_0x5ee4f4(0x6ef)]===Graphics[_0x5ee4f4(0xb77)])return;this['_lastRegenFrameCount']=Graphics[_0x5ee4f4(0xb77)],SceneManager[_0x5ee4f4(0xbef)]()&&this[_0x5ee4f4(0x5cf)](_0x5ee4f4(0x825)),VisuMZ[_0x5ee4f4(0x895)][_0x5ee4f4(0x8e6)]['call'](this),SceneManager[_0x5ee4f4(0xbef)]()&&(this['regenerateAllBattleCore'](),this[_0x5ee4f4(0x5cf)]('PostRegenerateJS'));},Game_Battler[_0x23168f(0xa01)]['regenerateAllBattleCore']=function(){const _0x3b6e65=_0x23168f;if(SceneManager[_0x3b6e65(0xbef)]())for(const _0x2334bf of this[_0x3b6e65(0x88b)]()){if(!_0x2334bf)continue;this[_0x3b6e65(0x6e7)](_0x2334bf);}},Game_Battler[_0x23168f(0xa01)][_0x23168f(0x6e7)]=function(_0x470473){const _0x1e570d=_0x23168f;if(!Imported[_0x1e570d(0x74a)])return;if(!SceneManager[_0x1e570d(0xbef)]())return;if(this[_0x1e570d(0x14e)]())return;if(this['isHidden']())return;if(_0x470473[_0x1e570d(0xae7)][_0x1e570d(0x26e)](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){const _0x66f8e1=Number(RegExp['$1']);$gameTemp[_0x1e570d(0xbb0)]([this],_0x66f8e1,![],![]);}},VisuMZ[_0x23168f(0x895)]['Game_Battler_startTpbTurn']=Game_Battler[_0x23168f(0xa01)]['startTpbTurn'],Game_Battler[_0x23168f(0xa01)][_0x23168f(0xba9)]=function(){const _0x1f96e0=_0x23168f;this[_0x1f96e0(0x5cf)](_0x1f96e0(0x44d)),VisuMZ[_0x1f96e0(0x895)]['Game_Battler_startTpbTurn'][_0x1f96e0(0x88f)](this),this[_0x1f96e0(0x5cf)]('PostStartTurnJS');},VisuMZ[_0x23168f(0x895)][_0x23168f(0x3f1)]=Game_Battler[_0x23168f(0xa01)][_0x23168f(0x569)],Game_Battler[_0x23168f(0xa01)]['onTurnEnd']=function(){const _0x125fbf=_0x23168f;this['processBattleCoreJS'](_0x125fbf(0x5f5)),VisuMZ[_0x125fbf(0x895)][_0x125fbf(0x3f1)][_0x125fbf(0x88f)](this),VisuMZ[_0x125fbf(0x895)]['Settings'][_0x125fbf(0x929)][_0x125fbf(0x1cc)]&&this[_0x125fbf(0x8d7)](),this[_0x125fbf(0x5cf)]('PostEndTurnJS');},Game_Battler[_0x23168f(0xa01)][_0x23168f(0x5cf)]=function(_0x4b08be){const _0x5eccc8=_0x23168f;if(this[_0x5eccc8(0x96d)]||this[_0x5eccc8(0x781)])return;const _0x1f4e27=VisuMZ[_0x5eccc8(0x895)][_0x5eccc8(0xbac)][_0x5eccc8(0x929)];if(_0x1f4e27[_0x4b08be])_0x1f4e27[_0x4b08be]['call'](this);for(const _0xb7f396 of this[_0x5eccc8(0x88b)]()){if(!_0xb7f396)continue;key=VisuMZ[_0x5eccc8(0x895)][_0x5eccc8(0x7b2)](_0xb7f396,_0x4b08be),VisuMZ['BattleCore']['JS'][key]&&VisuMZ[_0x5eccc8(0x895)]['JS'][key][_0x5eccc8(0x88f)](this,this,this,_0xb7f396,0x0);}},Game_Battler['prototype'][_0x23168f(0x3ae)]=function(){const _0x4d450a=_0x23168f;return VisuMZ[_0x4d450a(0x895)][_0x4d450a(0xbac)][_0x4d450a(0x33d)][_0x4d450a(0x2b9)]||![];},Game_Battler[_0x23168f(0xa01)]['isChanting']=function(){const _0x2807a0=_0x23168f;if(this['isWaiting']()){if(this[_0x2807a0(0x3ae)]()){if(this[_0x2807a0(0x394)][_0x2807a0(0xdb)](_0xb026da=>_0xb026da['item']()&&_0xb026da[_0x2807a0(0x2f2)]()))return!![];}else{if(this['_actions']['some'](_0x43d6f0=>_0x43d6f0[_0x2807a0(0x42e)]()&&_0x43d6f0[_0x2807a0(0x33c)]()))return!![];}}if(BattleManager[_0x2807a0(0x3da)]()&&this[_0x2807a0(0x70c)]===_0x2807a0(0x241))return this[_0x2807a0(0x3ae)]()?this['currentAction']()&&this[_0x2807a0(0x7ad)]()[_0x2807a0(0x42e)]()&&this[_0x2807a0(0x7ad)]()[_0x2807a0(0x2f2)]():this['currentAction']()&&this['currentAction']()[_0x2807a0(0x42e)]()&&this[_0x2807a0(0x7ad)]()[_0x2807a0(0x33c)]();return![];},Game_Battler[_0x23168f(0xa01)][_0x23168f(0x2b5)]=function(){const _0x5e8927=_0x23168f;if(BattleManager[_0x5e8927(0x3da)]()&&this['_tpbState']===_0x5e8927(0x241))return this[_0x5e8927(0x3ae)]()?this[_0x5e8927(0x7ad)]()&&this[_0x5e8927(0x7ad)]()[_0x5e8927(0x42e)]()&&!this[_0x5e8927(0x7ad)]()[_0x5e8927(0x2f2)]():this[_0x5e8927(0x7ad)]()&&this[_0x5e8927(0x7ad)]()[_0x5e8927(0x42e)]()&&!this[_0x5e8927(0x7ad)]()[_0x5e8927(0x33c)]();return![];},VisuMZ['BattleCore']['Game_Battler_clearDamagePopup']=Game_Battler[_0x23168f(0xa01)][_0x23168f(0xbd7)],Game_Battler[_0x23168f(0xa01)]['clearDamagePopup']=function(){const _0x3d68d5=_0x23168f;VisuMZ['BattleCore'][_0x3d68d5(0x2be)][_0x3d68d5(0x88f)](this),this['_damagePopupArray']=[];},Game_Battler[_0x23168f(0xa01)][_0x23168f(0x6c6)]=function(){const _0x50b005=_0x23168f;if(!this['_damagePopupArray'])this['clearDamagePopup']();return this['_damagePopupArray'][_0x50b005(0x312)]>0x0;},Game_Battler[_0x23168f(0xa01)][_0x23168f(0x292)]=function(){const _0x370db2=_0x23168f;if(!SceneManager[_0x370db2(0xbef)]())return;if(BattleManager[_0x370db2(0x1bc)]())return;if(!this[_0x370db2(0x4da)])this[_0x370db2(0xbd7)]();this[_0x370db2(0xad8)]();const _0xa5d113=this[_0x370db2(0xbb5)]();if(_0xa5d113)_0xa5d113['setupDamagePopup']();},Game_Battler[_0x23168f(0xa01)]['createSeparateDamagePopups']=function(){const _0x1c9526=_0x23168f,_0x5e8e19=this[_0x1c9526(0x759)]();if(_0x5e8e19[_0x1c9526(0x668)]||_0x5e8e19[_0x1c9526(0x3ba)]){const _0x539ee2=JsonEx[_0x1c9526(0x5fe)](_0x5e8e19);_0x539ee2[_0x1c9526(0x1e0)]=![],_0x539ee2[_0x1c9526(0x416)]=0x0,this['_damagePopupArray'][_0x1c9526(0x908)](_0x539ee2);if(!_0x5e8e19[_0x1c9526(0x187)]&&!_0x5e8e19['mpDamage'])return;}if(_0x5e8e19[_0x1c9526(0x1e0)]){const _0x4f1951=JsonEx[_0x1c9526(0x5fe)](_0x5e8e19);_0x4f1951[_0x1c9526(0x668)]=![],_0x4f1951['evaded']=![],_0x4f1951[_0x1c9526(0x416)]=0x0,this[_0x1c9526(0x4da)]['push'](_0x4f1951);}if(_0x5e8e19[_0x1c9526(0x416)]!==0x0){const _0x376193=JsonEx[_0x1c9526(0x5fe)](_0x5e8e19);_0x376193['missed']=![],_0x376193['evaded']=![],_0x376193[_0x1c9526(0x1e0)]=![],this['_damagePopupArray'][_0x1c9526(0x908)](_0x376193);}},Game_Battler['prototype'][_0x23168f(0x652)]=function(){const _0x31c6dd=_0x23168f;if(!this['_damagePopupArray'])this['clearDamagePopup']();return VisuMZ['BattleCore'][_0x31c6dd(0xbac)][_0x31c6dd(0x642)]['NewPopupBottom']?this['_damagePopupArray'][_0x31c6dd(0xa30)]():this[_0x31c6dd(0x4da)][_0x31c6dd(0x35e)]();},Game_Battler[_0x23168f(0xa01)]['setupTextPopup']=function(_0x401bc3,_0x5de338){const _0x4de0ac=_0x23168f;if(!SceneManager['isSceneBattle']())return;if(BattleManager[_0x4de0ac(0x1bc)]())return;if(!this[_0x4de0ac(0xbb5)]())return;if(_0x401bc3[_0x4de0ac(0x312)]<=0x0)return;_0x5de338=_0x5de338||{},_0x5de338[_0x4de0ac(0x664)]=_0x5de338[_0x4de0ac(0x664)]||_0x4de0ac(0x644),_0x5de338[_0x4de0ac(0x8e7)]=_0x5de338[_0x4de0ac(0x8e7)]||[0x0,0x0,0x0,0x0],_0x5de338['flashDuration']=_0x5de338[_0x4de0ac(0xb8a)]||0x0,this[_0x4de0ac(0xbb5)]()[_0x4de0ac(0x138)](_0x401bc3,_0x5de338);},Game_Battler[_0x23168f(0xa01)][_0x23168f(0x8fb)]=function(_0x15f7bd,_0x13d76e,_0x49a43e){const _0x554f37=_0x23168f;if(!SceneManager['isSceneBattle']())return;if(BattleManager[_0x554f37(0x1bc)]())return;if(!this[_0x554f37(0xbb5)]())return;if(_0x13d76e[_0x554f37(0x312)]<=0x0)return;_0x49a43e=_0x49a43e||{},_0x49a43e[_0x554f37(0x664)]=_0x49a43e['textColor']||'#ffffff',_0x49a43e[_0x554f37(0x8e7)]=_0x49a43e[_0x554f37(0x8e7)]||[0x0,0x0,0x0,0x0],_0x49a43e[_0x554f37(0xb8a)]=_0x49a43e[_0x554f37(0xb8a)]||0x0,this[_0x554f37(0xbb5)]()[_0x554f37(0x8fb)](_0x15f7bd,_0x13d76e,_0x49a43e);},Game_Battler['prototype'][_0x23168f(0x821)]=function(){const _0x40d876=_0x23168f;if(this[_0x40d876(0x6ea)]())return![];if(this[_0x40d876(0x942)]()&&this['isAppeared']())return!![];if(this[_0x40d876(0x77b)]()&&this[_0x40d876(0xb8b)]()){if(this['isDead']()&&this[_0x40d876(0x740)]())return![];}else{if(this[_0x40d876(0x14e)]())return![];}return!![];},VisuMZ[_0x23168f(0x895)]['Game_Battler_clearMotion']=Game_Battler[_0x23168f(0xa01)]['clearMotion'],Game_Battler[_0x23168f(0xa01)][_0x23168f(0x24d)]=function(){const _0x2ac250=_0x23168f;VisuMZ[_0x2ac250(0x895)][_0x2ac250(0x3a9)]['call'](this),this['clearFreezeMotion']();},Game_Battler[_0x23168f(0xa01)]['canBattlerMove']=function(){return!![];},Game_Battler[_0x23168f(0xa01)]['isBattlerGrounded']=function(){return![];},VisuMZ[_0x23168f(0x895)][_0x23168f(0x197)]=Game_Battler[_0x23168f(0xa01)][_0x23168f(0x45d)],Game_Battler['prototype'][_0x23168f(0x45d)]=function(_0x1bb191){const _0x2ce668=_0x23168f;VisuMZ[_0x2ce668(0x895)][_0x2ce668(0x197)][_0x2ce668(0x88f)](this,_0x1bb191),this[_0x2ce668(0x2da)](_0x1bb191),this[_0x2ce668(0xbd7)]();},Game_Battler[_0x23168f(0xa01)]['onBattleStartBattleCore']=function(_0xd5783d){const _0x3088ec=_0x23168f;this[_0x3088ec(0xd8)](![]),this['_forcedHomeX']=undefined,this[_0x3088ec(0x1bf)]=undefined;},VisuMZ[_0x23168f(0x895)][_0x23168f(0xb4e)]=Game_Battler[_0x23168f(0xa01)][_0x23168f(0x2e7)],Game_Battler[_0x23168f(0xa01)][_0x23168f(0x2e7)]=function(){const _0x21b486=_0x23168f;VisuMZ['BattleCore'][_0x21b486(0xb4e)][_0x21b486(0x88f)](this),this[_0x21b486(0xa87)]();},Game_Battler[_0x23168f(0xa01)][_0x23168f(0xa87)]=function(){const _0x553114=_0x23168f;this[_0x553114(0x21c)]=undefined,this[_0x553114(0x1bf)]=undefined;},VisuMZ['BattleCore'][_0x23168f(0x16c)]=Game_Battler[_0x23168f(0xa01)]['performActionStart'],Game_Battler['prototype'][_0x23168f(0xb9a)]=function(_0x133452){const _0x4426d6=_0x23168f;VisuMZ[_0x4426d6(0x895)]['Game_Battler_performActionStart'][_0x4426d6(0x88f)](this,_0x133452);if(!_0x133452['isGuard']()){const _0x208992=this[_0x4426d6(0xbb5)]();_0x208992&&_0x208992[_0x4426d6(0x207)]();}this[_0x4426d6(0xd8)](![]);},Game_Battler['prototype'][_0x23168f(0x630)]=function(){const _0xf19c1f=_0x23168f;this[_0xf19c1f(0x7da)]=undefined;const _0x1dd31a=this[_0xf19c1f(0xa56)];this[_0xf19c1f(0xa56)]=![];if(BattleManager[_0xf19c1f(0x966)]()&&this[_0xf19c1f(0xb23)]()){const _0x12fbd9=this[_0xf19c1f(0xbb5)]();if(_0x12fbd9&&_0x1dd31a)_0x12fbd9[_0xf19c1f(0x207)]();return;}const _0x313fd6=this[_0xf19c1f(0xbb5)]();if(_0x313fd6)_0x313fd6['stepBack']();this[_0xf19c1f(0xd8)](![]),this[_0xf19c1f(0xbec)]();},Game_Battler[_0x23168f(0xa01)][_0x23168f(0x92c)]=function(_0x54bc14){const _0x22b95f=_0x23168f;if(_0x54bc14[_0x22b95f(0xa37)]())this['performAttack']();else{if(_0x54bc14[_0x22b95f(0x98e)]())this['requestMotion'](_0x22b95f(0xb64));else{if(_0x54bc14[_0x22b95f(0x2f2)]())this[_0x22b95f(0x67a)](_0x22b95f(0x6aa));else{if(_0x54bc14[_0x22b95f(0x243)]())[0x1,0x2,0x5,0x6]['includes'](_0x54bc14['item']()['damage']['type'])?this[_0x22b95f(0xa9f)]():this[_0x22b95f(0x67a)](_0x22b95f(0x28c));else _0x54bc14[_0x22b95f(0x93b)]()&&this[_0x22b95f(0x67a)]('item');}}}},Game_Battler[_0x23168f(0xa01)][_0x23168f(0x79f)]=function(){const _0x11036c=_0x23168f;return $dataSystem[_0x11036c(0x818)][0x0];},Game_Battler['prototype']['getAttackWeaponAnimationId']=function(){const _0x2d79b8=_0x23168f,_0x4e3bf8=this[_0x2d79b8(0x79f)]();return _0x4e3bf8?_0x4e3bf8[_0x2d79b8(0x111)]:0x0;},Game_Battler[_0x23168f(0xa01)]['performSubstitute']=function(_0x5f95a1){const _0x4222c5=_0x23168f;if(!$gameSystem[_0x4222c5(0x18f)]())return;const _0x2b1100=this[_0x4222c5(0xbb5)](),_0x2aa18a=_0x5f95a1['battler']();if(!_0x2b1100||!_0x2aa18a)return;const _0x4c33cb=_0x2aa18a[_0x4222c5(0x9af)],_0x3ff701=_0x2aa18a[_0x4222c5(0x489)];this[_0x4222c5(0x87c)](_0x4c33cb,_0x3ff701,0x0,![],_0x4222c5(0xa7f),-0x1),_0x2b1100[_0x4222c5(0x32b)]();const _0x2aad5d=VisuMZ[_0x4222c5(0x895)][_0x4222c5(0xbac)]['ActionSequence'];let _0x56bce4=(_0x2aa18a[_0x4222c5(0x2e0)]+_0x2b1100[_0x4222c5(0x2e0)])/0x2;_0x56bce4*=this[_0x4222c5(0x36b)]()?0x1:-0x1;let _0x3e536c=_0x2aad5d[_0x4222c5(0x27c)]*(this['isActor']()?0x1:-0x1);_0x5f95a1['moveBattlerDistance'](_0x56bce4,_0x3e536c,0x0,![],_0x4222c5(0xa7f)),_0x2aa18a[_0x4222c5(0x32b)]();},Game_Battler[_0x23168f(0xa01)]['requestMotion']=function(_0x5847d9){const _0x21eab2=_0x23168f;if(SceneManager[_0x21eab2(0xbef)]()){const _0x47f453=this[_0x21eab2(0xbb5)]();_0x47f453&&(_0x47f453[_0x21eab2(0x560)](_0x5847d9),[_0x21eab2(0x4de),_0x21eab2(0x245),_0x21eab2(0xc9)][_0x21eab2(0x2d8)](_0x5847d9)&&this[_0x21eab2(0xa26)]());}this['clearFreezeMotion']();},Game_Battler['prototype'][_0x23168f(0xa26)]=function(){},Game_Battler['prototype']['startWeaponAnimation']=function(_0xf8539e){const _0x420941=_0x23168f;if(SceneManager[_0x420941(0xbef)]()){const _0x429cfb=this['battler']();if(_0x429cfb)_0x429cfb[_0x420941(0x9c9)](_0xf8539e);}},Game_Battler[_0x23168f(0xa01)][_0x23168f(0x66e)]=function(){const _0x57fa8e=_0x23168f;if(SceneManager[_0x57fa8e(0xbef)]()){const _0x2b9e04=this[_0x57fa8e(0x2c7)]();this[_0x57fa8e(0xa72)](_0x2b9e04);}},Game_Battler[_0x23168f(0xa01)]['performCastAnimation']=function(_0x2fb745,_0x1c89ce){const _0x2f7888=_0x23168f;if(!_0x2fb745)return;if(!_0x2fb745[_0x2f7888(0x42e)]())return;if(_0x2fb745[_0x2f7888(0xa37)]())return;if(_0x2fb745[_0x2f7888(0x98e)]())return;if(_0x2fb745[_0x2f7888(0x93b)]())return;if($gameTemp[_0x2f7888(0x10d)])return;let _0x39c1ff=0x0;const _0x190e37=VisuMZ['BattleCore'][_0x2f7888(0xbac)][_0x2f7888(0x8d2)],_0x1da98c=_0x2fb745[_0x2f7888(0x42e)]()[_0x2f7888(0xae7)];if(_0x1da98c[_0x2f7888(0x26e)](/<CAST ANIMATION: (\d+)>/i))_0x39c1ff=Number(RegExp['$1']);else{if(_0x1da98c['match'](/<NO CAST ANIMATION>/i))return;else{if(_0x2fb745[_0x2f7888(0x4a2)]())_0x39c1ff=_0x190e37['CastCertain'];else{if(_0x2fb745[_0x2f7888(0x64b)]())_0x39c1ff=_0x190e37[_0x2f7888(0x7e8)];else _0x2fb745[_0x2f7888(0x2f2)]()&&(_0x39c1ff=_0x190e37['CastMagical']);}}}_0x39c1ff>0x0&&$gameTemp[_0x2f7888(0x582)]([this],_0x39c1ff,!!_0x1c89ce);},Game_Battler[_0x23168f(0xa01)][_0x23168f(0x352)]=function(){const _0x2ee196=_0x23168f;SoundManager[_0x2ee196(0x4cb)]();let _0x351d52=VisuMZ[_0x2ee196(0x895)][_0x2ee196(0xbac)][_0x2ee196(0x8d2)][_0x2ee196(0x136)];_0x351d52>0x0&&(Imported['VisuMZ_0_CoreEngine']?$gameTemp['requestFauxAnimation']([this],_0x351d52):$gameTemp[_0x2ee196(0x582)]([this],_0x351d52));},Game_Battler['prototype'][_0x23168f(0x5b3)]=function(){const _0x4c6ae5=_0x23168f;if(!$gameSystem[_0x4c6ae5(0x18f)]())return![];if(!BattleManager[_0x4c6ae5(0x966)]())return![];if(!this[_0x4c6ae5(0x942)]())return![];if(this['isInputting']())return!![];if(this[_0x4c6ae5(0x4a1)]())return!![];if(this['_tpbChargeTime']>=0x1)return!![];return![];},VisuMZ[_0x23168f(0x895)][_0x23168f(0xb0c)]=Game_Battler[_0x23168f(0xa01)][_0x23168f(0x335)],Game_Battler[_0x23168f(0xa01)]['performDamage']=function(){const _0x3ddfe5=_0x23168f;this['isActiveTpbReady']()&&(this['_performDamageMotion']=!![]),VisuMZ[_0x3ddfe5(0x895)][_0x3ddfe5(0xb0c)]['call'](this),this[_0x3ddfe5(0xa9d)](),this['performShakeFlinch']();},VisuMZ[_0x23168f(0x895)][_0x23168f(0x59f)]=Game_Battler['prototype'][_0x23168f(0x776)],Game_Battler[_0x23168f(0xa01)]['performMiss']=function(){const _0x27e999=_0x23168f;this['isActiveTpbReady']()&&(this[_0x27e999(0x7da)]=!![]),VisuMZ['BattleCore']['Game_Battler_performMiss'][_0x27e999(0x88f)](this),this[_0x27e999(0xa9d)]();},VisuMZ['BattleCore']['Game_Battler_performEvasion']=Game_Battler[_0x23168f(0xa01)]['performEvasion'],Game_Battler[_0x23168f(0xa01)]['performEvasion']=function(){const _0x2b7c58=_0x23168f;this[_0x2b7c58(0x5b3)]()&&(this[_0x2b7c58(0x7da)]=!![]),VisuMZ['BattleCore'][_0x2b7c58(0x3c3)][_0x2b7c58(0x88f)](this),this[_0x2b7c58(0xa9d)]();},Game_Battler[_0x23168f(0xa01)]['performFlinch']=function(){const _0x3b4377=_0x23168f;if(!$gameSystem[_0x3b4377(0x18f)]())return;if(this[_0x3b4377(0xa56)])return;this['_flinched']=!![];const _0x39869a=this['battler']();if(_0x39869a)_0x39869a[_0x3b4377(0x856)]();},Game_Battler[_0x23168f(0xa01)]['performShakeFlinch']=function(){const _0x2bd93f=_0x23168f;if(!this[_0x2bd93f(0x202)]())return;const _0x1eebf5=VisuMZ[_0x2bd93f(0x895)]['Settings'][_0x2bd93f(0x33d)];if(!(_0x1eebf5[_0x2bd93f(0x9df)]??![]))return;if(this[_0x2bd93f(0x57d)]<=0x0)return;const _0x48953e=this['battler']();if(_0x48953e){const _0x1eb1ea=this[_0x2bd93f(0x57d)],_0x1a55a2=(_0x1eb1ea/this[_0x2bd93f(0x7c5)])['clamp'](0.8,0x1),_0x54bfcb=_0x1eebf5[_0x2bd93f(0x3cb)]??0x30,_0x4e3b55=_0x1a55a2*_0x54bfcb;_0x48953e['startShakeFlinch'](_0x4e3b55,_0x1a55a2);}},Game_Battler[_0x23168f(0xa01)][_0x23168f(0xbec)]=function(){const _0x1c39d3=_0x23168f;if(this['isDead']()&&this['_motionType']!=='dead'){this['requestMotion'](_0x1c39d3(0x5ed));return;}if(this[_0x1c39d3(0x14e)]()&&this[_0x1c39d3(0x2af)]===_0x1c39d3(0x5ed))return;if(!!this[_0x1c39d3(0x1b2)])return;if(this[_0x1c39d3(0x77b)]()){if(!this['isDuringNonLoopingMotion']()&&this!==BattleManager[_0x1c39d3(0x530)]){if(this[_0x1c39d3(0xbb5)]())this[_0x1c39d3(0xbb5)]()[_0x1c39d3(0xa7b)]();}this[_0x1c39d3(0xb3)]();return;}if(this['_motionType']===_0x1c39d3(0x26c))return;if(this[_0x1c39d3(0x2af)]===_0x1c39d3(0xb96)&&!BattleManager[_0x1c39d3(0xb23)]())return;if(this[_0x1c39d3(0x2af)]===_0x1c39d3(0xb64)&&!BattleManager['isInputting']())return;this[_0x1c39d3(0x24d)]();if(BattleManager[_0x1c39d3(0x966)]()&&this===BattleManager['_subject'])return;if(this[_0x1c39d3(0xbb5)]()&&BattleManager[_0x1c39d3(0xb23)]()){this[_0x1c39d3(0xbb5)]()[_0x1c39d3(0xa7b)](),this['clearFreezeMotion']();return;}},Game_Enemy['prototype']['isDuringNonLoopingMotion']=function(){const _0x5d37ab=_0x23168f;if(!this[_0x5d37ab(0xb8b)]())return![];const _0x329417=this[_0x5d37ab(0xbb5)]();if(!_0x329417)return![];const _0x1d6dd0=_0x329417[_0x5d37ab(0x496)];if(!_0x1d6dd0)return![];const _0x5908e4=_0x1d6dd0[_0x5d37ab(0xbf3)];return _0x5908e4&&!_0x5908e4[_0x5d37ab(0x128)];},Game_Battler[_0x23168f(0xa01)][_0x23168f(0x68f)]=function(){const _0x5140f9=_0x23168f;return this[_0x5140f9(0x75e)];},Game_Battler[_0x23168f(0xa01)][_0x23168f(0xd8)]=function(_0x3451bb){const _0x34da66=_0x23168f;if(!$gameSystem[_0x34da66(0x18f)]())return;this[_0x34da66(0x75e)]=_0x3451bb;const _0x102e56=this[_0x34da66(0xbb5)]();if(_0x102e56)_0x102e56[_0x34da66(0x914)]();},Game_Battler[_0x23168f(0xa01)][_0x23168f(0x5e2)]=function(_0x4f564e,_0x1e764d,_0x1981d6){const _0x43f023=_0x23168f;if(!$gameSystem[_0x43f023(0x18f)]())return;const _0x4d663d=this[_0x43f023(0xbb5)]();if(!_0x4d663d)return;if(_0x4f564e===_0x4d663d['_baseX'])return;let _0x248d65=![];if(this[_0x43f023(0x36b)]()){if(_0x4f564e>_0x4d663d[_0x43f023(0x9af)])_0x248d65=!![];if(_0x4f564e<_0x4d663d[_0x43f023(0x9af)])_0x248d65=![];}else{if(this['isEnemy']()){if(_0x4f564e>_0x4d663d[_0x43f023(0x9af)])_0x248d65=![];if(_0x4f564e<_0x4d663d[_0x43f023(0x9af)])_0x248d65=!![];}};this[_0x43f023(0xd8)](_0x1981d6?!_0x248d65:_0x248d65),_0x4d663d[_0x43f023(0x914)]();},Game_Battler[_0x23168f(0xa01)][_0x23168f(0x7d4)]=function(_0x17bec5,_0x31734c,_0x75ad2e,_0x105716,_0x5543af){const _0x5603d8=_0x23168f;if(!$gameSystem['isSideView']())return;const _0x4463bd=this[_0x5603d8(0xbb5)]();if(!_0x4463bd)return;if(_0x105716)this[_0x5603d8(0x5e2)](_0x17bec5+_0x4463bd[_0x5603d8(0x9af)],_0x31734c+_0x4463bd[_0x5603d8(0x489)],![]);_0x17bec5+=_0x4463bd['_baseX']-_0x4463bd[_0x5603d8(0x1c6)],_0x31734c+=_0x4463bd[_0x5603d8(0x489)]-_0x4463bd[_0x5603d8(0x22d)],_0x4463bd[_0x5603d8(0x8f1)](_0x17bec5,_0x31734c,_0x75ad2e);if(Imported[_0x5603d8(0x74a)])_0x4463bd[_0x5603d8(0x73b)](_0x5543af||_0x5603d8(0xa7f));},Game_Battler['prototype'][_0x23168f(0x87c)]=function(_0x4d2f94,_0x3e6775,_0x4a48c9,_0x31dd2c,_0x510125,_0x10454a){const _0xe6dbe2=_0x23168f;if(!$gameSystem[_0xe6dbe2(0x18f)]())return;const _0x94c4b2=this[_0xe6dbe2(0xbb5)]();if(!_0x94c4b2)return;if(_0x4d2f94===Infinity||_0x3e6775===Infinity)return;if(isNaN(_0x4d2f94)||isNaN(_0x3e6775))return;_0x10454a=_0x10454a||0x0;if(_0x10454a>0x0){if(_0x94c4b2['_baseX']>_0x4d2f94)_0x4d2f94+=_0x94c4b2[_0xe6dbe2(0x2e0)]/0x2+_0x10454a;if(_0x94c4b2[_0xe6dbe2(0x9af)]<_0x4d2f94)_0x4d2f94-=_0x94c4b2[_0xe6dbe2(0x2e0)]/0x2+_0x10454a;}if(_0x31dd2c)this[_0xe6dbe2(0x5e2)](_0x4d2f94,_0x3e6775,![]);_0x4d2f94-=_0x94c4b2[_0xe6dbe2(0x1c6)],_0x3e6775-=_0x94c4b2[_0xe6dbe2(0x22d)],_0x94c4b2[_0xe6dbe2(0x8f1)](_0x4d2f94,_0x3e6775,_0x4a48c9);if(Imported[_0xe6dbe2(0x74a)])_0x94c4b2[_0xe6dbe2(0x73b)](_0x510125||'Linear');},Game_Battler[_0x23168f(0xa01)][_0x23168f(0x1b3)]=function(_0x419bb0,_0x2ef573,_0x2bbb96,_0x315704,_0x40599b){const _0x2da4f0=_0x23168f;if(!$gameSystem[_0x2da4f0(0x18f)]())return;const _0x128243=this['battler']();if(!_0x128243)return;if(_0x315704)this[_0x2da4f0(0x5e2)](_0x419bb0+_0x128243[_0x2da4f0(0x9af)],_0x2ef573+_0x128243[_0x2da4f0(0x489)],![]);_0x419bb0+=_0x128243[_0x2da4f0(0x1c6)],_0x2ef573+=_0x128243[_0x2da4f0(0x22d)],_0x128243[_0x2da4f0(0x90f)](_0x419bb0,_0x2ef573,_0x2bbb96,_0x40599b),this[_0x2da4f0(0x21c)]=_0x419bb0,this['_forcedHomeY']=_0x2ef573;},Game_Battler[_0x23168f(0xa01)][_0x23168f(0x49b)]=function(_0x57dbfa,_0x589263,_0x66555b,_0x3d63e2,_0x5efae2,_0x29947f){const _0x19daa0=_0x23168f;if(!$gameSystem[_0x19daa0(0x18f)]())return;const _0x308552=this[_0x19daa0(0xbb5)]();if(!_0x308552)return;_0x29947f=_0x29947f||0x0;if(_0x29947f>0x0){if(_0x308552[_0x19daa0(0x9af)]>_0x57dbfa)_0x57dbfa+=_0x308552[_0x19daa0(0x2e0)]/0x2+_0x29947f;if(_0x308552[_0x19daa0(0x9af)]<_0x57dbfa)_0x57dbfa-=_0x308552[_0x19daa0(0x2e0)]/0x2+_0x29947f;}if(_0x3d63e2)this[_0x19daa0(0x5e2)](_0x57dbfa,_0x589263,![]);_0x308552['startHomeMove'](_0x57dbfa,_0x589263,_0x66555b,_0x5efae2),this[_0x19daa0(0x21c)]=_0x57dbfa,this[_0x19daa0(0x1bf)]=_0x589263;},Game_Battler[_0x23168f(0xa01)][_0x23168f(0xbb6)]=function(_0xc36b36,_0x1a11b9,_0x3c1cf4){const _0x25718c=_0x23168f;if(!$gameSystem[_0x25718c(0x18f)]())return;const _0x526005=this[_0x25718c(0xbb5)]();if(!_0x526005)return;_0x526005[_0x25718c(0x28d)](_0xc36b36,_0x1a11b9,_0x3c1cf4);},Game_Battler['prototype']['jumpBattler']=function(_0x3f7518,_0x9eeaf){if(!$gameSystem['isSideView']())return;const _0x337bac=this['battler']();if(!_0x337bac)return;_0x337bac['startJump'](_0x3f7518,_0x9eeaf);},Game_Battler[_0x23168f(0xa01)]['spinBattler']=function(_0x3048c6,_0xad8078,_0x6f8565,_0x1625d3){const _0x107479=_0x23168f;if(!$gameSystem[_0x107479(0x18f)]())return;const _0x1bdffe=this[_0x107479(0xbb5)]();if(!_0x1bdffe)return;_0x1bdffe['startSpin'](_0x3048c6,_0xad8078,_0x6f8565,_0x1625d3);},Game_Battler['prototype'][_0x23168f(0x79b)]=function(_0x301bb2,_0x17679e,_0x480dbc,_0xed0bc4){const _0x2567f9=_0x23168f;if(!$gameSystem['isSideView']())return;const _0x569b15=this[_0x2567f9(0xbb5)]();if(!_0x569b15)return;this[_0x2567f9(0x36b)]()&&(_0x301bb2*=-0x1,_0x17679e*=-0x1),_0x569b15[_0x2567f9(0x922)](_0x301bb2,_0x17679e,_0x480dbc,_0xed0bc4);},Game_Battler[_0x23168f(0xa01)][_0x23168f(0x86b)]=function(_0x124dfa,_0x30f22e,_0x566b08,_0x109292){const _0x33cbeb=_0x23168f;if(!$gameSystem[_0x33cbeb(0x18f)]())return;const _0x4e9893=this[_0x33cbeb(0xbb5)]();if(!_0x4e9893)return;_0x4e9893[_0x33cbeb(0x2d2)](_0x124dfa,_0x30f22e,_0x566b08,_0x109292);},Game_Battler[_0x23168f(0xa01)][_0x23168f(0xaf6)]=function(_0x4c170c,_0x20edcc,_0x1aadc6){const _0x5b7829=_0x23168f;if(!$gameSystem['isSideView']())return;const _0x2cf5b1=this['battler']();if(!_0x2cf5b1)return;_0x2cf5b1[_0x5b7829(0x4e0)](_0x4c170c,_0x20edcc,_0x1aadc6);},Game_Battler[_0x23168f(0xa01)][_0x23168f(0xb3)]=function(){const _0x520247=_0x23168f,_0x320e10=!!this[_0x520247(0x1b2)];this['_freezeMotionData']=undefined,_0x320e10&&(this['requestMotionRefresh'](),this[_0x520247(0x3ce)]());},Game_Battler['prototype'][_0x23168f(0x3ce)]=function(){const _0x4045c3=_0x23168f;if(!SceneManager['isSceneBattle']())return;const _0x52de4e=this['battler']();if(!_0x52de4e)return;let _0x4c86d0=this[_0x4045c3(0x36b)]()?_0x52de4e[_0x4045c3(0x64d)]:_0x52de4e[_0x4045c3(0x496)][_0x4045c3(0x64d)];_0x4c86d0&&_0x4c86d0[_0x4045c3(0x85b)](0x0);},Game_Battler['prototype'][_0x23168f(0x3c1)]=function(_0x4f9837,_0x278f2a,_0x5859f4){const _0x540524=_0x23168f;if(this['isEnemy']()&&!this[_0x540524(0xb8b)]())return;let _0x239189=0x0,_0x67e3a9=0x0;_0x4f9837[_0x540524(0x26e)](/ATTACK[ ](\d+)/i)&&(_0x67e3a9=Number(RegExp['$1']),_0x67e3a9--);if(this['isActor']()){const _0x1ad4e7=this[_0x540524(0x58c)]();_0x239189=_0x1ad4e7[_0x67e3a9]?_0x1ad4e7[_0x67e3a9][_0x540524(0x768)]:0x0;}else this[_0x540524(0x77b)]()&&(_0x239189=this[_0x540524(0xd7)]()[_0x540524(0x768)]||0x0);const _0x1e3ce5=$dataSystem[_0x540524(0x818)][_0x239189];_0x4f9837[_0x540524(0x26e)](/attack/i)&&(_0x4f9837=[_0x540524(0x245),_0x540524(0x4de),_0x540524(0xc9)][_0x1e3ce5['type']]||_0x540524(0x4de)),this[_0x540524(0x1b2)]={'motionType':_0x4f9837,'weaponImageId':_0x278f2a?_0x1e3ce5[_0x540524(0x111)]:0x0,'pattern':_0x5859f4};},Game_Battler['prototype'][_0x23168f(0x256)]=function(_0x46a96a){const _0x44ccc6=_0x23168f;if(!_0x46a96a)return![];return _0x46a96a[_0x44ccc6(0x337)]()===this[_0x44ccc6(0x337)]();},Game_Battler[_0x23168f(0xa01)][_0x23168f(0x186)]=function(_0x226ca2){const _0x2defef=_0x23168f;if(!_0x226ca2)return![];return _0x226ca2[_0x2defef(0x91e)]()===this[_0x2defef(0x337)]();},Game_Battler[_0x23168f(0xa01)][_0x23168f(0x55a)]=function(){return![];},Game_Actor[_0x23168f(0xa01)][_0x23168f(0x55a)]=function(){const _0x7f080f=_0x23168f;return this['battlerName']()[_0x7f080f(0x26e)](/\$/i);},Game_Enemy[_0x23168f(0xa01)]['hasStaticSvBattler']=function(){const _0x2c7b14=_0x23168f;return this[_0x2c7b14(0xb8b)]()&&this[_0x2c7b14(0x2ec)]()[_0x2c7b14(0x26e)](/\$/i);},VisuMZ[_0x23168f(0x895)][_0x23168f(0x41b)]=Game_Actor[_0x23168f(0xa01)][_0x23168f(0x85b)],Game_Actor[_0x23168f(0xa01)][_0x23168f(0x85b)]=function(_0x563dc6){const _0x2a322e=_0x23168f;VisuMZ[_0x2a322e(0x895)]['Game_Actor_setup']['call'](this,_0x563dc6),this['initBattlePortrait']();},Game_Actor[_0x23168f(0xa01)][_0x23168f(0x86d)]=function(){const _0x5084d6=_0x23168f;this[_0x5084d6(0x772)]='',this[_0x5084d6(0x20c)]()&&this[_0x5084d6(0x20c)]()[_0x5084d6(0xae7)][_0x5084d6(0x26e)](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(this[_0x5084d6(0x772)]=String(RegExp['$1']));},Game_Actor['prototype'][_0x23168f(0xbab)]=function(){const _0x34b2d4=_0x23168f;if(this[_0x34b2d4(0xa70)]()!=='')return this[_0x34b2d4(0xa70)]();else{if(Imported[_0x34b2d4(0x787)]&&this[_0x34b2d4(0x267)]()!=='')return this['getMenuImage']();}return'';},Game_Actor['prototype'][_0x23168f(0xa70)]=function(){const _0x48d2fb=_0x23168f;if(this[_0x48d2fb(0x772)]===undefined)this['initBattlePortrait']();return this[_0x48d2fb(0x772)];},Game_Actor[_0x23168f(0xa01)][_0x23168f(0x25e)]=function(_0x5f0c83){const _0x4087a9=_0x23168f;if(this['_battlePortrait']===undefined)this[_0x4087a9(0x86d)]();this['_battlePortrait']=_0x5f0c83;if(SceneManager[_0x4087a9(0xbef)]()&&$gameParty[_0x4087a9(0x4e1)]()['includes'](this)){const _0x37ad37=SceneManager[_0x4087a9(0x23e)][_0x4087a9(0x1fa)];_0x37ad37&&_0x37ad37[_0x4087a9(0xb62)](this);}},Game_Actor[_0x23168f(0xa01)][_0x23168f(0x97a)]=function(){return!![];},Game_Actor[_0x23168f(0xa01)][_0x23168f(0x865)]=function(){const _0x25008b=_0x23168f;if(!this[_0x25008b(0x363)]()&&BattleManager[_0x25008b(0x174)])return!![];return Game_Battler[_0x25008b(0xa01)]['isAutoBattle'][_0x25008b(0x88f)](this);},VisuMZ[_0x23168f(0x895)][_0x23168f(0xbd2)]=Game_Actor['prototype'][_0x23168f(0x964)],Game_Actor[_0x23168f(0xa01)]['makeActionList']=function(){const _0x5dcfd3=_0x23168f;if(BattleManager['_autoBattle']&&!ConfigManager[_0x5dcfd3(0x2ce)])return this[_0x5dcfd3(0x4c6)]();else{return VisuMZ[_0x5dcfd3(0x895)]['Game_Actor_makeActionList'][_0x5dcfd3(0x88f)](this);;}},Game_Actor['prototype'][_0x23168f(0x4c6)]=function(){const _0x42149c=_0x23168f,_0x2c2257=[],_0x330aa6=new Game_Action(this);return _0x330aa6['setAttack'](),_0x2c2257[_0x42149c(0x908)](_0x330aa6),_0x2c2257;},Game_Actor[_0x23168f(0xa01)][_0x23168f(0x9a6)]=function(){const _0x23d977=_0x23168f;return this[_0x23d977(0xadf)]()['note'][_0x23d977(0x26e)](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)?String(RegExp['$1'])[_0x23d977(0x221)](/[\r\n]+/):VisuMZ['BattleCore']['Settings'][_0x23d977(0x6f4)][_0x23d977(0x438)];},Game_Actor['prototype']['svBattlerAnchorX']=function(){const _0x529943=_0x23168f;if(this[_0x529943(0x9f4)]['svAnchorX']!==undefined)return this['_cache'][_0x529943(0x84a)];return this[_0x529943(0x20c)]()[_0x529943(0xae7)]['match'](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this['_cache'][_0x529943(0x84a)]=eval(RegExp['$1']),this[_0x529943(0x9f4)][_0x529943(0x90a)]=eval(RegExp['$2'])):this[_0x529943(0x9f4)]['svAnchorX']=Game_Battler['prototype']['svBattlerAnchorX'][_0x529943(0x88f)](this),this[_0x529943(0x9f4)][_0x529943(0x84a)];},Game_Actor[_0x23168f(0xa01)][_0x23168f(0xa19)]=function(){const _0x1e6ac6=_0x23168f;if(this[_0x1e6ac6(0x9f4)][_0x1e6ac6(0x90a)]!==undefined)return this[_0x1e6ac6(0x9f4)][_0x1e6ac6(0x90a)];return this['actor']()['note'][_0x1e6ac6(0x26e)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0x1e6ac6(0x9f4)]['svAnchorX']=eval(RegExp['$1']),this['_cache'][_0x1e6ac6(0x90a)]=eval(RegExp['$2'])):this[_0x1e6ac6(0x9f4)][_0x1e6ac6(0x90a)]=Game_Battler['prototype'][_0x1e6ac6(0xa19)][_0x1e6ac6(0x88f)](this),this[_0x1e6ac6(0x9f4)]['svAnchorY'];},Game_Actor['prototype'][_0x23168f(0x90e)]=function(){const _0x4e976a=_0x23168f;if(this[_0x4e976a(0x9f4)][_0x4e976a(0x99e)]!==undefined)return this[_0x4e976a(0x9f4)][_0x4e976a(0x99e)];if(this[_0x4e976a(0x20c)]()[_0x4e976a(0xae7)]['match'](/<SIDEVIEW SHOW SHADOW>/i))this['_cache'][_0x4e976a(0x99e)]=!![];else this[_0x4e976a(0x20c)]()[_0x4e976a(0xae7)][_0x4e976a(0x26e)](/<SIDEVIEW HIDE SHADOW>/i)?this[_0x4e976a(0x9f4)][_0x4e976a(0x99e)]=![]:this['_cache'][_0x4e976a(0x99e)]=Game_Battler['prototype'][_0x4e976a(0x90e)]['call'](this);return this['_cache']['svShadow'];},Game_Actor['prototype'][_0x23168f(0x178)]=function(){const _0x421502=_0x23168f;return VisuMZ[_0x421502(0x895)]['Settings'][_0x421502(0x33d)][_0x421502(0x579)];},Game_Actor[_0x23168f(0xa01)][_0x23168f(0xa26)]=function(){const _0x36c99f=_0x23168f,_0x132c95=this[_0x36c99f(0x58c)](),_0x2f7f0c=_0x132c95[0x0]?_0x132c95[0x0][_0x36c99f(0x768)]:0x0,_0x3729dc=$dataSystem[_0x36c99f(0x818)][_0x2f7f0c];_0x3729dc&&this[_0x36c99f(0xa72)](_0x3729dc['weaponImageId']);},Game_Actor[_0x23168f(0xa01)]['performAction']=function(_0x1f00c5){const _0x3de9bc=_0x23168f;Game_Battler['prototype'][_0x3de9bc(0xb80)][_0x3de9bc(0x88f)](this,_0x1f00c5),this[_0x3de9bc(0x92c)](_0x1f00c5);},Game_Actor['prototype']['getAttackMotion']=function(){const _0xe4e2e8=_0x23168f,_0x428d63=this['weapons'](),_0x3cbd35=_0x428d63[0x0]?_0x428d63[0x0][_0xe4e2e8(0x768)]:0x0;return $dataSystem[_0xe4e2e8(0x818)][_0x3cbd35];},Game_Actor[_0x23168f(0xa01)][_0x23168f(0x870)]=function(_0xf55de1){_0xf55de1=_0xf55de1||0x1,_0xf55de1--;const _0x4e09ce=this['weapons']();return _0x4e09ce[_0xf55de1]?_0x4e09ce[_0xf55de1]['animationId']:0x0;},Game_Actor[_0x23168f(0xa01)]['getAttackMotionSlot']=function(_0x179de5){const _0x12739c=_0x23168f;_0x179de5=_0x179de5||0x1,_0x179de5--;const _0xfecd8b=this[_0x12739c(0x58c)](),_0x1e8a41=_0xfecd8b[_0x179de5]?_0xfecd8b[_0x179de5][_0x12739c(0x768)]:0x0;return $dataSystem[_0x12739c(0x818)][_0x1e8a41];},Game_Actor['prototype'][_0x23168f(0x2c1)]=function(_0x376099){const _0x1685cd=_0x23168f;_0x376099=_0x376099||0x1,_0x376099--;const _0x487560=this['weapons'](),_0x586e92=_0x487560[_0x376099]?_0x487560[_0x376099][_0x1685cd(0x768)]:0x0,_0x1fa0db=$dataSystem[_0x1685cd(0x818)][_0x586e92];if(_0x1fa0db){if(_0x1fa0db[_0x1685cd(0x158)]===0x0)this[_0x1685cd(0x67a)]('thrust');else{if(_0x1fa0db[_0x1685cd(0x158)]===0x1)this['requestMotion'](_0x1685cd(0x4de));else _0x1fa0db[_0x1685cd(0x158)]===0x2&&this[_0x1685cd(0x67a)]('missile');}this[_0x1685cd(0xa72)](_0x1fa0db[_0x1685cd(0x111)]);}},Game_Battler[_0x23168f(0xa01)][_0x23168f(0x377)]=function(_0x308cc2){const _0x32edea=_0x23168f;if(this['isActor']()){const _0x38199e=this['weapons']();if(_0x38199e[_0x32edea(0x312)]>0x0){const _0x5f2fda=_0x38199e[_0x308cc2];if(_0x5f2fda)_0x308cc2=this[_0x32edea(0x779)]()[_0x32edea(0xb3c)](_0x5f2fda);}}this[_0x32edea(0x11e)]=_0x308cc2||0x0,this[_0x32edea(0x9f4)]={};},Game_Battler[_0x23168f(0xa01)][_0x23168f(0x8ef)]=function(){const _0x127e69=_0x23168f;this[_0x127e69(0x11e)]=this[_0x127e69(0x11e)]||0x0,this[_0x127e69(0x11e)]++,this[_0x127e69(0x9f4)]={};},Game_Battler[_0x23168f(0xa01)][_0x23168f(0x2a2)]=function(){const _0x1a0139=_0x23168f;this['_activeWeaponSlot']=undefined,this[_0x1a0139(0x9f4)]={};},VisuMZ[_0x23168f(0x895)]['Game_Actor_equips']=Game_Actor[_0x23168f(0xa01)]['equips'],Game_Actor[_0x23168f(0xa01)]['equips']=function(){const _0x3b7771=_0x23168f;let _0x107097=VisuMZ[_0x3b7771(0x895)][_0x3b7771(0x983)][_0x3b7771(0x88f)](this);if(this[_0x3b7771(0x465)])return _0x107097;if(this[_0x3b7771(0x11e)]!==undefined){this['_tempEquipCheck']=!![];const _0x5dd5e3=this[_0x3b7771(0x1b9)]();for(let _0xc5b756=0x0;_0xc5b756<_0x5dd5e3['length'];_0xc5b756++){_0x5dd5e3[_0xc5b756]===0x1&&this[_0x3b7771(0x11e)]!==_0xc5b756&&(_0x107097[_0xc5b756]=null);}this[_0x3b7771(0x465)]=undefined;}return _0x107097;},Window_BattleLog['prototype'][_0x23168f(0x7cb)]=function(_0x5d1438){const _0x2ba9e9=_0x23168f;return _0x5d1438[_0x2ba9e9(0x36b)]()?_0x5d1438[_0x2ba9e9(0x58c)]()[_0x2ba9e9(0x312)]||0x1:0x1;},Window_BattleLog['prototype'][_0x23168f(0x7df)]=function(_0x3647f1,_0x342538){const _0x2246ec=_0x23168f;_0x3647f1&&_0x3647f1[_0x2246ec(0x36b)]()&&_0x3647f1['setActiveWeaponSlot'](_0x342538),this[_0x2246ec(0xa5e)]();},Window_BattleLog[_0x23168f(0xa01)][_0x23168f(0x8c3)]=function(_0x19a404){const _0x12b0b9=_0x23168f;_0x19a404&&_0x19a404[_0x12b0b9(0x36b)]()&&_0x19a404['clearActiveWeaponSlot'](),this[_0x12b0b9(0xa5e)]();},Game_Actor[_0x23168f(0xa01)][_0x23168f(0x548)]=function(){const _0x4aae0a=_0x23168f;let _0x28de62=_0x4aae0a(0x548);if(this[_0x4aae0a(0x8d4)](_0x28de62))return this['_cache'][_0x28de62];return this[_0x4aae0a(0x9f4)][_0x28de62]=this[_0x4aae0a(0x9d9)](this[_0x4aae0a(0x20c)]()),this[_0x4aae0a(0x9f4)][_0x28de62];},Game_Actor[_0x23168f(0xa01)][_0x23168f(0x658)]=function(){const _0x406f3b=_0x23168f;let _0x5c1172=_0x406f3b(0x658);if(this[_0x406f3b(0x8d4)](_0x5c1172))return this[_0x406f3b(0x9f4)][_0x5c1172];return this[_0x406f3b(0x9f4)][_0x5c1172]=this[_0x406f3b(0x9fc)](this[_0x406f3b(0x20c)]()),this[_0x406f3b(0x9f4)][_0x5c1172];},VisuMZ[_0x23168f(0x895)]['Game_Enemy_setup']=Game_Enemy[_0x23168f(0xa01)][_0x23168f(0x85b)],Game_Enemy[_0x23168f(0xa01)][_0x23168f(0x85b)]=function(_0x158a71,_0x451b49,_0x48206e){const _0x57c84f=_0x23168f;_0x158a71=DataManager[_0x57c84f(0x247)](_0x158a71),VisuMZ['BattleCore'][_0x57c84f(0xa53)]['call'](this,_0x158a71,_0x451b49,_0x48206e),Imported['VisuMZ_1_ElementStatusCore']&&this[_0x57c84f(0xb39)](),this[_0x57c84f(0x356)](),this[_0x57c84f(0x732)](),this[_0x57c84f(0xafc)](),Imported[_0x57c84f(0x6f8)]&&this[_0x57c84f(0x63a)]();},Game_Enemy[_0x23168f(0xa01)]['clearBattleCoreData']=function(){const _0x5bb92e=_0x23168f,_0x2d773d=VisuMZ[_0x5bb92e(0x895)][_0x5bb92e(0xbac)]['Enemy'];this['_attackAnimationId']=_0x2d773d[_0x5bb92e(0x5bc)],this[_0x5bb92e(0x3c6)]={},this[_0x5bb92e(0x9a4)]();},Game_Enemy[_0x23168f(0xa01)][_0x23168f(0x732)]=function(){const _0x2e693d=_0x23168f,_0x2f0298=VisuMZ[_0x2e693d(0x895)][_0x2e693d(0xbac)]['Enemy'],_0xcf2811=this[_0x2e693d(0x417)]()[_0x2e693d(0xae7)];this[_0x2e693d(0x3c6)]={'name':'','wtypeId':_0x2f0298[_0x2e693d(0x407)],'collapse':_0x2f0298[_0x2e693d(0x3eb)],'motionIdle':_0x2f0298['MotionIdle'],'width':_0x2f0298[_0x2e693d(0x628)]||0x40,'height':_0x2f0298[_0x2e693d(0x5e0)]||0x40,'anchorX':_0x2f0298[_0x2e693d(0x477)]||0x0,'anchorY':_0x2f0298[_0x2e693d(0x695)]||0x0,'shadow':_0x2f0298['Shadow']};_0xcf2811[_0x2e693d(0x26e)](/<ATTACK ANIMATION:[ ](\d+)>/i)&&(this[_0x2e693d(0x899)]=Number(RegExp['$1']));const _0x26571c=this[_0x2e693d(0x3c6)];if(_0xcf2811[_0x2e693d(0x26e)](/<SIDEVIEW BATTLER: (.*)>/i))_0x26571c['name']=String(RegExp['$1']);else{if(_0xcf2811[_0x2e693d(0x26e)](/<SIDEVIEW BATTLERS>\s*([\s\S]*)\s*<\/SIDEVIEW BATTLERS>/i)){const _0x412f2e=String(RegExp['$1'])[_0x2e693d(0x221)](/[\r\n]+/)[_0x2e693d(0xa32)]('');_0x26571c[_0x2e693d(0x611)]=DataManager[_0x2e693d(0xb3b)](_0x412f2e);}}_0xcf2811['match'](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)&&(_0x26571c[_0x2e693d(0xa2a)]=eval(RegExp['$1']),_0x26571c['anchorY']=eval(RegExp['$2']));if(_0xcf2811[_0x2e693d(0x26e)](/<SIDEVIEW COLLAPSE>/i))_0x26571c[_0x2e693d(0x250)]=!![];else _0xcf2811['match'](/<SIDEVIEW NO COLLAPSE>/i)&&(_0x26571c[_0x2e693d(0x250)]=![]);if(_0xcf2811[_0x2e693d(0x26e)](/<SIDEVIEW SHOW SHADOW>/i))_0x26571c['shadow']=!![];else _0xcf2811[_0x2e693d(0x26e)](/<SIDEVIEW HIDE SHADOW>/i)&&(_0x26571c[_0x2e693d(0x8d8)]=![]);if(_0xcf2811['match'](/<SIDEVIEW IDLE MOTION: (.*)>/i))_0x26571c[_0x2e693d(0x4d2)]=String(RegExp['$1'])[_0x2e693d(0x645)]()[_0x2e693d(0xf4)]();else{if(_0xcf2811[_0x2e693d(0x26e)](/<SIDEVIEW IDLE MOTIONS>\s*([\s\S]*)\s*<\/SIDEVIEW IDLE MOTIONS>/i)){const _0x599763=String(RegExp['$1'])[_0x2e693d(0x221)](/[\r\n]+/)['remove']('');_0x26571c[_0x2e693d(0x4d2)]=DataManager[_0x2e693d(0xb3b)](_0x599763);}}_0xcf2811['match'](/<SIDEVIEW SIZE: (\d+), (\d+)>/i)&&(_0x26571c['width']=Number(RegExp['$1']),_0x26571c[_0x2e693d(0xb1c)]=Number(RegExp['$2']));if(_0xcf2811[_0x2e693d(0x26e)](/<SIDEVIEW WEAPON: (.*)>/i))_0x26571c[_0x2e693d(0x768)]=DataManager['getWtypeIdWithName'](RegExp['$1']);else{if(_0xcf2811[_0x2e693d(0x26e)](/<SIDEVIEW WEAPONS>\s*([\s\S]*)\s*<\/SIDEVIEW WEAPONS>/i)){const _0x16f1c8=String(RegExp['$1'])[_0x2e693d(0x221)](/[\r\n]+/)[_0x2e693d(0xa32)](''),_0x328b88=DataManager[_0x2e693d(0xb3b)](_0x16f1c8);_0x26571c[_0x2e693d(0x768)]=DataManager[_0x2e693d(0x2ea)](_0x328b88);}}if(Imported['VisuMZ_1_ElementStatusCore']){const _0x30320f=this[_0x2e693d(0x688)]();for(const _0x1ec5ed of _0x30320f){const _0x27f26d=this['traitSet'](_0x1ec5ed)[_0x2e693d(0x4cc)][_0x2e693d(0x1ef)]()[_0x2e693d(0xf4)](),_0x5b6c9d=_0x1ec5ed[_0x2e693d(0x1ef)]()[_0x2e693d(0xf4)]();if(_0xcf2811[_0x2e693d(0x26e)](VisuMZ['ElementStatusCore'][_0x2e693d(0x55c)][_0x2e693d(0x6bf)[_0x2e693d(0x7d3)](_0x5b6c9d,_0x27f26d)]))_0x26571c[_0x2e693d(0x611)]=String(RegExp['$1']);else{if(_0xcf2811[_0x2e693d(0x26e)](VisuMZ[_0x2e693d(0xa84)][_0x2e693d(0x55c)][_0x2e693d(0x85a)[_0x2e693d(0x7d3)](_0x5b6c9d,_0x27f26d)])){const _0xb5f4a8=String(RegExp['$1'])[_0x2e693d(0x221)](/[\r\n]+/)['remove']('');_0x26571c[_0x2e693d(0x611)]=DataManager[_0x2e693d(0xb3b)](_0xb5f4a8);}}if(_0xcf2811[_0x2e693d(0x26e)](VisuMZ[_0x2e693d(0xa84)][_0x2e693d(0x55c)][_0x2e693d(0xe3)['format'](_0x5b6c9d,_0x27f26d)]))_0x26571c[_0x2e693d(0x768)]=DataManager[_0x2e693d(0x2ea)](RegExp['$1']);else{if(_0xcf2811[_0x2e693d(0x26e)](VisuMZ[_0x2e693d(0xa84)][_0x2e693d(0x55c)][_0x2e693d(0x1f2)[_0x2e693d(0x7d3)](_0x5b6c9d,_0x27f26d)])){const _0x50f014=String(RegExp['$1'])[_0x2e693d(0x221)](/[\r\n]+/)[_0x2e693d(0xa32)](''),_0x841491=DataManager[_0x2e693d(0xb3b)](_0x50f014);_0x26571c['wtypeId']=DataManager[_0x2e693d(0x2ea)](_0x841491);}}if(_0xcf2811[_0x2e693d(0x26e)](VisuMZ[_0x2e693d(0xa84)][_0x2e693d(0x55c)][_0x2e693d(0xe0)['format'](_0x5b6c9d,_0x27f26d)]))_0x26571c[_0x2e693d(0x4d2)]=String(RegExp['$1'])['toLowerCase']()['trim']();else{if(_0xcf2811[_0x2e693d(0x26e)](VisuMZ[_0x2e693d(0xa84)][_0x2e693d(0x55c)][_0x2e693d(0x867)['format'](_0x5b6c9d,_0x27f26d)])){const _0x539a90=String(RegExp['$1'])[_0x2e693d(0x221)](/[\r\n]+/)[_0x2e693d(0xa32)]('');_0x26571c[_0x2e693d(0x4d2)]=DataManager[_0x2e693d(0xb3b)](_0x539a90);}}}}},Game_Enemy[_0x23168f(0xa01)][_0x23168f(0x7c8)]=function(){const _0x436a82=_0x23168f;return this[_0x436a82(0x899)]||0x0;},Game_Enemy[_0x23168f(0xa01)]['attackAnimationId2']=function(){const _0x2ac7dd=_0x23168f;return this[_0x2ac7dd(0x7c8)]();},Game_Enemy[_0x23168f(0xa01)][_0x23168f(0x870)]=function(_0x34e6c5){const _0x529597=_0x23168f;return this[_0x529597(0x7c8)]();},Game_Enemy[_0x23168f(0xa01)][_0x23168f(0x202)]=function(){const _0x2c4cd5=_0x23168f;if(this[_0x2c4cd5(0x417)]()[_0x2c4cd5(0xae7)][_0x2c4cd5(0x26e)](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return Game_Battler[_0x2c4cd5(0xa01)][_0x2c4cd5(0x202)][_0x2c4cd5(0x88f)](this);},Game_Enemy[_0x23168f(0xa01)][_0x23168f(0x742)]=function(){const _0x536560=_0x23168f;if(this[_0x536560(0x417)]()['note'][_0x536560(0x26e)](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];},Game_Enemy[_0x23168f(0xa01)][_0x23168f(0xb33)]=function(){const _0x9e6181=_0x23168f,_0x3cc9be=[];for(const _0x15ddfe of this[_0x9e6181(0x417)]()[_0x9e6181(0x5ef)]){const _0x350770=$dataSkills[_0x15ddfe[_0x9e6181(0x975)]];if(_0x350770&&!_0x3cc9be[_0x9e6181(0x2d8)](_0x350770))_0x3cc9be[_0x9e6181(0x908)](_0x350770);}return _0x3cc9be;},Game_Enemy[_0x23168f(0xa01)][_0x23168f(0x548)]=function(){const _0x12171c=_0x23168f;let _0xdfc066=_0x12171c(0x548);if(this['checkCacheKey'](_0xdfc066))return this[_0x12171c(0x9f4)][_0xdfc066];return this[_0x12171c(0x9f4)][_0xdfc066]=this[_0x12171c(0x9d9)](this[_0x12171c(0x417)]()),this[_0x12171c(0x9f4)][_0xdfc066];},Game_Enemy['prototype'][_0x23168f(0x658)]=function(){const _0x2775b9=_0x23168f;let _0x529de0=_0x2775b9(0x658);if(this[_0x2775b9(0x8d4)](_0x529de0))return this[_0x2775b9(0x9f4)][_0x529de0];return this['_cache'][_0x529de0]=this[_0x2775b9(0x9fc)](this[_0x2775b9(0x417)]()),this['_cache'][_0x529de0];},Game_Enemy[_0x23168f(0xa01)][_0x23168f(0xd7)]=function(){const _0x15e8e7=_0x23168f;if(this[_0x15e8e7(0x3c6)]!==undefined)return this[_0x15e8e7(0x3c6)];return this[_0x15e8e7(0x732)](),this['_svBattlerData'];},Game_Enemy['prototype'][_0x23168f(0xb8b)]=function(){const _0x34a402=_0x23168f;return this[_0x34a402(0xd7)]()[_0x34a402(0x611)]!=='';},Game_Enemy[_0x23168f(0xa01)][_0x23168f(0x2ec)]=function(){const _0xe8d21c=_0x23168f;return this[_0xe8d21c(0xd7)]()['name'];},Game_Enemy[_0x23168f(0xa01)]['battlerSmoothImage']=function(){const _0x5e99a1=_0x23168f;return this[_0x5e99a1(0xb8b)]()?VisuMZ[_0x5e99a1(0x895)][_0x5e99a1(0xbac)][_0x5e99a1(0x33d)][_0x5e99a1(0x579)]:VisuMZ[_0x5e99a1(0x895)]['Settings'][_0x5e99a1(0xbeb)][_0x5e99a1(0x579)];},Game_Enemy[_0x23168f(0xa01)][_0x23168f(0xb80)]=function(_0x44c2e7){const _0x4ad10e=_0x23168f;Game_Battler[_0x4ad10e(0xa01)][_0x4ad10e(0xb80)][_0x4ad10e(0x88f)](this,_0x44c2e7);if(this['hasSvBattler']())this[_0x4ad10e(0x92c)](_0x44c2e7);},Game_Enemy['prototype'][_0x23168f(0xa9f)]=function(){const _0x30d955=_0x23168f,_0xd4d952=this[_0x30d955(0xd7)]()['wtypeId']||0x0,_0x45fb2d=$dataSystem[_0x30d955(0x818)][_0xd4d952];if(_0x45fb2d){if(_0x45fb2d['type']===0x0)this['requestMotion'](_0x30d955(0x245));else{if(_0x45fb2d[_0x30d955(0x158)]===0x1)this[_0x30d955(0x67a)]('swing');else _0x45fb2d['type']===0x2&&this['requestMotion']('missile');}}},Game_Enemy['prototype'][_0x23168f(0xa26)]=function(){const _0x38a403=_0x23168f,_0xed0449=this[_0x38a403(0xd7)]()[_0x38a403(0x768)]||0x0,_0x1c44ac=$dataSystem[_0x38a403(0x818)][_0xed0449];_0x1c44ac&&this['startWeaponAnimation'](_0x1c44ac[_0x38a403(0x111)]);},Game_Enemy['prototype'][_0x23168f(0x79f)]=function(){const _0x4307c3=_0x23168f,_0x233b0d=this[_0x4307c3(0xd7)]()[_0x4307c3(0x768)]||0x0;return $dataSystem[_0x4307c3(0x818)][_0x233b0d];},Game_Enemy[_0x23168f(0xa01)][_0x23168f(0x751)]=function(_0x47b1a6){const _0x4ab3ec=_0x23168f;return this[_0x4ab3ec(0x79f)]();},Game_Enemy[_0x23168f(0xa01)][_0x23168f(0x335)]=function(){const _0x53d4b6=_0x23168f;Game_Battler[_0x53d4b6(0xa01)][_0x53d4b6(0x335)][_0x53d4b6(0x88f)](this),this[_0x53d4b6(0x97a)]()&&this[_0x53d4b6(0xb8b)]()&&this[_0x53d4b6(0x67a)](_0x53d4b6(0x96e)),SoundManager[_0x53d4b6(0x527)]();},Game_Enemy['prototype'][_0x23168f(0x8c4)]=function(){const _0x535bd0=_0x23168f;Game_Battler[_0x535bd0(0xa01)]['performEvasion'][_0x535bd0(0x88f)](this),this[_0x535bd0(0x67a)](_0x535bd0(0xb0a));},Game_Enemy[_0x23168f(0xa01)][_0x23168f(0x2aa)]=function(){const _0x210d66=_0x23168f;Game_Battler['prototype'][_0x210d66(0x2aa)][_0x210d66(0x88f)](this),this[_0x210d66(0x67a)](_0x210d66(0xb0a));},Game_Enemy[_0x23168f(0xa01)]['performCounter']=function(){const _0x2710a1=_0x23168f;Game_Battler[_0x2710a1(0xa01)]['performCounter'][_0x2710a1(0x88f)](this),this[_0x2710a1(0xa9f)]();},Game_Enemy[_0x23168f(0xa01)][_0x23168f(0x740)]=function(){const _0x424ab5=_0x23168f;if(this[_0x424ab5(0xb8b)]()){if(this[_0x424ab5(0x8f7)]()>=0x1)return!![];return this['svBattlerData']()[_0x424ab5(0x250)];}else return!![];},Game_Enemy[_0x23168f(0xa01)]['svBattlerAnchorX']=function(){const _0x337e24=_0x23168f;return this[_0x337e24(0xd7)]()[_0x337e24(0xa2a)];},Game_Enemy[_0x23168f(0xa01)]['svBattlerAnchorY']=function(){const _0x4b190e=_0x23168f;return this[_0x4b190e(0xd7)]()['anchorY'];},Game_Enemy['prototype'][_0x23168f(0x90e)]=function(){const _0x2f8544=_0x23168f;return this[_0x2f8544(0xd7)]()[_0x2f8544(0x8d8)];},VisuMZ[_0x23168f(0x895)][_0x23168f(0x6dc)]=Game_Enemy[_0x23168f(0xa01)][_0x23168f(0x143)],Game_Enemy[_0x23168f(0xa01)][_0x23168f(0x143)]=function(_0x9dfcf7){const _0x500681=_0x23168f;VisuMZ[_0x500681(0x895)][_0x500681(0x6dc)][_0x500681(0x88f)](this,_0x9dfcf7),this['clearBattleCoreData'](),this[_0x500681(0x732)]();const _0x34590d=this[_0x500681(0xbb5)]();_0x34590d&&(_0x34590d['_battlerName']=undefined,_0x34590d['setBattler'](this));},Game_Enemy[_0x23168f(0xa01)][_0x23168f(0x9a4)]=function(){const _0xd123a8=_0x23168f,_0x4100d7=VisuMZ['BattleCore']['Settings'][_0xd123a8(0xbeb)];this[_0xd123a8(0x1b6)]=_0x4100d7[_0xd123a8(0x970)]??0x0;},Game_Enemy[_0x23168f(0xa01)]['isNameTemporarilyVisible']=function(){const _0xd79e41=_0x23168f;return this[_0xd79e41(0x1b6)]&&this[_0xd79e41(0x1b6)]>0x0;},Game_Enemy[_0x23168f(0xa01)][_0x23168f(0x1c1)]=function(){const _0xbcf660=_0x23168f;this[_0xbcf660(0x1b6)]&&this[_0xbcf660(0x1b6)]>0x0&&this[_0xbcf660(0x1b6)]--;},Game_Enemy[_0x23168f(0xa01)][_0x23168f(0x8d0)]=function(){const _0x1910b0=_0x23168f;this[_0x1910b0(0x1b6)]=0x0;},Game_Enemy[_0x23168f(0xa01)][_0x23168f(0xafc)]=function(){const _0x788fe4=_0x23168f;this[_0x788fe4(0x1a4)]();const _0x4e1e44=this[_0x788fe4(0x417)]()[_0x788fe4(0xae7)]||'';if(_0x4e1e44['match'](/<ASPECT NAME:[ ](.*)>/i)){const _0x17939d=String(RegExp['$1']);this['getAspectData']()['name']=_0x17939d[_0x788fe4(0x7d3)](this[_0x788fe4(0x931)]());}_0x4e1e44[_0x788fe4(0x26e)](/<ASPECT ICON:[ ](\d+)>/i)&&(this[_0x788fe4(0x89d)]()[_0x788fe4(0x761)]=Number(RegExp['$1'])),_0x4e1e44[_0x788fe4(0x26e)](/<ASPECT COLOR:[ ](.*)>/i)&&(this[_0x788fe4(0x89d)]()['nameColor']=String(RegExp['$1'])),_0x4e1e44[_0x788fe4(0x26e)](/<ASPECT DESCRIPTION>\s*([\s\S]*)\s*<\/ASPECT DESCRIPTION>/i)&&(this['getAspectData']()['description']=String(RegExp['$1']));},Game_Enemy[_0x23168f(0xa01)]['clearBattleCoreAspects']=function(){const _0x7635d6=_0x23168f,_0x535a9f=VisuMZ[_0x7635d6(0x895)][_0x7635d6(0xbac)][_0x7635d6(0xbeb)][_0x7635d6(0x3f2)]??_0x7635d6(0x9bd);this[_0x7635d6(0x309)]={'name':_0x535a9f[_0x7635d6(0x7d3)](this['originalName']()),'iconIndex':VisuMZ[_0x7635d6(0x895)][_0x7635d6(0xbac)][_0x7635d6(0xbeb)]['AspectIcon']??0x1a,'nameColor':VisuMZ[_0x7635d6(0x895)]['Settings'][_0x7635d6(0xbeb)][_0x7635d6(0x22b)]??'2','description':''};},Game_Enemy[_0x23168f(0xa01)]['getAspectData']=function(){const _0x7532ae=_0x23168f;if(this['_aspectData']===undefined)this['setupBattleCoreAspects']();return this[_0x7532ae(0x309)];},Game_Enemy[_0x23168f(0xa01)][_0x23168f(0x824)]=function(){const _0x45aee1=_0x23168f;return(this[_0x45aee1(0x89d)]()[_0x45aee1(0x3ef)]||'')[_0x45aee1(0x312)]>0x0;},Game_BattlerBase[_0x23168f(0xa01)]['damagePopupPosition']=function(){const _0x448828=_0x23168f;return VisuMZ['BattleCore'][_0x448828(0xbac)][_0x448828(0x642)][_0x448828(0x82d)];},Game_Enemy[_0x23168f(0xa01)]['damagePopupPosition']=function(){const _0x440ef0=_0x23168f,_0xb2b77b=this[_0x440ef0(0x417)]()?this[_0x440ef0(0x417)]()[_0x440ef0(0xae7)]||'':'';if(_0xb2b77b[_0x440ef0(0x26e)](/<POPUP POSITION: HEAD>/i))return _0x440ef0(0xb25);else{if(_0xb2b77b[_0x440ef0(0x26e)](/<POPUP POSITION: CENTER>/i))return'center';else{if(_0xb2b77b['match'](/<POPUP POSITION: BASE>/i))return _0x440ef0(0xa85);}}return Game_BattlerBase[_0x440ef0(0xa01)]['damagePopupPosition'][_0x440ef0(0x88f)](this);},Game_BattlerBase[_0x23168f(0xa01)][_0x23168f(0x2b4)]=function(){return 0x0;},Game_Enemy[_0x23168f(0xa01)][_0x23168f(0x2b4)]=function(){const _0x1a3f0a=_0x23168f,_0x19001f=this[_0x1a3f0a(0x417)]()?this['enemy']()['note']||'':'';if(_0x19001f[_0x1a3f0a(0x26e)](/<POPUP OFFSET X: ([\+\-]\d+)>/i))return Number(RegExp['$1']);return Game_BattlerBase[_0x1a3f0a(0xa01)][_0x1a3f0a(0x2b4)]['call'](this);},Game_BattlerBase[_0x23168f(0xa01)][_0x23168f(0x69a)]=function(){return 0x0;},Game_Enemy['prototype'][_0x23168f(0x69a)]=function(){const _0x416616=_0x23168f,_0x1f8b68=this['enemy']()?this[_0x416616(0x417)]()[_0x416616(0xae7)]||'':'';if(_0x1f8b68[_0x416616(0x26e)](/<POPUP OFFSET Y: ([\+\-]\d+)>/i))return Number(RegExp['$1']);return Game_BattlerBase[_0x416616(0xa01)][_0x416616(0x69a)][_0x416616(0x88f)](this);},Game_Unit[_0x23168f(0xa01)][_0x23168f(0x5cf)]=function(_0x344bd4){const _0x3ed2dc=_0x23168f;for(const _0x42d3a2 of this[_0x3ed2dc(0xa1d)]()){if(_0x42d3a2)_0x42d3a2['processBattleCoreJS'](_0x344bd4);}},Game_Unit[_0x23168f(0xa01)]['trueRandomTarget']=function(){const _0x2c5d87=_0x23168f,_0x361cfd=this[_0x2c5d87(0x2a6)]();return _0x361cfd[Math[_0x2c5d87(0xa31)](_0x361cfd[_0x2c5d87(0x312)])];},VisuMZ[_0x23168f(0x895)][_0x23168f(0x746)]=Game_Party[_0x23168f(0xa01)][_0x23168f(0x844)],Game_Party[_0x23168f(0xa01)][_0x23168f(0x844)]=function(_0x3489cd){const _0x114ddd=_0x23168f;VisuMZ[_0x114ddd(0x895)][_0x114ddd(0x746)]['call'](this,_0x3489cd),BattleManager[_0x114ddd(0xca)]();},VisuMZ[_0x23168f(0x895)][_0x23168f(0x40d)]=Game_Party['prototype'][_0x23168f(0x321)],Game_Party[_0x23168f(0xa01)][_0x23168f(0x321)]=function(_0x5a3127){const _0x3ed9aa=_0x23168f;VisuMZ[_0x3ed9aa(0x895)][_0x3ed9aa(0x40d)][_0x3ed9aa(0x88f)](this,_0x5a3127),BattleManager[_0x3ed9aa(0xca)]();},VisuMZ[_0x23168f(0x895)][_0x23168f(0x85f)]=Game_Troop[_0x23168f(0xa01)]['setup'],Game_Troop[_0x23168f(0xa01)]['setup']=function(_0x21ef3f){const _0x1f3904=_0x23168f;$gameTemp['clearForcedGameTroopSettingsBattleCore'](),$gameTemp[_0x1f3904(0x11a)](_0x21ef3f),VisuMZ[_0x1f3904(0x895)][_0x1f3904(0x85f)][_0x1f3904(0x88f)](this,_0x21ef3f),this[_0x1f3904(0x387)]();},VisuMZ[_0x23168f(0x895)][_0x23168f(0x9d5)]=Game_Troop[_0x23168f(0xa01)][_0x23168f(0x6c5)],Game_Troop[_0x23168f(0xa01)][_0x23168f(0x6c5)]=function(){const _0x2efe69=_0x23168f;let _0x1ed709=VisuMZ[_0x2efe69(0x895)][_0x2efe69(0x9d5)][_0x2efe69(0x88f)](this);return this[_0x2efe69(0x57f)]&&(_0x1ed709*=this[_0x2efe69(0x57f)]()),Math[_0x2efe69(0x330)](_0x1ed709);},Game_Troop['prototype'][_0x23168f(0x57f)]=function(){return 0x1;},Game_Troop[_0x23168f(0xa01)][_0x23168f(0x387)]=function(){const _0x30d59e=_0x23168f,_0x2e43c7=DataManager[_0x30d59e(0x600)](this['troop']()['id']);if(_0x2e43c7[_0x30d59e(0x26e)](/<(?:EXTEND|ADD):[ ](.*?)>/i)){const _0x582ae3=RegExp['$1'][_0x30d59e(0x221)](',')[_0x30d59e(0x37f)](_0x31e1fd=>Number(_0x31e1fd));this[_0x30d59e(0x827)](),this[_0x30d59e(0x461)](_0x582ae3);}},Game_Troop[_0x23168f(0xa01)][_0x23168f(0x827)]=function(){const _0xe66689=_0x23168f;let _0x47a714=_0xe66689(0x2a5)+'\x0a';_0x47a714+='version\x20in\x20order\x20to\x20use\x20the\x20<Extend:\x20x>\x20function.',Imported['VisuMZ_2_BattleSystemBTB']&&(VisuMZ['BattleSystemBTB']['version']<1.11&&(alert(_0x47a714['format']('BTB')),SceneManager[_0xe66689(0x46e)]())),Imported[_0xe66689(0x8a1)]&&(VisuMZ[_0xe66689(0x9b7)][_0xe66689(0x82e)]<1.19&&(alert(_0x47a714[_0xe66689(0x7d3)]('CTB')),SceneManager['exit']())),Imported[_0xe66689(0x636)]&&(VisuMZ[_0xe66689(0x904)]['version']<1.15&&(alert(_0x47a714[_0xe66689(0x7d3)](_0xe66689(0x774))),SceneManager[_0xe66689(0x46e)]()));},Game_Troop['prototype'][_0x23168f(0x461)]=function(_0x3d6ff7){const _0x338a7d=_0x23168f;this[_0x338a7d(0x841)]={};for(const _0x87bc6c of this[_0x338a7d(0xa1d)]()){if(!_0x87bc6c)continue;_0x87bc6c[_0x338a7d(0x17a)]('');}for(const _0x5e9709 of _0x3d6ff7){const _0x4c9fa9=$dataTroops[_0x5e9709];if(_0x4c9fa9)this[_0x338a7d(0x4c4)](_0x4c9fa9);}this[_0x338a7d(0xeb)]();},Game_Troop['prototype'][_0x23168f(0x4c4)]=function(_0x426110){const _0x531a34=_0x23168f;for(const _0x379252 of _0x426110[_0x531a34(0xa1d)]){if($dataEnemies[_0x379252['enemyId']]){const _0x590ba7=_0x379252[_0x531a34(0xe2)],_0x4e47ed=_0x379252['x'],_0x936eb8=_0x379252['y'],_0x269c73=new Game_Enemy(_0x590ba7,_0x4e47ed,_0x936eb8);_0x379252[_0x531a34(0x324)]&&_0x269c73[_0x531a34(0x198)](),this['_enemies']['push'](_0x269c73);}}},VisuMZ[_0x23168f(0x895)]['Game_Map_setupBattleback']=Game_Map[_0x23168f(0xa01)][_0x23168f(0x2ba)],Game_Map['prototype'][_0x23168f(0x2ba)]=function(){const _0x236107=_0x23168f;VisuMZ['BattleCore'][_0x236107(0x758)]['call'](this),this[_0x236107(0x575)]();},Game_Map[_0x23168f(0xa01)]['setupBattlebackBattleCore']=function(){const _0x195936=_0x23168f;this['_regionBattleback1']={},this['_regionBattleback2']={};if(!$dataMap)return;const _0x1d1fc1=$dataMap[_0x195936(0xae7)];if(!_0x1d1fc1)return;const _0x563e76=_0x1d1fc1[_0x195936(0x26e)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x563e76)for(const _0x1a939b of _0x563e76){_0x1a939b['match'](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x192481=Number(RegExp['$1']),_0xc7f1f9=Number(RegExp['$2']),_0x2f5bbd=_0xc7f1f9===0x1?this[_0x195936(0x33f)]:this[_0x195936(0x99b)],_0x5e6dc4=String(RegExp['$3']);_0x2f5bbd[_0x192481]=_0x5e6dc4;}},VisuMZ['BattleCore']['Game_Map_battleback1Name']=Game_Map['prototype'][_0x23168f(0x693)],Game_Map[_0x23168f(0xa01)]['battleback1Name']=function(){const _0x64f2ef=_0x23168f;if(!BattleManager['isBattleTest']()){const _0x2ff06f=$gamePlayer[_0x64f2ef(0xbd1)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x64f2ef(0x33f)]&&this[_0x64f2ef(0x33f)][_0x2ff06f])return this[_0x64f2ef(0x33f)][_0x2ff06f];}return VisuMZ[_0x64f2ef(0x895)][_0x64f2ef(0x205)][_0x64f2ef(0x88f)](this);},VisuMZ[_0x23168f(0x895)][_0x23168f(0x48f)]=Game_Map[_0x23168f(0xa01)][_0x23168f(0x39b)],Game_Map['prototype'][_0x23168f(0x39b)]=function(){const _0x571cf3=_0x23168f;if(!BattleManager[_0x571cf3(0x30a)]()){const _0x40c131=$gamePlayer[_0x571cf3(0xbd1)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x571cf3(0x33f)]&&this['_regionBattleback2'][_0x40c131])return this['_regionBattleback2'][_0x40c131];}return VisuMZ[_0x571cf3(0x895)]['Game_Map_battleback2Name'][_0x571cf3(0x88f)](this);},VisuMZ[_0x23168f(0x895)]['Game_Map_encounterList']=Game_Map['prototype']['encounterList'],Game_Map[_0x23168f(0xa01)]['encounterList']=function(){const _0x453f42=_0x23168f;let _0x2027ee=JsonEx[_0x453f42(0x5fe)](VisuMZ['BattleCore'][_0x453f42(0x911)][_0x453f42(0x88f)](this));return VisuMZ['BattleCore']['ShuffleArray'](_0x2027ee);},VisuMZ[_0x23168f(0x895)][_0x23168f(0xa59)]=function(_0x2a3ef7){const _0x1127ba=_0x23168f;var _0x4d3f31,_0x2bf314,_0xd7f48a;for(_0xd7f48a=_0x2a3ef7['length']-0x1;_0xd7f48a>0x0;_0xd7f48a--){_0x4d3f31=Math[_0x1127ba(0x58e)](Math[_0x1127ba(0x173)]()*(_0xd7f48a+0x1)),_0x2bf314=_0x2a3ef7[_0xd7f48a],_0x2a3ef7[_0xd7f48a]=_0x2a3ef7[_0x4d3f31],_0x2a3ef7[_0x4d3f31]=_0x2bf314;}return _0x2a3ef7;},VisuMZ[_0x23168f(0x895)][_0x23168f(0x102)]=Game_Interpreter[_0x23168f(0xa01)]['command357'],Game_Interpreter[_0x23168f(0xa01)][_0x23168f(0x350)]=function(_0xbbb781){const _0x3772b8=_0x23168f;return $gameTemp[_0x3772b8(0x9e4)](this),VisuMZ[_0x3772b8(0x895)][_0x3772b8(0x102)][_0x3772b8(0x88f)](this,_0xbbb781);},VisuMZ[_0x23168f(0x895)][_0x23168f(0x806)]=Game_Interpreter['prototype'][_0x23168f(0xb17)],Game_Interpreter['prototype'][_0x23168f(0xb17)]=function(){const _0x1b7fdc=_0x23168f;if(SceneManager[_0x1b7fdc(0xbef)]())switch(this[_0x1b7fdc(0x15e)]){case _0x1b7fdc(0x3b7):if(Imported[_0x1b7fdc(0x6f9)]){if($gameScreen[_0x1b7fdc(0x6e8)]()['angleDuration']>0x0)return!![];this[_0x1b7fdc(0x15e)]='';}break;case _0x1b7fdc(0x938):if(BattleManager[_0x1b7fdc(0xa73)][_0x1b7fdc(0x298)]())return!![];this['_waitMode']='';break;case'battleBalloon':if(BattleManager[_0x1b7fdc(0xa73)][_0x1b7fdc(0x38d)]())return!![];this[_0x1b7fdc(0x15e)]='';break;case _0x1b7fdc(0x8f3):if(Imported['VisuMZ_3_ActSeqCamera']){if($gameScreen[_0x1b7fdc(0x6e8)]()[_0x1b7fdc(0x952)]>0x0)return!![];if($gameScreen[_0x1b7fdc(0x6e8)]()['cameraOffsetDuration']>0x0)return!![];this['_waitMode']='';}break;case _0x1b7fdc(0x62a):if(BattleManager[_0x1b7fdc(0xa73)][_0x1b7fdc(0xa9c)]())return!![];this[_0x1b7fdc(0x15e)]='';break;case _0x1b7fdc(0x860):if(BattleManager[_0x1b7fdc(0xa73)][_0x1b7fdc(0x4f2)]())return!![];this[_0x1b7fdc(0x15e)]='';break;case _0x1b7fdc(0x46b):if(BattleManager[_0x1b7fdc(0xa73)][_0x1b7fdc(0xb7)]())return!![];this[_0x1b7fdc(0x15e)]='';break;case _0x1b7fdc(0xb86):if(BattleManager[_0x1b7fdc(0x397)][_0x1b7fdc(0x224)]())return!![];this[_0x1b7fdc(0x15e)]='';break;case _0x1b7fdc(0xacc):if(BattleManager[_0x1b7fdc(0xa73)]['isAnyoneMoving']())return!![];this[_0x1b7fdc(0x15e)]='';break;case _0x1b7fdc(0x524):if(BattleManager[_0x1b7fdc(0xa73)][_0x1b7fdc(0x533)]())return!![];this['_waitMode']='';break;case _0x1b7fdc(0x508):if(BattleManager[_0x1b7fdc(0xa73)][_0x1b7fdc(0x8c0)]())return!![];this['_waitMode']='';break;case _0x1b7fdc(0xaea):if(BattleManager[_0x1b7fdc(0xa73)][_0x1b7fdc(0x8f6)]())return!![];this[_0x1b7fdc(0x15e)]='';break;case'battleProjectiles':if(Imported[_0x1b7fdc(0x94f)]){if(BattleManager[_0x1b7fdc(0xa73)]['isAnyProjectilePresent']())return!![];this[_0x1b7fdc(0x15e)]='';}break;case _0x1b7fdc(0x9dc):if(Imported['VisuMZ_3_ActSeqCamera']){if($gameScreen[_0x1b7fdc(0x6e8)]()[_0x1b7fdc(0x697)]>0x0)return!![];this['_waitMode']='';}break;case'battleSpin':if(BattleManager[_0x1b7fdc(0xa73)][_0x1b7fdc(0x961)]())return!![];this['_waitMode']='';break;case _0x1b7fdc(0xbcb):if(Imported['VisuMZ_3_ActSeqCamera']){if($gameScreen[_0x1b7fdc(0x6e8)]()['zoomDuration']>0x0)return!![];this[_0x1b7fdc(0x15e)]='';}break;case _0x1b7fdc(0x251):if(Imported[_0x1b7fdc(0x965)]){if(BattleManager[_0x1b7fdc(0xa73)]['isAnyoneInjectAniPrepping']){if(BattleManager[_0x1b7fdc(0xa73)][_0x1b7fdc(0x3bb)]())return!![];this[_0x1b7fdc(0x15e)]=_0x1b7fdc(0xac0);}else this[_0x1b7fdc(0x15e)]='';break;}break;case _0x1b7fdc(0xac0):if(Imported[_0x1b7fdc(0x965)]){if(BattleManager[_0x1b7fdc(0xa73)]['isAnyoneInjectAnimating']())return!![];this[_0x1b7fdc(0x15e)]='';}break;}return VisuMZ[_0x1b7fdc(0x895)][_0x1b7fdc(0x806)][_0x1b7fdc(0x88f)](this);},VisuMZ[_0x23168f(0x895)][_0x23168f(0x987)]=Game_Interpreter[_0x23168f(0xa01)]['command301'],Game_Interpreter['prototype'][_0x23168f(0x315)]=function(_0x58e7a0){const _0x315b33=_0x23168f;return!$gameParty[_0x315b33(0x660)]()?this[_0x315b33(0x3a7)](_0x58e7a0):VisuMZ[_0x315b33(0x895)][_0x315b33(0x987)][_0x315b33(0x88f)](this,_0x58e7a0);},Game_Interpreter[_0x23168f(0xa01)][_0x23168f(0xbf7)]=function(_0x255a51){const _0x4c729d=_0x23168f;return VisuMZ[_0x4c729d(0x895)][_0x4c729d(0x987)][_0x4c729d(0x88f)](this,_0x255a51),BattleManager[_0x4c729d(0x800)](_0x50d310=>{const _0x1f49b5=_0x4c729d;this[_0x1f49b5(0x49a)][this[_0x1f49b5(0x3cf)]]=_0x50d310;}),!![];},VisuMZ[_0x23168f(0x895)]['CheckMapBattleEventValid']=function(_0x12884b){const _0x1e71f0=_0x23168f,_0x4e495a=$dataCommonEvents[_0x12884b];if(!_0x4e495a)return![];if(_0x4e495a[_0x1e71f0(0x290)][_0x1e71f0(0x312)]<=0x1)return![];return!![];},Game_Interpreter[_0x23168f(0xa01)][_0x23168f(0x3a7)]=function(_0x35cc31){const _0x5a6f92=_0x23168f,_0x2b8faf=VisuMZ[_0x5a6f92(0x895)][_0x5a6f92(0xbac)][_0x5a6f92(0x929)],_0x1fe423=_0x2b8faf[_0x5a6f92(0xbd)],_0x5d3cf1=$dataCommonEvents[_0x1fe423];if(_0x5d3cf1&&VisuMZ[_0x5a6f92(0x895)][_0x5a6f92(0x65f)](_0x1fe423)){const _0x37ec88=this[_0x5a6f92(0x620)]()?this[_0x5a6f92(0x47f)]:0x0,_0x4710a8=_0x5d3cf1['list'];this[_0x5a6f92(0x90d)](_0x4710a8,_0x37ec88),this[_0x5a6f92(0x4f5)]=JsonEx[_0x5a6f92(0x5fe)](this[_0x5a6f92(0x4f5)]);const _0x5c2133={'code':0xbc3,'indent':this[_0x5a6f92(0x3cf)],'parameters':JsonEx[_0x5a6f92(0x5fe)](_0x35cc31)};return this[_0x5a6f92(0x4f5)][_0x5a6f92(0x515)](this['_index']+0x1,0x0,_0x5c2133),!![];}else return VisuMZ[_0x5a6f92(0x895)]['Game_Interpreter_command301'][_0x5a6f92(0x88f)](this,_0x35cc31);},VisuMZ['BattleCore'][_0x23168f(0x647)]=BattleManager[_0x23168f(0x862)],BattleManager[_0x23168f(0x862)]=function(){const _0x1ea22a=_0x23168f;VisuMZ[_0x1ea22a(0x895)][_0x1ea22a(0x647)][_0x1ea22a(0x88f)](this),this[_0x1ea22a(0x4ef)]();},BattleManager[_0x23168f(0x4ef)]=function(){const _0x4363c8=_0x23168f,_0x32eb0e=VisuMZ[_0x4363c8(0x895)]['Settings']['Mechanics'],_0x2c12f8=_0x32eb0e[_0x4363c8(0xbd)];_0x2c12f8&&VisuMZ['BattleCore'][_0x4363c8(0x65f)](_0x2c12f8)&&(this[_0x4363c8(0x89f)]=!![],$gameTemp[_0x4363c8(0xb53)](_0x32eb0e[_0x4363c8(0xbd)]),$gameMap[_0x4363c8(0x587)](),$gameMap[_0x4363c8(0x6d8)][_0x4363c8(0x778)]=!![]),_0x32eb0e[_0x4363c8(0x10f)]>0x0&&(this[_0x4363c8(0x35b)]=!![]);},VisuMZ[_0x23168f(0x895)][_0x23168f(0x517)]=Scene_Map[_0x23168f(0xa01)]['updateCallMenu'],Scene_Map[_0x23168f(0xa01)]['updateCallMenu']=function(){const _0x573a57=_0x23168f;if(BattleManager['_battleCoreBattleStartEvent'])return;VisuMZ['BattleCore'][_0x573a57(0x517)][_0x573a57(0x88f)](this);},VisuMZ[_0x23168f(0x895)][_0x23168f(0x68d)]=Scene_Map['prototype'][_0x23168f(0x7bb)],Scene_Map[_0x23168f(0xa01)][_0x23168f(0x7bb)]=function(){const _0x99c425=_0x23168f;BattleManager[_0x99c425(0x89f)]?this[_0x99c425(0x162)]():VisuMZ['BattleCore'][_0x99c425(0x68d)][_0x99c425(0x88f)](this);},Scene_Map[_0x23168f(0xa01)][_0x23168f(0x162)]=function(){const _0x308d63=_0x23168f;this[_0x308d63(0x25d)]=!![];},VisuMZ[_0x23168f(0x895)][_0x23168f(0xb7b)]=SceneManager[_0x23168f(0x340)],SceneManager['isSceneChanging']=function(){const _0x5bfb9c=_0x23168f;if(BattleManager['_battleCoreBattleStartEvent'])return![];return VisuMZ[_0x5bfb9c(0x895)][_0x5bfb9c(0xb7b)]['call'](this);},VisuMZ['BattleCore'][_0x23168f(0x246)]=Game_Interpreter[_0x23168f(0xa01)][_0x23168f(0x454)],Game_Interpreter[_0x23168f(0xa01)][_0x23168f(0x454)]=function(){const _0x3b5520=_0x23168f;VisuMZ[_0x3b5520(0x895)][_0x3b5520(0x246)][_0x3b5520(0x88f)](this),this[_0x3b5520(0x778)]&&(this[_0x3b5520(0x778)]=undefined,SceneManager[_0x3b5520(0x23e)][_0x3b5520(0x607)]());},Scene_Map[_0x23168f(0xa01)][_0x23168f(0x607)]=function(){const _0x21f631=_0x23168f;BattleManager[_0x21f631(0x89f)]=undefined,BattleManager['_battleCoreBattleResumeAfter']=!![],this[_0x21f631(0x370)]();},VisuMZ[_0x23168f(0x895)]['Scene_Map_initializeAfter']=Scene_Map[_0x23168f(0xa01)][_0x23168f(0x8c9)],Scene_Map[_0x23168f(0xa01)][_0x23168f(0x8c9)]=function(){const _0x5a34f2=_0x23168f;VisuMZ[_0x5a34f2(0x895)][_0x5a34f2(0xdd)][_0x5a34f2(0x88f)](this),BattleManager[_0x5a34f2(0x6fd)]&&(this[_0x5a34f2(0x25d)]=!![],BattleManager[_0x5a34f2(0x6fd)]=undefined);},VisuMZ[_0x23168f(0x895)][_0x23168f(0x7a6)]=Scene_Map['prototype']['initialize'],Scene_Map['prototype'][_0x23168f(0x8c9)]=function(){const _0x2801fc=_0x23168f;VisuMZ[_0x2801fc(0x895)][_0x2801fc(0x7a6)][_0x2801fc(0x88f)](this),$gameTemp[_0x2801fc(0x5d3)]();},VisuMZ[_0x23168f(0x895)][_0x23168f(0x8bd)]=Scene_ItemBase[_0x23168f(0xa01)][_0x23168f(0xa13)],Scene_ItemBase['prototype'][_0x23168f(0xa13)]=function(){const _0x58b23e=_0x23168f;VisuMZ[_0x58b23e(0x895)]['Scene_ItemBase_applyItem'][_0x58b23e(0x88f)](this);if(this[_0x58b23e(0x42e)]()[_0x58b23e(0xae7)][_0x58b23e(0x26e)](/<BYPASS AUTO ACTION SEQUENCE>/i))return;this['item']()[_0x58b23e(0xae7)]['match'](/<CUSTOM ACTION SEQUENCE>/i)&&($gameTemp['_commonEventQueue']=[]),DataManager[_0x58b23e(0x501)](this[_0x58b23e(0x42e)]())&&($gameTemp[_0x58b23e(0x6e4)]=[]);},VisuMZ[_0x23168f(0x895)][_0x23168f(0xec)]=Scene_Options[_0x23168f(0xa01)][_0x23168f(0x2b0)],Scene_Options[_0x23168f(0xa01)]['maxCommands']=function(){const _0x20dad7=_0x23168f;let _0x6f1433=VisuMZ[_0x20dad7(0x895)][_0x20dad7(0xec)][_0x20dad7(0x88f)](this);const _0x41249f=VisuMZ[_0x20dad7(0x895)][_0x20dad7(0xbac)];if(_0x41249f[_0x20dad7(0x771)][_0x20dad7(0x9fd)]&&_0x41249f[_0x20dad7(0x771)][_0x20dad7(0x8bf)])_0x6f1433+=0x2;if(_0x41249f[_0x20dad7(0x382)][_0x20dad7(0x9fd)]&&_0x41249f[_0x20dad7(0x382)][_0x20dad7(0x8bf)])_0x6f1433+=0x1;return _0x6f1433;},VisuMZ[_0x23168f(0x895)][_0x23168f(0x230)]=Scene_Battle[_0x23168f(0xa01)]['initialize'],Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x8c9)]=function(){const _0x2008aa=_0x23168f;VisuMZ['BattleCore'][_0x2008aa(0x230)][_0x2008aa(0x88f)](this),this[_0x2008aa(0x365)]();},VisuMZ[_0x23168f(0x895)][_0x23168f(0x79e)]=Scene_Battle[_0x23168f(0xa01)][_0x23168f(0xabc)],Scene_Battle[_0x23168f(0xa01)]['start']=function(){const _0x3e36f6=_0x23168f;SceneManager['isPreviousSceneBattleTransitionable']()?(Scene_Message[_0x3e36f6(0xa01)][_0x3e36f6(0xabc)]['call'](this),this['_spriteset']&&this[_0x3e36f6(0xa73)][_0x3e36f6(0x926)](),BattleManager['_tpbSceneChangeCacheActor']&&BattleManager['revertTpbCachedActor']()):(VisuMZ[_0x3e36f6(0x895)][_0x3e36f6(0x79e)][_0x3e36f6(0x88f)](this),$gameTroop[_0x3e36f6(0x5c7)]());},VisuMZ[_0x23168f(0x895)][_0x23168f(0x1ec)]=Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x370)],Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x370)]=function(){const _0x50c15d=_0x23168f;SceneManager['isNextSceneBattleTransitionable']()?Scene_Message[_0x50c15d(0xa01)][_0x50c15d(0x370)][_0x50c15d(0x88f)](this):VisuMZ[_0x50c15d(0x895)][_0x50c15d(0x1ec)][_0x50c15d(0x88f)](this);},VisuMZ[_0x23168f(0x895)][_0x23168f(0x971)]=Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x454)],Scene_Battle[_0x23168f(0xa01)]['terminate']=function(){const _0x3851eb=_0x23168f;SceneManager[_0x3851eb(0xafa)]()?Scene_Message[_0x3851eb(0xa01)][_0x3851eb(0x454)][_0x3851eb(0x88f)](this):VisuMZ[_0x3851eb(0x895)][_0x3851eb(0x971)]['call'](this),$gameTemp[_0x3851eb(0xa82)](),this[_0x3851eb(0x365)]();},Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x82f)]=function(){const _0x7892bc=_0x23168f;if(ConfigManager['uiMenuStyle']&&ConfigManager[_0x7892bc(0x613)]!==undefined)return ConfigManager[_0x7892bc(0x613)];else{if(this[_0x7892bc(0x3f3)]()==='border')return![];else{return Scene_Message[_0x7892bc(0xa01)]['isRightInputMode'][_0x7892bc(0x88f)](this);;}}},VisuMZ['BattleCore'][_0x23168f(0x6a0)]=Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x7b7)],Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x7b7)]=function(){const _0x4a00d5=_0x23168f;VisuMZ[_0x4a00d5(0x895)][_0x4a00d5(0x6a0)][_0x4a00d5(0x88f)](this),this[_0x4a00d5(0x3f3)]()===_0x4a00d5(0x829)&&this[_0x4a00d5(0x7c9)]();},Scene_Battle[_0x23168f(0xa01)]['setVisibleUI']=function(_0x4bdb25){const _0x195a05=_0x23168f;_0x4bdb25?(this[_0x195a05(0x946)]['x']=(Graphics[_0x195a05(0x2e0)]-Graphics[_0x195a05(0x2d7)])/0x2,this[_0x195a05(0x946)]['y']=(Graphics['height']-Graphics[_0x195a05(0x493)])/0x2):(this[_0x195a05(0x946)]['x']=Graphics[_0x195a05(0x2e0)]*0xa,this['_windowLayer']['y']=Graphics[_0x195a05(0xb1c)]*0xa);},VisuMZ['BattleCore']['Scene_Battle_selectNextCommand']=Scene_Battle[_0x23168f(0xa01)]['selectNextCommand'],Scene_Battle[_0x23168f(0xa01)][_0x23168f(0xae8)]=function(){const _0x5677ce=_0x23168f,_0x77b4e6=BattleManager[_0x5677ce(0x20c)]();VisuMZ['BattleCore'][_0x5677ce(0x3f8)][_0x5677ce(0x88f)](this);if(_0x77b4e6){if(_0x77b4e6===BattleManager[_0x5677ce(0x20c)]())return;if(_0x77b4e6===BattleManager[_0x5677ce(0x530)])return;if(_0x77b4e6[_0x5677ce(0xbb5)]())_0x77b4e6['battler']()[_0x5677ce(0x271)]();}},VisuMZ['BattleCore'][_0x23168f(0x968)]=Scene_Battle[_0x23168f(0xa01)][_0x23168f(0xa88)],Scene_Battle[_0x23168f(0xa01)]['selectPreviousCommand']=function(){const _0x12c2e1=_0x23168f,_0x4fcd21=BattleManager[_0x12c2e1(0x20c)]();if(_0x4fcd21&&_0x4fcd21[_0x12c2e1(0xbb5)])_0x4fcd21[_0x12c2e1(0xbb5)]()[_0x12c2e1(0x271)]();VisuMZ[_0x12c2e1(0x895)]['Scene_Battle_selectPreviousCommand'][_0x12c2e1(0x88f)](this);},VisuMZ[_0x23168f(0x895)][_0x23168f(0x61e)]=Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x1cb)],Scene_Battle[_0x23168f(0xa01)]['createAllWindows']=function(){const _0x5e7322=_0x23168f;this[_0x5e7322(0xa18)](),VisuMZ['BattleCore'][_0x5e7322(0x61e)][_0x5e7322(0x88f)](this),this['createAutoBattleWindow']();},VisuMZ['BattleCore'][_0x23168f(0xab9)]=Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x3d3)],Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x3d3)]=function(){const _0x5ae538=_0x23168f;if(VisuMZ[_0x5ae538(0x895)][_0x5ae538(0xbac)][_0x5ae538(0x15b)]['BattleLogRectJS'])return VisuMZ[_0x5ae538(0x895)]['Settings'][_0x5ae538(0x15b)][_0x5ae538(0x9b1)][_0x5ae538(0x88f)](this);return VisuMZ[_0x5ae538(0x895)][_0x5ae538(0xab9)][_0x5ae538(0x88f)](this);},VisuMZ[_0x23168f(0x895)][_0x23168f(0x995)]=Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x87d)],Scene_Battle[_0x23168f(0xa01)]['createPartyCommandWindow']=function(){const _0x302711=_0x23168f;VisuMZ['BattleCore'][_0x302711(0x995)][_0x302711(0x88f)](this),this['createPartyCommandWindowBattleCore']();},Scene_Battle[_0x23168f(0xa01)]['createPartyCommandWindowBattleCore']=function(){const _0xc13fc0=_0x23168f,_0xba166d=this[_0xc13fc0(0x17b)];_0xba166d[_0xc13fc0(0x838)]('autoBattle',this[_0xc13fc0(0x897)][_0xc13fc0(0x7f5)](this)),_0xba166d[_0xc13fc0(0x838)](_0xc13fc0(0x428),this['commandOptions'][_0xc13fc0(0x7f5)](this));const _0x3b10c5=this[_0xc13fc0(0x3f3)]();switch(_0x3b10c5){case'xp':case _0xc13fc0(0x9e8):return this[_0xc13fc0(0x17b)][_0xc13fc0(0x90b)](0x1);break;}},Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x897)]=function(){const _0x256d11=_0x23168f;BattleManager[_0x256d11(0x174)]=!![],$gameParty[_0x256d11(0xb43)](),this['selectNextCommand'](),BattleManager[_0x256d11(0x3da)]()&&(BattleManager[_0x256d11(0x551)]=![]);},Scene_Battle['prototype']['commandOptions']=function(){const _0x4b1889=_0x23168f;this[_0x4b1889(0x9f7)]()?(this['_callSceneOptions']=!![],this['_logWindow']['push'](_0x4b1889(0x86c),VisuMZ[_0x4b1889(0x895)][_0x4b1889(0xbac)][_0x4b1889(0xabb)]['ActiveTpbOptionsMessage'])):this[_0x4b1889(0x88d)]();},Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x9f7)]=function(){const _0x6113d6=_0x23168f;return BattleManager[_0x6113d6(0x966)]();},Scene_Battle['prototype']['callOptions']=function(){const _0x33b8d5=_0x23168f;this[_0x33b8d5(0x5cb)]=![],this['_spriteset']['update'](),this[_0x33b8d5(0x946)]['visible']=![];if(BattleManager[_0x33b8d5(0x30a)]())($dataSystem[_0x33b8d5(0x693)]||$dataSystem['battleback2Name'])&&SceneManager[_0x33b8d5(0xc6)]();else($gameMap[_0x33b8d5(0x693)]()||$gameMap['battleback2Name']())&&SceneManager[_0x33b8d5(0xc6)]();SceneManager[_0x33b8d5(0x908)](Scene_Options),BattleManager[_0x33b8d5(0x3da)]()&&(BattleManager['_tpbSceneChangeCacheActor']=BattleManager[_0x33b8d5(0x20c)]());},VisuMZ['BattleCore'][_0x23168f(0x543)]=Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x66d)],Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x66d)]=function(){const _0x48ff4a=_0x23168f;VisuMZ['BattleCore'][_0x48ff4a(0x543)][_0x48ff4a(0x88f)](this);if(this[_0x48ff4a(0x5cb)]&&!BattleManager[_0x48ff4a(0x530)])this[_0x48ff4a(0x88d)]();},VisuMZ[_0x23168f(0x895)][_0x23168f(0x101)]=Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x926)],Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x926)]=function(){const _0x2da1a7=_0x23168f;VisuMZ[_0x2da1a7(0x895)]['Scene_Battle_update'][_0x2da1a7(0x88f)](this),this[_0x2da1a7(0x634)]();},Scene_Battle['prototype'][_0x23168f(0x6b5)]=function(){const _0x43a6fb=_0x23168f,_0xa5da22=this[_0x43a6fb(0x62b)]();this[_0x43a6fb(0x728)]=new Window_AutoBattleCancel(_0xa5da22),this[_0x43a6fb(0x728)]['hide'](),this[_0x43a6fb(0x314)](this['_autoBattleWindow']);},Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x62b)]=function(){const _0x4a7429=_0x23168f;return VisuMZ[_0x4a7429(0x895)][_0x4a7429(0xbac)][_0x4a7429(0x771)][_0x4a7429(0x423)][_0x4a7429(0x88f)](this);},Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x365)]=function(){const _0x4eb91a=_0x23168f;this[_0x4eb91a(0xa63)]=[];},Scene_Battle[_0x23168f(0xa01)]['updateOnceParallelInterpreters']=function(){const _0x3e996e=_0x23168f;if(!this[_0x3e996e(0xa63)])return;for(const _0x2d2fb5 of this[_0x3e996e(0xa63)]){_0x2d2fb5&&_0x2d2fb5[_0x3e996e(0x926)]();}},Scene_Battle[_0x23168f(0xa01)]['playOnceParallelInterpreter']=function(_0x432933){const _0x526d14=_0x23168f,_0x5cb016=$dataCommonEvents[_0x432933];if(!_0x5cb016)return;const _0x14fc4d=new Game_BattleOnceParallelInterpreter();this[_0x526d14(0xbba)](_0x14fc4d),_0x14fc4d[_0x526d14(0x69f)](_0x432933);},Scene_Battle[_0x23168f(0xa01)][_0x23168f(0xbba)]=function(_0x264c8c){const _0x2363c3=_0x23168f;this[_0x2363c3(0xa63)]=this['_onceParallelInterpreters']||[],this[_0x2363c3(0xa63)][_0x2363c3(0x908)](_0x264c8c);},Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x285)]=function(_0x11ff8a){const _0x2cd2e3=_0x23168f;this[_0x2cd2e3(0xa63)]=this[_0x2cd2e3(0xa63)]||[],this[_0x2cd2e3(0xa63)][_0x2cd2e3(0xa32)](_0x11ff8a);},Game_Troop[_0x23168f(0xa01)]['onBattleStartOnceParallels']=function(){const _0x3745c0=_0x23168f;for(const _0x5f29cb of this[_0x3745c0(0xa95)]()[_0x3745c0(0x923)]){if(!this['doesPageHaveOnceParallelStart'](_0x5f29cb))continue;SceneManager[_0x3745c0(0x23e)][_0x3745c0(0x3ac)](_0x5f29cb);}},Game_Troop[_0x23168f(0xa01)][_0x23168f(0x5e7)]=function(_0xf3f248){const _0x34f86e=_0x23168f;if(!_0xf3f248)return;for(const _0x394790 of _0xf3f248[_0x34f86e(0x290)]){if([0x6c,0x198][_0x34f86e(0x2d8)](_0x394790['code'])){const _0x2e1a=_0x394790[_0x34f86e(0x86a)][0x0];if(_0x2e1a['match'](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}return![];},Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x3ac)]=function(_0x31ab3e){const _0x44f325=_0x23168f;if(!_0x31ab3e)return;const _0x19acd3=new Game_BattleOnceParallelInterpreter();this[_0x44f325(0xbba)](_0x19acd3),_0x19acd3['setTroopPage'](_0x31ab3e);};function Game_BattleOnceParallelInterpreter(){const _0x518b32=_0x23168f;this[_0x518b32(0x8c9)](...arguments);}Game_BattleOnceParallelInterpreter[_0x23168f(0xa01)]=Object['create'](Game_Interpreter[_0x23168f(0xa01)]),Game_BattleOnceParallelInterpreter[_0x23168f(0xa01)]['constructor']=Game_BattleOnceParallelInterpreter,Game_BattleOnceParallelInterpreter[_0x23168f(0xa01)][_0x23168f(0x69f)]=function(_0x2f2e32){const _0x5a0efe=_0x23168f,_0x17e375=$dataCommonEvents[_0x2f2e32];_0x17e375?this[_0x5a0efe(0x85b)](_0x17e375[_0x5a0efe(0x290)],0x0):this[_0x5a0efe(0x454)]();},Game_BattleOnceParallelInterpreter[_0x23168f(0xa01)][_0x23168f(0x454)]=function(){const _0x4274f3=_0x23168f;if(!SceneManager[_0x4274f3(0xbef)]())return;SceneManager['_scene'][_0x4274f3(0x285)](this),Game_Interpreter[_0x4274f3(0xa01)][_0x4274f3(0x454)][_0x4274f3(0x88f)](this);},Game_BattleOnceParallelInterpreter['prototype'][_0x23168f(0x6a2)]=function(_0x674dd8){const _0xf7289b=_0x23168f;_0x674dd8?this[_0xf7289b(0x85b)](_0x674dd8[_0xf7289b(0x290)],0x0):this[_0xf7289b(0x454)]();},Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x6ca)]=function(){const _0x35df1a=_0x23168f;return VisuMZ['BattleCore'][_0x35df1a(0xbac)]['PartyCmd'][_0x35df1a(0xb8)];},VisuMZ[_0x23168f(0x895)][_0x23168f(0x624)]=Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x997)],Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x997)]=function(){const _0x43edaf=_0x23168f;this[_0x43edaf(0x6ca)]()?this['onDisabledPartyCommandSelection']():VisuMZ[_0x43edaf(0x895)][_0x43edaf(0x624)][_0x43edaf(0x88f)](this);},Scene_Battle[_0x23168f(0xa01)][_0x23168f(0xf6)]=function(){const _0x50a3b7=_0x23168f;if(BattleManager[_0x50a3b7(0x9d3)]())this[_0x50a3b7(0xae8)]();else BattleManager[_0x50a3b7(0x3da)]()&&VisuMZ[_0x50a3b7(0x895)][_0x50a3b7(0x624)][_0x50a3b7(0x88f)](this);},VisuMZ[_0x23168f(0x895)][_0x23168f(0x41e)]=Scene_Battle['prototype'][_0x23168f(0x785)],Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x785)]=function(){const _0x39c750=_0x23168f;BattleManager[_0x39c750(0x3da)]()?(this['tpbCommandFight'](),this[_0x39c750(0x3bd)]()):VisuMZ['BattleCore'][_0x39c750(0x41e)][_0x39c750(0x88f)](this);},Scene_Battle[_0x23168f(0xa01)]['tpbCommandFight']=function(){const _0x1649ed=_0x23168f;if(!VisuMZ[_0x1649ed(0x895)]['TpbActiveChangeEnabled'])return;if(Imported[_0x1649ed(0x8a1)]&&BattleManager[_0x1649ed(0xb05)]())return;const _0x175576=$gameParty[_0x1649ed(0x2a6)]()[_0x1649ed(0x239)](_0x3bac89=>_0x3bac89['isTpbCharged']()&&_0x3bac89['canInput']());BattleManager[_0x1649ed(0x384)]=_0x175576[0x0]||null,BattleManager[_0x1649ed(0x384)]&&BattleManager['_currentActor'][_0x1649ed(0x447)](_0x1649ed(0x326));},VisuMZ[_0x23168f(0x895)][_0x23168f(0x6ec)]=Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x2fd)],Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x2fd)]=function(){const _0xea1795=_0x23168f;VisuMZ['BattleCore']['Scene_Battle_commandEscape'][_0xea1795(0x88f)](this);if(!BattleManager[_0xea1795(0x3da)]())BattleManager['_currentActor']=null;},VisuMZ[_0x23168f(0x895)][_0x23168f(0x954)]=Scene_Battle[_0x23168f(0xa01)]['createActorCommandWindow'],Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x3de)]=function(){const _0x4dc136=_0x23168f;VisuMZ[_0x4dc136(0x895)][_0x4dc136(0x954)][_0x4dc136(0x88f)](this),this[_0x4dc136(0x3b9)]();},Scene_Battle['prototype'][_0x23168f(0x3b9)]=function(){const _0x35d5ca=_0x23168f,_0xa17750=this[_0x35d5ca(0xaec)];_0xa17750['setHandler'](_0x35d5ca(0xb96),this[_0x35d5ca(0x8dc)][_0x35d5ca(0x7f5)](this)),_0xa17750[_0x35d5ca(0x838)]('autoBattle',this[_0x35d5ca(0x2c9)]['bind'](this)),_0xa17750[_0x35d5ca(0x838)]('singleSkill',this['actorCommandSingleSkill'][_0x35d5ca(0x7f5)](this)),BattleManager[_0x35d5ca(0x3da)]()&&(this[_0x35d5ca(0x6ca)]()?delete _0xa17750['_handlers'][_0x35d5ca(0x7f1)]:_0xa17750[_0x35d5ca(0x838)]('cancel',this[_0x35d5ca(0xad7)][_0x35d5ca(0x7f5)](this)));},Scene_Battle[_0x23168f(0xa01)]['actorCommandEscape']=function(){const _0x566222=_0x23168f;this[_0x566222(0x2fd)]();},Scene_Battle[_0x23168f(0xa01)]['actorCommandAutoBattle']=function(){const _0x24848b=_0x23168f;BattleManager[_0x24848b(0x20c)]()[_0x24848b(0xad2)](),BattleManager['finishActorInput'](),BattleManager['selectNextActor'](),this[_0x24848b(0x8ff)]();},Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x1ab)]=function(){const _0x49eab9=_0x23168f,_0x5ecae3=BattleManager['inputtingAction'](),_0xab037=this['_actorCommandWindow']['currentExt']();_0x5ecae3[_0x49eab9(0x426)](_0xab037),BattleManager[_0x49eab9(0x20c)]()[_0x49eab9(0x139)]($dataSkills[_0xab037]),this[_0x49eab9(0xc8)]();},Scene_Battle[_0x23168f(0xa01)][_0x23168f(0xad7)]=function(){const _0x46a16c=_0x23168f;this[_0x46a16c(0x1db)]()?this['performTpbActiveCheckSwitch']():this[_0x46a16c(0xb4)]();},VisuMZ['BattleCore'][_0x23168f(0x764)]=![],Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x1db)]=function(){const _0x559c9e=_0x23168f;if(Imported[_0x559c9e(0x8a1)]&&BattleManager[_0x559c9e(0xb05)]())return![];else{if(!VisuMZ[_0x559c9e(0x895)][_0x559c9e(0x764)])return![];const _0x1417d4=$gameParty[_0x559c9e(0x2a6)]()[_0x559c9e(0x239)](_0x1a077a=>_0x1a077a[_0x559c9e(0x445)]()&&_0x1a077a[_0x559c9e(0x6a9)]());return _0x1417d4['length']>0x0&&BattleManager[_0x559c9e(0x20c)]()!==_0x1417d4[_0x1417d4[_0x559c9e(0x312)]-0x1];}},Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x4b8)]=function(){const _0x565688=_0x23168f,_0x3958b8=BattleManager['actor'](),_0x5b47c9=_0x3958b8[_0x565688(0xbb5)]();if(_0x5b47c9)_0x5b47c9[_0x565688(0x271)]();const _0x2d177c=$gameParty[_0x565688(0x2a6)]()[_0x565688(0x239)](_0x3f51cd=>_0x3f51cd[_0x565688(0x445)]()&&_0x3f51cd[_0x565688(0x6a9)]()),_0x333788=_0x2d177c[_0x565688(0xb3c)](_0x3958b8),_0x1610f6=_0x2d177c[_0x333788+0x1];BattleManager[_0x565688(0x384)]=_0x1610f6||null;if(_0x1610f6)_0x1610f6['setActionState'](_0x565688(0x326));_0x3958b8[_0x565688(0x447)](_0x565688(0x4e5)),this[_0x565688(0x8ff)]();},Scene_Battle[_0x23168f(0xa01)][_0x23168f(0xb4)]=function(){const _0x27efe=_0x23168f;this[_0x27efe(0x17b)][_0x27efe(0x85b)](),this[_0x27efe(0xaec)][_0x27efe(0x2c5)]();if(!VisuMZ['BattleCore']['TpbActiveChangeEnabled'])return;if(Imported['VisuMZ_2_BattleSystemCTB']&&BattleManager['isCTB']())return;if(BattleManager[_0x27efe(0x384)]){BattleManager[_0x27efe(0x384)]['setActionState'](_0x27efe(0x4e5));const _0x322ffa=BattleManager['_currentActor'][_0x27efe(0xbb5)]();if(_0x322ffa)_0x322ffa[_0x27efe(0x271)]();}BattleManager[_0x27efe(0x384)]=null;},VisuMZ[_0x23168f(0x895)][_0x23168f(0x717)]=Scene_Battle[_0x23168f(0xa01)][_0x23168f(0xbea)],Scene_Battle['prototype'][_0x23168f(0xbea)]=function(){const _0x741b59=_0x23168f;VisuMZ[_0x741b59(0x895)][_0x741b59(0x717)]['call'](this),this[_0x741b59(0x892)]();},Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x892)]=function(){const _0x529d89=_0x23168f;this[_0x529d89(0xaec)]['setHelpWindow'](this[_0x529d89(0x10a)]),this['_partyCommandWindow'][_0x529d89(0xa1f)](this[_0x529d89(0x10a)]);},Scene_Battle['prototype'][_0x23168f(0xa18)]=function(){const _0x5bd495=_0x23168f;if(!VisuMZ[_0x5bd495(0x895)][_0x5bd495(0xbac)][_0x5bd495(0xbeb)][_0x5bd495(0xa61)])return;this['_enemyNameContainer']=new Sprite(),this['_enemyNameContainer']['x']=this[_0x5bd495(0x946)]['x'],this['_enemyNameContainer']['y']=this[_0x5bd495(0x946)]['y'];const _0x1afa2a=this['children']['indexOf'](this[_0x5bd495(0x946)]);this['addChildAt'](this[_0x5bd495(0x374)],_0x1afa2a);for(let _0x568226=0x0;_0x568226<0x8;_0x568226++){const _0x5792bd=new Window_EnemyName(_0x568226);this[_0x5bd495(0x374)][_0x5bd495(0x314)](_0x5792bd);}},VisuMZ[_0x23168f(0x895)]['Scene_Battle_createEnemyWindow']=Scene_Battle['prototype'][_0x23168f(0x681)],Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x681)]=function(){const _0x1fc4f0=_0x23168f;VisuMZ[_0x1fc4f0(0x895)][_0x1fc4f0(0x7b1)]['call'](this),this['createMultiTargetWindows']();},Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x604)]=function(){const _0x5f13c3=_0x23168f;this[_0x5f13c3(0x803)](!![]),this[_0x5f13c3(0x803)](![]);},Scene_Battle['prototype']['multiTargetWindowRect']=function(_0x121c7){const _0x5018b3=_0x23168f,_0x5b13df=Window_BattleMultiTarget[_0x5018b3(0xb85)],_0x52570c=this[_0x5018b3(0x4ba)](0x1,!![]);let _0xde668d=_0x121c7?Graphics[_0x5018b3(0x2d7)]-_0x5b13df:0x0;_0xde668d+=_0x121c7?Window_BattleMultiTarget[_0x5018b3(0x9b9)]:Window_BattleMultiTarget[_0x5018b3(0x73e)];const _0x5e1820=[_0x5018b3(0x450)]['includes'](this[_0x5018b3(0x3f3)]())?0x0:this[_0x5018b3(0x1fa)]['height'];let _0x4bbbd0=Graphics[_0x5018b3(0x493)]-_0x5e1820-_0x52570c;return _0x4bbbd0+=_0x121c7?Window_BattleMultiTarget[_0x5018b3(0x2a3)]:Window_BattleMultiTarget[_0x5018b3(0x1b0)],new Rectangle(_0xde668d,_0x4bbbd0,_0x5b13df,_0x52570c);},Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x803)]=function(_0x4fedf7){const _0x57bcfb=_0x23168f,_0x3b165a=this['multiTargetWindowRect'](_0x4fedf7),_0x5e1cb3=new Window_BattleMultiTarget(_0x3b165a,_0x4fedf7);this[_0x57bcfb(0x422)](_0x5e1cb3),_0x4fedf7?this[_0x57bcfb(0x110)]=_0x5e1cb3:this[_0x57bcfb(0x424)]=_0x5e1cb3;},VisuMZ[_0x23168f(0x895)][_0x23168f(0x678)]=Scene_Battle['prototype'][_0x23168f(0xb9)],Scene_Battle[_0x23168f(0xa01)]['needsInputWindowChange']=function(){const _0x3e8f04=_0x23168f;if(this[_0x3e8f04(0x9e1)])return![];return VisuMZ['BattleCore'][_0x3e8f04(0x678)]['call'](this);},VisuMZ[_0x23168f(0x895)][_0x23168f(0x81a)]=Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x64e)],Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x64e)]=function(){const _0x2f0a28=_0x23168f;if(this[_0x2f0a28(0x8b3)]&&this[_0x2f0a28(0x9e1)]){this['_cancelButton'][_0x2f0a28(0x12e)]=!![];return;}VisuMZ['BattleCore'][_0x2f0a28(0x81a)][_0x2f0a28(0x88f)](this);},VisuMZ[_0x23168f(0x895)]['Scene_Battle_isTimeActiveIBS']=Scene_Battle['prototype']['isTimeActive'],Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x425)]=function(){const _0x67cc91=_0x23168f;if(this[_0x67cc91(0x9e1)])return![];return VisuMZ['BattleCore'][_0x67cc91(0x4be)][_0x67cc91(0x88f)](this);},VisuMZ[_0x23168f(0x895)]['Scene_Battle_createAllWindowsIBS']=Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x1cb)],Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x1cb)]=function(){const _0x3b3539=_0x23168f;VisuMZ['BattleCore']['Scene_Battle_createAllWindowsIBS']['call'](this),this[_0x3b3539(0x567)]();},VisuMZ['BattleCore'][_0x23168f(0x807)]=Scene_Battle['prototype'][_0x23168f(0x87d)],Scene_Battle['prototype']['createPartyCommandWindow']=function(){const _0x49502f=_0x23168f;VisuMZ[_0x49502f(0x895)][_0x49502f(0x807)]['call'](this);const _0x903484=this[_0x49502f(0x17b)];_0x903484[_0x49502f(0x838)](_0x49502f(0x38e),this[_0x49502f(0x15d)]['bind'](this,_0x903484));},VisuMZ[_0x23168f(0x895)]['Scene_Battle_createActorCommandWindowIBS']=Scene_Battle['prototype']['createActorCommandWindow'],Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x3de)]=function(){const _0x88c1a1=_0x23168f;VisuMZ['BattleCore'][_0x88c1a1(0x375)][_0x88c1a1(0x88f)](this);const _0xa4844b=this[_0x88c1a1(0xaec)];_0xa4844b[_0x88c1a1(0x838)](_0x88c1a1(0x38e),this[_0x88c1a1(0x15d)][_0x88c1a1(0x7f5)](this,_0xa4844b));},Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x567)]=function(){const _0x47c466=_0x23168f,_0x227e3f=this[_0x47c466(0x671)](),_0x16e07c=new Window_InBattleStatus(_0x227e3f);this[_0x47c466(0x422)](_0x16e07c),_0x16e07c[_0x47c466(0x198)](),_0x16e07c[_0x47c466(0x2c5)](),this[_0x47c466(0x9b4)]=_0x16e07c;},Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x671)]=function(){const _0xdb5eeb=_0x23168f;if(VisuMZ[_0xdb5eeb(0x895)]['Settings']['InBattleStatus'][_0xdb5eeb(0x4cf)])return VisuMZ[_0xdb5eeb(0x895)]['Settings']['InBattleStatus'][_0xdb5eeb(0x4cf)][_0xdb5eeb(0x88f)](this);const _0x2e9295=Graphics[_0xdb5eeb(0x2d7)]>0x3e8?0x78:0x0,_0x377a81=this[_0xdb5eeb(0x10a)]['y']+this[_0xdb5eeb(0x10a)][_0xdb5eeb(0xb1c)],_0x48f632=Graphics['boxWidth']-_0x2e9295*0x2,_0x3ab136=Graphics[_0xdb5eeb(0x493)]-_0x377a81-this[_0xdb5eeb(0xab6)]();return new Rectangle(_0x2e9295,_0x377a81,_0x48f632,_0x3ab136);},Scene_Battle[_0x23168f(0xa01)]['startInBattleStatus']=function(_0x5361d2){const _0x531a9c=_0x23168f;this[_0x531a9c(0x422)](this[_0x531a9c(0x9b4)]),this[_0x531a9c(0x9e1)]=!![],this[_0x531a9c(0x10a)]['show']();const _0x428d05=['xp',_0x531a9c(0x9e8),_0x531a9c(0x829),_0x531a9c(0x8c7),_0x531a9c(0x450)];let _0x26d666=_0x428d05[_0x531a9c(0x2d8)](this[_0x531a9c(0x3f3)]());_0x26d666&&(_0x5361d2['hide'](),_0x5361d2[_0x531a9c(0x2c5)]()),this[_0x531a9c(0x9b4)][_0x531a9c(0x45b)](BattleManager['actor']()||$gameParty['battleMembers']()[0x0]),this[_0x531a9c(0x9b4)][_0x531a9c(0x478)](_0x5361d2),this['_inBattleStatusWindow'][_0x531a9c(0xaa3)](),this['_inBattleStatusWindow']['open']();},Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x278)]=function(){const _0x44eade=_0x23168f;this[_0x44eade(0x9e1)]=![],this[_0x44eade(0x10a)][_0x44eade(0x198)]();const _0x817ac1=this['_inBattleStatusWindow'][_0x44eade(0x989)]();_0x817ac1['show'](),_0x817ac1[_0x44eade(0x9d4)](),_0x817ac1[_0x44eade(0x91a)](),this[_0x44eade(0x9b4)]['hide'](),this[_0x44eade(0x9b4)][_0x44eade(0x2c5)]();},Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x3f3)]=function(){const _0x39d594=_0x23168f;if($gameTemp[_0x39d594(0xb45)]!==undefined)return $gameTemp['_forcedBattleLayout'];if(this[_0x39d594(0x464)])return this[_0x39d594(0x464)];return this['_battleLayoutStyle']=VisuMZ[_0x39d594(0x895)][_0x39d594(0xbac)]['BattleLayout'][_0x39d594(0x9e9)][_0x39d594(0x645)]()[_0x39d594(0xf4)](),this[_0x39d594(0x464)]===_0x39d594(0x8c7)&&!Imported['VisuMZ_3_SideviewBattleUI']&&(this[_0x39d594(0x464)]=_0x39d594(0xa7c)),this['_battleLayoutStyle']==='frontview_ui'&&!Imported[_0x39d594(0x1f8)]&&(this[_0x39d594(0x464)]=_0x39d594(0xa7c)),this['_battleLayoutStyle'];},VisuMZ[_0x23168f(0x895)][_0x23168f(0x14a)]=Scene_Battle['prototype'][_0x23168f(0xab6)],Scene_Battle[_0x23168f(0xa01)][_0x23168f(0xab6)]=function(){const _0x380cdd=_0x23168f,_0xbfd299=this[_0x380cdd(0x3f3)]();switch(_0xbfd299){case'list':return this['calcWindowHeight'](Math[_0x380cdd(0x705)](0x1,$gameParty['maxBattleMembers']()),!![]);break;case _0x380cdd(0x829):return this[_0x380cdd(0x4ba)](0x4,!![]);break;default:return VisuMZ[_0x380cdd(0x895)][_0x380cdd(0x14a)][_0x380cdd(0x88f)](this);break;}},VisuMZ[_0x23168f(0x895)]['Scene_Battle_helpWindowRect']=Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x269)],Scene_Battle['prototype']['helpWindowRect']=function(){const _0x44dc87=_0x23168f,_0x54e019=this['battleLayoutStyle']();switch(_0x54e019){case _0x44dc87(0x829):return this[_0x44dc87(0x700)]();break;case'default':case _0x44dc87(0x290):case'xp':case'portrait':default:return VisuMZ[_0x44dc87(0x895)]['Scene_Battle_helpWindowRect']['call'](this);break;}},Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x625)]=function(){const _0x4f446c=_0x23168f,_0x526974=this['battleLayoutStyle']();switch(_0x526974){case'xp':case _0x4f446c(0x9e8):return this[_0x4f446c(0xb03)]();break;case _0x4f446c(0x829):return this[_0x4f446c(0xba3)]();break;case _0x4f446c(0xa7c):case'list':default:return this['statusWindowRectDefaultStyle']();break;}},VisuMZ[_0x23168f(0x895)][_0x23168f(0x1a2)]=Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x831)],Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x831)]=function(){const _0x5b7e23=_0x23168f,_0x1c4c29=this['battleLayoutStyle']();switch(_0x1c4c29){case'xp':case _0x5b7e23(0x9e8):return this[_0x5b7e23(0x1df)]();break;case _0x5b7e23(0x829):return this[_0x5b7e23(0x4a4)]();case _0x5b7e23(0xa7c):case _0x5b7e23(0x290):default:return this[_0x5b7e23(0x227)]();break;}},Scene_Battle['prototype'][_0x23168f(0x227)]=function(){const _0x884911=_0x23168f,_0x45213b=VisuMZ[_0x884911(0x895)]['Settings'][_0x884911(0x553)],_0x1da621=_0x45213b['CommandWidth']||0xc0,_0x3a82ea=this['windowAreaHeight'](),_0x414c15=this[_0x884911(0x82f)]()?Graphics[_0x884911(0x2d7)]-_0x1da621:0x0,_0x89807e=Graphics[_0x884911(0x493)]-_0x3a82ea;return new Rectangle(_0x414c15,_0x89807e,_0x1da621,_0x3a82ea);},Scene_Battle['prototype'][_0x23168f(0x66f)]=function(){const _0x5007f0=_0x23168f;return this[_0x5007f0(0x831)]();},VisuMZ[_0x23168f(0x895)][_0x23168f(0x392)]=Scene_Battle[_0x23168f(0xa01)][_0x23168f(0xa99)],Scene_Battle[_0x23168f(0xa01)][_0x23168f(0xa99)]=function(){const _0x286125=_0x23168f;if(this[_0x286125(0x9e1)])return;const _0x55cf2b=this['battleLayoutStyle']();switch(_0x55cf2b){case'xp':case _0x286125(0x9e8):case _0x286125(0x829):break;case _0x286125(0xa7c):case _0x286125(0x290):default:VisuMZ[_0x286125(0x895)][_0x286125(0x392)][_0x286125(0x88f)](this);break;}},Scene_Battle[_0x23168f(0xa01)]['statusWindowRectDefaultStyle']=function(){const _0x5c76e6=_0x23168f,_0x3d0be2=VisuMZ['BattleCore'][_0x5c76e6(0xbac)][_0x5c76e6(0x553)],_0x1d3759=Window_BattleStatus['prototype'][_0x5c76e6(0x42b)](),_0x3d8512=Graphics[_0x5c76e6(0x2d7)]-(_0x3d0be2[_0x5c76e6(0x6b3)]||0xc0),_0x119045=this[_0x5c76e6(0xab6)]()+_0x1d3759,_0x2cab0f=this[_0x5c76e6(0x82f)]()?0x0:Graphics[_0x5c76e6(0x2d7)]-_0x3d8512,_0x5242d6=Graphics['boxHeight']-_0x119045+_0x1d3759;return new Rectangle(_0x2cab0f,_0x5242d6,_0x3d8512,_0x119045);},Scene_Battle['prototype'][_0x23168f(0xb03)]=function(){const _0x57fe96=_0x23168f,_0x183517=Window_BattleStatus[_0x57fe96(0xa01)]['extraHeight'](),_0x55d15d=Graphics[_0x57fe96(0x2d7)],_0x11c122=this[_0x57fe96(0xab6)]()+_0x183517,_0x4533eb=0x0,_0x446dbe=Graphics['boxHeight']-_0x11c122+_0x183517;return new Rectangle(_0x4533eb,_0x446dbe,_0x55d15d,_0x11c122);},Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x1df)]=function(){const _0x384314=_0x23168f,_0x6f7d6a=Graphics[_0x384314(0x2d7)]/0x2,_0x5de0fd=this[_0x384314(0x4ba)](VisuMZ[_0x384314(0x895)][_0x384314(0xbac)]['BattleLayout'][_0x384314(0x6c2)],!![]),_0xeb55f9=Math[_0x384314(0x1fc)]((Graphics['boxWidth']-_0x6f7d6a)/0x2),_0x5b61f0=Graphics['boxHeight']-_0x5de0fd-this[_0x384314(0xb03)]()[_0x384314(0xb1c)];return new Rectangle(_0xeb55f9,_0x5b61f0,_0x6f7d6a,_0x5de0fd);},Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x700)]=function(){const _0x582fd0=_0x23168f,_0x395c6a=Graphics[_0x582fd0(0x2e0)],_0x871f98=Math[_0x582fd0(0x1fc)]((Graphics[_0x582fd0(0x2d7)]-_0x395c6a)/0x2),_0x17dd40=this[_0x582fd0(0xaa5)](),_0x3867f3=(Graphics[_0x582fd0(0xb1c)]-Graphics[_0x582fd0(0x493)])/-0x2;return new Rectangle(_0x871f98,_0x3867f3,_0x395c6a,_0x17dd40);},Scene_Battle[_0x23168f(0xa01)][_0x23168f(0xba3)]=function(){const _0x5e320b=_0x23168f,_0x566cc4=Graphics[_0x5e320b(0x2e0)],_0x3860db=Math[_0x5e320b(0x1fc)]((Graphics[_0x5e320b(0x2d7)]-_0x566cc4)/0x2),_0x475101=this['calcWindowHeight'](0x4,!![]),_0x5b9582=Graphics[_0x5e320b(0x493)]-_0x475101+(Graphics[_0x5e320b(0xb1c)]-Graphics[_0x5e320b(0x493)])/0x2;return new Rectangle(_0x3860db,_0x5b9582,_0x566cc4,_0x475101);},Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x4a4)]=function(){const _0x373d7c=_0x23168f,_0x26968a=Math['floor'](Graphics['width']/0x3),_0x51ee24=this[_0x373d7c(0x82f)]()?(Graphics[_0x373d7c(0x2e0)]+Graphics[_0x373d7c(0x2d7)])/0x2-_0x26968a:(Graphics[_0x373d7c(0x2e0)]-Graphics[_0x373d7c(0x2d7)])/-0x2,_0x1fd081=this[_0x373d7c(0x700)](),_0x4fb987=_0x1fd081['y']+_0x1fd081['height'],_0x3d1115=this[_0x373d7c(0xba3)](),_0x32453d=_0x3d1115['y']-_0x4fb987;return new Rectangle(_0x51ee24,_0x4fb987,_0x26968a,_0x32453d);},Scene_Battle[_0x23168f(0xa01)]['skillItemWindowRectBorderStyle']=function(){const _0x1ba2cf=_0x23168f,_0x32da85=Math[_0x1ba2cf(0x330)](Graphics['width']/0x3),_0x28fa5f=Math[_0x1ba2cf(0x1fc)]((Graphics[_0x1ba2cf(0x2d7)]-_0x32da85)/0x2),_0x1c96d8=this[_0x1ba2cf(0x4a4)](),_0x2e30af=_0x1c96d8['y'],_0x29353e=_0x1c96d8['height'];return new Rectangle(_0x28fa5f,_0x2e30af,_0x32da85,_0x29353e);},Scene_Battle['prototype'][_0x23168f(0x7c9)]=function(){const _0x424f07=_0x23168f;this[_0x424f07(0x8b3)]['y']=this['_helpWindow']['y']+this[_0x424f07(0x10a)][_0x424f07(0xb1c)],this[_0x424f07(0x82f)]()?this[_0x424f07(0x3f3)]()==='border'?this[_0x424f07(0x8b3)]['x']=0x8:this[_0x424f07(0x8b3)]['x']=-this[_0x424f07(0x8b3)]['width']-0x4:this['_cancelButton']['x']=Graphics['width']-(Graphics['width']-Graphics[_0x424f07(0x2d7)])/0x2-this[_0x424f07(0x8b3)]['width']-0x4;},VisuMZ[_0x23168f(0x895)][_0x23168f(0x89e)]=Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x727)],Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x727)]=function(){const _0x244a07=_0x23168f;if(this[_0x244a07(0x3f3)]()===_0x244a07(0x829))return this['skillItemWindowRectBorderStyle']();else return this[_0x244a07(0x979)]()?this[_0x244a07(0x28e)]():VisuMZ[_0x244a07(0x895)][_0x244a07(0x89e)]['call'](this);},VisuMZ['BattleCore']['Scene_Battle_itemWindowRect']=Scene_Battle[_0x23168f(0xa01)]['itemWindowRect'],Scene_Battle[_0x23168f(0xa01)][_0x23168f(0xbf)]=function(){const _0x33383e=_0x23168f;if(this[_0x33383e(0x3f3)]()===_0x33383e(0x829))return this[_0x33383e(0x572)]();else return this[_0x33383e(0x979)]()?this[_0x33383e(0x28e)]():VisuMZ[_0x33383e(0x895)][_0x33383e(0x996)][_0x33383e(0x88f)](this);},Scene_Battle['prototype'][_0x23168f(0x979)]=function(){const _0x4ed110=_0x23168f;return VisuMZ[_0x4ed110(0x895)][_0x4ed110(0xbac)]['BattleLayout'][_0x4ed110(0x62e)];},Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x28e)]=function(){const _0x283a00=_0x23168f,_0x4e7b9f=Sprite_Button[_0x283a00(0xa01)][_0x283a00(0x9d1)]()*0x2+0x4;let _0x54087d=Graphics[_0x283a00(0x2d7)]-_0x4e7b9f;Imported[_0x283a00(0x74a)]&&SceneManager[_0x283a00(0x982)]()&&(_0x54087d+=_0x4e7b9f);const _0x19b005=this[_0x283a00(0xb47)](),_0x4736ab=Graphics['boxHeight']-_0x19b005-this[_0x283a00(0x625)]()[_0x283a00(0xb1c)]+Window_BattleStatus['prototype'][_0x283a00(0x42b)](),_0x94b952=0x0;return new Rectangle(_0x94b952,_0x19b005,_0x54087d,_0x4736ab);},VisuMZ[_0x23168f(0x895)][_0x23168f(0x193)]=Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x5c6)],Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x5c6)]=function(){const _0x2d3ca5=_0x23168f;VisuMZ[_0x2d3ca5(0x895)]['Scene_Battle_startActorSelection'][_0x2d3ca5(0x88f)](this),this[_0x2d3ca5(0xb48)]();},VisuMZ[_0x23168f(0x895)][_0x23168f(0xb59)]=Scene_Battle['prototype'][_0x23168f(0x3e7)],Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x3e7)]=function(){const _0x2fbd95=_0x23168f;VisuMZ[_0x2fbd95(0x895)]['Scene_Battle_startEnemySelection'][_0x2fbd95(0x88f)](this),this[_0x2fbd95(0x24c)][_0x2fbd95(0x6c9)](),this[_0x2fbd95(0xb48)]();},Scene_Battle[_0x23168f(0xa01)][_0x23168f(0xb48)]=function(){const _0x29650d=_0x23168f,_0x5369cd=this[_0x29650d(0x3f3)]();['xp','portrait',_0x29650d(0x829)]['includes'](_0x5369cd)&&this[_0x29650d(0xaec)][_0x29650d(0x2c5)](),(_0x5369cd===_0x29650d(0x829)||this[_0x29650d(0x979)]())&&(this[_0x29650d(0x5b7)][_0x29650d(0x2c5)](),this[_0x29650d(0x263)][_0x29650d(0x2c5)]());},VisuMZ[_0x23168f(0x895)][_0x23168f(0xa94)]=Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x592)],Scene_Battle['prototype'][_0x23168f(0x592)]=function(){const _0x4f6137=_0x23168f;VisuMZ[_0x4f6137(0x895)][_0x4f6137(0xa94)][_0x4f6137(0x88f)](this),this['okTargetSelectionVisibility']();},Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x40c)]=function(){const _0x2a6132=_0x23168f;return[_0x2a6132(0xada),_0x2a6132(0xb64),_0x2a6132(0x6db)][_0x2a6132(0x2d8)](this['_actorCommandWindow'][_0x2a6132(0x3d6)]());},VisuMZ[_0x23168f(0x895)]['Scene_Battle_onActorCancel']=Scene_Battle['prototype'][_0x23168f(0x2cf)],Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x2cf)]=function(){const _0x407fb5=_0x23168f;this[_0x407fb5(0x40c)]()?(this['_statusWindow']['show'](),this['_actorWindow']['hide'](),this['_actorCommandWindow'][_0x407fb5(0x91a)]()):VisuMZ[_0x407fb5(0x895)][_0x407fb5(0x35f)][_0x407fb5(0x88f)](this),this[_0x407fb5(0x5a7)]();},VisuMZ['BattleCore']['Scene_Battle_onEnemyOk']=Scene_Battle[_0x23168f(0xa01)][_0x23168f(0xade)],Scene_Battle['prototype'][_0x23168f(0xade)]=function(){const _0x357383=_0x23168f;if(!this['_enemyWindow'][_0x357383(0x417)]()){this[_0x357383(0x24c)][_0x357383(0x91a)]();return;}const _0x372483=BattleManager[_0x357383(0xaee)]();_0x372483['setTargetBattlerKey'](this[_0x357383(0x24c)]['enemy']()),this[_0x357383(0x24c)][_0x357383(0x6cc)](),VisuMZ[_0x357383(0x895)]['Scene_Battle_onEnemyOk']['call'](this),this[_0x357383(0x52f)]();},VisuMZ[_0x23168f(0x895)]['Scene_Battle_onEnemyCancel']=Scene_Battle['prototype'][_0x23168f(0x878)],Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x878)]=function(){const _0x7b205c=_0x23168f;this[_0x7b205c(0x40c)]()?(this['_statusWindow'][_0x7b205c(0xaa3)](),this[_0x7b205c(0x24c)][_0x7b205c(0x198)](),this[_0x7b205c(0xaec)][_0x7b205c(0x91a)]()):VisuMZ[_0x7b205c(0x895)][_0x7b205c(0x5b1)]['call'](this),this['cancelTargetSelectionVisibility'](),this[_0x7b205c(0x24c)][_0x7b205c(0x6cc)]();},Scene_Battle['prototype'][_0x23168f(0x52f)]=function(){const _0x5181a2=_0x23168f,_0x156e9d=this[_0x5181a2(0x3f3)]();(_0x156e9d===_0x5181a2(0x829)||this[_0x5181a2(0x979)]())&&(this['_skillWindow']['open'](),this['_skillWindow']['active']&&this['_skillWindow'][_0x5181a2(0xaa3)](),this[_0x5181a2(0x263)][_0x5181a2(0x9d4)](),this[_0x5181a2(0x263)][_0x5181a2(0x4fc)]&&this[_0x5181a2(0x263)]['show']());},Scene_Battle['prototype'][_0x23168f(0x5a7)]=function(){const _0x307409=_0x23168f,_0x55d824=this[_0x307409(0x3f3)]();['xp',_0x307409(0x9e8),_0x307409(0x829)][_0x307409(0x2d8)](_0x55d824)&&this[_0x307409(0xaec)]['open'](),this['okTargetSelectionVisibility']();},Sprite_Battler[_0x23168f(0x651)]=VisuMZ[_0x23168f(0x895)][_0x23168f(0xbac)][_0x23168f(0x33d)][_0x23168f(0x15f)],VisuMZ['BattleCore']['Sprite_Battler_initMembers']=Sprite_Battler[_0x23168f(0xa01)]['initMembers'],Sprite_Battler[_0x23168f(0xa01)][_0x23168f(0xadb)]=function(){const _0x348047=_0x23168f;VisuMZ[_0x348047(0x895)][_0x348047(0x9b3)]['call'](this),this['initMembersBattleCore']();if(this[_0x348047(0xbc5)]===Sprite_Enemy)this[_0x348047(0xb3d)]();this[_0x348047(0x305)]();},Sprite_Battler[_0x23168f(0xa01)][_0x23168f(0x26b)]=function(){const _0x3181e0=_0x23168f;this[_0x3181e0(0x9af)]=0x0,this[_0x3181e0(0x489)]=0x0,this['_floatHeight']=0x0,this['_targetFloatHeight']=0x0,this[_0x3181e0(0xb7e)]=0x0,this[_0x3181e0(0x2b2)]=0x0,this[_0x3181e0(0x54c)]=_0x3181e0(0xa7f),this[_0x3181e0(0x919)]=0x0,this[_0x3181e0(0xa98)]=0x0,this[_0x3181e0(0x7a3)]=0x0,this[_0x3181e0(0x53a)]=0x0,this['_targetOpacity']=0xff,this[_0x3181e0(0x6cb)]=0x0,this[_0x3181e0(0xb40)]=0x0,this[_0x3181e0(0x3fa)]='Linear',this[_0x3181e0(0xafd)]=0x0,this['_targetAngle']=0x0,this[_0x3181e0(0x2a7)]=0x0,this[_0x3181e0(0x998)]=0x0,this[_0x3181e0(0xbe3)]=_0x3181e0(0xa7f),this[_0x3181e0(0x56c)]=!![],this[_0x3181e0(0x481)]=0x0,this[_0x3181e0(0x7e3)]=0x0,this[_0x3181e0(0x10e)]=0x0,this[_0x3181e0(0xb72)]=0x0,this[_0x3181e0(0x826)]=0x0,this[_0x3181e0(0x615)]=0x0,this[_0x3181e0(0x978)]=_0x3181e0(0xa7f),this[_0x3181e0(0x18b)]=0x1,this[_0x3181e0(0xa43)]=0x1,this[_0x3181e0(0x529)]=0x1,this[_0x3181e0(0x44f)]=0x1,this[_0x3181e0(0xac1)]=0x0,this['_growWholeDuration']=0x0,this[_0x3181e0(0x977)]=_0x3181e0(0xa7f),this[_0x3181e0(0xb16)]=0x1,this[_0x3181e0(0x31e)]=0x0,this[_0x3181e0(0x444)]=0x0,this[_0x3181e0(0x9ce)]=0x0,this[_0x3181e0(0xb5c)]=0x0,this[_0x3181e0(0x4aa)]=_0x3181e0(0xa7f),this['_shakeFlinchDuration']=0x0,this[_0x3181e0(0x8ad)]=0x0;},Sprite_Battler['prototype']['createShadowSprite']=function(){const _0x1cd34b=_0x23168f;this[_0x1cd34b(0x121)]=new Sprite(),this[_0x1cd34b(0x121)][_0x1cd34b(0xa65)]=ImageManager[_0x1cd34b(0xbb3)](_0x1cd34b(0x859)),this['_shadowSprite'][_0x1cd34b(0xa65)][_0x1cd34b(0x97c)]=VisuMZ[_0x1cd34b(0x895)][_0x1cd34b(0xbac)]['Actor'][_0x1cd34b(0x579)],this[_0x1cd34b(0x121)][_0x1cd34b(0x4d5)]['x']=0.5,this[_0x1cd34b(0x121)][_0x1cd34b(0x4d5)]['y']=0.5,this[_0x1cd34b(0x121)]['y']=-0x2,this[_0x1cd34b(0x121)][_0x1cd34b(0x12e)]=![],this[_0x1cd34b(0x314)](this[_0x1cd34b(0x121)]);},Sprite_Battler[_0x23168f(0xa01)][_0x23168f(0x305)]=function(){const _0x2f508f=_0x23168f;this[_0x2f508f(0x70b)]=new Sprite(),this[_0x2f508f(0x70b)][_0x2f508f(0x4d5)]['x']=0.5,this[_0x2f508f(0x70b)][_0x2f508f(0x4d5)]['y']=0.5,this[_0x2f508f(0x314)](this['_distortionSprite']);},Sprite_Battler['prototype']['_updateColorFilter']=function(){const _0x10ba5e=_0x23168f;if(this[_0x10ba5e(0x5db)]&&this[_0x10ba5e(0x5db)]()){Sprite[_0x10ba5e(0xa01)][_0x10ba5e(0x608)][_0x10ba5e(0x88f)](this);return;}const _0x258d77=this[_0x10ba5e(0x70b)];if(!_0x258d77)return;!_0x258d77[_0x10ba5e(0x53c)]&&_0x258d77[_0x10ba5e(0x43b)](),_0x258d77[_0x10ba5e(0x53c)][_0x10ba5e(0x2b8)](this[_0x10ba5e(0xb63)]),_0x258d77[_0x10ba5e(0x53c)][_0x10ba5e(0xa90)](this[_0x10ba5e(0xa28)]),_0x258d77[_0x10ba5e(0x53c)][_0x10ba5e(0x713)](this[_0x10ba5e(0x9f3)]);},Sprite_Battler[_0x23168f(0xa01)][_0x23168f(0xbc1)]=function(){const _0x2fd490=_0x23168f;if(!this[_0x2fd490(0x70b)])return;if(this[_0x2fd490(0x121)]){const _0x3a783e=this['getChildIndex'](this['_distortionSprite']);this[_0x2fd490(0xbe0)](this[_0x2fd490(0x121)],_0x3a783e),this[_0x2fd490(0x573)]();}this['_svBattlerSprite']&&this[_0x2fd490(0x70b)][_0x2fd490(0x314)](this[_0x2fd490(0x496)]),this['_weaponSprite']&&this[_0x2fd490(0x70b)][_0x2fd490(0x314)](this['_weaponSprite']),this['_mainSprite']&&this[_0x2fd490(0x70b)]['addChild'](this[_0x2fd490(0x113)]),this[_0x2fd490(0x50b)]&&this[_0x2fd490(0x70b)][_0x2fd490(0x314)](this['_injectAnimationSprite']),this[_0x2fd490(0xa8f)]&&this[_0x2fd490(0x70b)]['addChild'](this[_0x2fd490(0xa8f)]);},Sprite_Battler[_0x23168f(0xa01)][_0x23168f(0x573)]=function(){const _0x3f7846=_0x23168f;if(!this[_0x3f7846(0x121)])return;if(this[_0x3f7846(0x311)]&&this[_0x3f7846(0x311)]['svBattlerShadowVisible']()){const _0xdfbcbd=this[_0x3f7846(0x121)][_0x3f7846(0xa65)];this[_0x3f7846(0x121)][_0x3f7846(0x7d6)](0x0,0x0,_0xdfbcbd['width'],_0xdfbcbd[_0x3f7846(0xb1c)]);}else this['_shadowSprite'][_0x3f7846(0x7d6)](0x0,0x0,0x0,0x0);},Sprite_Battler['prototype']['damageContainer']=function(){const _0x37d3e5=_0x23168f;return SceneManager['isSceneBattle']()?SceneManager[_0x37d3e5(0x23e)]['_spriteset'][_0x37d3e5(0x494)]:this[_0x37d3e5(0xbbe)];},Sprite_Battler[_0x23168f(0xa01)][_0x23168f(0x138)]=function(_0xde6c26,_0xebcbc5){const _0x569802=_0x23168f;if(!this['_battler']['isSpriteVisible']())return;if(BattleManager[_0x569802(0x1bc)]())return;const _0x28378b=VisuMZ[_0x569802(0x895)][_0x569802(0xbac)]['Damage'],_0x2f1a99=new Sprite_Damage();_0x2f1a99[_0x569802(0x1cd)]=_0x28378b[_0x569802(0x191)],this['sortDamageSprites'](_0x2f1a99),_0x2f1a99[_0x569802(0x138)](_0xde6c26,_0xebcbc5),this[_0x569802(0xa04)](_0x2f1a99);},Sprite_Battler[_0x23168f(0xa01)]['setupIconTextPopup']=function(_0x197e32,_0x1abcae,_0x4c7b2a){const _0x539dd7=_0x23168f;if(!this[_0x539dd7(0x311)]['isSpriteVisible']())return;if(BattleManager['shouldHideBattleEndPopups']())return;const _0x39f63d=VisuMZ[_0x539dd7(0x895)][_0x539dd7(0xbac)]['Damage'],_0x37709e=new Sprite_Damage();_0x37709e[_0x539dd7(0x1cd)]=_0x39f63d[_0x539dd7(0x191)],this[_0x539dd7(0x9c8)](_0x37709e),_0x37709e[_0x539dd7(0x8fb)](_0x197e32,_0x1abcae,_0x4c7b2a),this[_0x539dd7(0xa04)](_0x37709e);},Sprite_Battler[_0x23168f(0xa01)][_0x23168f(0x29a)]=function(){const _0x24592a=_0x23168f;if(!this['_battler'][_0x24592a(0x6c6)]())return;while(this['_battler'][_0x24592a(0x6c6)]()){this[_0x24592a(0x311)][_0x24592a(0x97a)]()&&this[_0x24592a(0x76b)]();}this[_0x24592a(0x311)][_0x24592a(0xbd7)](),this['_battler'][_0x24592a(0xaed)]();},Sprite_Battler[_0x23168f(0xa01)][_0x23168f(0x76b)]=function(){const _0xbe2daa=_0x23168f;if(BattleManager[_0xbe2daa(0x1bc)]())return;const _0x441bde=VisuMZ[_0xbe2daa(0x895)][_0xbe2daa(0xbac)]['Damage'],_0x5e95cd=new Sprite_Damage();_0x5e95cd[_0xbe2daa(0x1cd)]=_0x441bde[_0xbe2daa(0x191)],this[_0xbe2daa(0x9c8)](_0x5e95cd),_0x5e95cd[_0xbe2daa(0x85b)](this[_0xbe2daa(0x311)]),_0x5e95cd['setupBattleCore'](this[_0xbe2daa(0x311)]),this[_0xbe2daa(0xa04)](_0x5e95cd);},Sprite_Battler[_0x23168f(0xa01)]['addDamageSprite']=function(_0x2c08c7){const _0x160e16=_0x23168f;this[_0x160e16(0x5de)][_0x160e16(0x908)](_0x2c08c7);if(this[_0x160e16(0x1d8)]()){const _0x24c81e=SceneManager['_scene'][_0x160e16(0x1fa)];if(_0x24c81e)_0x24c81e[_0x160e16(0xa04)](_0x2c08c7,this[_0x160e16(0x311)]);}else{this['damageContainer']()[_0x160e16(0x314)](_0x2c08c7);if(SceneManager['isBattleFlipped']())_0x2c08c7[_0x160e16(0x145)]['x']=-0x1;}},Sprite_Battler[_0x23168f(0xa01)][_0x23168f(0x1d8)]=function(){const _0x2beec1=_0x23168f;return!$gameSystem['isSideView']()&&this[_0x2beec1(0x311)]&&this[_0x2beec1(0x311)][_0x2beec1(0x36b)]();return!$gameSystem[_0x2beec1(0x18f)]()&&this['_battler']&&this['_battler']['isActor']()&&Window_BattleStatus[_0x2beec1(0xa01)]['battleLayoutStyle']()===_0x2beec1(0x9e8);},Sprite_Battler[_0x23168f(0xa01)][_0x23168f(0x9c8)]=function(_0xc7447){const _0x31c373=_0x23168f;this[_0x31c373(0xb4a)](_0xc7447,!![]);const _0x1a74e0=VisuMZ[_0x31c373(0x895)][_0x31c373(0xbac)][_0x31c373(0x642)],_0x2b5b3b=SceneManager[_0x31c373(0x195)]()?-0x1:0x1;if(_0x1a74e0[_0x31c373(0x27f)])for(const _0x5b92e4 of this[_0x31c373(0x5de)]){_0x5b92e4['x']+=_0x1a74e0[_0x31c373(0x8f9)]*_0x2b5b3b,_0x5b92e4['y']+=_0x1a74e0['PopupShiftY'];}else{const _0x4a0f22=this['_damages'][this[_0x31c373(0x5de)][_0x31c373(0x312)]-0x1];_0x4a0f22&&(_0xc7447['x']=_0x4a0f22['x']+_0x1a74e0['PopupShiftX']*_0x2b5b3b,_0xc7447['y']=_0x4a0f22['y']+_0x1a74e0[_0x31c373(0x449)]);}},Sprite_Battler['prototype'][_0x23168f(0xb4a)]=function(_0x3be37a,_0x22501c){const _0x54a05d=_0x23168f,_0x3a45e7=SceneManager[_0x54a05d(0x195)]()?-0x1:0x1;let _0x24da20=this[_0x54a05d(0x9af)];_0x24da20+=this[_0x54a05d(0x2ab)]();let _0x52bce7=this['_baseY'];const _0x39203e=this[_0x54a05d(0x70b)]['scale']['y'];_0x52bce7+=this[_0x54a05d(0x4ac)]();const _0x2cdcc3=SceneManager['_scene'][_0x54a05d(0x1fa)];if(_0x2cdcc3&&this['parent']===_0x2cdcc3){_0x24da20+=_0x2cdcc3['x']-this[_0x54a05d(0x939)]();const _0x2b1afe=_0x2cdcc3[_0x54a05d(0x6ad)]()*0x3/0x4;_0x52bce7=_0x2cdcc3['y']+_0x2b1afe,_0x52bce7=Math[_0x54a05d(0x690)](_0x52bce7,_0x2cdcc3['y']+this['y']-this['height']+_0x2b1afe);}_0x3be37a['x']=Math['round'](_0x24da20+this['damageOffsetX']()*_0x3a45e7),_0x3be37a['y']=Math[_0x54a05d(0x1fc)](_0x52bce7+this['damageOffsetY']());},VisuMZ['BattleCore']['Sprite_Battler_damageOffsetX']=Sprite_Battler[_0x23168f(0xa01)]['damageOffsetX'],Sprite_Battler[_0x23168f(0xa01)][_0x23168f(0x939)]=function(){const _0xd917de=_0x23168f;let _0x1fb3ff=VisuMZ[_0xd917de(0x895)][_0xd917de(0x60e)][_0xd917de(0x88f)](this),_0x2d3ea6=VisuMZ[_0xd917de(0x895)]['Settings'][_0xd917de(0x642)][_0xd917de(0x9f9)]||0x0;return _0x2d3ea6+=this[_0xd917de(0x311)]['damagePopupOffsetX'](),Math['round'](_0x1fb3ff+_0x2d3ea6);},VisuMZ[_0x23168f(0x895)]['Sprite_Battler_damageOffsetY']=Sprite_Battler[_0x23168f(0xa01)]['damageOffsetY'],Sprite_Battler[_0x23168f(0xa01)][_0x23168f(0x704)]=function(){const _0x4597b3=_0x23168f;let _0x142a0f=VisuMZ[_0x4597b3(0x895)][_0x4597b3(0x249)]['call'](this);switch(this[_0x4597b3(0x311)][_0x4597b3(0xb04)]()){case _0x4597b3(0xb25):_0x142a0f-=this[_0x4597b3(0xb1c)]*this[_0x4597b3(0x145)]['y'];break;case _0x4597b3(0x283):_0x142a0f-=this[_0x4597b3(0xb1c)]*this[_0x4597b3(0x145)]['y']*0.5;break;}let _0x437912=VisuMZ['BattleCore'][_0x4597b3(0xbac)][_0x4597b3(0x642)][_0x4597b3(0x8ca)]||0x0;return _0x437912+=this[_0x4597b3(0x311)][_0x4597b3(0x69a)](),Math[_0x4597b3(0x1fc)](_0x142a0f+_0x437912);},Sprite_Actor[_0x23168f(0xa01)][_0x23168f(0x939)]=function(){const _0x1a9836=_0x23168f;return Sprite_Battler[_0x1a9836(0xa01)]['damageOffsetX'][_0x1a9836(0x88f)](this);},Sprite_Actor[_0x23168f(0xa01)][_0x23168f(0x704)]=function(){const _0x53b03c=_0x23168f;return Sprite_Battler[_0x53b03c(0xa01)][_0x53b03c(0x704)][_0x53b03c(0x88f)](this);},Sprite_Battler[_0x23168f(0xa01)]['destroyDamageSprite']=function(_0x3ea348){const _0x30a8ec=_0x23168f;this[_0x30a8ec(0x1d8)]()?SceneManager[_0x30a8ec(0x23e)]['_statusWindow']['removeDamageSprite'](_0x3ea348):(this[_0x30a8ec(0x8ce)]()[_0x30a8ec(0xa29)](_0x3ea348),this['_damages'][_0x30a8ec(0xa32)](_0x3ea348),_0x3ea348[_0x30a8ec(0xb8e)]());},VisuMZ['BattleCore'][_0x23168f(0x171)]=Sprite_Battler[_0x23168f(0xa01)][_0x23168f(0x80b)],Sprite_Battler[_0x23168f(0xa01)][_0x23168f(0x80b)]=function(_0x261578,_0x3ab14a){const _0x3b2096=_0x23168f,_0x3ea637=VisuMZ['BattleCore'][_0x3b2096(0xbac)];if(this[_0x3b2096(0xbc5)]===Sprite_Actor)_0x261578+=_0x3ea637['Actor'][_0x3b2096(0x9c0)]||0x0,_0x3ab14a+=_0x3ea637['Actor'][_0x3b2096(0x5a5)]||0x0;else this[_0x3b2096(0xbc5)]===Sprite_Enemy&&(_0x261578+=_0x3ea637[_0x3b2096(0xbeb)][_0x3b2096(0x9c0)]||0x0,_0x3ab14a+=_0x3ea637[_0x3b2096(0xbeb)][_0x3b2096(0x5a5)]||0x0);this[_0x3b2096(0x311)]&&(_0x261578=this[_0x3b2096(0x311)][_0x3b2096(0x21c)]??_0x261578,_0x3ab14a=this['_battler'][_0x3b2096(0x1bf)]??_0x3ab14a),VisuMZ['BattleCore'][_0x3b2096(0x171)][_0x3b2096(0x88f)](this,_0x261578,_0x3ab14a),this[_0x3b2096(0x31e)]=this[_0x3b2096(0x1c6)],this[_0x3b2096(0x444)]=this[_0x3b2096(0x22d)],this[_0x3b2096(0x9ce)]=0x0,this[_0x3b2096(0xb5c)]=0x0,this[_0x3b2096(0x4aa)]=_0x3b2096(0xa7f);},VisuMZ[_0x23168f(0x895)][_0x23168f(0x484)]=Sprite_Battler[_0x23168f(0xa01)]['update'],Sprite_Battler[_0x23168f(0xa01)][_0x23168f(0x926)]=function(){const _0x5100f1=_0x23168f;VisuMZ['BattleCore']['Sprite_Battler_update']['call'](this),!this['_battler']&&this[_0x5100f1(0x5ab)]&&(this[_0x5100f1(0x5ab)]['visible']=![]);},VisuMZ[_0x23168f(0x895)][_0x23168f(0xbe9)]=Sprite_Battler[_0x23168f(0xa01)][_0x23168f(0x39f)],Sprite_Battler[_0x23168f(0xa01)][_0x23168f(0x39f)]=function(){const _0x27d7e5=_0x23168f;this[_0x27d7e5(0x25c)](),this[_0x27d7e5(0x8ee)](),this['updateSpin'](),this[_0x27d7e5(0x914)](),VisuMZ['BattleCore'][_0x27d7e5(0xbe9)][_0x27d7e5(0x88f)](this),this[_0x27d7e5(0x1b4)](),this[_0x27d7e5(0x635)]();if(this[_0x27d7e5(0xbc5)]===Sprite_Enemy)this[_0x27d7e5(0x597)]();},VisuMZ[_0x23168f(0x895)][_0x23168f(0xa40)]=Sprite_Battler[_0x23168f(0xa01)][_0x23168f(0x32b)],Sprite_Battler[_0x23168f(0xa01)][_0x23168f(0x32b)]=function(){const _0xaf0192=_0x23168f;this[_0xaf0192(0x85d)](),VisuMZ[_0xaf0192(0x895)][_0xaf0192(0xa40)][_0xaf0192(0x88f)](this),this[_0xaf0192(0x29d)](),this[_0xaf0192(0x84d)]();},Sprite_Battler['prototype'][_0x23168f(0x1ce)]=function(){const _0x53fc43=_0x23168f,_0x270dfb=this[_0x53fc43(0x855)]();if(this[_0x53fc43(0x311)]['isSelected']())this[_0x53fc43(0xf7)]++,Graphics[_0x53fc43(0xb77)]%0x1e<0xf?_0x270dfb['setBlendColor']([0xff,0xff,0xff,0x40]):_0x270dfb[_0x53fc43(0xa90)]([0x0,0x0,0x0,0x0]);else this[_0x53fc43(0xf7)]>0x0&&(this[_0x53fc43(0xf7)]=0x0,_0x270dfb[_0x53fc43(0xa90)]([0x0,0x0,0x0,0x0]));},Sprite_Battler[_0x23168f(0xa01)][_0x23168f(0x80f)]=function(_0x2da481,_0x5802a5){const _0x222eaa=_0x23168f,_0x5b0a58=VisuMZ[_0x222eaa(0x895)]['Settings'];if(this[_0x222eaa(0xbc5)]===Sprite_Actor)_0x2da481+=_0x5b0a58[_0x222eaa(0x33d)][_0x222eaa(0x9c0)]||0x0,_0x5802a5+=_0x5b0a58[_0x222eaa(0x33d)][_0x222eaa(0x5a5)]||0x0;else this[_0x222eaa(0xbc5)]===Sprite_Enemy&&(_0x2da481+=_0x5b0a58[_0x222eaa(0xbeb)][_0x222eaa(0x9c0)]||0x0,_0x5802a5+=_0x5b0a58['Enemy']['OffsetY']||0x0);const _0x4d3eb5=_0x2da481-this[_0x222eaa(0x1c6)],_0x26e2a9=_0x5802a5-this[_0x222eaa(0x22d)];this[_0x222eaa(0x1c6)]=_0x2da481,this[_0x222eaa(0x22d)]=_0x5802a5,this[_0x222eaa(0x804)]-=_0x4d3eb5,this[_0x222eaa(0x1c4)]-=_0x26e2a9,this['_targetOffsetX']-=_0x4d3eb5,this['_targetOffsetY']-=_0x26e2a9,this[_0x222eaa(0x32b)]();},Sprite_Battler[_0x23168f(0xa01)][_0x23168f(0x90f)]=function(_0x5f0017,_0x118c89,_0x1b70e4,_0x40f043){const _0x9e3284=_0x23168f,_0x4df50c=VisuMZ['BattleCore'][_0x9e3284(0xbac)];if(this[_0x9e3284(0xbc5)]===Sprite_Actor)_0x5f0017+=_0x4df50c[_0x9e3284(0x33d)][_0x9e3284(0x9c0)]||0x0,_0x118c89+=_0x4df50c['Actor'][_0x9e3284(0x5a5)]||0x0;else this['constructor']===Sprite_Enemy&&(_0x5f0017+=_0x4df50c[_0x9e3284(0xbeb)][_0x9e3284(0x9c0)]||0x0,_0x118c89+=_0x4df50c[_0x9e3284(0xbeb)][_0x9e3284(0x5a5)]||0x0);(this[_0x9e3284(0x31e)]!==_0x5f0017||this[_0x9e3284(0x444)]!==_0x118c89)&&(this[_0x9e3284(0x31e)]=_0x5f0017,this[_0x9e3284(0x444)]=_0x118c89,this[_0x9e3284(0x9ce)]=_0x1b70e4,this['_homeWholeDuration']=_0x1b70e4,this[_0x9e3284(0x4aa)]=_0x40f043,_0x1b70e4<=0x0&&this['onHomeMoveEnd']());},Sprite_Battler['prototype'][_0x23168f(0x85d)]=function(){const _0x34d694=_0x23168f;if(this[_0x34d694(0x9ce)]<=0x0)return;const _0x215591=this[_0x34d694(0x9ce)],_0xa73b48=this['_homeWholeDuration'],_0x47aa9c=this['_homeEasing'];Imported[_0x34d694(0x74a)]?(this['_homeX']=this[_0x34d694(0xa0a)](this[_0x34d694(0x1c6)],this[_0x34d694(0x31e)],_0x215591,_0xa73b48,_0x47aa9c),this[_0x34d694(0x22d)]=this[_0x34d694(0xa0a)](this[_0x34d694(0x22d)],this[_0x34d694(0x444)],_0x215591,_0xa73b48,_0x47aa9c)):(this[_0x34d694(0x1c6)]=(this[_0x34d694(0x1c6)]*(_0x215591-0x1)+this[_0x34d694(0x31e)])/_0x215591,this[_0x34d694(0x22d)]=(this['_homeY']*(_0x215591-0x1)+this['_targetHomeY'])/_0x215591);this[_0x34d694(0x9ce)]--;if(this['_homeDuration']<=0x0)this[_0x34d694(0x845)]();},Sprite_Battler['prototype'][_0x23168f(0x845)]=function(){const _0x3258b7=_0x23168f;this[_0x3258b7(0x1c6)]=this[_0x3258b7(0x31e)],this[_0x3258b7(0x22d)]=this[_0x3258b7(0x444)];},Sprite_Battler['prototype']['updatePositionBattleCore']=function(){const _0x5302b4=_0x23168f;this[_0x5302b4(0x9af)]=this['x'],this[_0x5302b4(0x489)]=this['y'],this[_0x5302b4(0x9f0)](),this['updateJump'](),this['x']+=this[_0x5302b4(0x2ab)](),this['y']+=this[_0x5302b4(0x4ac)](),this['y']+=this[_0x5302b4(0x95c)](),this['x']=Math[_0x5302b4(0x58e)](this['x']),this['y']=Math[_0x5302b4(0x58e)](this['y']);},Sprite_Battler[_0x23168f(0xa01)][_0x23168f(0x2ab)]=function(){let _0x593de1=0x0;return _0x593de1;},Sprite_Battler[_0x23168f(0xa01)][_0x23168f(0x4ac)]=function(){const _0xd41f4e=_0x23168f;let _0x23c4e2=0x0;return this['_battler']&&!this['_battler'][_0xd41f4e(0x742)]()&&(_0x23c4e2-=this['_floatHeight'],_0x23c4e2-=this[_0xd41f4e(0x919)]),_0x23c4e2;},Sprite_Battler[_0x23168f(0xa01)][_0x23168f(0x95c)]=function(){const _0x37715e=_0x23168f;let _0x62f8b6=0x0;if(this[_0x37715e(0x70b)]&&this[_0x37715e(0xbc5)]!==Sprite_SvEnemy){const _0x149c20=this['_distortionSprite'][_0x37715e(0x145)]['y'];_0x62f8b6-=(_0x149c20-0x1)*this[_0x37715e(0xb1c)];}return _0x62f8b6;},Sprite_Battler[_0x23168f(0xa01)]['updateFlip']=function(){const _0x18fad2=_0x23168f,_0x1b4913=this[_0x18fad2(0x311)]&&this[_0x18fad2(0x311)][_0x18fad2(0x68f)]();this[_0x18fad2(0xb16)]=(_0x1b4913?-0x1:0x1)*Math[_0x18fad2(0x1c8)](this[_0x18fad2(0x145)]['x']);},Sprite_Battler[_0x23168f(0xa01)][_0x23168f(0x28d)]=function(_0x4ad0d3,_0x3bfdc3,_0x731224){const _0x5afeff=_0x23168f;if(!this[_0x5afeff(0xa5c)]())return;if(this[_0x5afeff(0x18a)]===_0x4ad0d3)return;this[_0x5afeff(0x18a)]=_0x4ad0d3,this[_0x5afeff(0xb7e)]=_0x3bfdc3,this[_0x5afeff(0x2b2)]=_0x3bfdc3,this[_0x5afeff(0x54c)]=_0x731224||_0x5afeff(0xa7f);if(_0x3bfdc3<=0x0)this[_0x5afeff(0x82c)]=_0x4ad0d3;},Sprite_Battler[_0x23168f(0xa01)][_0x23168f(0x9f0)]=function(){const _0x53da51=_0x23168f;if(this[_0x53da51(0xb7e)]<=0x0)return;const _0x59fb84=this[_0x53da51(0xb7e)],_0x2fd539=this[_0x53da51(0x2b2)],_0x1079e7=this[_0x53da51(0x54c)];Imported[_0x53da51(0x74a)]?this[_0x53da51(0x82c)]=this[_0x53da51(0xa0a)](this[_0x53da51(0x82c)],this[_0x53da51(0x18a)],_0x59fb84,_0x2fd539,_0x1079e7):this[_0x53da51(0x82c)]=(this[_0x53da51(0x82c)]*(_0x59fb84-0x1)+this[_0x53da51(0x18a)])/_0x59fb84;this[_0x53da51(0xb7e)]--;if(this[_0x53da51(0xb7e)]<=0x0)this[_0x53da51(0x468)]();},Sprite_Battler[_0x23168f(0xa01)][_0x23168f(0x468)]=function(){const _0x52624c=_0x23168f;this[_0x52624c(0x82c)]=this['_targetFloatHeight'];},Sprite_Battler[_0x23168f(0xa01)][_0x23168f(0xac6)]=function(){const _0x16d3bc=_0x23168f;return this[_0x16d3bc(0xb7e)]>0x0;},Sprite_Battler['prototype']['startJump']=function(_0x15ae7d,_0x2f83fe){const _0x37458e=_0x23168f;if(!this[_0x37458e(0xa5c)]())return;if(_0x2f83fe<=0x0)return;this[_0x37458e(0xa98)]=_0x15ae7d,this['_jumpDuration']=_0x2f83fe,this[_0x37458e(0x53a)]=_0x2f83fe;},Sprite_Battler[_0x23168f(0xa01)][_0x23168f(0x64a)]=function(){const _0x468a74=_0x23168f;if(this[_0x468a74(0x7a3)]<=0x0)return;const _0x5813a5=this[_0x468a74(0x53a)]-this[_0x468a74(0x7a3)],_0x342686=this['_jumpWholeDuration']/0x2,_0x509cdc=this['_jumpMaxHeight'],_0x512d3f=-_0x509cdc/Math['pow'](_0x342686,0x2);this['_jumpHeight']=_0x512d3f*Math[_0x468a74(0x898)](_0x5813a5-_0x342686,0x2)+_0x509cdc,this[_0x468a74(0x7a3)]--;if(this[_0x468a74(0x7a3)]<=0x0)return this['onJumpEnd']();},Sprite_Battler['prototype'][_0x23168f(0x2c0)]=function(){const _0x432669=_0x23168f;this[_0x432669(0x919)]=0x0;},Sprite_Battler[_0x23168f(0xa01)][_0x23168f(0xa6e)]=function(){return this['_jumpDuration']>0x0;},Sprite_Battler['prototype'][_0x23168f(0x4e0)]=function(_0x29485e,_0x52a295,_0x29b031){const _0xab1342=_0x23168f;if(this[_0xab1342(0xb5a)]===_0x29485e)return;this[_0xab1342(0xb5a)]=_0x29485e,this[_0xab1342(0x6cb)]=_0x52a295,this[_0xab1342(0xb40)]=_0x52a295,this['_opacityEasing']=_0x29b031||_0xab1342(0xa7f);if(_0x52a295<=0x0)this['opacity']=_0x29485e;},Sprite_Battler['prototype'][_0x23168f(0x84d)]=function(){const _0x3e66c9=_0x23168f;if(this[_0x3e66c9(0xbc5)][_0x3e66c9(0x611)]==='Sprite_SvEnemy')return;if(this[_0x3e66c9(0x6cb)]<=0x0)return;const _0x20089d=this['_opacityDuration'],_0x4ab246=this[_0x3e66c9(0xb40)],_0x15ba1d=this[_0x3e66c9(0x3fa)];Imported[_0x3e66c9(0x74a)]?this[_0x3e66c9(0x798)]=this['applyEasing'](this['opacity'],this[_0x3e66c9(0xb5a)],_0x20089d,_0x4ab246,_0x15ba1d):this[_0x3e66c9(0x798)]=(this['opacity']*(_0x20089d-0x1)+this['_targetOpacity'])/_0x20089d;this[_0x3e66c9(0x6cb)]--;if(this[_0x3e66c9(0x6cb)]<=0x0)this[_0x3e66c9(0xbcc)]();},Sprite_Battler[_0x23168f(0xa01)]['onOpacityEnd']=function(){const _0x78e7e1=_0x23168f;this[_0x78e7e1(0x798)]=this['_targetOpacity'];},Sprite_Battler[_0x23168f(0xa01)][_0x23168f(0x65e)]=function(){const _0x1a59a9=_0x23168f;return this[_0x1a59a9(0x6cb)]>0x0;},Sprite_Battler[_0x23168f(0xa01)][_0x23168f(0x597)]=function(){const _0xe849ae=_0x23168f;this[_0xe849ae(0x121)][_0xe849ae(0x12e)]=this[_0xe849ae(0x311)][_0xe849ae(0xb8b)](),this[_0xe849ae(0x3b5)]();},Sprite_Battler[_0x23168f(0xa01)]['updateShadowPosition']=function(){const _0x3778b5=_0x23168f;if(!this[_0x3778b5(0x121)])return;this[_0x3778b5(0x121)]['y']=this[_0x3778b5(0x489)]-this['y']-0x2;},Sprite_Battler['prototype']['updateShadowScale']=function(){const _0x4ccdf1=_0x23168f;if(!this['_battler'])return;this['_shadowScaleX']=this[_0x4ccdf1(0x311)][_0x4ccdf1(0xa8d)](),this[_0x4ccdf1(0x4f7)]=this[_0x4ccdf1(0x311)][_0x4ccdf1(0x1e1)]();},Game_BattlerBase[_0x23168f(0xa01)]['battlerShadowScaleX']=function(){const _0x43e9b4=_0x23168f,_0x4ef1c5=this[_0x43e9b4(0x36b)]()?this['actor']():this[_0x43e9b4(0x417)]();if(_0x4ef1c5){const _0x5a7b62=_0x4ef1c5[_0x43e9b4(0xae7)];if(_0x5a7b62['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x5a7b62['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Game_BattlerBase[_0x23168f(0xa01)]['battlerShadowScaleY']=function(){const _0x2fd06b=_0x23168f,_0xaddf07=this['isActor']()?this['actor']():this[_0x2fd06b(0x417)]();if(_0xaddf07){const _0x15a33c=_0xaddf07[_0x2fd06b(0xae7)];if(_0x15a33c[_0x2fd06b(0x26e)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x15a33c['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Sprite_Battler[_0x23168f(0xa01)]['updateScale']=function(){const _0x244c06=_0x23168f;if(this[_0x244c06(0xbc5)]===Sprite_SvEnemy)return;this[_0x244c06(0x6e6)](),this[_0x244c06(0x238)]();},Sprite_Battler[_0x23168f(0xa01)][_0x23168f(0x238)]=function(){const _0x24a7f0=_0x23168f,_0x567c9f=this[_0x24a7f0(0x70b)];_0x567c9f&&(_0x567c9f[_0x24a7f0(0x145)]['x']=this['mainSpriteScaleX'](),_0x567c9f['scale']['y']=this[_0x24a7f0(0xa78)]());},Sprite_Battler[_0x23168f(0xa01)]['mainSpriteScaleX']=function(){const _0x3f169a=_0x23168f;let _0xef6fac=0x1;return _0xef6fac*=this['_flipScaleX'],_0xef6fac*=this[_0x3f169a(0x18b)],_0xef6fac;},Sprite_Battler[_0x23168f(0xa01)][_0x23168f(0xa78)]=function(){const _0x269924=_0x23168f;return 0x1*this[_0x269924(0xa43)];},Sprite_Battler[_0x23168f(0xa01)]['mainSpriteWidth']=function(){const _0x2f4d40=_0x23168f;return this[_0x2f4d40(0x2e0)]*this[_0x2f4d40(0x86f)]();},Sprite_Battler[_0x23168f(0xa01)][_0x23168f(0x371)]=function(){const _0x2abe64=_0x23168f;return this['height']*this[_0x2abe64(0xa78)]();},Sprite_Battler[_0x23168f(0xa01)][_0x23168f(0x2d2)]=function(_0x21a93f,_0x3bb5d4,_0x47e95b,_0x2eed33){const _0x43cff7=_0x23168f;if(!this[_0x43cff7(0xa5c)]())return;if(!this[_0x43cff7(0x70b)])return;if(this[_0x43cff7(0x529)]===_0x21a93f&&this[_0x43cff7(0x44f)]===_0x3bb5d4)return;this[_0x43cff7(0x529)]=_0x21a93f,this[_0x43cff7(0x44f)]=_0x3bb5d4,this['_growDuration']=_0x47e95b,this[_0x43cff7(0xbaa)]=_0x47e95b,this[_0x43cff7(0x977)]=_0x2eed33||_0x43cff7(0xa7f),_0x47e95b<=0x0&&(this[_0x43cff7(0x18b)]=this[_0x43cff7(0x529)],this[_0x43cff7(0xa43)]=this[_0x43cff7(0x44f)]);},Sprite_Battler['prototype'][_0x23168f(0x6e6)]=function(){const _0x16afc7=_0x23168f;if(this[_0x16afc7(0xac1)]<=0x0)return;if(!this[_0x16afc7(0x70b)])return;const _0x2c7619=this[_0x16afc7(0xac1)],_0xcdd04a=this[_0x16afc7(0xbaa)],_0x2a1c5f=this['_growEasing'];Imported[_0x16afc7(0x74a)]?(this[_0x16afc7(0x18b)]=this['applyEasing'](this[_0x16afc7(0x18b)],this[_0x16afc7(0x529)],_0x2c7619,_0xcdd04a,_0x2a1c5f),this[_0x16afc7(0xa43)]=this[_0x16afc7(0xa0a)](this[_0x16afc7(0xa43)],this[_0x16afc7(0x44f)],_0x2c7619,_0xcdd04a,_0x2a1c5f)):(this['_growX']=(this[_0x16afc7(0x18b)]*(_0x2c7619-0x1)+this[_0x16afc7(0x529)])/_0x2c7619,this[_0x16afc7(0xa43)]=(this[_0x16afc7(0xa43)]*(_0x2c7619-0x1)+this[_0x16afc7(0x44f)])/_0x2c7619);this[_0x16afc7(0xac1)]--;if(this['_growDuration']<=0x0)this['onGrowEnd']();},Sprite_Battler[_0x23168f(0xa01)][_0x23168f(0x1f3)]=function(){const _0x4b3e38=_0x23168f;this[_0x4b3e38(0x18b)]=this['_targetGrowX'],this['_growY']=this['_targetGrowY'];},Sprite_Battler[_0x23168f(0xa01)][_0x23168f(0x5f6)]=function(){const _0x2b55a1=_0x23168f;return this[_0x2b55a1(0xac1)]>0x0;},Sprite_Battler['prototype'][_0x23168f(0x922)]=function(_0x97b266,_0x4f5594,_0x226ea0,_0x57ef44){const _0x3d2933=_0x23168f;if(!this[_0x3d2933(0xa5c)]())return;if(!this[_0x3d2933(0x70b)])return;if(this['_targetSkewX']===_0x97b266&&this[_0x3d2933(0xb72)]===_0x4f5594)return;this[_0x3d2933(0x10e)]=_0x97b266,this[_0x3d2933(0xb72)]=_0x4f5594,this[_0x3d2933(0x826)]=_0x226ea0,this[_0x3d2933(0x615)]=_0x226ea0,this[_0x3d2933(0x978)]=_0x57ef44||_0x3d2933(0xa7f),_0x226ea0<=0x0&&(this['_distortionSprite']['skew']['x']=this[_0x3d2933(0x10e)],this[_0x3d2933(0x70b)][_0x3d2933(0x4c3)]['y']=this[_0x3d2933(0xb72)]);},Sprite_Battler[_0x23168f(0xa01)]['updateSkew']=function(){const _0x285d57=_0x23168f;if(this[_0x285d57(0x826)]<=0x0)return;if(!this['_distortionSprite'])return;const _0x48ad7b=this[_0x285d57(0x826)],_0x22c8d2=this[_0x285d57(0x615)],_0x2be3f8=this[_0x285d57(0x978)],_0x44622a=this['_distortionSprite'];Imported[_0x285d57(0x74a)]?(_0x44622a['skew']['x']=this[_0x285d57(0xa0a)](_0x44622a[_0x285d57(0x4c3)]['x'],this[_0x285d57(0x10e)],_0x48ad7b,_0x22c8d2,_0x2be3f8),_0x44622a[_0x285d57(0x4c3)]['y']=this[_0x285d57(0xa0a)](_0x44622a[_0x285d57(0x4c3)]['y'],this[_0x285d57(0xb72)],_0x48ad7b,_0x22c8d2,_0x2be3f8)):(_0x44622a['skew']['x']=(_0x44622a[_0x285d57(0x4c3)]['x']*(_0x48ad7b-0x1)+this[_0x285d57(0x10e)])/_0x48ad7b,_0x44622a[_0x285d57(0x4c3)]['y']=(_0x44622a[_0x285d57(0x4c3)]['y']*(_0x48ad7b-0x1)+this[_0x285d57(0xb72)])/_0x48ad7b);this[_0x285d57(0x826)]--;if(this[_0x285d57(0x826)]<=0x0)this['onSkewEnd']();},Sprite_Battler[_0x23168f(0xa01)][_0x23168f(0xaf8)]=function(){const _0x83b077=_0x23168f;this[_0x83b077(0x70b)]['skew']['x']=this['_targetSkewX'],this[_0x83b077(0x70b)]['skew']['y']=this[_0x83b077(0xb72)];},Sprite_Battler[_0x23168f(0xa01)][_0x23168f(0x155)]=function(){const _0x2a3c6d=_0x23168f;return this[_0x2a3c6d(0x826)]>0x0;},Sprite_Battler['prototype'][_0x23168f(0xa3e)]=function(_0x5b0786,_0x9f1b80,_0x41d937,_0x3210b5){const _0x1dca60=_0x23168f;if(!this[_0x1dca60(0xa5c)]())return;if(!this['_distortionSprite'])return;if(this['_targetAngle']===_0x5b0786)return;this[_0x1dca60(0x32e)]=_0x5b0786,this[_0x1dca60(0x2a7)]=_0x9f1b80,this[_0x1dca60(0x998)]=_0x9f1b80,this[_0x1dca60(0xbe3)]=_0x41d937||_0x1dca60(0xa7f),this[_0x1dca60(0x56c)]=_0x3210b5,this[_0x1dca60(0x56c)]===undefined&&(this['_angleRevertOnFinish']=!![]),_0x9f1b80<=0x0&&(this[_0x1dca60(0xafd)]=_0x5b0786,this[_0x1dca60(0x56c)]&&(this[_0x1dca60(0x32e)]=0x0,this[_0x1dca60(0xafd)]=0x0));},Sprite_Battler[_0x23168f(0xa01)][_0x23168f(0x7c0)]=function(){const _0x367af6=_0x23168f;this['updateAngleCalculations'](),this[_0x367af6(0x1cf)]();},Sprite_Battler[_0x23168f(0xa01)][_0x23168f(0x68e)]=function(){const _0x5d74cf=_0x23168f;if(this[_0x5d74cf(0x2a7)]<=0x0)return;const _0x4d55f5=this['_angleDuration'],_0x4c513a=this[_0x5d74cf(0x998)],_0x11a0a3=this[_0x5d74cf(0xbe3)];Imported[_0x5d74cf(0x74a)]?this['_currentAngle']=this[_0x5d74cf(0xa0a)](this[_0x5d74cf(0xafd)],this[_0x5d74cf(0x32e)],_0x4d55f5,_0x4c513a,_0x11a0a3):this[_0x5d74cf(0xafd)]=(this['_currentAngle']*(_0x4d55f5-0x1)+this['_targetAngle'])/_0x4d55f5;this[_0x5d74cf(0x2a7)]--;if(this[_0x5d74cf(0x2a7)]<=0x0)this['onAngleEnd']();},Sprite_Battler[_0x23168f(0xa01)][_0x23168f(0x5f0)]=function(){const _0x47c1a5=_0x23168f;this[_0x47c1a5(0xafd)]=this['_targetAngle'],this['_angleRevertOnFinish']&&(this[_0x47c1a5(0x32e)]=0x0,this[_0x47c1a5(0xafd)]=0x0);},Sprite_Battler[_0x23168f(0xa01)][_0x23168f(0x9b6)]=function(){const _0x501ec5=_0x23168f;return this[_0x501ec5(0x2a7)]>0x0;},Sprite_Battler[_0x23168f(0xa01)]['applyAngleChange']=function(){const _0xd998fc=_0x23168f;if(!this[_0xd998fc(0x70b)])return;const _0x3f9daf=this[_0xd998fc(0xafd)],_0x3026ae=this[_0xd998fc(0x145)]['x'],_0xf7f47=this[_0xd998fc(0x311)][_0xd998fc(0x36b)]()?-0x1:0x1;this['_distortionSprite'][_0xd998fc(0xb2)]=_0x3f9daf*_0x3026ae*_0xf7f47;const _0x142807=this[_0xd998fc(0x70b)][_0xd998fc(0x145)]['y'];this['_distortionSprite']['y']=this[_0xd998fc(0xb1c)]*-0.5*(0x2-_0x142807),this[_0xd998fc(0x70b)]['y']=Math[_0xd998fc(0x330)](this[_0xd998fc(0x70b)]['y']);const _0x1c5cf3=[this[_0xd998fc(0x113)],this['_svBattlerSprite'],this[_0xd998fc(0xa8f)]];for(const _0x42d580 of _0x1c5cf3){if(!_0x42d580)continue;_0x42d580['y']=this[_0xd998fc(0xb1c)]*0.5;}this[_0xd998fc(0x121)]&&(this[_0xd998fc(0x168)]=this[_0xd998fc(0x168)]??0x1,this[_0xd998fc(0x4f7)]=this['_shadowScaleY']??0x1,this[_0xd998fc(0x121)][_0xd998fc(0x145)]['x']=this[_0xd998fc(0x70b)][_0xd998fc(0x145)]['x']*this[_0xd998fc(0x168)],this[_0xd998fc(0x121)][_0xd998fc(0x145)]['y']=this[_0xd998fc(0x70b)][_0xd998fc(0x145)]['y']*this[_0xd998fc(0x4f7)]);},VisuMZ[_0x23168f(0x895)][_0x23168f(0x6f7)]=Sprite_Actor['prototype']['createStateSprite'],Sprite_Actor[_0x23168f(0xa01)]['createStateSprite']=function(){const _0x2e2798=_0x23168f;VisuMZ['BattleCore']['Sprite_Actor_createStateSprite'][_0x2e2798(0x88f)](this),VisuMZ[_0x2e2798(0x895)]['Settings']['HpGauge'][_0x2e2798(0x991)]&&this[_0x2e2798(0x7b6)]();},VisuMZ[_0x23168f(0x895)][_0x23168f(0x861)]=Sprite_Enemy[_0x23168f(0xa01)][_0x23168f(0x659)],Sprite_Enemy[_0x23168f(0xa01)][_0x23168f(0x659)]=function(){const _0x1a243a=_0x23168f;VisuMZ[_0x1a243a(0x895)][_0x1a243a(0xbac)][_0x1a243a(0x382)][_0x1a243a(0x327)]&&this[_0x1a243a(0x7b6)](),VisuMZ[_0x1a243a(0x895)][_0x1a243a(0x861)][_0x1a243a(0x88f)](this);},Sprite_Battler[_0x23168f(0xa01)][_0x23168f(0x7b6)]=function(){const _0x5cd071=_0x23168f;if(!ConfigManager[_0x5cd071(0x786)])return;if(this[_0x5cd071(0xbc5)]===Sprite_SvEnemy)return;const _0x923b2c=VisuMZ[_0x5cd071(0x895)]['Settings'][_0x5cd071(0x382)],_0x305c9f=new Sprite_HpGauge();_0x305c9f[_0x5cd071(0x4d5)]['x']=_0x923b2c['AnchorX'],_0x305c9f[_0x5cd071(0x4d5)]['y']=_0x923b2c['AnchorY'],_0x305c9f[_0x5cd071(0x145)]['x']=_0x305c9f[_0x5cd071(0x145)]['y']=_0x923b2c[_0x5cd071(0x482)],this['_hpGaugeSprite']=_0x305c9f,this[_0x5cd071(0x314)](this['_hpGaugeSprite']),Spriteset_Battle['ANTI_TINT_UI']&&BattleManager[_0x5cd071(0xba8)](this[_0x5cd071(0x5ab)]);},VisuMZ[_0x23168f(0x895)][_0x23168f(0x1dc)]=Sprite_Battler[_0x23168f(0xa01)][_0x23168f(0x45b)],Sprite_Battler[_0x23168f(0xa01)][_0x23168f(0x45b)]=function(_0x479290){const _0x23ffa3=_0x23168f,_0x2b698e=this[_0x23ffa3(0x311)];VisuMZ['BattleCore'][_0x23ffa3(0x1dc)][_0x23ffa3(0x88f)](this,_0x479290),this[_0x23ffa3(0x3b4)](_0x479290);if(_0x2b698e!==_0x479290)this['updateShadowScale']();},Sprite_Battler[_0x23168f(0xa01)]['setupHpGaugeSprite']=function(_0x1cd689){const _0x41bc75=_0x23168f;if(!_0x1cd689)return;if(!this['_hpGaugeSprite'])return;if(_0x1cd689[_0x41bc75(0x36b)]()){}else{if(_0x1cd689['isEnemy']()){if(this['constructor']===Sprite_SvEnemy&&!_0x1cd689[_0x41bc75(0xb8b)]())return;}}this[_0x41bc75(0x5ab)]['setup'](_0x1cd689,'hp');},Sprite_Battler['prototype'][_0x23168f(0x55a)]=function(){const _0x1a342d=_0x23168f;return this[_0x1a342d(0x311)]&&this['_battler'][_0x1a342d(0x55a)]();},Sprite_Battler['prototype']['updateStaticSvBattlerFrames']=function(){const _0x25ad8b=_0x23168f,_0x1c234d=this['_mainSprite']['bitmap'];if(!_0x1c234d)return;const _0x5e337d=_0x1c234d['width'];let _0x5f167c=_0x1c234d[_0x25ad8b(0xb1c)];if(this[_0x25ad8b(0x311)][_0x25ad8b(0x14e)]()){if(this[_0x25ad8b(0x1e2)])_0x5f167c=Math['max'](0x0,this[_0x25ad8b(0x1e2)][_0x25ad8b(0xb1c)]-0x4);}this['_mainSprite'][_0x25ad8b(0x7d6)](0x0,0x0,_0x5e337d,_0x5f167c),this[_0x25ad8b(0x7d6)](0x0,0x0,_0x5e337d,_0x5f167c);},Sprite_Battler[_0x23168f(0xa01)][_0x23168f(0x1b4)]=function(){const _0x3ccd4c=_0x23168f;if(!this['_battler'])return;if(!this[_0x3ccd4c(0x5ab)])return;const _0x372c2d=VisuMZ['BattleCore'][_0x3ccd4c(0xbac)]['HpGauge'],_0x3ee3c3=this[_0x3ccd4c(0x5ab)];_0x3ee3c3['visible']=this[_0x3ccd4c(0x640)]();const _0xa77505=_0x372c2d['OffsetX'],_0x5bbeb0=_0x372c2d['OffsetY'];_0x3ee3c3['x']=_0xa77505,_0x3ee3c3['x']+=this[_0x3ccd4c(0x311)][_0x3ccd4c(0x548)](),_0x3ee3c3['y']=-this[_0x3ccd4c(0xb1c)]+_0x5bbeb0,_0x3ee3c3['y']+=this[_0x3ccd4c(0x311)][_0x3ccd4c(0x658)](),Spriteset_Battle[_0x3ccd4c(0x5bd)]&&SceneManager[_0x3ccd4c(0x23e)][_0x3ccd4c(0xa73)]&&(_0x3ee3c3['x']+=this['x'],_0x3ee3c3['y']+=this['y']);},Sprite_Battler[_0x23168f(0xa01)][_0x23168f(0x640)]=function(){const _0x1c4f88=_0x23168f;if(!this[_0x1c4f88(0x311)])return![];if(this[_0x1c4f88(0x311)][_0x1c4f88(0x36b)]())return!![];if(this[_0x1c4f88(0x311)][_0x1c4f88(0x6ea)]())return![];if(this[_0x1c4f88(0x798)]<=0x0)return![];const _0x4a767e=this[_0x1c4f88(0x311)][_0x1c4f88(0x417)]()[_0x1c4f88(0xae7)];if(_0x4a767e[_0x1c4f88(0x26e)](/<SHOW HP GAUGE>/i))return!![];if(_0x4a767e[_0x1c4f88(0x26e)](/<HIDE HP GAUGE>/i))return![];const _0x5f0f67=VisuMZ[_0x1c4f88(0x895)][_0x1c4f88(0xbac)][_0x1c4f88(0x382)];if(_0x5f0f67[_0x1c4f88(0xb4f)]){if(_0x5f0f67[_0x1c4f88(0x1ad)]&&BattleManager[_0x1c4f88(0x30a)]())return!![];if(this['_battler'][_0x1c4f88(0xa76)])return![];return this[_0x1c4f88(0x311)]['hasBeenDefeatedBefore']();}return!![];},VisuMZ['BattleCore'][_0x23168f(0xa6b)]=Sprite_Battler[_0x23168f(0xa01)][_0x23168f(0xbaf)],Sprite_Battler[_0x23168f(0xa01)][_0x23168f(0xbaf)]=function(){const _0x537f30=_0x23168f;if(!this[_0x537f30(0x311)])return![];if(this[_0x537f30(0x9ce)]>0x0)return!![];return VisuMZ[_0x537f30(0x895)]['Sprite_Battler_isMoving']['call'](this);},VisuMZ['BattleCore']['Sprite_Battler_startMove']=Sprite_Battler['prototype']['startMove'],Sprite_Battler[_0x23168f(0xa01)]['startMove']=function(_0x2cba7a,_0x1f4a40,_0x109301){const _0xf6ff4f=_0x23168f;this[_0xf6ff4f(0xa5c)]()&&VisuMZ['BattleCore'][_0xf6ff4f(0x1fe)]['call'](this,_0x2cba7a,_0x1f4a40,_0x109301);},Sprite_Battler['prototype']['canMove']=function(){const _0x120e51=_0x23168f;if(this[_0x120e51(0x311)]&&this[_0x120e51(0x311)]['isDead']())return![];if(this['_battler']&&!this[_0x120e51(0x311)][_0x120e51(0x202)]())return![];return $gameSystem['isSideView']();},Sprite_Battler[_0x23168f(0xa01)][_0x23168f(0x207)]=function(){},Sprite_Battler[_0x23168f(0xa01)]['stepBack']=function(){const _0x11ce55=_0x23168f;this[_0x11ce55(0x8f1)](0x0,0x0,0xc);},Sprite_Battler['prototype']['retreat']=function(){},Sprite_Battler[_0x23168f(0xa01)]['stepFlinch']=function(){const _0x3f35d6=_0x23168f,_0x1c23f0=VisuMZ[_0x3f35d6(0x895)][_0x3f35d6(0xbac)][_0x3f35d6(0x33d)],_0x2866ef=this[_0x3f35d6(0x311)]&&this[_0x3f35d6(0x311)][_0x3f35d6(0x36b)]()?0x1:-0x1,_0x54fcaf=this[_0x3f35d6(0x9af)]-this[_0x3f35d6(0x1c6)]+_0x2866ef*_0x1c23f0[_0x3f35d6(0x8a8)],_0x3b02f1=this[_0x3f35d6(0x489)]-this['_homeY']+_0x2866ef*_0x1c23f0[_0x3f35d6(0x24f)],_0x33693b=_0x1c23f0[_0x3f35d6(0xbe1)];this[_0x3f35d6(0x8f1)](_0x54fcaf,_0x3b02f1,_0x33693b);},Sprite_Battler[_0x23168f(0xa01)][_0x23168f(0xb90)]=function(_0x53b7f7,_0x36e011){const _0x22c4c0=_0x23168f,_0x448a8a=VisuMZ[_0x22c4c0(0x895)][_0x22c4c0(0xbac)][_0x22c4c0(0x33d)];this[_0x22c4c0(0xb3a)]=Math['ceil']((_0x448a8a[_0x22c4c0(0x653)]??0x18)*_0x36e011),this[_0x22c4c0(0x8ad)]=Math[_0x22c4c0(0x705)](this[_0x22c4c0(0x8ad)],_0x53b7f7);},Sprite_Battler['prototype'][_0x23168f(0x635)]=function(){const _0xd851e9=_0x23168f,_0x42d98c=VisuMZ[_0xd851e9(0x895)][_0xd851e9(0xbac)][_0xd851e9(0x33d)];if(!(_0x42d98c[_0xd851e9(0x9df)]??![]))return;if(this['_shakeFlinchDuration']>0x0){const _0x3c9e7d=this[_0xd851e9(0xb3a)];this[_0xd851e9(0x8ad)]=this[_0xd851e9(0x8ad)]*(_0x3c9e7d-0x1)/_0x3c9e7d,this['_shakeFlinchDuration']--,this[_0xd851e9(0xb3a)]<=0x0&&(this['_shakeFlinchPower']=0x0);}this[_0xd851e9(0x8ad)]>0x0?(this[_0xd851e9(0x113)]['x']=Math[_0xd851e9(0xa31)](this['_shakeFlinchPower'])*(Math['random']()<0.5?-0x1:0x1),this[_0xd851e9(0x489)]!==this['y']&&(this[_0xd851e9(0x113)]['y']=this['height']*0.5,this[_0xd851e9(0x113)]['y']+=Math[_0xd851e9(0xa31)](this[_0xd851e9(0x8ad)])*(Math['random']()<0.5?-0x1:0x1))):(this[_0xd851e9(0x113)]['x']=0x0,this[_0xd851e9(0x113)]['y']=this['height']*0.5);},VisuMZ[_0x23168f(0x895)][_0x23168f(0x157)]=Sprite_Actor[_0x23168f(0xa01)][_0x23168f(0xadb)],Sprite_Actor[_0x23168f(0xa01)][_0x23168f(0xadb)]=function(){const _0x1a86da=_0x23168f;VisuMZ[_0x1a86da(0x895)][_0x1a86da(0x157)][_0x1a86da(0x88f)](this),this['attachSpritesToDistortionSprite']();},Sprite_Actor[_0x23168f(0xa01)]['mainSprite']=function(){const _0x6cac12=_0x23168f;return this['_distortionSprite']||this[_0x6cac12(0x113)]||this;},VisuMZ[_0x23168f(0x895)][_0x23168f(0xef)]=Sprite_Actor[_0x23168f(0xa01)][_0x23168f(0x33e)],Sprite_Actor[_0x23168f(0xa01)][_0x23168f(0x33e)]=function(){},Sprite_Actor[_0x23168f(0xa01)]['moveToStartPositionBattleCore']=function(_0x4ba0a9){const _0x5f3c2b=_0x23168f;if(SceneManager[_0x5f3c2b(0x8a9)]())return;if(!_0x4ba0a9)return;if(!_0x4ba0a9[_0x5f3c2b(0xa5c)]())return;VisuMZ[_0x5f3c2b(0x895)][_0x5f3c2b(0xef)][_0x5f3c2b(0x88f)](this);},VisuMZ['BattleCore']['Sprite_Actor_setActorHome']=Sprite_Actor[_0x23168f(0xa01)][_0x23168f(0xb12)],Sprite_Actor[_0x23168f(0xa01)][_0x23168f(0xb12)]=function(_0x1e7bac){const _0x19d83b=_0x23168f;VisuMZ[_0x19d83b(0x895)][_0x19d83b(0xbac)][_0x19d83b(0x33d)]['HomePosJS']?VisuMZ[_0x19d83b(0x895)][_0x19d83b(0xbac)]['Actor'][_0x19d83b(0x91d)][_0x19d83b(0x88f)](this,_0x1e7bac):VisuMZ['BattleCore'][_0x19d83b(0x25a)][_0x19d83b(0x88f)](this,_0x1e7bac);},VisuMZ[_0x23168f(0x895)][_0x23168f(0x51f)]=Sprite_Actor[_0x23168f(0xa01)][_0x23168f(0x45b)],Sprite_Actor[_0x23168f(0xa01)][_0x23168f(0x45b)]=function(_0x43fe8b){const _0x1789a1=_0x23168f;VisuMZ[_0x1789a1(0x895)][_0x1789a1(0x51f)][_0x1789a1(0x88f)](this,_0x43fe8b),this[_0x1789a1(0x135)](_0x43fe8b);},Sprite_Actor[_0x23168f(0xa01)]['setBattlerBattleCore']=function(_0x5ebd26){const _0x2802d5=_0x23168f;if(!_0x5ebd26)return;if(!this['_mainSprite'])return;this[_0x2802d5(0x113)][_0x2802d5(0x4d5)]['x']=this[_0x2802d5(0x95d)]['svBattlerAnchorX'](),this[_0x2802d5(0x113)][_0x2802d5(0x4d5)]['y']=this[_0x2802d5(0x95d)][_0x2802d5(0xa19)](),this['updateShadowVisibility']();},VisuMZ[_0x23168f(0x895)][_0x23168f(0x580)]=Sprite_Actor[_0x23168f(0xa01)][_0x23168f(0x926)],Sprite_Actor[_0x23168f(0xa01)][_0x23168f(0x926)]=function(){const _0x37c347=_0x23168f;VisuMZ['BattleCore'][_0x37c347(0x580)][_0x37c347(0x88f)](this),this[_0x37c347(0x95d)]&&(this[_0x37c347(0x7b3)](),this[_0x37c347(0x733)]());},VisuMZ[_0x23168f(0x895)][_0x23168f(0x633)]=Sprite_Actor['prototype'][_0x23168f(0x380)],Sprite_Actor[_0x23168f(0xa01)]['updateBitmap']=function(){const _0x58b790=_0x23168f;VisuMZ[_0x58b790(0x895)][_0x58b790(0x633)]['call'](this),this[_0x58b790(0x113)]&&this['_mainSprite'][_0x58b790(0xa65)]&&this['_battler']&&(this[_0x58b790(0x113)][_0x58b790(0xa65)]['smooth']!==this['_battler'][_0x58b790(0x178)]()&&(this['_mainSprite'][_0x58b790(0xa65)][_0x58b790(0x97c)]=this[_0x58b790(0x311)][_0x58b790(0x178)]()));},VisuMZ['BattleCore'][_0x23168f(0x354)]=Sprite_Actor[_0x23168f(0xa01)][_0x23168f(0x597)],Sprite_Actor[_0x23168f(0xa01)][_0x23168f(0x597)]=function(){const _0x3d3417=_0x23168f;VisuMZ[_0x3d3417(0x895)][_0x3d3417(0x354)][_0x3d3417(0x88f)](this),this[_0x3d3417(0x73d)]();},Sprite_Actor['prototype'][_0x23168f(0x73d)]=function(){const _0x39d9f1=_0x23168f;if(!this[_0x39d9f1(0x113)])return;if(!this[_0x39d9f1(0x121)])return;this[_0x39d9f1(0x573)](),this[_0x39d9f1(0x3b5)]();},Sprite_Actor[_0x23168f(0xa01)]['updateStateSprite']=function(){const _0x1a4f02=_0x23168f;{this[_0x1a4f02(0x5bb)]['scale']['x']=0x1/(this['scale']['x']||0.001),this[_0x1a4f02(0x5bb)][_0x1a4f02(0x145)]['y']=0x1/(this[_0x1a4f02(0x145)]['y']||0.001);}{this[_0x1a4f02(0x5bb)]['x']=0x0,this[_0x1a4f02(0x5bb)]['y']=-this[_0x1a4f02(0xb1c)]-0x20+0x60;const _0x513ec2=VisuMZ[_0x1a4f02(0x895)][_0x1a4f02(0xbac)]['Actor'];this[_0x1a4f02(0x5bb)]['x']+=_0x513ec2[_0x1a4f02(0x355)]??0x0,this['_stateSprite']['y']+=_0x513ec2[_0x1a4f02(0x183)]??0x0;}},Sprite_Actor[_0x23168f(0xa01)][_0x23168f(0x733)]=function(){const _0x27fc0f=_0x23168f;if(!$gameSystem[_0x27fc0f(0x18f)]()&&this[_0x27fc0f(0xbc5)]===Sprite_Actor){const _0x3f1580=Scene_Battle[_0x27fc0f(0xa01)][_0x27fc0f(0x3f3)]();[_0x27fc0f(0xa7c),_0x27fc0f(0x290),_0x27fc0f(0x9e8),_0x27fc0f(0x829)][_0x27fc0f(0x2d8)](_0x3f1580)&&(this[_0x27fc0f(0x798)]=0x0);}},Sprite_Actor['prototype'][_0x23168f(0xa7b)]=function(){const _0xfa1e64=_0x23168f,_0x4b79c0=this[_0xfa1e64(0x95d)];if(_0x4b79c0){if(_0x4b79c0[_0xfa1e64(0x7da)])return;const _0x4973d4=_0x4b79c0[_0xfa1e64(0x7e9)]();if(_0x4b79c0[_0xfa1e64(0xb23)]()||_0x4b79c0[_0xfa1e64(0x228)]())this[_0xfa1e64(0x591)](_0xfa1e64(0x472));else{if(_0x4973d4===0x3)this[_0xfa1e64(0x591)](_0xfa1e64(0x5ed));else{if(_0x4973d4===0x2)this[_0xfa1e64(0x591)](_0xfa1e64(0x1a9));else{if(this[_0xfa1e64(0xabe)])this['startMotion'](_0xfa1e64(0xb96));else{if(_0x4b79c0[_0xfa1e64(0x2b5)]())this[_0xfa1e64(0x591)](_0xfa1e64(0x707));else{if(_0x4b79c0[_0xfa1e64(0x67c)]())this['startMotion'](_0xfa1e64(0x6f5));else{if(_0x4b79c0[_0xfa1e64(0x98e)]()||_0x4b79c0[_0xfa1e64(0x619)]())this[_0xfa1e64(0x591)](_0xfa1e64(0xb64));else{if(_0x4973d4===0x1)this[_0xfa1e64(0x591)](_0xfa1e64(0x906));else{if(_0x4b79c0[_0xfa1e64(0x473)]())this['startMotion']('dying');else{if(_0x4b79c0[_0xfa1e64(0xbc3)]())this['startMotion'](_0xfa1e64(0x472));else _0x4b79c0[_0xfa1e64(0x7ad)]()?this['startMotion'](_0xfa1e64(0x707)):this[_0xfa1e64(0x591)](_0xfa1e64(0x472));}}}}}}}}}}},Sprite_Actor[_0x23168f(0xa01)][_0x23168f(0x4db)]=function(){const _0x5855be=_0x23168f,_0xcba42f=0xa,_0x10f93b=0x12c*_0xcba42f,_0x171f42=0x1e*_0xcba42f;this[_0x5855be(0x8f1)](_0x10f93b,0x0,_0x171f42);},Sprite_Actor[_0x23168f(0xa01)][_0x23168f(0xae3)]=function(){const _0x34bdcf=_0x23168f;Sprite_Battler[_0x34bdcf(0xa01)][_0x34bdcf(0xae3)]['call'](this);},Sprite_Actor[_0x23168f(0xa01)][_0x23168f(0x360)]=function(){const _0x20855a=_0x23168f;return Sprite_Battler[_0x20855a(0x651)];},Sprite_Weapon['prototype'][_0x23168f(0x8ac)]=function(){const _0x872ea2=_0x23168f;return Sprite_Battler[_0x872ea2(0x651)];},Sprite_Actor[_0x23168f(0xa01)][_0x23168f(0x5e9)]=function(){},Sprite_Actor[_0x23168f(0xa01)][_0x23168f(0x22e)]=function(){},Sprite_Actor[_0x23168f(0xa01)][_0x23168f(0x3f0)]=function(){const _0xda5b5a=_0x23168f;if(this['_motion']&&++this[_0xda5b5a(0x2d9)]>=this[_0xda5b5a(0x360)]()){if(this[_0xda5b5a(0xbf3)]['loop'])this[_0xda5b5a(0x467)]=(this[_0xda5b5a(0x467)]+0x1)%0x4;else{if(this[_0xda5b5a(0x467)]<0x2)this[_0xda5b5a(0x467)]++;else{const _0x55ca6f=this[_0xda5b5a(0x95d)];if(_0x55ca6f)_0x55ca6f[_0xda5b5a(0x7da)]=undefined;this[_0xda5b5a(0xa7b)]();}}this[_0xda5b5a(0x2d9)]=0x0;}},Sprite_Actor[_0x23168f(0xa01)][_0x23168f(0x560)]=function(_0x1fe6a3){const _0x3d4242=_0x23168f;if(this['_battler']&&this[_0x3d4242(0x311)][_0x3d4242(0x14e)]()){this['_motion']=Sprite_Actor[_0x3d4242(0x3af)][_0x3d4242(0x5ed)];return;}const _0x3cc85d=Sprite_Actor[_0x3d4242(0x3af)][_0x1fe6a3];this[_0x3d4242(0xbf3)]=_0x3cc85d,this['_motionCount']=0x0,this[_0x3d4242(0x467)]=0x0;},Sprite_Actor[_0x23168f(0xa01)][_0x23168f(0x9c9)]=function(_0x3913fd){const _0x3207d7=_0x23168f;if(this[_0x3207d7(0x55a)]())return;this[_0x3207d7(0xa62)](),this[_0x3207d7(0x64d)][_0x3207d7(0x85b)](_0x3913fd),this['_actor'][_0x3207d7(0x516)]();},Sprite_Actor[_0x23168f(0xa01)][_0x23168f(0xa62)]=function(){const _0x2d3fa5=_0x23168f;let _0x4c113d=-0x10,_0x255353=this[_0x2d3fa5(0xb1c)]*0.5;const _0x1e36b4=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x4aef54=this[_0x2d3fa5(0x311)][_0x2d3fa5(0x88b)]()['map'](_0x2bd711=>_0x2bd711&&_0x2bd711['note'][_0x2d3fa5(0x26e)](_0x1e36b4)?Number(RegExp['$1']):0x0),_0x11bb7b=this['_battler'][_0x2d3fa5(0x88b)]()['map'](_0x147ab4=>_0x147ab4&&_0x147ab4[_0x2d3fa5(0xae7)][_0x2d3fa5(0x26e)](_0x1e36b4)?Number(RegExp['$2']):0x0);_0x4c113d=_0x4aef54['reduce']((_0x5e81f1,_0x3f8949)=>_0x5e81f1+_0x3f8949,_0x4c113d),_0x255353=_0x11bb7b[_0x2d3fa5(0x34f)]((_0x4880ea,_0x881c40)=>_0x4880ea+_0x881c40,_0x255353),this[_0x2d3fa5(0x64d)]['x']=_0x4c113d,this['_weaponSprite']['y']=_0x255353,this[_0x2d3fa5(0x64d)][_0x2d3fa5(0x926)]();},Sprite_Weapon['prototype'][_0x23168f(0x85b)]=function(_0x49250d){const _0x59a4be=_0x23168f;this[_0x59a4be(0xbee)]=_0x49250d,this[_0x59a4be(0x47b)]=-0x1,this[_0x59a4be(0x467)]=0x0,this[_0x59a4be(0xa77)](),this[_0x59a4be(0x4df)]();},Sprite_Actor[_0x23168f(0xa01)]['updateTargetPosition']=function(){},Sprite_Actor[_0x23168f(0xa01)]['stepForward']=function(){const _0x13d421=_0x23168f,_0x563290=VisuMZ['BattleCore'][_0x13d421(0xbac)][_0x13d421(0x8d2)],_0x3fc56c=_0x563290['StepDistanceX'],_0x57c5bd=_0x563290['StepDistanceY'],_0x5672e6=_0x563290['StepDuration'];this[_0x13d421(0x8f1)](-_0x3fc56c,-_0x57c5bd,_0x5672e6);},VisuMZ[_0x23168f(0x895)][_0x23168f(0x6ae)]=Sprite_Actor[_0x23168f(0xa01)][_0x23168f(0x4df)],Sprite_Actor[_0x23168f(0xa01)][_0x23168f(0x4df)]=function(){const _0x38f7c9=_0x23168f;this[_0x38f7c9(0x55a)]()?this[_0x38f7c9(0x1e4)]():(this[_0x38f7c9(0x1c0)](),VisuMZ['BattleCore']['Sprite_Actor_updateFrame'][_0x38f7c9(0x88f)](this));},Sprite_Actor[_0x23168f(0xa01)][_0x23168f(0x1c0)]=function(){const _0x315295=_0x23168f;if(this[_0x315295(0x311)]&&this[_0x315295(0x311)][_0x315295(0x1b2)]){const _0x2d7f01=this[_0x315295(0x311)][_0x315295(0x1b2)];this['_motion']=Sprite_Actor['MOTIONS'][_0x2d7f01[_0x315295(0x339)]],this[_0x315295(0x467)]=_0x2d7f01['pattern'];const _0x1e3c69=this[_0x315295(0x64d)];_0x1e3c69['freezeFrame'](_0x2d7f01['weaponImageId'],_0x2d7f01[_0x315295(0x4a0)]),this[_0x315295(0xa62)]();}},Sprite_Weapon[_0x23168f(0xa01)][_0x23168f(0x739)]=function(_0x930757,_0x20804c){const _0x27182d=_0x23168f;this[_0x27182d(0xbee)]=_0x930757,this[_0x27182d(0x47b)]=-Infinity,this[_0x27182d(0x467)]=_0x20804c,this[_0x27182d(0xa77)](),this[_0x27182d(0x4df)]();},Sprite_Enemy[_0x23168f(0xa01)][_0x23168f(0xadb)]=function(){const _0x3fe57d=_0x23168f;Sprite_Battler[_0x3fe57d(0xa01)][_0x3fe57d(0xadb)][_0x3fe57d(0x88f)](this),this[_0x3fe57d(0xb4d)]=null,this[_0x3fe57d(0x6da)]=![],this[_0x3fe57d(0x126)]='',this[_0x3fe57d(0xa15)]=0x0,this[_0x3fe57d(0x2c4)]=null,this[_0x3fe57d(0x542)]=0x0,this[_0x3fe57d(0x990)]=0x0,this[_0x3fe57d(0x9ae)](),this[_0x3fe57d(0x659)]();},VisuMZ[_0x23168f(0x895)][_0x23168f(0xc7)]=Sprite_Enemy[_0x23168f(0xa01)]['update'],Sprite_Enemy[_0x23168f(0xa01)]['update']=function(){const _0x5db92a=_0x23168f;VisuMZ[_0x5db92a(0x895)][_0x5db92a(0xc7)]['call'](this),this[_0x5db92a(0x573)](),this[_0x5db92a(0x1c1)]();},Sprite_Enemy[_0x23168f(0xa01)][_0x23168f(0x9ae)]=function(){const _0x143fa6=_0x23168f;this[_0x143fa6(0x113)]=new Sprite(),this[_0x143fa6(0x113)][_0x143fa6(0x4d5)]['x']=0.5,this['_mainSprite'][_0x143fa6(0x4d5)]['y']=0x1,this['addChild'](this[_0x143fa6(0x113)]),this[_0x143fa6(0xbc1)]();},Sprite_Enemy['prototype'][_0x23168f(0x855)]=function(){const _0x544626=_0x23168f;return this[_0x544626(0x70b)]||this[_0x544626(0x113)]||this;},Sprite_Enemy[_0x23168f(0xa01)]['loadBitmap']=function(_0x3dd22f){const _0x36668f=_0x23168f;this[_0x36668f(0xa65)]=new Bitmap(0x1,0x1);if(this[_0x36668f(0xb8b)]()){const _0x135c3c=this[_0x36668f(0xb4d)]['svBattlerData']();this['bitmap']=new Bitmap(_0x135c3c[_0x36668f(0x2e0)],_0x135c3c[_0x36668f(0xb1c)]),this['_mainSprite'][_0x36668f(0xa65)]=new Bitmap(0x1,0x1);}else{if($gameSystem[_0x36668f(0x18f)]()){const _0x43ee26=ImageManager[_0x36668f(0x6ab)](_0x3dd22f);_0x43ee26[_0x36668f(0x313)](this[_0x36668f(0xff)][_0x36668f(0x7f5)](this,_0x43ee26));}else{const _0x114745=ImageManager[_0x36668f(0x5da)](_0x3dd22f);_0x114745[_0x36668f(0x313)](this['onStaticEnemyBitmapLoad'][_0x36668f(0x7f5)](this,_0x114745));}}},Sprite_Enemy[_0x23168f(0xa01)]['onStaticEnemyBitmapLoad']=function(_0x48c8a1){const _0x4941f5=_0x23168f;this[_0x4941f5(0x113)][_0x4941f5(0xa65)]=_0x48c8a1,this[_0x4941f5(0xa65)]=new Bitmap(_0x48c8a1[_0x4941f5(0x2e0)],_0x48c8a1[_0x4941f5(0xb1c)]);},VisuMZ[_0x23168f(0x895)][_0x23168f(0x373)]=Sprite_Enemy[_0x23168f(0xa01)][_0x23168f(0x2b8)],Sprite_Enemy[_0x23168f(0xa01)][_0x23168f(0x2b8)]=function(_0x16f7dc){const _0x3cad9d=_0x23168f;this[_0x3cad9d(0x113)]&&this[_0x3cad9d(0x113)][_0x3cad9d(0x2b8)](_0x16f7dc);},VisuMZ['BattleCore'][_0x23168f(0x873)]=Sprite_Enemy[_0x23168f(0xa01)][_0x23168f(0x20e)],Sprite_Enemy[_0x23168f(0xa01)]['initVisibility']=function(){const _0x23d04a=_0x23168f;this['allowCollapse']()?VisuMZ['BattleCore'][_0x23d04a(0x873)]['call'](this):(this[_0x23d04a(0x6da)]=!this[_0x23d04a(0xb4d)][_0x23d04a(0x6ea)](),!this['_appeared']&&(this[_0x23d04a(0x798)]=0x0));},VisuMZ[_0x23168f(0x895)]['Sprite_Enemy_updateCollapse']=Sprite_Enemy[_0x23168f(0xa01)][_0x23168f(0x2ad)],Sprite_Enemy[_0x23168f(0xa01)][_0x23168f(0x2ad)]=function(){const _0x2156a4=_0x23168f;if(this[_0x2156a4(0x740)]())VisuMZ['BattleCore'][_0x2156a4(0x7ce)][_0x2156a4(0x88f)](this);},Sprite_Enemy[_0x23168f(0xa01)]['updateFrame']=function(){const _0x2cb187=_0x23168f;Sprite_Battler['prototype'][_0x2cb187(0x4df)]['call'](this);const _0x463d7d=this[_0x2cb187(0x855)]()||this;if(!_0x463d7d)return;!_0x463d7d[_0x2cb187(0xa65)]&&(_0x463d7d[_0x2cb187(0xa65)]=new Bitmap(this[_0x2cb187(0x2e0)]||0x1,this[_0x2cb187(0xb1c)]||0x1));if(this[_0x2cb187(0x2c4)]===_0x2cb187(0xb2e))this[_0x2cb187(0x113)]['setFrame'](0x0,0x0,this['_mainSprite'][_0x2cb187(0x2e0)]||0x1,this[_0x2cb187(0x542)]);else{let _0x14ec1f=0x1;if(_0x463d7d&&_0x463d7d[_0x2cb187(0xa65)])_0x14ec1f=_0x463d7d[_0x2cb187(0xa65)][_0x2cb187(0x2e0)];let _0x275de1=0x1;if(this[_0x2cb187(0xa65)])_0x275de1=this['bitmap'][_0x2cb187(0xb1c)];_0x463d7d[_0x2cb187(0x7d6)](0x0,0x0,_0x14ec1f,_0x275de1);}},VisuMZ[_0x23168f(0x895)]['Sprite_Enemy_updateBossCollapse']=Sprite_Enemy[_0x23168f(0xa01)][_0x23168f(0x437)],Sprite_Enemy[_0x23168f(0xa01)]['updateBossCollapse']=function(){const _0x338197=_0x23168f;if(this[_0x338197(0x740)]())VisuMZ['BattleCore']['Sprite_Enemy_updateBossCollapse'][_0x338197(0x88f)](this);},Sprite_Enemy[_0x23168f(0xa01)][_0x23168f(0xbaf)]=function(){const _0x3cc902=_0x23168f;return Sprite_Battler[_0x3cc902(0xa01)][_0x3cc902(0xbaf)]['call'](this);},VisuMZ[_0x23168f(0x895)][_0x23168f(0x6c0)]=Sprite_Enemy[_0x23168f(0xa01)]['updateStateSprite'],Sprite_Enemy[_0x23168f(0xa01)][_0x23168f(0x7b3)]=function(){const _0x3ffbaa=_0x23168f;VisuMZ[_0x3ffbaa(0x895)][_0x3ffbaa(0x6c0)][_0x3ffbaa(0x88f)](this),this[_0x3ffbaa(0x7d9)]();},Sprite_Enemy[_0x23168f(0xa01)][_0x23168f(0x7d9)]=function(){const _0x3e6540=_0x23168f,_0x32d99c=VisuMZ[_0x3e6540(0x895)]['Settings'][_0x3e6540(0xbeb)];if(_0x32d99c['NameAttachStateIcon']&&!_0x32d99c[_0x3e6540(0xa61)]){this['_stateIconSprite'][_0x3e6540(0x798)]=0x0;return;}this[_0x3e6540(0x2f8)]['x']=0x0,this[_0x3e6540(0x2f8)]['x']+=this['_battler'][_0x3e6540(0x548)]();let _0x3b04ff=0x1;if(this['bitmap'])_0x3b04ff=this[_0x3e6540(0xa65)][_0x3e6540(0xb1c)];this[_0x3e6540(0x2f8)]['y']=-_0x3b04ff-this[_0x3e6540(0x2f8)][_0x3e6540(0xb1c)]-0x4,this[_0x3e6540(0x2f8)]['y']+=this['_battler'][_0x3e6540(0x658)](),this['_stateIconSprite'][_0x3e6540(0x145)]['x']=0x1/(this[_0x3e6540(0x145)]['x']||0.001),this[_0x3e6540(0x2f8)][_0x3e6540(0x145)]['y']=0x1/(this[_0x3e6540(0x145)]['y']||0.001),this[_0x3e6540(0xb8b)]()&&(this['_svBattlerSprite'][_0x3e6540(0x5bb)][_0x3e6540(0x145)]['x']=-0x1/(this[_0x3e6540(0x145)]['x']||0.001),this[_0x3e6540(0x496)][_0x3e6540(0x5bb)][_0x3e6540(0x145)]['y']=0x1/(this[_0x3e6540(0x145)]['y']||0.001));},Sprite_Enemy['prototype'][_0x23168f(0x1c1)]=function(){const _0x34dcc4=_0x23168f;this[_0x34dcc4(0x311)]&&this['_battler'][_0x34dcc4(0x1c1)]();},VisuMZ['BattleCore'][_0x23168f(0x57e)]=Sprite_Enemy[_0x23168f(0xa01)][_0x23168f(0x45b)],Sprite_Enemy[_0x23168f(0xa01)][_0x23168f(0x45b)]=function(_0x10860f){const _0x3a6ba9=_0x23168f;VisuMZ[_0x3a6ba9(0x895)]['Sprite_Enemy_setBattler'][_0x3a6ba9(0x88f)](this,_0x10860f),this[_0x3a6ba9(0x16e)](_0x10860f);},Sprite_Enemy[_0x23168f(0xa01)]['setSvBattlerSprite']=function(_0x556676){const _0x18a5b7=_0x23168f;!this[_0x18a5b7(0x496)]&&(this[_0x18a5b7(0x496)]=new Sprite_SvEnemy(_0x556676),this[_0x18a5b7(0xbc1)]()),this[_0x18a5b7(0x496)][_0x18a5b7(0x45b)](_0x556676);},Sprite_Enemy[_0x23168f(0xa01)][_0x23168f(0xb8b)]=function(){const _0x42eb8f=_0x23168f;return this[_0x42eb8f(0xb4d)]&&this[_0x42eb8f(0xb4d)]['hasSvBattler']();},Sprite_Enemy[_0x23168f(0xa01)][_0x23168f(0x740)]=function(){const _0x1f30a4=_0x23168f;return this['hasSvBattler']()?this[_0x1f30a4(0xb4d)]['allowCollapse']():!![];},Sprite_Enemy[_0x23168f(0xa01)]['refreshMotion']=function(){const _0x29d8bb=_0x23168f;this[_0x29d8bb(0xb8b)]()&&this[_0x29d8bb(0x496)][_0x29d8bb(0xa7b)]();},Sprite_Enemy['prototype'][_0x23168f(0x560)]=function(_0x1879d3){const _0x100cbd=_0x23168f;if(this[_0x100cbd(0xb8b)]())this[_0x100cbd(0x496)][_0x100cbd(0x560)](_0x1879d3);},Sprite_Enemy[_0x23168f(0xa01)][_0x23168f(0x9c9)]=function(_0x38d5b2){const _0x2d3762=_0x23168f;if(this['hasSvBattler']())this[_0x2d3762(0x496)][_0x2d3762(0x9c9)](_0x38d5b2);},Sprite_Enemy['prototype'][_0x23168f(0x207)]=function(){const _0x49ed71=_0x23168f,_0x39830d=VisuMZ[_0x49ed71(0x895)][_0x49ed71(0xbac)][_0x49ed71(0x8d2)],_0x511b93=_0x39830d[_0x49ed71(0x4e3)],_0x32f52e=_0x39830d['StepDistanceY'],_0x14161d=_0x39830d['StepDuration'];this[_0x49ed71(0x8f1)](_0x511b93,_0x32f52e,_0x14161d);};function Sprite_SvEnemy(){const _0x368d20=_0x23168f;this[_0x368d20(0x8c9)](...arguments);}Sprite_SvEnemy[_0x23168f(0xa01)]=Object[_0x23168f(0x69e)](Sprite_Actor[_0x23168f(0xa01)]),Sprite_SvEnemy[_0x23168f(0xa01)][_0x23168f(0xbc5)]=Sprite_SvEnemy,Sprite_SvEnemy['prototype'][_0x23168f(0x8c9)]=function(_0xf66ade){const _0x216122=_0x23168f;Sprite_Actor[_0x216122(0xa01)][_0x216122(0x8c9)][_0x216122(0x88f)](this,_0xf66ade),this['scale']['x']=-0x1,this[_0x216122(0x5bb)][_0x216122(0x145)]['x']=-0x1;},Sprite_SvEnemy[_0x23168f(0xa01)][_0x23168f(0xb3d)]=function(){},Sprite_SvEnemy[_0x23168f(0xa01)]['moveToStartPosition']=function(){},Sprite_SvEnemy[_0x23168f(0xa01)][_0x23168f(0xb12)]=function(_0x442486){},Sprite_SvEnemy[_0x23168f(0xa01)]['updateShadow']=function(){},Sprite_SvEnemy[_0x23168f(0xa01)][_0x23168f(0x3b5)]=function(){},Sprite_SvEnemy[_0x23168f(0xa01)][_0x23168f(0x7b3)]=function(){const _0x31bc03=_0x23168f;this['_stateSprite'][_0x31bc03(0x12e)]=![];},Sprite_SvEnemy['prototype'][_0x23168f(0x380)]=function(){const _0x48981=_0x23168f;Sprite_Battler[_0x48981(0xa01)][_0x48981(0x380)][_0x48981(0x88f)](this);const _0x3b16e4=this['_actor']['svBattlerName']();this[_0x48981(0x126)]!==_0x3b16e4&&(this[_0x48981(0x126)]=_0x3b16e4,this[_0x48981(0x113)][_0x48981(0xa65)]=ImageManager['loadSvActor'](_0x3b16e4)),this[_0x48981(0x113)]&&this[_0x48981(0x113)][_0x48981(0xa65)]&&this['_battler']&&(this[_0x48981(0x113)][_0x48981(0xa65)][_0x48981(0x97c)]!==this[_0x48981(0x311)][_0x48981(0x178)]()&&(this[_0x48981(0x113)][_0x48981(0xa65)][_0x48981(0x97c)]=this[_0x48981(0x311)][_0x48981(0x178)]()));},Sprite_SvEnemy[_0x23168f(0xa01)][_0x23168f(0x4db)]=function(){},Sprite_SvEnemy[_0x23168f(0xa01)][_0x23168f(0x8f1)]=function(_0x20e028,_0x2376ef,_0x516ca5){const _0x4aa6e5=_0x23168f;if(this['parent'])this[_0x4aa6e5(0xbbe)][_0x4aa6e5(0x8f1)](_0x20e028,_0x2376ef,_0x516ca5);},Sprite_SvEnemy['prototype'][_0x23168f(0xa7b)]=function(){const _0x320a9d=_0x23168f,_0x3adbcd=this[_0x320a9d(0x95d)];if(_0x3adbcd){const _0x2d8403=_0x3adbcd[_0x320a9d(0x7e9)]();if(_0x3adbcd[_0x320a9d(0xb23)]()||_0x3adbcd['isActing']())this[_0x320a9d(0x591)](_0x320a9d(0x472));else{if(_0x2d8403===0x3)this[_0x320a9d(0x591)](_0x320a9d(0x5ed));else{if(_0x2d8403===0x2)this[_0x320a9d(0x591)](_0x320a9d(0x1a9));else{if(_0x3adbcd[_0x320a9d(0x67c)]())this[_0x320a9d(0x591)](_0x320a9d(0x6f5));else{if(_0x3adbcd[_0x320a9d(0x98e)]()||_0x3adbcd[_0x320a9d(0x619)]())this[_0x320a9d(0x591)](_0x320a9d(0xb64));else{if(_0x2d8403===0x1)this[_0x320a9d(0x591)](_0x320a9d(0x906));else{if(_0x3adbcd[_0x320a9d(0x473)]())this[_0x320a9d(0x591)](_0x320a9d(0x679));else _0x3adbcd[_0x320a9d(0xbc3)]()?this[_0x320a9d(0x591)](_0x320a9d(0x472)):this[_0x320a9d(0x591)](_0x3adbcd[_0x320a9d(0xd7)]()[_0x320a9d(0x4d2)]||'walk');}}}}}}}},Sprite_SvEnemy[_0x23168f(0xa01)]['inHomePosition']=function(){const _0x43d3be=_0x23168f;return this['parent']?this[_0x43d3be(0xbbe)]['_offsetX']===0x0&&this[_0x43d3be(0xbbe)]['_offsetY']===0x0:!![];},Sprite_SvEnemy[_0x23168f(0xa01)][_0x23168f(0x914)]=function(){},VisuMZ[_0x23168f(0x895)][_0x23168f(0x509)]=Sprite_Animation[_0x23168f(0xa01)][_0x23168f(0x887)],Sprite_Animation['prototype'][_0x23168f(0x887)]=function(_0x31d6ec){const _0x36cbae=_0x23168f;return _0x31d6ec[_0x36cbae(0x70b)]?this[_0x36cbae(0x196)](_0x31d6ec):VisuMZ['BattleCore'][_0x36cbae(0x509)]['call'](this,_0x31d6ec);},Sprite_Animation['prototype']['targetDistortionSpritePosition']=function(_0x5831fe){const _0xd2b345=_0x23168f;let _0x13dcd9=_0x5831fe['x'],_0x1dde3d=_0x5831fe['y'],_0x563c45=_0x5831fe[_0xd2b345(0xb1c)],_0x2e6c5c=_0x5831fe[_0xd2b345(0x70b)][_0xd2b345(0x145)]['y'];_0x5831fe['x']=_0x5831fe[_0xd2b345(0x9af)]+_0x5831fe['extraPositionX'](),_0x5831fe['y']=_0x5831fe[_0xd2b345(0x489)]+_0x5831fe[_0xd2b345(0x4ac)](),_0x5831fe[_0xd2b345(0xb1c)]*=_0x2e6c5c;let _0x2fccab=VisuMZ[_0xd2b345(0x895)]['Sprite_Animation_targetSpritePosition'][_0xd2b345(0x88f)](this,_0x5831fe);return _0x5831fe['x']=_0x13dcd9,_0x5831fe['y']=_0x1dde3d,_0x5831fe[_0xd2b345(0xb1c)]=_0x563c45,_0x2fccab;},Sprite_Animation[_0x23168f(0xa01)]['isUnderAnimation']=function(){const _0x2d8055=_0x23168f;if(this[_0x2d8055(0x523)])return![];return this[_0x2d8055(0x80c)]&&this['_animation']['name']&&this[_0x2d8055(0x80c)][_0x2d8055(0x611)][_0x2d8055(0x26e)](/<UNDER>/gi);},VisuMZ[_0x23168f(0x895)][_0x23168f(0x17e)]=Sprite_AnimationMV[_0x23168f(0xa01)]['updatePosition'],Sprite_AnimationMV[_0x23168f(0xa01)][_0x23168f(0x32b)]=function(){const _0x7633ac=_0x23168f;VisuMZ[_0x7633ac(0x895)][_0x7633ac(0x17e)][_0x7633ac(0x88f)](this);if(!SceneManager[_0x7633ac(0xbef)]())return;if(this['_animation'][_0x7633ac(0xc5)]===0x3)this['x']=Math[_0x7633ac(0x1fc)](Graphics[_0x7633ac(0x2d7)]/0x2),this['y']=Math[_0x7633ac(0x1fc)](Graphics[_0x7633ac(0x493)]/0x2);else{if(this['battleStatusSprite'])return;}},Sprite_AnimationMV[_0x23168f(0xa01)][_0x23168f(0x7d0)]=function(){const _0x3b81da=_0x23168f;if(this[_0x3b81da(0x523)])return![];return this[_0x3b81da(0x80c)]&&this[_0x3b81da(0x80c)]['name']&&this[_0x3b81da(0x80c)][_0x3b81da(0x611)][_0x3b81da(0x26e)](/<UNDER>/gi);},Sprite_Damage[_0x23168f(0xa01)][_0x23168f(0x3bf)]=function(_0x5ece45){const _0x1a9b46=_0x23168f,_0x36c637=_0x5ece45['getNextDamagePopup']()||_0x5ece45[_0x1a9b46(0x759)]();if(_0x36c637[_0x1a9b46(0x668)]||_0x36c637['evaded'])this[_0x1a9b46(0x304)]=0x0,this['createMiss']();else{if(_0x36c637[_0x1a9b46(0x1e0)])this['_colorType']=_0x36c637['hpDamage']>=0x0?0x0:0x1,this[_0x1a9b46(0x8c5)](_0x36c637[_0x1a9b46(0x187)]);else _0x5ece45[_0x1a9b46(0x942)]()&&_0x36c637['mpDamage']!==0x0&&(this[_0x1a9b46(0x304)]=_0x36c637['mpDamage']>=0x0?0x2:0x3,this[_0x1a9b46(0x8c5)](_0x36c637[_0x1a9b46(0x416)]));}_0x36c637[_0x1a9b46(0xb9d)]&&this['setupCriticalEffect']();},Sprite_Damage[_0x23168f(0xa01)]['setup']=function(_0x3f5d56){},Sprite_Damage[_0x23168f(0xa01)][_0x23168f(0x8c5)]=function(_0x104aef){const _0x104c87=_0x23168f;let _0x43fb4f=this['createString'](_0x104aef);const _0x3135f7=this[_0x104c87(0x64f)](),_0xe10a3c=Math[_0x104c87(0x58e)](_0x3135f7*0.75);for(let _0x10feda=0x0;_0x10feda<_0x43fb4f[_0x104c87(0x312)];_0x10feda++){const _0x4b0a0e=this[_0x104c87(0x486)](_0xe10a3c,_0x3135f7);_0x4b0a0e[_0x104c87(0xa65)]['drawText'](_0x43fb4f[_0x10feda],0x0,0x0,_0xe10a3c,_0x3135f7,_0x104c87(0x283)),_0x4b0a0e['x']=(_0x10feda-(_0x43fb4f[_0x104c87(0x312)]-0x1)/0x2)*_0xe10a3c,_0x4b0a0e['dy']=-_0x10feda;}},Sprite_Damage[_0x23168f(0xa01)][_0x23168f(0xa96)]=function(_0x2bfb46){const _0x4185f0=_0x23168f;let _0x5e3af2=Math[_0x4185f0(0x1c8)](_0x2bfb46)[_0x4185f0(0x40a)]();this[_0x4185f0(0xbf1)]()&&(_0x5e3af2=VisuMZ['GroupDigits'](_0x5e3af2));const _0x3ba5a6=VisuMZ['BattleCore'][_0x4185f0(0xbac)]['Damage'];let _0x5d1228='',_0x199bb4='';switch(this[_0x4185f0(0x304)]){case 0x0:_0x5d1228=_0x3ba5a6[_0x4185f0(0x59d)]||_0x4185f0(0x753),_0x199bb4=TextManager['hp'];if(_0x2bfb46===0x0)_0x5d1228='%1';break;case 0x1:_0x5d1228=_0x3ba5a6[_0x4185f0(0x2ca)]||_0x4185f0(0x8b0),_0x199bb4=TextManager['hp'];break;case 0x2:_0x5d1228=_0x3ba5a6[_0x4185f0(0xad4)]||_0x4185f0(0x58d),_0x199bb4=TextManager['mp'];break;case 0x3:_0x5d1228=_0x3ba5a6['mpHealingFmt']||_0x4185f0(0x616),_0x199bb4=TextManager['mp'];break;}return _0x5d1228['format'](_0x5e3af2,_0x199bb4)['trim']();},Sprite_Damage[_0x23168f(0xa01)][_0x23168f(0xbf1)]=function(){const _0x29d8f1=_0x23168f;return Imported[_0x29d8f1(0x74a)]?VisuMZ[_0x29d8f1(0x8b4)]['Settings'][_0x29d8f1(0x9f8)][_0x29d8f1(0x70e)]:![];},Sprite_Damage[_0x23168f(0xa01)][_0x23168f(0x6fa)]=function(){const _0x2c396f=_0x23168f,_0x519bfd=VisuMZ[_0x2c396f(0x895)][_0x2c396f(0xbac)][_0x2c396f(0x642)];_0x519bfd[_0x2c396f(0x268)]=_0x519bfd[_0x2c396f(0x268)]||[0x0,0x0,0x0,0x0],this[_0x2c396f(0xa68)]=_0x519bfd[_0x2c396f(0x268)][_0x2c396f(0x760)](0x0),this['_flashDuration']=_0x519bfd[_0x2c396f(0xb35)]||0x1;},Sprite_Damage['prototype'][_0x23168f(0x138)]=function(_0xf1d55c,_0x1c0566){const _0x729d8f=_0x23168f;this[_0x729d8f(0xa68)]=_0x1c0566[_0x729d8f(0x8e7)]||[0x0,0x0,0x0,0x0],this[_0x729d8f(0xa68)]=JsonEx[_0x729d8f(0x5fe)](this[_0x729d8f(0xa68)]),this[_0x729d8f(0x8a3)]=_0x1c0566[_0x729d8f(0xb8a)]||0x0;const _0x2b5a40=this['fontSize'](),_0x178f43=Math[_0x729d8f(0x58e)](_0x2b5a40*0x1e),_0x2f0cdf=this['createChildSprite'](_0x178f43,_0x2b5a40);_0x2f0cdf[_0x729d8f(0xa65)][_0x729d8f(0x664)]=ColorManager['getColor'](_0x1c0566['textColor']),_0x2f0cdf[_0x729d8f(0xa65)][_0x729d8f(0x601)](_0xf1d55c,0x0,0x0,_0x178f43,_0x2b5a40,_0x729d8f(0x283)),_0x2f0cdf['dy']=0x0;},Sprite_Damage[_0x23168f(0xa01)][_0x23168f(0x8fb)]=function(_0x219ea7,_0x1bbc89,_0x3d54a2){const _0x42b184=_0x23168f,_0x404f22=Math[_0x42b184(0x705)](this[_0x42b184(0x64f)](),ImageManager[_0x42b184(0x960)]),_0x39c62a=Math[_0x42b184(0x58e)](_0x404f22*0x1e),_0x4ebfcf=this[_0x42b184(0x486)](_0x39c62a,_0x404f22),_0x4a100e=ImageManager['iconWidth']/0x2,_0xdfc358=_0x4ebfcf['bitmap'][_0x42b184(0xb61)](_0x1bbc89+'\x20');_0x4ebfcf[_0x42b184(0xa65)][_0x42b184(0x664)]=ColorManager['getColor'](_0x3d54a2['textColor']),_0x4ebfcf['bitmap'][_0x42b184(0x601)](_0x1bbc89,_0x4a100e,0x0,_0x39c62a-_0x4a100e,_0x404f22,'center');const _0x4d9882=Math[_0x42b184(0x1fc)]((_0x404f22-ImageManager[_0x42b184(0x960)])/0x2),_0x1988c3=_0x39c62a/0x2-ImageManager[_0x42b184(0x36c)]-_0xdfc358/0x2+_0x4a100e/0x2,_0x5d7d3b=ImageManager[_0x42b184(0xbb3)](_0x42b184(0x525)),_0x4bd573=ImageManager[_0x42b184(0x36c)],_0x7fff0=ImageManager['iconHeight'],_0x8987e7=_0x219ea7%0x10*_0x4bd573,_0x13de3e=Math['floor'](_0x219ea7/0x10)*_0x7fff0;_0x4ebfcf['bitmap'][_0x42b184(0x797)](_0x5d7d3b,_0x8987e7,_0x13de3e,_0x4bd573,_0x7fff0,_0x1988c3,_0x4d9882),this[_0x42b184(0xa68)]=_0x3d54a2[_0x42b184(0x8e7)]||[0x0,0x0,0x0,0x0],this[_0x42b184(0xa68)]=JsonEx[_0x42b184(0x5fe)](this[_0x42b184(0xa68)]),this['_flashDuration']=_0x3d54a2['flashDuration']||0x0,_0x4ebfcf['dy']=0x0,_0x3d54a2[_0x42b184(0x7dd)]&&(_0x4ebfcf['x']+=_0x3d54a2['offsetX']),_0x3d54a2[_0x42b184(0x421)]&&(_0x4ebfcf['dy']+=_0x3d54a2[_0x42b184(0x421)]);},VisuMZ['BattleCore'][_0x23168f(0x12b)]=Sprite_Damage[_0x23168f(0xa01)][_0x23168f(0x486)],Sprite_Damage[_0x23168f(0xa01)][_0x23168f(0x486)]=function(_0x534893,_0x5ae16b){const _0x26e2c1=_0x23168f;return _0x5ae16b=Math[_0x26e2c1(0x1fc)](_0x5ae16b*1.2),VisuMZ[_0x26e2c1(0x895)][_0x26e2c1(0x12b)][_0x26e2c1(0x88f)](this,_0x534893,_0x5ae16b);},VisuMZ[_0x23168f(0x895)]['Sprite_StateIcon_updateFrame']=Sprite_StateIcon[_0x23168f(0xa01)][_0x23168f(0x4df)],Sprite_StateIcon['prototype']['updateFrame']=function(){const _0x3e6fdb=_0x23168f;VisuMZ[_0x3e6fdb(0x895)][_0x3e6fdb(0xbe5)][_0x3e6fdb(0x88f)](this),this[_0x3e6fdb(0x798)]=this[_0x3e6fdb(0x274)]>0x0?0xff:0x0;},VisuMZ[_0x23168f(0x895)][_0x23168f(0x132)]=Sprite_Weapon[_0x23168f(0xa01)][_0x23168f(0xa77)],Sprite_Weapon[_0x23168f(0xa01)][_0x23168f(0xa77)]=function(){const _0x54d2a0=_0x23168f;VisuMZ[_0x54d2a0(0x895)]['Sprite_Weapon_loadBitmap'][_0x54d2a0(0x88f)](this),this['bitmap']&&(this['bitmap'][_0x54d2a0(0x97c)]=VisuMZ[_0x54d2a0(0x895)][_0x54d2a0(0xbac)]['Actor'][_0x54d2a0(0x579)]);},VisuMZ['BattleCore'][_0x23168f(0xa2d)]=Sprite_Gauge[_0x23168f(0xa01)][_0x23168f(0xb5)],Sprite_Gauge['prototype'][_0x23168f(0xb5)]=function(){const _0x164f13=_0x23168f;return this['_statusType']!==_0x164f13(0x9c3)?VisuMZ[_0x164f13(0x895)][_0x164f13(0xbac)][_0x164f13(0x382)]['AniDuration']??0x14:VisuMZ[_0x164f13(0x895)][_0x164f13(0xa2d)][_0x164f13(0x88f)](this);};function Sprite_GaugeRate(){const _0x558c91=_0x23168f;this[_0x558c91(0x8c9)](...arguments);}function _0x56df(_0x363eaa,_0xbea2d8){const _0x1f1eb8=_0x1f1e();return _0x56df=function(_0x56df4a,_0x195f6c){_0x56df4a=_0x56df4a-0xb1;let _0x48ed20=_0x1f1eb8[_0x56df4a];return _0x48ed20;},_0x56df(_0x363eaa,_0xbea2d8);}Sprite_GaugeRate[_0x23168f(0xa01)]=Object['create'](Sprite_Gauge['prototype']),Sprite_GaugeRate[_0x23168f(0xa01)][_0x23168f(0xbc5)]=Sprite_GaugeRate,Sprite_GaugeRate[_0x23168f(0xa01)]['initialize']=function(){const _0xf7419=_0x23168f;Sprite_Gauge[_0xf7419(0xa01)][_0xf7419(0x8c9)][_0xf7419(0x88f)](this),this[_0xf7419(0xa1e)]=![];},Sprite_GaugeRate[_0x23168f(0xa01)][_0x23168f(0x463)]=function(_0x815b74,_0x37fdca){const _0x1e4c43=_0x23168f;this['_updateTargetValue']=!![],Sprite_Gauge[_0x1e4c43(0xa01)]['updateTargetValue'][_0x1e4c43(0x88f)](this,_0x815b74,_0x37fdca),this[_0x1e4c43(0xa1e)]=![];},Sprite_GaugeRate[_0x23168f(0xa01)][_0x23168f(0x403)]=function(){const _0x372449=_0x23168f;if(this[_0x372449(0xa1e)]){const _0x48d83e=Sprite_Gauge[_0x372449(0xa01)][_0x372449(0x403)][_0x372449(0x88f)](this),_0x16d583=this[_0x372449(0x9a5)]();if(_0x16d583<=0x0)return _0x372449(0x902);return Math['floor'](_0x48d83e/_0x16d583*0x64)+'%';}else return Sprite_Gauge[_0x372449(0xa01)][_0x372449(0x403)][_0x372449(0x88f)](this);},Sprite_GaugeRate[_0x23168f(0xa01)][_0x23168f(0x133)]=function(){const _0x8a1525=_0x23168f,_0x5757a2=Sprite_Gauge[_0x8a1525(0xa01)]['currentValue'][_0x8a1525(0x88f)](this),_0x4f8acf=this[_0x8a1525(0x9a5)]();if(_0x4f8acf<=0x0)return _0x8a1525(0x902);return Math['floor'](_0x5757a2/_0x4f8acf*0x64)+'%';},Sprite_GaugeRate['prototype'][_0x23168f(0x883)]=function(){const _0x2c7111=_0x23168f;if(this[_0x2c7111(0x9a5)]()<=0x0)return 0x1;return Sprite_Gauge[_0x2c7111(0xa01)][_0x2c7111(0x883)][_0x2c7111(0x88f)](this);},Sprite_GaugeRate[_0x23168f(0xa01)][_0x23168f(0x177)]=function(){const _0x30a4e0=_0x23168f;if(this['currentMaxValue']()<=0x0)return ColorManager[_0x30a4e0(0x5f7)]();return Sprite_Gauge[_0x30a4e0(0xa01)][_0x30a4e0(0x177)][_0x30a4e0(0x88f)](this);},Sprite_GaugeRate['prototype'][_0x23168f(0x58a)]=function(){const _0x3bc176=_0x23168f;this['_statusType']==='mp'&&this[_0x3bc176(0x9a5)]()<=0x0&&($gameTemp[_0x3bc176(0x676)]=!![]),Sprite_Gauge[_0x3bc176(0xa01)][_0x3bc176(0x58a)][_0x3bc176(0x88f)](this),$gameTemp[_0x3bc176(0x676)]=undefined;},VisuMZ[_0x23168f(0x895)][_0x23168f(0x540)]=ColorManager[_0x23168f(0xba5)],ColorManager[_0x23168f(0xba5)]=function(_0x4d2a49){const _0xb79793=_0x23168f;if($gameTemp[_0xb79793(0x676)])return ColorManager[_0xb79793(0x5f7)]();return VisuMZ[_0xb79793(0x895)][_0xb79793(0x540)]['call'](this,_0x4d2a49);};function Sprite_HpGauge(){this['initialize'](...arguments);}Sprite_HpGauge['prototype']=Object['create'](Sprite_Gauge[_0x23168f(0xa01)]),Sprite_HpGauge['prototype'][_0x23168f(0xbc5)]=Sprite_HpGauge,Sprite_HpGauge[_0x23168f(0xa01)][_0x23168f(0x8c9)]=function(){const _0x3091bf=_0x23168f;Sprite_Gauge[_0x3091bf(0xa01)][_0x3091bf(0x8c9)][_0x3091bf(0x88f)](this);},Sprite_HpGauge['prototype'][_0x23168f(0x325)]=function(){return 0x0;},Sprite_HpGauge[_0x23168f(0xa01)][_0x23168f(0x58a)]=function(){const _0x2ad407=_0x23168f;this[_0x2ad407(0xa65)][_0x2ad407(0x176)]();const _0x1a56dc=this[_0x2ad407(0x403)]();!isNaN(_0x1a56dc)&&this['drawGauge']();};function Sprite_EnemyName(){this['initialize'](...arguments);}Sprite_EnemyName[_0x23168f(0xa01)]=Object['create'](Sprite_Name[_0x23168f(0xa01)]),Sprite_EnemyName[_0x23168f(0xa01)]['constructor']=Sprite_EnemyName,Sprite_EnemyName[_0x23168f(0xa01)]['initialize']=function(){const _0x3c4022=_0x23168f;Sprite_Name['prototype'][_0x3c4022(0x8c9)][_0x3c4022(0x88f)](this),this['createAttachedSprites']();},Sprite_EnemyName[_0x23168f(0xa01)][_0x23168f(0xadb)]=function(){const _0x35bbd7=_0x23168f;Sprite_Name[_0x35bbd7(0xa01)][_0x35bbd7(0xadb)]['call'](this),this[_0x35bbd7(0x798)]=0x0,this[_0x35bbd7(0xf0)]=null,this[_0x35bbd7(0x4d5)]['x']=0.5,this['anchor']['y']=0x0;},Sprite_EnemyName[_0x23168f(0xa01)][_0x23168f(0x2ee)]=function(){const _0x3c0722=_0x23168f;VisuMZ[_0x3c0722(0x895)]['Settings'][_0x3c0722(0xbeb)][_0x3c0722(0x47a)]&&(this[_0x3c0722(0x2f8)]=new Sprite_StateIcon(),this['addChild'](this[_0x3c0722(0x2f8)]));},Sprite_EnemyName[_0x23168f(0xa01)][_0x23168f(0x7a0)]=function(){const _0x48291d=_0x23168f;return Graphics[_0x48291d(0x2d7)];},Sprite_EnemyName[_0x23168f(0xa01)][_0x23168f(0xb87)]=function(){const _0x2b50c5=_0x23168f;return this['_lineHeight']=this[_0x2b50c5(0x4fd)]||Window_Base['prototype'][_0x2b50c5(0x6ad)]()||0x24,this[_0x2b50c5(0x4fd)]*0x4;},Sprite_EnemyName['prototype'][_0x23168f(0x64f)]=function(){const _0x2486d8=_0x23168f;return VisuMZ[_0x2486d8(0x895)][_0x2486d8(0xbac)]['Enemy'][_0x2486d8(0x3ea)]||$gameSystem[_0x2486d8(0x9ea)]();},Sprite_EnemyName['prototype'][_0x23168f(0x270)]=function(_0x84adce){const _0x457f89=_0x23168f;this[_0x457f89(0xf0)]=_0x84adce;},Sprite_EnemyName[_0x23168f(0xa01)][_0x23168f(0x926)]=function(){const _0x3803cf=_0x23168f;Sprite_Name['prototype'][_0x3803cf(0x926)][_0x3803cf(0x88f)](this),this[_0x3803cf(0x414)](),this['updatePosition'](),this[_0x3803cf(0x6af)](),this[_0x3803cf(0x84d)]();},Sprite_EnemyName['prototype'][_0x23168f(0x58a)]=function(){const _0x5b8664=_0x23168f;this[_0x5b8664(0xc1)]=undefined;const _0x5da828=this[_0x5b8664(0x611)](),_0xc6109d=this[_0x5b8664(0x7a0)](),_0x1c8b09=Window_Base[_0x5b8664(0xa01)]['lineHeight']();this[_0x5b8664(0x5e8)](),this[_0x5b8664(0xa65)][_0x5b8664(0x176)](),this[_0x5b8664(0xa65)][_0x5b8664(0x601)](_0x5da828,0x0,0x0,_0xc6109d,_0x1c8b09,'center');},Sprite_EnemyName[_0x23168f(0xa01)][_0x23168f(0x414)]=function(){const _0x3581f5=_0x23168f;if(!this['_linkedSprite'])return;this[_0x3581f5(0x311)]!==this[_0x3581f5(0xf0)]['_battler']&&this['setup'](this['_linkedSprite'][_0x3581f5(0x311)]);},Sprite_EnemyName[_0x23168f(0xa01)][_0x23168f(0x32b)]=function(){const _0x2ee4c4=_0x23168f;if(!this[_0x2ee4c4(0xf0)])return;this[_0x2ee4c4(0x4fd)]=this[_0x2ee4c4(0x4fd)]||Window_Base[_0x2ee4c4(0xa01)][_0x2ee4c4(0x6ad)](),this['x']=Math[_0x2ee4c4(0x1fc)](this[_0x2ee4c4(0xf0)]['_baseX']),this['y']=Math[_0x2ee4c4(0x1fc)](this['_linkedSprite'][_0x2ee4c4(0x489)]-this[_0x2ee4c4(0x4fd)]*0.5);const _0x1e99cd=VisuMZ['BattleCore'][_0x2ee4c4(0xbac)][_0x2ee4c4(0xbeb)];this['x']+=Math[_0x2ee4c4(0x1fc)](_0x1e99cd[_0x2ee4c4(0x3dc)]||0x0),this['y']+=Math['round'](_0x1e99cd[_0x2ee4c4(0x1a3)]||0x0);},Sprite_EnemyName[_0x23168f(0xa01)][_0x23168f(0x6af)]=function(){this['updateStateIconSprite']();},Sprite_EnemyName[_0x23168f(0xa01)]['updateStateIconSprite']=function(){const _0xa0f126=_0x23168f;if(!this['_stateIconSprite'])return;this[_0xa0f126(0x311)]!==this['_stateIconSprite'][_0xa0f126(0x311)]&&this['_stateIconSprite'][_0xa0f126(0x85b)](this[_0xa0f126(0x311)]);const _0x2be6ad=this[_0xa0f126(0xa03)]();this[_0xa0f126(0x4fd)]=this['_lineHeight']||Window_Base[_0xa0f126(0xa01)][_0xa0f126(0x6ad)](),this[_0xa0f126(0x2f8)]['x']=Math[_0xa0f126(0x1fc)]((_0x2be6ad+ImageManager[_0xa0f126(0x36c)])/0x2)+0x8,this[_0xa0f126(0x2f8)]['y']=this['_lineHeight']/0x2;const _0x4d0d2=VisuMZ[_0xa0f126(0x895)]['Settings'][_0xa0f126(0xbeb)];this[_0xa0f126(0x2f8)]['x']+=_0x4d0d2[_0xa0f126(0xa4f)]||0x0,this[_0xa0f126(0x2f8)]['y']+=_0x4d0d2[_0xa0f126(0x56a)]||0x0;},Sprite_EnemyName[_0x23168f(0xa01)][_0x23168f(0x84d)]=function(){const _0x2982a7=_0x23168f,_0x4013ef=this[_0x2982a7(0x22a)]();if(_0x4013ef&&this['opacity']<0xff)this[_0x2982a7(0x798)]+=0x10;else!_0x4013ef&&this[_0x2982a7(0x798)]>0x0&&(this['opacity']-=0x10);},Sprite_EnemyName[_0x23168f(0xa01)][_0x23168f(0x22a)]=function(){const _0x42cf9c=_0x23168f;if(this[_0x42cf9c(0x5d8)]())return![];else{if(!this[_0x42cf9c(0x311)])return![];else{if(!this['_battler'][_0x42cf9c(0x735)]())return![];else{if(this['temporaryVisibile']())return!![];else{if(this['_battler'][_0x42cf9c(0x14e)]())return![];else{if(this[_0x42cf9c(0x546)]())return!![];else{if(this['compatibilityVisible']())return!![];else{if(this['isAlwaysVisible']())return!![];else{if(this[_0x42cf9c(0x149)]())return!![];else{if(this[_0x42cf9c(0x798)]>0x0)return![];}}}}}}}}}},Sprite_EnemyName[_0x23168f(0xa01)][_0x23168f(0x857)]=function(){const _0x1170e3=_0x23168f;return this[_0x1170e3(0x311)]&&this[_0x1170e3(0x311)][_0x1170e3(0x8db)]();},Sprite_EnemyName[_0x23168f(0xa01)][_0x23168f(0x5d8)]=function(){const _0x5bc39a=_0x23168f;return VisuMZ['BattleCore'][_0x5bc39a(0xbac)]['Enemy'][_0x5bc39a(0x460)];},Sprite_EnemyName[_0x23168f(0xa01)]['isBattlerTargeted']=function(){const _0x14fd0e=_0x23168f;if(!VisuMZ[_0x14fd0e(0x895)][_0x14fd0e(0xbac)][_0x14fd0e(0xbeb)][_0x14fd0e(0x709)])return![];if(BattleManager['isInputting']()&&!BattleManager[_0x14fd0e(0x966)]())return![];return this[_0x14fd0e(0x311)]&&BattleManager[_0x14fd0e(0x530)]&&BattleManager[_0x14fd0e(0xa52)][_0x14fd0e(0x2d8)](this[_0x14fd0e(0x311)]);},Sprite_EnemyName[_0x23168f(0xa01)][_0x23168f(0x31d)]=function(){return![];},Sprite_EnemyName[_0x23168f(0xa01)][_0x23168f(0x948)]=function(){const _0x562c8e=_0x23168f;return VisuMZ[_0x562c8e(0x895)][_0x562c8e(0xbac)]['Enemy'][_0x562c8e(0x9e0)];},Sprite_EnemyName[_0x23168f(0xa01)][_0x23168f(0x149)]=function(){const _0x23ef34=_0x23168f;return VisuMZ[_0x23ef34(0x895)][_0x23ef34(0xbac)][_0x23ef34(0xbeb)]['NameAlwaysSelectOnly']?this['_battler'][_0x23ef34(0x794)]():SceneManager['_scene']['_enemyWindow']&&SceneManager['_scene'][_0x23ef34(0x24c)]['active']&&SceneManager[_0x23ef34(0x23e)][_0x23ef34(0x24c)][_0x23ef34(0x4b7)][_0x23ef34(0x2d8)](this['_battler']);},Sprite_EnemyName[_0x23168f(0xa01)]['textWidth']=function(){const _0xfdd5c8=_0x23168f;if(!this[_0xfdd5c8(0x311)])return 0x0;if(this[_0xfdd5c8(0xc1)])return this['_cacheTextWidth'];const _0x13c8d1=this[_0xfdd5c8(0x611)]();return this['setupFont'](),this['_cacheTextWidth']=this['bitmap'][_0xfdd5c8(0xb61)](_0x13c8d1)||0x1,this[_0xfdd5c8(0xc1)];},VisuMZ[_0x23168f(0x895)][_0x23168f(0xd1)]=Sprite_Battleback[_0x23168f(0xa01)][_0x23168f(0x385)],Sprite_Battleback['prototype']['adjustPosition']=function(){const _0x388ca8=_0x23168f,_0x313bc9=VisuMZ[_0x388ca8(0x895)][_0x388ca8(0xbac)][_0x388ca8(0x1eb)];if(!_0x313bc9)return VisuMZ[_0x388ca8(0x895)][_0x388ca8(0xd1)]['call'](this);const _0x2d9ff5=String(_0x313bc9[_0x388ca8(0xbbd)])||'MZ';switch(_0x2d9ff5){case'MZ':VisuMZ['BattleCore']['Sprite_Battleback_adjustPosition'][_0x388ca8(0x88f)](this);break;case'1:1':this['adjustPosition_1for1']();break;case'ScaleToFit':this[_0x388ca8(0x19e)]();break;case _0x388ca8(0x5bf):this[_0x388ca8(0x2de)]();break;case _0x388ca8(0xb19):this[_0x388ca8(0x34d)]();break;}},Sprite_Battleback[_0x23168f(0xa01)][_0x23168f(0x1ea)]=function(){const _0x2548e4=_0x23168f,_0x31872d=VisuMZ[_0x2548e4(0x895)]['Settings'][_0x2548e4(0x1eb)];if(_0x31872d&&_0x31872d[_0x2548e4(0x156)])return _0x31872d[_0x2548e4(0x156)][_0x2548e4(0x88f)](this);this[_0x2548e4(0x2e0)]=Graphics['width'],this[_0x2548e4(0xb1c)]=Graphics[_0x2548e4(0xb1c)];const _0x22a9eb=0x1;this['scale']['x']=_0x22a9eb,this[_0x2548e4(0x145)]['y']=_0x22a9eb,this['x']=0x0,this['y']=0x0;},Sprite_Battleback[_0x23168f(0xa01)][_0x23168f(0x19e)]=function(){const _0x777ac5=_0x23168f,_0xa64106=VisuMZ[_0x777ac5(0x895)][_0x777ac5(0xbac)][_0x777ac5(0x1eb)];if(_0xa64106&&_0xa64106['jsScaleToFit'])return _0xa64106[_0x777ac5(0x5cc)]['call'](this);this[_0x777ac5(0x2e0)]=Graphics[_0x777ac5(0x2e0)],this[_0x777ac5(0xb1c)]=Graphics[_0x777ac5(0xb1c)];const _0x181884=this[_0x777ac5(0x2e0)]/this[_0x777ac5(0xa65)]['width'],_0x308e6e=this[_0x777ac5(0xb1c)]/this[_0x777ac5(0xa65)]['height'],_0x584152=Math['max'](_0x181884,_0x308e6e);this['scale']['x']=_0x584152,this[_0x777ac5(0x145)]['y']=_0x584152,this['x']=(Graphics[_0x777ac5(0x2e0)]-this[_0x777ac5(0x2e0)])/0x2,this['y']=Graphics[_0x777ac5(0xb1c)]-this[_0x777ac5(0xb1c)];},Sprite_Battleback[_0x23168f(0xa01)]['adjustPosition_ScaleDown']=function(){const _0x5e0d6f=_0x23168f,_0x3325c9=VisuMZ[_0x5e0d6f(0x895)][_0x5e0d6f(0xbac)][_0x5e0d6f(0x1eb)];if(_0x3325c9&&_0x3325c9[_0x5e0d6f(0x18d)])return _0x3325c9['jsScaleDown'][_0x5e0d6f(0x88f)](this);this[_0x5e0d6f(0x2e0)]=Graphics['width'],this[_0x5e0d6f(0xb1c)]=Graphics[_0x5e0d6f(0xb1c)];const _0xbe13f9=Math[_0x5e0d6f(0x690)](0x1,this[_0x5e0d6f(0x2e0)]/this[_0x5e0d6f(0xa65)][_0x5e0d6f(0x2e0)]),_0x45c058=Math[_0x5e0d6f(0x690)](0x1,this['height']/this[_0x5e0d6f(0xa65)][_0x5e0d6f(0xb1c)]),_0x162ecf=Math[_0x5e0d6f(0x705)](_0xbe13f9,_0x45c058);this[_0x5e0d6f(0x145)]['x']=_0x162ecf,this[_0x5e0d6f(0x145)]['y']=_0x162ecf,this['x']=(Graphics[_0x5e0d6f(0x2e0)]-this[_0x5e0d6f(0x2e0)])/0x2,this['y']=Graphics['height']-this[_0x5e0d6f(0xb1c)];},Sprite_Battleback[_0x23168f(0xa01)][_0x23168f(0x34d)]=function(){const _0x1a204f=_0x23168f,_0x28ba37=VisuMZ['BattleCore'][_0x1a204f(0xbac)]['BattlebackScale'];if(_0x28ba37&&_0x28ba37[_0x1a204f(0x46a)])return _0x28ba37[_0x1a204f(0x46a)][_0x1a204f(0x88f)](this);this['width']=Graphics['width'],this[_0x1a204f(0xb1c)]=Graphics[_0x1a204f(0xb1c)];const _0x48bce4=Math[_0x1a204f(0x705)](0x1,this[_0x1a204f(0x2e0)]/this[_0x1a204f(0xa65)][_0x1a204f(0x2e0)]),_0x40c3b3=Math['max'](0x1,this[_0x1a204f(0xb1c)]/this['bitmap'][_0x1a204f(0xb1c)]),_0x11f1b5=Math['max'](_0x48bce4,_0x40c3b3);this['scale']['x']=_0x11f1b5,this[_0x1a204f(0x145)]['y']=_0x11f1b5,this['x']=(Graphics[_0x1a204f(0x2e0)]-this[_0x1a204f(0x2e0)])/0x2,this['y']=Graphics[_0x1a204f(0xb1c)]-this[_0x1a204f(0xb1c)];},Spriteset_Battle['ANTI_TINT_UI']=VisuMZ['BattleCore'][_0x23168f(0xbac)]['BattleLayout'][_0x23168f(0x189)]??!![],Spriteset_Battle[_0x23168f(0xa01)]['isFlipped']=function(){if(!$gameSystem['isSideView']())return![];return![];},Spriteset_Battle[_0x23168f(0xa01)][_0x23168f(0xfa)]=function(){return 0x0;},Spriteset_Battle[_0x23168f(0xa01)][_0x23168f(0x822)]=function(){return 0x0;},VisuMZ[_0x23168f(0x895)][_0x23168f(0x182)]=Spriteset_Battle[_0x23168f(0xa01)][_0x23168f(0x637)],Spriteset_Battle['prototype'][_0x23168f(0x637)]=function(){const _0x4b6a1f=_0x23168f;VisuMZ[_0x4b6a1f(0x895)][_0x4b6a1f(0x182)][_0x4b6a1f(0x88f)](this),this[_0x4b6a1f(0xf3)](),this[_0x4b6a1f(0xb7d)]();},VisuMZ[_0x23168f(0x895)][_0x23168f(0x1a8)]=Spriteset_Battle[_0x23168f(0xa01)][_0x23168f(0x926)],Spriteset_Battle[_0x23168f(0xa01)][_0x23168f(0x926)]=function(){const _0x33c3e3=_0x23168f;VisuMZ[_0x33c3e3(0x895)][_0x33c3e3(0x1a8)]['call'](this),this['updateBattlerContainer'](),this[_0x33c3e3(0x40e)](),this[_0x33c3e3(0x97b)](),this[_0x33c3e3(0x2e5)]();},Spriteset_Battle['prototype']['createWeather']=function(){const _0x17bcd0=_0x23168f;this[_0x17bcd0(0xa0e)]=new Weather(),this[_0x17bcd0(0x7cd)]['addChild'](this[_0x17bcd0(0xa0e)]);},Spriteset_Battle['prototype'][_0x23168f(0x97b)]=function(){const _0x25f433=_0x23168f;this[_0x25f433(0xa0e)][_0x25f433(0x158)]=$gameScreen[_0x25f433(0x4e9)](),this[_0x25f433(0xa0e)]['power']=$gameScreen['weatherPower']();},Game_Interpreter[_0x23168f(0xa01)]['command236']=function(_0x9975df){const _0x4b4413=_0x23168f;$gameScreen[_0x4b4413(0xa4b)](_0x9975df[0x0],_0x9975df[0x1],_0x9975df[0x2]);if(_0x9975df[0x3])this[_0x4b4413(0x707)](_0x9975df[0x2]);return!![];},VisuMZ['BattleCore'][_0x23168f(0xb49)]=Game_Interpreter['prototype'][_0x23168f(0x24a)],Game_Interpreter[_0x23168f(0xa01)][_0x23168f(0x24a)]=function(_0x359c68){const _0x14c276=_0x23168f;return VisuMZ['BattleCore']['Game_Interpreter_command283']['call'](this,_0x359c68),SceneManager['isSceneBattle']()&&SceneManager[_0x14c276(0x23e)][_0x14c276(0xa73)]['changeBattlebacks'](_0x359c68[0x0],_0x359c68[0x1]),!![];},Sprite_Battleback[_0x23168f(0xa01)][_0x23168f(0x693)]=function(){const _0x183d49=_0x23168f;if($gameMap['battleback1Name']()!==null)return $gameMap[_0x183d49(0x693)]();else{if(BattleManager['isBattleTest']())return $dataSystem[_0x183d49(0x693)];else return $gameMap[_0x183d49(0x8e4)]()?this['overworldBattleback1Name']():'';}},Sprite_Battleback[_0x23168f(0xa01)][_0x23168f(0x39b)]=function(){const _0x2b344d=_0x23168f;if($gameMap['battleback2Name']()!==null)return $gameMap[_0x2b344d(0x39b)]();else{if(BattleManager[_0x2b344d(0x30a)]())return $dataSystem[_0x2b344d(0x39b)];else return $gameMap[_0x2b344d(0x8e4)]()?this[_0x2b344d(0xb50)]():'';}},Spriteset_Battle[_0x23168f(0xa01)]['updateBattlebackBitmap']=function(_0x650a29,_0x1bb292){const _0x30a451=_0x23168f;_0x650a29[_0x30a451(0xa65)]=_0x1bb292;},Spriteset_Battle['prototype'][_0x23168f(0x107)]=function(_0xe37209,_0x7d0929){const _0x3b953e=_0x23168f;_0xe37209=_0xe37209||'',_0x7d0929=_0x7d0929||'';_0xe37209===''&&_0x7d0929===''&&(_0xe37209=this[_0x3b953e(0x843)]['battleback1Name'](),_0x7d0929=this['_back2Sprite'][_0x3b953e(0x39b)]());const _0x148de9=ImageManager[_0x3b953e(0x5b9)](_0xe37209),_0x399747=ImageManager[_0x3b953e(0x194)](_0x7d0929);_0x148de9[_0x3b953e(0x313)](this['updateBattlebackBitmap1'][_0x3b953e(0x7f5)](this,this['_back1Sprite'],this['_back2Sprite'],_0x148de9,_0x399747));},Spriteset_Battle[_0x23168f(0xa01)]['updateBattlebackBitmap1']=function(_0x281f5e,_0x2dd56e,_0x48bce6,_0x37d779){const _0x1e1fad=_0x23168f;_0x37d779['addLoadListener'](this['updateBattlebackBitmap2'][_0x1e1fad(0x7f5)](this,_0x281f5e,_0x2dd56e,_0x48bce6,_0x37d779));},Spriteset_Battle[_0x23168f(0xa01)][_0x23168f(0x8d1)]=function(_0x5c4814,_0x141db7,_0x57313a,_0x5d8167){const _0x1c8953=_0x23168f;_0x5c4814['bitmap']=_0x57313a,_0x141db7[_0x1c8953(0xa65)]=_0x5d8167,_0x5c4814[_0x1c8953(0x385)](),_0x141db7[_0x1c8953(0x385)]();},VisuMZ[_0x23168f(0x895)][_0x23168f(0xab0)]=Spriteset_Battle[_0x23168f(0xa01)][_0x23168f(0x689)],Spriteset_Battle[_0x23168f(0xa01)][_0x23168f(0x689)]=function(){const _0x4ab823=_0x23168f;VisuMZ[_0x4ab823(0x895)][_0x4ab823(0xab0)][_0x4ab823(0x88f)](this),this[_0x4ab823(0x7de)]();},Spriteset_Battle['prototype'][_0x23168f(0x7de)]=function(){const _0x3a0990=_0x23168f;this[_0x3a0990(0x5be)](),this[_0x3a0990(0xb28)](),this[_0x3a0990(0xf9)](),this[_0x3a0990(0x566)](),this[_0x3a0990(0x5ad)]();},Spriteset_Battle['prototype'][_0x23168f(0x5be)]=function(){const _0x992406=_0x23168f;this[_0x992406(0x185)]=new Sprite(),this[_0x992406(0x7cd)][_0x992406(0x314)](this['_underAnimationContainer']),this[_0x992406(0x34b)]=new Sprite(),this[_0x992406(0x7cd)]['addChild'](this[_0x992406(0x34b)]);},Spriteset_Battle[_0x23168f(0xa01)][_0x23168f(0xf9)]=function(){const _0x5aaea4=_0x23168f;this[_0x5aaea4(0xf5)]=new Sprite(),Spriteset_Battle[_0x5aaea4(0x5bd)]?this['addChild'](this[_0x5aaea4(0xf5)]):this[_0x5aaea4(0x7cd)][_0x5aaea4(0x314)](this[_0x5aaea4(0xf5)]);},Spriteset_Battle[_0x23168f(0xa01)][_0x23168f(0x566)]=function(){const _0x43f570=_0x23168f;this[_0x43f570(0x494)]=new Sprite(),this[_0x43f570(0x494)]['x']=this['_battleField']['x'],this[_0x43f570(0x494)]['y']=this[_0x43f570(0x7cd)]['y'],this[_0x43f570(0x314)](this[_0x43f570(0x494)]);},Spriteset_Battle[_0x23168f(0xa01)][_0x23168f(0x5ad)]=function(){const _0x4b8116=_0x23168f;if(!this[_0x4b8116(0xbc2)]())return;this[_0x4b8116(0x34b)][_0x4b8116(0x145)]['x']=-0x1,this[_0x4b8116(0x34b)]['x']=this['_battleField'][_0x4b8116(0x2e0)],this[_0x4b8116(0x349)]['scale']['x']=-0x1,this[_0x4b8116(0x349)]['x']=this['_battleField'][_0x4b8116(0x2e0)],this[_0x4b8116(0xf5)][_0x4b8116(0x145)]['x']=-0x1,this[_0x4b8116(0xf5)]['x']=this[_0x4b8116(0x7cd)]['width'],this[_0x4b8116(0x494)]['scale']['x']=-0x1,this['_damageContainer']['x']=this['_battleField']['x']+this[_0x4b8116(0x7cd)][_0x4b8116(0x2e0)];},Spriteset_Battle[_0x23168f(0xa01)][_0x23168f(0x42c)]=function(){const _0x6092fc=_0x23168f;Imported[_0x6092fc(0x74a)]&&this[_0x6092fc(0x316)]()&&this['repositionEnemiesByResolution']();const _0x4d48ba=$gameTroop[_0x6092fc(0xa1d)](),_0x540963=[];for(const _0xd5d3d2 of _0x4d48ba){_0x540963['push'](new Sprite_Enemy(_0xd5d3d2));}_0x540963[_0x6092fc(0x244)](this['compareEnemySprite']['bind'](this));for(const _0x1fe1d3 of _0x540963){this['_battlerContainer'][_0x6092fc(0x314)](_0x1fe1d3);}this[_0x6092fc(0xbf2)]=_0x540963;},Spriteset_Battle['prototype'][_0x23168f(0xb18)]=function(){const _0x4401d2=_0x23168f;this[_0x4401d2(0x3e0)]=[];for(let _0x2a805a=0x0;_0x2a805a<$gameParty[_0x4401d2(0x2a4)]();_0x2a805a++){const _0x5ad612=$gameParty[_0x4401d2(0x4e1)]()[_0x2a805a],_0x57468f=new Sprite_Actor();_0x57468f[_0x4401d2(0x51b)](_0x5ad612),_0x57468f[_0x4401d2(0x45b)](_0x5ad612),_0x57468f['update'](),this[_0x4401d2(0x3e0)][_0x4401d2(0x908)](_0x57468f),this[_0x4401d2(0x34b)][_0x4401d2(0x314)](_0x57468f);}},Spriteset_Battle['prototype'][_0x23168f(0x5fb)]=function(_0x3c912b,_0x16c236,_0x35498c,_0x91c7cf){const _0xbaf4f5=_0x23168f,_0x2e9a22=this[_0xbaf4f5(0x986)](_0x16c236),_0x571400=new(_0x2e9a22?Sprite_AnimationMV:Sprite_Animation)(),_0x5e8770=this[_0xbaf4f5(0xe7)](_0x3c912b);this[_0xbaf4f5(0x812)](_0x3c912b[0x0])&&(_0x35498c=!_0x35498c),_0x571400[_0xbaf4f5(0x208)]=_0x3c912b,_0x571400[_0xbaf4f5(0x85b)](_0x5e8770,_0x16c236,_0x35498c,_0x91c7cf),this[_0xbaf4f5(0x556)](_0x571400);},Spriteset_Battle[_0x23168f(0xa01)][_0x23168f(0x556)]=function(_0x29febb){const _0xad7e4d=_0x23168f;this[_0xad7e4d(0x769)](_0x29febb)?(this[_0xad7e4d(0x3e9)]()[_0xad7e4d(0x314)](_0x29febb),_0x29febb[_0xad7e4d(0xa4a)]=!![]):(Spriteset_Battle[_0xad7e4d(0x5bd)]&&(this['_animationContainer']['x']=this[_0xad7e4d(0x1d4)]['x'],this[_0xad7e4d(0xf5)]['y']=this[_0xad7e4d(0x1d4)]['y']),this[_0xad7e4d(0x185)]&&_0x29febb['isUnderAnimation']&&_0x29febb[_0xad7e4d(0x7d0)]()?(this[_0xad7e4d(0x185)][_0xad7e4d(0x314)](_0x29febb),this[_0xad7e4d(0x185)]['x']=this[_0xad7e4d(0xf5)]['x'],this[_0xad7e4d(0x185)]['y']=this['_animationContainer']['y']):this[_0xad7e4d(0xf5)]['addChild'](_0x29febb)),this[_0xad7e4d(0x95b)][_0xad7e4d(0x908)](_0x29febb);},Spriteset_Battle[_0x23168f(0xa01)][_0x23168f(0x769)]=function(_0x4af7ff){const _0x5aeea6=_0x23168f;if(!_0x4af7ff)return![];if(!_0x4af7ff[_0x5aeea6(0x80c)])return![];if(!_0x4af7ff['targetObjects'][0x0])return![];if(_0x4af7ff['targetObjects'][0x0]['isActor']&&!_0x4af7ff[_0x5aeea6(0x208)][0x0]['isActor']())return![];if($gameSystem['isSideView']())return![];if(!this[_0x5aeea6(0x3e9)]())return![];if(_0x4af7ff[_0x5aeea6(0xbc5)]===Sprite_Animation){const _0x2e14d9=VisuMZ[_0x5aeea6(0x895)][_0x5aeea6(0xbac)][_0x5aeea6(0x33d)];_0x2e14d9[_0x5aeea6(0xaba)]=_0x2e14d9['FvAniEachTarget']??!![];if(_0x4af7ff[_0x5aeea6(0x80c)]['displayType']===0x0&&!_0x2e14d9[_0x5aeea6(0xaba)])return![];_0x2e14d9[_0x5aeea6(0x882)]=_0x2e14d9[_0x5aeea6(0x882)]??!![];if(_0x4af7ff[_0x5aeea6(0x80c)]['displayType']===0x1&&!_0x2e14d9[_0x5aeea6(0x882)])return![];_0x2e14d9[_0x5aeea6(0x648)]=_0x2e14d9[_0x5aeea6(0x648)]??![];if(_0x4af7ff[_0x5aeea6(0x80c)][_0x5aeea6(0x236)]===0x2&&!_0x2e14d9[_0x5aeea6(0x648)])return![];}else{if(_0x4af7ff[_0x5aeea6(0xbc5)]===Sprite_AnimationMV){if(_0x4af7ff['_animation'][_0x5aeea6(0xc5)]===0x3)return![];}}return!![];const _0x34bf07=Window_BattleStatus['prototype'][_0x5aeea6(0x3f3)]();return['xp',_0x5aeea6(0x9e8)][_0x5aeea6(0x470)](_0x34bf07);},Spriteset_Battle[_0x23168f(0xa01)]['battleStatusWindowAnimationContainer']=function(){const _0x17d2eb=_0x23168f;if(!SceneManager[_0x17d2eb(0x23e)])return null;if(!SceneManager[_0x17d2eb(0x23e)][_0x17d2eb(0x1fa)])return null;if(!SceneManager[_0x17d2eb(0x23e)]['_statusWindow'][_0x17d2eb(0x1d4)])return null;return SceneManager[_0x17d2eb(0x23e)][_0x17d2eb(0x1fa)][_0x17d2eb(0x1d4)];},Spriteset_Battle[_0x23168f(0xa01)][_0x23168f(0x8cd)]=function(_0x4b5c0e){const _0x289c45=_0x23168f;this['removeAnimationFromContainer'](_0x4b5c0e);for(const _0x33cf7d of _0x4b5c0e[_0x289c45(0x208)]){_0x33cf7d['endAnimation']&&_0x33cf7d[_0x289c45(0x8f8)]();}_0x4b5c0e['destroy']();},Spriteset_Battle[_0x23168f(0xa01)][_0x23168f(0x204)]=function(_0x1a6135){const _0x5cf698=_0x23168f;this[_0x5cf698(0x769)](_0x1a6135)?this[_0x5cf698(0x3e9)]()[_0x5cf698(0xa29)](_0x1a6135):this[_0x5cf698(0xf5)][_0x5cf698(0xa29)](_0x1a6135);this['_underAnimationContainer']&&this['_underAnimationContainer'][_0x5cf698(0xa29)](_0x1a6135);this[_0x5cf698(0x1d4)]['removeChild'](_0x1a6135),this[_0x5cf698(0xf5)][_0x5cf698(0xa29)](_0x1a6135),this['_animationSprites'][_0x5cf698(0xa32)](_0x1a6135);if(this[_0x5cf698(0x53e)])this[_0x5cf698(0x53e)]['remove'](_0x1a6135);},VisuMZ['BattleCore'][_0x23168f(0x5df)]=Spriteset_Battle[_0x23168f(0xa01)][_0x23168f(0x37a)],Spriteset_Battle[_0x23168f(0xa01)][_0x23168f(0x37a)]=function(){const _0x3dbab4=_0x23168f;VisuMZ[_0x3dbab4(0x895)][_0x3dbab4(0x5df)][_0x3dbab4(0x88f)](this),this['updateBattlerContainer']();},Spriteset_Battle['prototype'][_0x23168f(0xbbb)]=function(){const _0xa43344=_0x23168f;this['_battlerContainer'][_0xa43344(0x213)][_0xa43344(0x244)](this[_0xa43344(0x7bc)][_0xa43344(0x7f5)](this)),this['putActiveBattlerOnTop']();if(!this['_battlerContainer'])return;this[_0xa43344(0x34b)][_0xa43344(0x798)]=this['targetBattlerContainerOpacity']();},Spriteset_Battle[_0x23168f(0xa01)][_0x23168f(0x7bc)]=function(_0x5a74ad,_0x5a8f13){const _0x23467b=_0x23168f;if(VisuMZ[_0x23467b(0x895)]['Settings'][_0x23467b(0x33d)][_0x23467b(0xbe)]){if(_0x5a74ad[_0x23467b(0x311)]&&_0x5a8f13[_0x23467b(0x311)]){if(_0x5a74ad[_0x23467b(0x311)][_0x23467b(0x36b)]()&&_0x5a8f13['_battler']['isEnemy']())return 0x1;else{if(_0x5a8f13['_battler']['isActor']()&&_0x5a74ad['_battler']['isEnemy']())return-0x1;}}}return _0x5a74ad['_baseY']!==_0x5a8f13[_0x23467b(0x489)]?_0x5a74ad['_baseY']-_0x5a8f13[_0x23467b(0x489)]:_0x5a8f13[_0x23467b(0x57c)]-_0x5a74ad[_0x23467b(0x57c)];},Spriteset_Battle['prototype'][_0x23168f(0xba4)]=function(){const _0xa84b24=_0x23168f;if(!VisuMZ[_0xa84b24(0x895)][_0xa84b24(0xbac)][_0xa84b24(0x33d)][_0xa84b24(0x912)])return;const _0x5eee29=BattleManager[_0xa84b24(0x530)];if(_0x5eee29){if(_0x5eee29[_0xa84b24(0x36b)]()&&!$gameSystem[_0xa84b24(0x18f)]())return;if(_0x5eee29===BattleManager['actor']())return;const _0x1507e6=_0x5eee29['battler']();if(_0x1507e6&&_0x5eee29[_0xa84b24(0x36b)]())this['_battlerContainer'][_0xa84b24(0x314)](_0x1507e6);}},Spriteset_Battle[_0x23168f(0xa01)][_0x23168f(0xb97)]=function(){const _0x116d18=_0x23168f;for(const _0x1fb42b of $gameParty[_0x116d18(0x2a6)]()){if(!_0x1fb42b)continue;if(!_0x1fb42b[_0x116d18(0xbb5)]())continue;_0x1fb42b[_0x116d18(0xbb5)]()[_0x116d18(0xabe)]=!![],_0x1fb42b[_0x116d18(0xbb5)]()[_0x116d18(0x4db)]();}},Spriteset_Battle[_0x23168f(0xa01)][_0x23168f(0xb28)]=function(){const _0x1bd965=_0x23168f;this[_0x1bd965(0x349)]=new Sprite(),Spriteset_Battle[_0x1bd965(0x5bd)]?this[_0x1bd965(0x314)](this[_0x1bd965(0x349)]):this[_0x1bd965(0x7cd)][_0x1bd965(0x314)](this['_uiContainer']),SceneManager[_0x1bd965(0x23e)][_0x1bd965(0x349)]=this[_0x1bd965(0x349)];},Spriteset_Battle[_0x23168f(0xa01)][_0x23168f(0xb7d)]=function(){const _0x1194c9=_0x23168f;if(VisuMZ[_0x1194c9(0x895)][_0x1194c9(0xbac)]['Enemy'][_0x1194c9(0xa61)])return;this['_enemyNameContainer']=new Sprite(),BattleManager[_0x1194c9(0xba8)](this[_0x1194c9(0x374)]);for(const _0x29367e of this[_0x1194c9(0xbf2)]){const _0x27ad5f=new Sprite_EnemyName();this[_0x1194c9(0x374)][_0x1194c9(0x314)](_0x27ad5f),_0x27ad5f[_0x1194c9(0x270)](_0x29367e);}},Spriteset_Battle['prototype'][_0x23168f(0x40e)]=function(){const _0x33ee44=_0x23168f;if(!this[_0x33ee44(0x494)])return;if(!this[_0x33ee44(0x349)])return;const _0x1b6cef=Spriteset_Battle[_0x33ee44(0x5bd)]?this[_0x33ee44(0x494)]['x']:0x0,_0x2d2f85=Spriteset_Battle[_0x33ee44(0x5bd)]?this['_damageContainer']['y']:0x0,_0x3d7292=Imported[_0x33ee44(0x6f9)]?this['_battleField']['x']:0x0,_0x58d817=Imported[_0x33ee44(0x6f9)]?this[_0x33ee44(0x7cd)]['y']:0x0;this[_0x33ee44(0x349)]['x']=_0x1b6cef+_0x3d7292,this[_0x33ee44(0x349)]['y']=_0x2d2f85+_0x58d817;},BattleManager[_0x23168f(0xba8)]=function(_0x4ee663){const _0x54b9b8=_0x23168f;if(!SceneManager['_scene'][_0x54b9b8(0x349)])return;SceneManager[_0x54b9b8(0x23e)][_0x54b9b8(0x349)][_0x54b9b8(0x314)](_0x4ee663);},BattleManager[_0x23168f(0x71d)]=function(_0x15628f){const _0x368e=_0x23168f;if(!SceneManager['_scene'][_0x368e(0x349)])return;SceneManager[_0x368e(0x23e)][_0x368e(0x349)][_0x368e(0xa29)](_0x15628f);},Spriteset_Battle[_0x23168f(0xa01)]['targetBattlerContainerOpacity']=function(){return 0xff;},Spriteset_Battle[_0x23168f(0xa01)][_0x23168f(0x224)]=function(){return![];},Spriteset_Battle[_0x23168f(0xa01)][_0x23168f(0x4f2)]=function(){const _0x121a52=_0x23168f;return this['battlerSprites']()[_0x121a52(0xdb)](_0x11ad80=>_0x11ad80['isFloating']());},Spriteset_Battle['prototype'][_0x23168f(0xb7)]=function(){const _0xd856ad=_0x23168f;return this[_0xd856ad(0x7e5)]()['some'](_0xec14f5=>_0xec14f5['isJumping']());},Spriteset_Battle[_0x23168f(0xa01)][_0x23168f(0x8c0)]=function(){const _0x4ce193=_0x23168f;return this[_0x4ce193(0x7e5)]()[_0x4ce193(0xdb)](_0x1be4ad=>_0x1be4ad[_0x4ce193(0x5f6)]());},Spriteset_Battle[_0x23168f(0xa01)][_0x23168f(0x8f6)]=function(){const _0x5a0f63=_0x23168f;return this[_0x5a0f63(0x7e5)]()[_0x5a0f63(0xdb)](_0x43b944=>_0x43b944[_0x5a0f63(0x155)]());},Spriteset_Battle['prototype'][_0x23168f(0x961)]=function(){const _0x4f400b=_0x23168f;return this[_0x4f400b(0x7e5)]()[_0x4f400b(0xdb)](_0x450258=>_0x450258[_0x4f400b(0x9b6)]());},Spriteset_Battle[_0x23168f(0xa01)][_0x23168f(0x533)]=function(){const _0x22fae1=_0x23168f;return this[_0x22fae1(0x7e5)]()[_0x22fae1(0xdb)](_0x1ea05d=>_0x1ea05d[_0x22fae1(0x65e)]());},VisuMZ[_0x23168f(0x895)]['Window_ItemList_maxCols']=Window_ItemList[_0x23168f(0xa01)]['maxCols'],Window_ItemList[_0x23168f(0xa01)][_0x23168f(0x3c0)]=function(){const _0x2ad087=_0x23168f;return SceneManager[_0x2ad087(0xbef)]()?SceneManager[_0x2ad087(0x23e)][_0x2ad087(0x3f3)]()===_0x2ad087(0x829)?VisuMZ['BattleCore']['Settings']['BattleLayout'][_0x2ad087(0x42f)]:VisuMZ[_0x2ad087(0x895)][_0x2ad087(0xbac)][_0x2ad087(0x553)][_0x2ad087(0x9c2)]:VisuMZ[_0x2ad087(0x895)][_0x2ad087(0x1d7)][_0x2ad087(0x88f)](this);},VisuMZ[_0x23168f(0x895)][_0x23168f(0x8fe)]=Window_SkillList[_0x23168f(0xa01)][_0x23168f(0x3c0)],Window_SkillList[_0x23168f(0xa01)][_0x23168f(0x3c0)]=function(){const _0xbe54e=_0x23168f;return SceneManager[_0xbe54e(0xbef)]()?SceneManager[_0xbe54e(0x23e)][_0xbe54e(0x3f3)]()===_0xbe54e(0x829)?VisuMZ[_0xbe54e(0x895)][_0xbe54e(0xbac)][_0xbe54e(0x553)][_0xbe54e(0x42f)]:VisuMZ[_0xbe54e(0x895)][_0xbe54e(0xbac)][_0xbe54e(0x553)][_0xbe54e(0x9c2)]:VisuMZ[_0xbe54e(0x895)][_0xbe54e(0x8fe)][_0xbe54e(0x88f)](this);},VisuMZ[_0x23168f(0x895)][_0x23168f(0x240)]=Window_Options[_0x23168f(0xa01)][_0x23168f(0x77a)],Window_Options[_0x23168f(0xa01)][_0x23168f(0x77a)]=function(){const _0x58c549=_0x23168f;VisuMZ['BattleCore'][_0x58c549(0x240)][_0x58c549(0x88f)](this),this[_0x58c549(0x3f4)](),this['addShowHpGaugeCommand']();},Window_Options[_0x23168f(0xa01)][_0x23168f(0x3f4)]=function(){const _0x838fe8=_0x23168f;VisuMZ[_0x838fe8(0x895)][_0x838fe8(0xbac)][_0x838fe8(0x771)][_0x838fe8(0x9fd)]&&(this['addBattleCoreAutoBattleStartupCommand'](),this[_0x838fe8(0x692)]());},Window_Options['prototype']['addShowHpGaugeCommand']=function(){const _0x4dbfb3=_0x23168f;if(!VisuMZ['BattleCore'][_0x4dbfb3(0xbac)][_0x4dbfb3(0x382)][_0x4dbfb3(0xa22)])return;const _0x3716d0=TextManager[_0x4dbfb3(0x786)],_0x280e28=_0x4dbfb3(0x786);this[_0x4dbfb3(0x21e)](_0x3716d0,_0x280e28);},Window_Options['prototype']['addBattleCoreAutoBattleStartupCommand']=function(){const _0x16b9c8=_0x23168f,_0x5eed46=TextManager[_0x16b9c8(0x51a)],_0x300950=_0x16b9c8(0x969);this[_0x16b9c8(0x21e)](_0x5eed46,_0x300950);},Window_Options[_0x23168f(0xa01)][_0x23168f(0x692)]=function(){const _0x3bd982=_0x23168f,_0x13da6d=TextManager[_0x3bd982(0x507)],_0xbcdcd9=_0x3bd982(0x2ce);this[_0x3bd982(0x21e)](_0x13da6d,_0xbcdcd9);},VisuMZ['BattleCore']['Window_Options_statusText']=Window_Options[_0x23168f(0xa01)][_0x23168f(0xb9f)],Window_Options[_0x23168f(0xa01)]['statusText']=function(_0x44defe){const _0x353357=_0x23168f,_0x55fa04=this[_0x353357(0xbd3)](_0x44defe);return _0x55fa04===_0x353357(0x2ce)?this[_0x353357(0xba7)]():VisuMZ['BattleCore'][_0x353357(0x528)]['call'](this,_0x44defe);},Window_Options[_0x23168f(0xa01)][_0x23168f(0xba7)]=function(){const _0x34ff9f=_0x23168f,_0x30f524=VisuMZ['BattleCore'][_0x34ff9f(0xbac)][_0x34ff9f(0x771)],_0x45acc8=this[_0x34ff9f(0xb1e)](_0x34ff9f(0x2ce));return _0x45acc8?_0x30f524['StyleON']:_0x30f524['StyleOFF'];},Window_ShopStatus[_0x23168f(0xa01)][_0x23168f(0xbd8)]=function(){const _0x5cffda=_0x23168f,_0xf76b58=DataManager[_0x5cffda(0xb06)](this[_0x5cffda(0x3ee)]),_0x34b57b=VisuMZ[_0x5cffda(0xc2)][_0xf76b58];if(!_0x34b57b)return this['getItemDamageAmountLabelOriginal']();const _0x5140cb='DamageType%1'[_0x5cffda(0x7d3)](this[_0x5cffda(0x3ee)][_0x5cffda(0x96e)]['type']),_0x4a779a=[null,TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp']][this[_0x5cffda(0x3ee)][_0x5cffda(0x96e)][_0x5cffda(0x158)]];return _0x34b57b[_0x5140cb][_0x5cffda(0x7d3)](_0x4a779a);},Window_ShopStatus[_0x23168f(0xa01)][_0x23168f(0x618)]=function(){const _0x4492af=_0x23168f,_0x2bf03c=DataManager[_0x4492af(0xb06)](this[_0x4492af(0x3ee)]),_0xeffb4e=VisuMZ['DamageStyles'][_0x2bf03c];if(!_0xeffb4e)return this['getItemDamageAmountTextOriginal']();return _0xeffb4e['DamageDisplay'][_0x4492af(0x88f)](this);},VisuMZ['BattleCore'][_0x23168f(0x21b)]=Window_PartyCommand['prototype']['initialize'],Window_PartyCommand['prototype']['initialize']=function(_0x5c595f){const _0x53b4ca=_0x23168f;VisuMZ['BattleCore'][_0x53b4ca(0x21b)][_0x53b4ca(0x88f)](this,_0x5c595f),this[_0x53b4ca(0x2fc)](_0x5c595f);},Window_PartyCommand[_0x23168f(0xa01)][_0x23168f(0x2fc)]=function(_0x3a3065){const _0x118c82=_0x23168f,_0x2adee7=new Rectangle(0x0,0x0,_0x3a3065['width'],_0x3a3065[_0x118c82(0xb1c)]);this[_0x118c82(0x7a1)]=new Window_Base(_0x2adee7),this[_0x118c82(0x7a1)]['opacity']=0x0,this[_0x118c82(0x314)](this['_commandNameWindow']),this[_0x118c82(0xa35)]();},Window_PartyCommand[_0x23168f(0xa01)]['callUpdateHelp']=function(){const _0x4fa4de=_0x23168f;Window_Command['prototype'][_0x4fa4de(0xcf)][_0x4fa4de(0x88f)](this);if(this[_0x4fa4de(0x7a1)])this['updateCommandNameWindow']();},Window_PartyCommand[_0x23168f(0xa01)][_0x23168f(0xa35)]=function(){const _0x5be60c=_0x23168f,_0x56eddc=this[_0x5be60c(0x7a1)];_0x56eddc['contents'][_0x5be60c(0x176)]();const _0x264995=this[_0x5be60c(0x192)](this[_0x5be60c(0x216)]());if(_0x264995===_0x5be60c(0x9ca)&&this['maxItems']()>0x0){const _0x28c29c=this['itemLineRect'](this[_0x5be60c(0x216)]());let _0x4fdab8=this[_0x5be60c(0x83c)](this[_0x5be60c(0x216)]());_0x4fdab8=_0x4fdab8[_0x5be60c(0x5c0)](/\\I\[(\d+)\]/gi,''),_0x56eddc[_0x5be60c(0xa4d)](),this[_0x5be60c(0x4b4)](_0x4fdab8,_0x28c29c),this[_0x5be60c(0x2e6)](_0x4fdab8,_0x28c29c),this[_0x5be60c(0xb95)](_0x4fdab8,_0x28c29c);}},Window_PartyCommand['prototype'][_0x23168f(0x4b4)]=function(_0x5c50b8,_0x3fd194){},Window_PartyCommand['prototype']['commandNameWindowDrawText']=function(_0x407d4a,_0x2977ad){const _0x3c2fb2=_0x23168f,_0x3484fc=this[_0x3c2fb2(0x7a1)];_0x3484fc[_0x3c2fb2(0x601)](_0x407d4a,0x0,_0x2977ad['y'],_0x3484fc['innerWidth'],_0x3c2fb2(0x283));},Window_PartyCommand[_0x23168f(0xa01)]['commandNameWindowCenter']=function(_0x5c571f,_0x2c8e35){const _0x1ad4b7=_0x23168f,_0x39986a=this[_0x1ad4b7(0x7a1)],_0x29d439=$gameSystem['windowPadding'](),_0x2d2563=_0x2c8e35['x']+Math[_0x1ad4b7(0x58e)](_0x2c8e35['width']/0x2)+_0x29d439;_0x39986a['x']=_0x39986a[_0x1ad4b7(0x2e0)]/-0x2+_0x2d2563,_0x39986a['y']=Math['floor'](_0x2c8e35['height']/0x2);},Window_PartyCommand[_0x23168f(0xa01)][_0x23168f(0x8b2)]=function(){const _0x3d6253=_0x23168f;this[_0x3d6253(0x5f2)](),this[_0x3d6253(0x50e)](),this[_0x3d6253(0x153)](),this[_0x3d6253(0x2a8)](),this[_0x3d6253(0x9f1)](),this['addEscapeCommand']();},Window_PartyCommand[_0x23168f(0xa01)][_0x23168f(0x5f2)]=function(){const _0x4897ab=_0x23168f,_0x237457=this['commandStyle'](),_0x2f5573=VisuMZ[_0x4897ab(0x895)][_0x4897ab(0xbac)][_0x4897ab(0xabb)]['CmdIconFight'],_0x17a37f=_0x237457==='text'?TextManager[_0x4897ab(0x839)]:_0x4897ab(0xee)[_0x4897ab(0x7d3)](_0x2f5573,TextManager[_0x4897ab(0x839)]),_0x22031f=this[_0x4897ab(0x1ba)]();this[_0x4897ab(0x21e)](_0x17a37f,_0x4897ab(0x839),_0x22031f);},Window_PartyCommand[_0x23168f(0xa01)][_0x23168f(0x1ba)]=function(){return!![];},Window_PartyCommand['prototype'][_0x23168f(0x50e)]=function(){const _0x2db327=_0x23168f;if(!this['isAutoBattleCommandAdded']())return;const _0x3827f4=this[_0x2db327(0xb26)](),_0x3355c5=VisuMZ[_0x2db327(0x895)]['Settings'][_0x2db327(0xabb)]['CmdIconAutoBattle'],_0x26a8b9=_0x3827f4===_0x2db327(0xb11)?TextManager['autoBattle']:_0x2db327(0xee)[_0x2db327(0x7d3)](_0x3355c5,TextManager['autoBattle']),_0x51fc7e=this[_0x2db327(0xaac)]();this[_0x2db327(0x21e)](_0x26a8b9,_0x2db327(0x8f0),_0x51fc7e);},Window_PartyCommand[_0x23168f(0xa01)][_0x23168f(0xf8)]=function(){const _0x533342=_0x23168f;return VisuMZ['BattleCore']['Settings'][_0x533342(0xabb)][_0x533342(0x3ca)];},Window_PartyCommand[_0x23168f(0xa01)]['isAutoBattleCommandEnabled']=function(){return!![];},Window_PartyCommand['prototype'][_0x23168f(0x153)]=function(){},Window_PartyCommand['prototype'][_0x23168f(0x2a8)]=function(){const _0x673956=_0x23168f,_0x2041ea=VisuMZ['BattleCore'][_0x673956(0xbac)][_0x673956(0xabb)][_0x673956(0x161)]??!![];if(!_0x2041ea)return;const _0xb65321=this[_0x673956(0xb26)](),_0x3169db=VisuMZ[_0x673956(0x895)][_0x673956(0xbac)][_0x673956(0x98a)]['CmdIconStatus']??0x57,_0x40582d=_0xb65321==='text'?TextManager[_0x673956(0x38e)]:_0x673956(0xee)[_0x673956(0x7d3)](_0x3169db,TextManager[_0x673956(0x38e)]),_0x4662cf=!![];this['addCommand'](_0x40582d,_0x673956(0x38e),_0x4662cf);},Window_PartyCommand[_0x23168f(0xa01)][_0x23168f(0x9f1)]=function(){const _0x2d1619=_0x23168f;if(!this[_0x2d1619(0x5d5)]())return;const _0x46e083=this['commandStyle'](),_0x27356c=VisuMZ[_0x2d1619(0x895)][_0x2d1619(0xbac)]['PartyCmd'][_0x2d1619(0x264)],_0x3ed911=_0x46e083===_0x2d1619(0xb11)?TextManager[_0x2d1619(0x428)]:'\x5cI[%1]%2'[_0x2d1619(0x7d3)](_0x27356c,TextManager['options']),_0x2c8e2e=this[_0x2d1619(0x56e)]();this['addCommand'](_0x3ed911,'options',_0x2c8e2e);},Window_PartyCommand['prototype'][_0x23168f(0x5d5)]=function(){const _0x4f7177=_0x23168f;return VisuMZ[_0x4f7177(0x895)][_0x4f7177(0xbac)]['PartyCmd'][_0x4f7177(0x27a)];},Window_PartyCommand[_0x23168f(0xa01)]['isOptionsCommandEnabled']=function(){return!![];},Window_PartyCommand['prototype'][_0x23168f(0x535)]=function(){const _0x253faf=_0x23168f,_0x9ddbb1=this[_0x253faf(0xb26)](),_0x56e96a=VisuMZ[_0x253faf(0x895)][_0x253faf(0xbac)][_0x253faf(0xabb)]['CmdIconEscape'],_0x2c83d1=_0x9ddbb1===_0x253faf(0xb11)?TextManager[_0x253faf(0xb96)]:'\x5cI[%1]%2'[_0x253faf(0x7d3)](_0x56e96a,TextManager[_0x253faf(0xb96)]),_0x4d58ac=this[_0x253faf(0x23d)]();this[_0x253faf(0x21e)](_0x2c83d1,_0x253faf(0xb96),_0x4d58ac);},Window_PartyCommand['prototype']['isEscapeCommandEnabled']=function(){const _0x2084d5=_0x23168f;return BattleManager[_0x2084d5(0x214)]();},Window_PartyCommand[_0x23168f(0xa01)][_0x23168f(0x639)]=function(){const _0x31c853=_0x23168f;return VisuMZ['BattleCore']['Settings'][_0x31c853(0xabb)][_0x31c853(0x439)];},Window_PartyCommand[_0x23168f(0xa01)]['drawItem']=function(_0x354d0a){const _0x115c11=_0x23168f,_0x216d5d=this[_0x115c11(0x192)](_0x354d0a);if(_0x216d5d===_0x115c11(0x282))this[_0x115c11(0x828)](_0x354d0a);else _0x216d5d==='icon'?this['drawItemStyleIcon'](_0x354d0a):Window_Command[_0x115c11(0xa01)][_0x115c11(0x5a8)][_0x115c11(0x88f)](this,_0x354d0a);},Window_PartyCommand[_0x23168f(0xa01)]['commandStyle']=function(){const _0x52e4f1=_0x23168f;return VisuMZ[_0x52e4f1(0x895)][_0x52e4f1(0xbac)][_0x52e4f1(0xabb)]['CmdStyle'];},Window_PartyCommand[_0x23168f(0xa01)]['commandStyleCheck']=function(_0x285e3b){const _0x4821c0=_0x23168f;if(_0x285e3b<0x0)return'text';const _0x1e03d8=this[_0x4821c0(0xb26)]();if(_0x1e03d8!==_0x4821c0(0x388))return _0x1e03d8;else{if(this[_0x4821c0(0xac5)]()>0x0){const _0x3ee273=this[_0x4821c0(0x83c)](_0x285e3b);if(_0x3ee273[_0x4821c0(0x26e)](/\\I\[(\d+)\]/i)){const _0x2159b3=this['itemLineRect'](_0x285e3b),_0x520f3f=this[_0x4821c0(0xab8)](_0x3ee273)[_0x4821c0(0x2e0)];return _0x520f3f<=_0x2159b3[_0x4821c0(0x2e0)]?'iconText':'icon';}}}return _0x4821c0(0xb11);},Window_PartyCommand[_0x23168f(0xa01)]['drawItemStyleIconText']=function(_0x4e5181){const _0x28d4df=_0x23168f,_0x5fb412=this['itemLineRect'](_0x4e5181),_0x5aba55=this[_0x28d4df(0x83c)](_0x4e5181),_0x180a02=this[_0x28d4df(0xab8)](_0x5aba55)[_0x28d4df(0x2e0)];this['changePaintOpacity'](this['isCommandEnabled'](_0x4e5181));const _0x37d7a8=this['itemTextAlign']();if(_0x37d7a8==='right')this[_0x28d4df(0x9c5)](_0x5aba55,_0x5fb412['x']+_0x5fb412[_0x28d4df(0x2e0)]-_0x180a02,_0x5fb412['y'],_0x180a02);else{if(_0x37d7a8===_0x28d4df(0x283)){const _0x31e422=_0x5fb412['x']+Math['floor']((_0x5fb412[_0x28d4df(0x2e0)]-_0x180a02)/0x2);this[_0x28d4df(0x9c5)](_0x5aba55,_0x31e422,_0x5fb412['y'],_0x180a02);}else this[_0x28d4df(0x9c5)](_0x5aba55,_0x5fb412['x'],_0x5fb412['y'],_0x180a02);}},Window_PartyCommand['prototype']['drawItemStyleIcon']=function(_0x2701a8){const _0x4dcfdc=_0x23168f;this['commandName'](_0x2701a8)['match'](/\\I\[(\d+)\]/i);const _0x1f3a47=Number(RegExp['$1'])||0x0,_0x4c0d36=this[_0x4dcfdc(0x5b2)](_0x2701a8),_0x52fbdd=_0x4c0d36['x']+Math[_0x4dcfdc(0x58e)]((_0x4c0d36[_0x4dcfdc(0x2e0)]-ImageManager[_0x4dcfdc(0x36c)])/0x2),_0x63f2e7=_0x4c0d36['y']+(_0x4c0d36[_0x4dcfdc(0xb1c)]-ImageManager[_0x4dcfdc(0x960)])/0x2;this[_0x4dcfdc(0x17c)](_0x1f3a47,_0x52fbdd,_0x63f2e7);},Window_PartyCommand[_0x23168f(0xa01)][_0x23168f(0x198)]=function(){},Window_PartyCommand['prototype'][_0x23168f(0x91a)]=function(){const _0x31ecb6=_0x23168f;Window_Command[_0x31ecb6(0xa01)]['activate'][_0x31ecb6(0x88f)](this);const _0x3929ad=this[_0x31ecb6(0x3f3)]();_0x3929ad==='border'&&this[_0x31ecb6(0x146)]();},Window_PartyCommand['prototype'][_0x23168f(0x3f3)]=function(){const _0x1caabc=_0x23168f;if(this[_0x1caabc(0x464)])return this[_0x1caabc(0x464)];return this['_battleLayoutStyle']=SceneManager[_0x1caabc(0x23e)][_0x1caabc(0x3f3)](),this[_0x1caabc(0x464)];},Window_PartyCommand[_0x23168f(0xa01)]['updateHelp']=function(){const _0x1c69e2=_0x23168f,_0x2e0c68=VisuMZ[_0x1c69e2(0x895)]['Settings'][_0x1c69e2(0xabb)],_0x29133d=this[_0x1c69e2(0x3d6)]();switch(_0x29133d){case'fight':this[_0x1c69e2(0x10a)]['setText'](_0x2e0c68['HelpFight']);break;case _0x1c69e2(0x8f0):this['_helpWindow'][_0x1c69e2(0x8be)](_0x2e0c68[_0x1c69e2(0x5ce)]);break;case _0x1c69e2(0x428):this[_0x1c69e2(0x10a)]['setText'](_0x2e0c68['HelpOptions']);break;case _0x1c69e2(0xb96):this[_0x1c69e2(0x10a)][_0x1c69e2(0x8be)](_0x2e0c68[_0x1c69e2(0x59a)]);break;case _0x1c69e2(0x38e):this[_0x1c69e2(0x10a)][_0x1c69e2(0x8be)](Window_InBattleStatus[_0x1c69e2(0xb9c)][_0x1c69e2(0xad3)]);break;default:this[_0x1c69e2(0x10a)][_0x1c69e2(0x8be)]('');break;}},VisuMZ['BattleCore'][_0x23168f(0xd5)]=Window_ActorCommand['prototype'][_0x23168f(0x8c9)],Window_ActorCommand['prototype'][_0x23168f(0x8c9)]=function(_0x363c37){const _0x32d70e=_0x23168f;VisuMZ[_0x32d70e(0x895)]['Window_ActorCommand_initialize']['call'](this,_0x363c37),this[_0x32d70e(0x2fc)](_0x363c37);},Window_ActorCommand[_0x23168f(0xa01)]['createCommandNameWindow']=function(_0x50aa77){const _0x1ad6a0=_0x23168f,_0x10e13f=new Rectangle(0x0,0x0,_0x50aa77['width'],_0x50aa77[_0x1ad6a0(0xb1c)]);this[_0x1ad6a0(0x7a1)]=new Window_Base(_0x10e13f),this['_commandNameWindow']['opacity']=0x0,this['addChild'](this['_commandNameWindow']),this['updateCommandNameWindow']();},Window_ActorCommand[_0x23168f(0xa01)][_0x23168f(0xcf)]=function(){const _0x574135=_0x23168f;Window_Command[_0x574135(0xa01)][_0x574135(0xcf)][_0x574135(0x88f)](this);if(this[_0x574135(0x7a1)])this['updateCommandNameWindow']();},Window_ActorCommand[_0x23168f(0xa01)]['updateCommandNameWindow']=function(){const _0x454ee7=_0x23168f,_0x3f0d17=this[_0x454ee7(0x7a1)];_0x3f0d17[_0x454ee7(0x5c3)][_0x454ee7(0x176)]();const _0x12fab3=this[_0x454ee7(0x192)](this[_0x454ee7(0x216)]());if(_0x12fab3===_0x454ee7(0x9ca)&&this['maxItems']()>0x0){const _0x2ddc90=this[_0x454ee7(0x5b2)](this[_0x454ee7(0x216)]());let _0x5ca25d=this[_0x454ee7(0x83c)](this['index']());_0x5ca25d=_0x5ca25d[_0x454ee7(0x5c0)](/\\I\[(\d+)\]/gi,''),_0x3f0d17[_0x454ee7(0xa4d)](),this[_0x454ee7(0x4b4)](_0x5ca25d,_0x2ddc90),this[_0x454ee7(0x2e6)](_0x5ca25d,_0x2ddc90),this['commandNameWindowCenter'](_0x5ca25d,_0x2ddc90);}},Window_ActorCommand[_0x23168f(0xa01)][_0x23168f(0x4b4)]=function(_0x50fd55,_0x2ad58c){},Window_ActorCommand[_0x23168f(0xa01)][_0x23168f(0x2e6)]=function(_0x31b4b3,_0x4820ac){const _0x3f2937=_0x23168f,_0x568d08=this['_commandNameWindow'];_0x568d08[_0x3f2937(0x601)](_0x31b4b3,0x0,_0x4820ac['y'],_0x568d08[_0x3f2937(0xb84)],_0x3f2937(0x283));},Window_ActorCommand[_0x23168f(0xa01)][_0x23168f(0xb95)]=function(_0x2999b1,_0x573be8){const _0x5adacd=_0x23168f,_0xad69ff=this['_commandNameWindow'],_0x405250=$gameSystem[_0x5adacd(0x82b)](),_0x185469=_0x573be8['x']+Math['floor'](_0x573be8[_0x5adacd(0x2e0)]/0x2)+_0x405250;_0xad69ff['x']=_0xad69ff[_0x5adacd(0x2e0)]/-0x2+_0x185469,_0xad69ff['y']=Math[_0x5adacd(0x58e)](_0x573be8[_0x5adacd(0xb1c)]/0x2);},Window_ActorCommand[_0x23168f(0xa01)][_0x23168f(0x8b2)]=function(){const _0x2f152d=_0x23168f;if(!this[_0x2f152d(0x95d)])return;const _0x5ed5cd=this[_0x2f152d(0x95d)]['battleCommands']();for(const _0x1ce40d of _0x5ed5cd){this[_0x2f152d(0x792)](_0x1ce40d[_0x2f152d(0x1ef)]()['trim']());}},Window_ActorCommand[_0x23168f(0xa01)][_0x23168f(0x792)]=function(_0x43b252){const _0x10a0fc=_0x23168f;_0x43b252===_0x10a0fc(0x83e)&&this[_0x10a0fc(0x799)]();[_0x10a0fc(0x992),_0x10a0fc(0x549)][_0x10a0fc(0x2d8)](_0x43b252)&&this[_0x10a0fc(0xa1b)]();_0x43b252===_0x10a0fc(0x65d)&&this[_0x10a0fc(0x96b)]();_0x43b252===_0x10a0fc(0xe8)&&this['addItemCommand']();_0x43b252===_0x10a0fc(0x724)&&this['addStatusCommand']();_0x43b252===_0x10a0fc(0x7d8)&&this[_0x10a0fc(0x535)]();_0x43b252==='AUTO\x20BATTLE'&&this[_0x10a0fc(0x50e)]();if(_0x43b252[_0x10a0fc(0x26e)](/STYPE: (\d+)/i)){const _0x4a4c65=Number(RegExp['$1']);this[_0x10a0fc(0xb69)](_0x4a4c65);}else{if(_0x43b252['match'](/STYPE: (.*)/i)){const _0x47f268=DataManager[_0x10a0fc(0x410)](RegExp['$1']);this[_0x10a0fc(0xb69)](_0x47f268);}}_0x43b252==='ALL\x20SKILLS'&&this[_0x10a0fc(0x725)]();if(_0x43b252[_0x10a0fc(0x26e)](/SKILL: (\d+)/i)){const _0x20fe1d=Number(RegExp['$1']);this[_0x10a0fc(0x1c9)]($dataSkills[_0x20fe1d]);}else{if(_0x43b252[_0x10a0fc(0x26e)](/SKILL: (.*)/i)){const _0x366a5c=DataManager[_0x10a0fc(0x225)](RegExp['$1']);this[_0x10a0fc(0x1c9)]($dataSkills[_0x366a5c]);}}_0x43b252==='PARTY'&&Imported[_0x10a0fc(0x6c3)]&&this[_0x10a0fc(0x19c)](),['COMBATLOG',_0x10a0fc(0xbce)][_0x10a0fc(0x2d8)](_0x43b252)&&Imported[_0x10a0fc(0x453)]&&this[_0x10a0fc(0x81f)](),_0x43b252===_0x10a0fc(0x61a)&&Imported[_0x10a0fc(0x92f)]&&this['addWeaponSwapCommand'](!![]),_0x43b252===_0x10a0fc(0x23f)&&Imported['VisuMZ_2_BattleGridSystem']&&this[_0x10a0fc(0x8d3)]();},Window_ActorCommand['prototype'][_0x23168f(0x799)]=function(){const _0x1112cf=_0x23168f,_0x213a79=$dataSkills[this['_actor'][_0x1112cf(0x65b)]()];if(!_0x213a79)return;if(!this[_0x1112cf(0x84b)](_0x213a79))return;const _0x781d3c=this[_0x1112cf(0xb26)](),_0x2b82cc=DataManager['battleCommandName'](_0x213a79),_0xdc6539=DataManager[_0x1112cf(0x8a7)](_0x213a79),_0x502713=_0x781d3c===_0x1112cf(0xb11)?_0x2b82cc:_0x1112cf(0xee)[_0x1112cf(0x7d3)](_0xdc6539,_0x2b82cc);this[_0x1112cf(0x21e)](_0x502713,'attack',this[_0x1112cf(0x95d)]['canAttack']());},Window_ActorCommand[_0x23168f(0xa01)][_0x23168f(0x96b)]=function(){const _0x1cc0a4=_0x23168f,_0x146ec4=$dataSkills[this[_0x1cc0a4(0x95d)][_0x1cc0a4(0x6de)]()];if(!_0x146ec4)return;if(!this[_0x1cc0a4(0x84b)](_0x146ec4))return;const _0x3a018c=this[_0x1cc0a4(0xb26)](),_0x19cdb7=DataManager[_0x1cc0a4(0x56d)](_0x146ec4),_0x268157=DataManager[_0x1cc0a4(0x8a7)](_0x146ec4),_0x28bfd8=_0x3a018c==='text'?_0x19cdb7:'\x5cI[%1]%2'['format'](_0x268157,_0x19cdb7);this[_0x1cc0a4(0x21e)](_0x28bfd8,_0x1cc0a4(0xb64),this[_0x1cc0a4(0x95d)][_0x1cc0a4(0x629)]());},Window_ActorCommand[_0x23168f(0xa01)][_0x23168f(0x2c2)]=function(){const _0x4b021d=_0x23168f,_0x9a0cc5=this[_0x4b021d(0xb26)](),_0x46032f=VisuMZ[_0x4b021d(0x895)][_0x4b021d(0xbac)][_0x4b021d(0x6f4)][_0x4b021d(0xb13)],_0x1337b3=_0x9a0cc5===_0x4b021d(0xb11)?TextManager[_0x4b021d(0x42e)]:'\x5cI[%1]%2'[_0x4b021d(0x7d3)](_0x46032f,TextManager['item']),_0xfd67fe=this[_0x4b021d(0x875)]();this[_0x4b021d(0x21e)](_0x1337b3,'item',_0xfd67fe);},Window_ActorCommand[_0x23168f(0xa01)]['isItemCommandEnabled']=function(){const _0x51ca4f=_0x23168f;return this['_actor']&&this[_0x51ca4f(0x95d)][_0x51ca4f(0x2f1)]();},Window_ActorCommand[_0x23168f(0xa01)][_0x23168f(0xa1b)]=function(){const _0xd04371=_0x23168f,_0x5d5980=this[_0xd04371(0x95d)][_0xd04371(0x5e3)]();for(const _0x742a82 of _0x5d5980){this[_0xd04371(0xb69)](_0x742a82);}},Window_ActorCommand[_0x23168f(0xa01)][_0x23168f(0xb69)]=function(_0x264620){const _0x2fa8eb=_0x23168f;let _0x2ca391=$dataSystem[_0x2fa8eb(0x5e3)][_0x264620];if(!_0x2ca391)return;let _0x35098d=_0x2ca391;const _0x2ab137=this['commandStyle']();if(_0x2ab137===_0x2fa8eb(0xb11))_0x35098d=_0x35098d[_0x2fa8eb(0x5c0)](/\x1I\[(\d+)\]/gi,''),_0x35098d=_0x35098d['replace'](/\\I\[(\d+)\]/gi,'');else{if(!_0x2ca391['match'](/\\I\[(\d+)\]/i)){const _0x5b1d94=Imported[_0x2fa8eb(0x9a3)]?VisuMZ['SkillsStatesCore'][_0x2fa8eb(0xbac)]['Skills']:VisuMZ[_0x2fa8eb(0x895)][_0x2fa8eb(0xbac)][_0x2fa8eb(0x6f4)],_0x5d8bc9=$dataSystem['magicSkills'][_0x2fa8eb(0x2d8)](_0x264620),_0x23bc52=_0x5d8bc9?_0x5b1d94[_0x2fa8eb(0x956)]:_0x5b1d94[_0x2fa8eb(0x721)];_0x35098d=_0x2fa8eb(0xee)[_0x2fa8eb(0x7d3)](_0x23bc52,_0x2ca391);}}this[_0x2fa8eb(0x21e)](_0x35098d,_0x2fa8eb(0x28c),!![],_0x264620);},Window_ActorCommand[_0x23168f(0xa01)][_0x23168f(0x725)]=function(){const _0x1f5e5a=_0x23168f,_0xc99a87=this[_0x1f5e5a(0x95d)][_0x1f5e5a(0x5e3)](),_0x9382b1=this[_0x1f5e5a(0x95d)][_0x1f5e5a(0xb33)]();for(const _0x22eaff of _0x9382b1){if(!_0x22eaff)continue;if(Imported[_0x1f5e5a(0x9a3)]){if(this[_0x1f5e5a(0x66a)](_0x22eaff))continue;if(this[_0x1f5e5a(0x944)](_0x22eaff))continue;}else{if(!_0xc99a87['includes'](_0x22eaff[_0x1f5e5a(0x1f4)]))continue;}this[_0x1f5e5a(0x1c9)](_0x22eaff);}},Window_ActorCommand[_0x23168f(0xa01)][_0x23168f(0x66a)]=function(_0x162bbb){const _0x34474f=_0x23168f,_0x219e8a=this[_0x34474f(0x95d)][_0x34474f(0x5e3)](),_0xffc477=_0x219e8a[_0x34474f(0x239)](_0x3a01cf=>DataManager['getSkillTypes'](_0x162bbb)[_0x34474f(0x2d8)](_0x3a01cf));return _0xffc477[_0x34474f(0x312)]<=0x0;},Window_ActorCommand[_0x23168f(0xa01)][_0x23168f(0x944)]=function(_0xb2fe41){const _0x155c95=_0x23168f;if(Imported[_0x155c95(0x9a3)]){if(VisuMZ[_0x155c95(0xb75)][_0x155c95(0x82e)]>=1.24){if(this[_0x155c95(0x95d)]){if(!VisuMZ[_0x155c95(0xb75)][_0x155c95(0x92a)](this[_0x155c95(0x95d)],_0xb2fe41))return!![];if(!VisuMZ['SkillsStatesCore']['CheckVisibleSwitchNotetags'](this['_actor'],_0xb2fe41))return!![];if(!VisuMZ[_0x155c95(0xb75)][_0x155c95(0x28f)](this['_actor'],_0xb2fe41))return!![];}}else{if(!Window_SkillList[_0x155c95(0xa01)][_0x155c95(0x3b1)][_0x155c95(0x88f)](this,_0xb2fe41))return!![];if(!Window_SkillList['prototype'][_0x155c95(0x16b)]['call'](this,_0xb2fe41))return!![];if(!Window_SkillList[_0x155c95(0xa01)][_0x155c95(0x726)][_0x155c95(0x88f)](this,_0xb2fe41))return!![];}}return![];},Window_ActorCommand[_0x23168f(0xa01)][_0x23168f(0x1c9)]=function(_0x3b9b48){const _0x3a4268=_0x23168f;if(!_0x3b9b48)return;if(!this['canAddSkillCommand'](_0x3b9b48))return;const _0x5e154c=this[_0x3a4268(0xb26)](),_0x577c20=DataManager[_0x3a4268(0x56d)](_0x3b9b48),_0x150c03=DataManager['battleCommandIcon'](_0x3b9b48),_0x100b19=_0x5e154c==='text'?_0x577c20:_0x3a4268(0xee)[_0x3a4268(0x7d3)](_0x150c03,_0x577c20),_0x23e0d3=this[_0x3a4268(0x95d)][_0x3a4268(0x1f6)](_0x3b9b48);this[_0x3a4268(0x21e)](_0x100b19,_0x3a4268(0x6db),_0x23e0d3,_0x3b9b48['id']);},Window_ActorCommand[_0x23168f(0xa01)][_0x23168f(0x84b)]=function(_0x3b48b0){const _0x1fb88f=_0x23168f,_0x131d97=_0x3b48b0[_0x1fb88f(0xae7)];if(_0x131d97[_0x1fb88f(0x26e)](/<COMMAND REQUIRE LEARN>/i)){if(!this[_0x1fb88f(0x95d)][_0x1fb88f(0x959)](_0x3b48b0['id']))return![];}if(_0x131d97[_0x1fb88f(0x26e)](/<COMMAND REQUIRE ACCESS>/i)){if(!this[_0x1fb88f(0x95d)][_0x1fb88f(0x131)](_0x3b48b0['id']))return![];}const _0x490157=VisuMZ['BattleCore'][_0x1fb88f(0x7b2)](_0x3b48b0,_0x1fb88f(0xb1a));if(VisuMZ['BattleCore']['JS'][_0x490157]){if(!VisuMZ[_0x1fb88f(0x895)]['JS'][_0x490157][_0x1fb88f(0x88f)](this,this[_0x1fb88f(0x95d)],_0x3b48b0))return![];}return VisuMZ[_0x1fb88f(0x895)][_0x1fb88f(0x8e0)](_0x3b48b0);},VisuMZ['BattleCore'][_0x23168f(0x8e0)]=function(_0x885ab6){const _0x3dd384=_0x23168f,_0x259a96=_0x885ab6['note'];if(_0x259a96['match'](/<COMMAND SHOW[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x4b3f30=JSON[_0x3dd384(0x1c2)]('['+RegExp['$1'][_0x3dd384(0x26e)](/\d+/g)+']');for(const _0x40c975 of _0x4b3f30){if(!$gameSwitches[_0x3dd384(0x706)](_0x40c975))return![];}return!![];}if(_0x259a96[_0x3dd384(0x26e)](/<COMMAND SHOW ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x5e8a6c=JSON[_0x3dd384(0x1c2)]('['+RegExp['$1'][_0x3dd384(0x26e)](/\d+/g)+']');for(const _0x42a8d5 of _0x5e8a6c){if(!$gameSwitches[_0x3dd384(0x706)](_0x42a8d5))return![];}return!![];}if(_0x259a96['match'](/<COMMAND SHOW ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x569f21=JSON[_0x3dd384(0x1c2)]('['+RegExp['$1'][_0x3dd384(0x26e)](/\d+/g)+']');for(const _0x503a78 of _0x569f21){if($gameSwitches[_0x3dd384(0x706)](_0x503a78))return!![];}return![];}if(_0x259a96[_0x3dd384(0x26e)](/<COMMAND HIDE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x2ede3a=JSON['parse']('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x2df2f1 of _0x2ede3a){if(!$gameSwitches[_0x3dd384(0x706)](_0x2df2f1))return!![];}return![];}if(_0x259a96[_0x3dd384(0x26e)](/<COMMAND HIDE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x3b73a2=JSON[_0x3dd384(0x1c2)]('['+RegExp['$1'][_0x3dd384(0x26e)](/\d+/g)+']');for(const _0x37798a of _0x3b73a2){if(!$gameSwitches[_0x3dd384(0x706)](_0x37798a))return!![];}return![];}if(_0x259a96['match'](/<COMMAND HIDE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x38768c=JSON[_0x3dd384(0x1c2)]('['+RegExp['$1'][_0x3dd384(0x26e)](/\d+/g)+']');for(const _0x3d2312 of _0x38768c){if($gameSwitches[_0x3dd384(0x706)](_0x3d2312))return![];}return!![];}return!![];},Window_ActorCommand[_0x23168f(0xa01)][_0x23168f(0x2a8)]=function(){const _0x126c19=_0x23168f,_0x266e28=this[_0x126c19(0xb26)](),_0x35ac86=VisuMZ[_0x126c19(0x895)][_0x126c19(0xbac)]['InBattleStatus'][_0x126c19(0x903)]??0x57,_0xd59376=_0x266e28==='text'?TextManager[_0x126c19(0x38e)]:_0x126c19(0xee)['format'](_0x35ac86,TextManager['status']),_0x32d096=!![];this['addCommand'](_0xd59376,'status',_0x32d096);},Window_ActorCommand[_0x23168f(0xa01)][_0x23168f(0x535)]=function(){const _0x4803ce=_0x23168f,_0x395c03=this[_0x4803ce(0xb26)](),_0x59ded6=VisuMZ[_0x4803ce(0x895)][_0x4803ce(0xbac)]['PartyCmd'][_0x4803ce(0xbcd)],_0x1b4fde=_0x395c03===_0x4803ce(0xb11)?TextManager[_0x4803ce(0xb96)]:_0x4803ce(0xee)[_0x4803ce(0x7d3)](_0x59ded6,TextManager['escape']),_0x182d35=this[_0x4803ce(0x23d)]();this[_0x4803ce(0x21e)](_0x1b4fde,_0x4803ce(0xb96),_0x182d35);},Window_ActorCommand[_0x23168f(0xa01)][_0x23168f(0x23d)]=function(){const _0x1a983b=_0x23168f;return BattleManager[_0x1a983b(0x214)]();},Window_ActorCommand['prototype']['addAutoBattleCommand']=function(){const _0x3f7039=_0x23168f,_0x1e8bcd=this['commandStyle'](),_0x5b7ef9=VisuMZ['BattleCore']['Settings'][_0x3f7039(0xabb)][_0x3f7039(0x389)],_0x4fa1fa=_0x1e8bcd===_0x3f7039(0xb11)?TextManager[_0x3f7039(0x8f0)]:_0x3f7039(0xee)['format'](_0x5b7ef9,TextManager['autoBattle']),_0x291a67=this[_0x3f7039(0xaac)]();this[_0x3f7039(0x21e)](_0x4fa1fa,'autoBattle',_0x291a67);},Window_ActorCommand[_0x23168f(0xa01)][_0x23168f(0xaac)]=function(){return!![];},Window_ActorCommand['prototype'][_0x23168f(0x639)]=function(){const _0x45bf90=_0x23168f;return VisuMZ[_0x45bf90(0x895)][_0x45bf90(0xbac)][_0x45bf90(0x6f4)][_0x45bf90(0x439)];},Window_ActorCommand[_0x23168f(0xa01)][_0x23168f(0x5a8)]=function(_0x387e3a){const _0x276655=_0x23168f,_0xf0b2f0=this[_0x276655(0x192)](_0x387e3a);if(_0xf0b2f0===_0x276655(0x282))this[_0x276655(0x828)](_0x387e3a);else _0xf0b2f0==='icon'?this['drawItemStyleIcon'](_0x387e3a):Window_Command[_0x276655(0xa01)][_0x276655(0x5a8)]['call'](this,_0x387e3a);this[_0x276655(0x3e8)](_0x387e3a);},Window_ActorCommand[_0x23168f(0xa01)][_0x23168f(0xb26)]=function(){const _0x4aad6c=_0x23168f;return VisuMZ[_0x4aad6c(0x895)][_0x4aad6c(0xbac)]['ActorCmd'][_0x4aad6c(0x181)];},Window_ActorCommand[_0x23168f(0xa01)][_0x23168f(0x192)]=function(_0x267d01){const _0x2d0fd5=_0x23168f;if(_0x267d01<0x0)return _0x2d0fd5(0xb11);const _0x80ce44=this[_0x2d0fd5(0xb26)]();if(_0x80ce44!=='auto')return _0x80ce44;else{if(this[_0x2d0fd5(0xac5)]()>0x0){const _0x1d6564=this[_0x2d0fd5(0x83c)](_0x267d01);if(_0x1d6564[_0x2d0fd5(0x26e)](/\\I\[(\d+)\]/i)){const _0x1353d8=this[_0x2d0fd5(0x5b2)](_0x267d01),_0x4ae54a=this[_0x2d0fd5(0xab8)](_0x1d6564)['width'];return _0x4ae54a<=_0x1353d8[_0x2d0fd5(0x2e0)]?_0x2d0fd5(0x282):'icon';}}}return _0x2d0fd5(0xb11);},Window_ActorCommand[_0x23168f(0xa01)]['drawItemStyleIconText']=function(_0x3ba220){const _0x33ea1b=_0x23168f,_0x5a2fc4=this['itemLineRect'](_0x3ba220),_0x3fe4e0=this[_0x33ea1b(0x83c)](_0x3ba220),_0x24bf38=this['textSizeEx'](_0x3fe4e0)[_0x33ea1b(0x2e0)];this['changePaintOpacity'](this[_0x33ea1b(0x19f)](_0x3ba220));const _0x20f02a=this[_0x33ea1b(0x639)]();if(_0x20f02a===_0x33ea1b(0x945))this[_0x33ea1b(0x9c5)](_0x3fe4e0,_0x5a2fc4['x']+_0x5a2fc4[_0x33ea1b(0x2e0)]-_0x24bf38,_0x5a2fc4['y'],_0x24bf38);else{if(_0x20f02a==='center'){const _0x26698b=_0x5a2fc4['x']+Math[_0x33ea1b(0x58e)]((_0x5a2fc4[_0x33ea1b(0x2e0)]-_0x24bf38)/0x2);this[_0x33ea1b(0x9c5)](_0x3fe4e0,_0x26698b,_0x5a2fc4['y'],_0x24bf38);}else this[_0x33ea1b(0x9c5)](_0x3fe4e0,_0x5a2fc4['x'],_0x5a2fc4['y'],_0x24bf38);}},Window_ActorCommand[_0x23168f(0xa01)]['drawItemStyleIcon']=function(_0x3ab1f9){const _0x4bcb34=_0x23168f;this[_0x4bcb34(0x83c)](_0x3ab1f9)['match'](/\\I\[(\d+)\]/i);const _0x4ca9ba=Number(RegExp['$1'])||0x0,_0x271119=this[_0x4bcb34(0x5b2)](_0x3ab1f9),_0x3019a8=_0x271119['x']+Math[_0x4bcb34(0x58e)]((_0x271119[_0x4bcb34(0x2e0)]-ImageManager[_0x4bcb34(0x36c)])/0x2),_0xf756eb=_0x271119['y']+(_0x271119[_0x4bcb34(0xb1c)]-ImageManager[_0x4bcb34(0x960)])/0x2;this[_0x4bcb34(0x17c)](_0x4ca9ba,_0x3019a8,_0xf756eb);},Window_ActorCommand[_0x23168f(0xa01)][_0x23168f(0x3e8)]=function(_0x11bc04){const _0x2fb429=_0x23168f;if(!(VisuMZ[_0x2fb429(0x895)][_0x2fb429(0xbac)][_0x2fb429(0x6f4)][_0x2fb429(0x89c)]??!![]))return;const _0xd9a6a=this[_0x2fb429(0xbd3)](_0x11bc04);if(!['attack',_0x2fb429(0xb64),_0x2fb429(0x6db)][_0x2fb429(0x2d8)](_0xd9a6a))return;const _0x15f3aa=this[_0x2fb429(0x5b2)](_0x11bc04);let _0x1421b9=null;if(_0xd9a6a===_0x2fb429(0xada))_0x1421b9=$dataSkills[this[_0x2fb429(0x95d)][_0x2fb429(0x65b)]()];else _0xd9a6a===_0x2fb429(0xb64)?_0x1421b9=$dataSkills[this[_0x2fb429(0x95d)][_0x2fb429(0x6de)]()]:_0x1421b9=$dataSkills[this[_0x2fb429(0x4f5)][_0x11bc04]['ext']];this[_0x2fb429(0xc3)](this[_0x2fb429(0x95d)],_0x1421b9,_0x15f3aa['x'],_0x15f3aa['y'],_0x15f3aa['width']);},Window_ActorCommand[_0x23168f(0xa01)][_0x23168f(0xc3)]=function(_0x374978,_0x343347,_0x1271b7,_0x18c812,_0x2a330e){const _0x7b920c=_0x23168f;if(!_0x343347)return;Imported['VisuMZ_1_SkillsStatesCore']?Window_Command[_0x7b920c(0xa01)]['drawSkillCost'][_0x7b920c(0x88f)](this,_0x374978,_0x343347,_0x1271b7,_0x18c812,_0x2a330e):Window_SkillList['prototype'][_0x7b920c(0xc3)][_0x7b920c(0x88f)](this,_0x343347,_0x1271b7,_0x18c812,_0x2a330e);},Window_ActorCommand[_0x23168f(0xa01)][_0x23168f(0x198)]=function(){},Window_ActorCommand['prototype'][_0x23168f(0x91a)]=function(){const _0x44b93c=_0x23168f;Window_Command['prototype'][_0x44b93c(0x91a)][_0x44b93c(0x88f)](this);const _0x3a6643=this['battleLayoutStyle']();_0x3a6643==='border'&&this['showHelpWindow']();},Window_ActorCommand[_0x23168f(0xa01)][_0x23168f(0x3f3)]=function(){const _0x317a61=_0x23168f;if(this[_0x317a61(0x464)])return this[_0x317a61(0x464)];return this[_0x317a61(0x464)]=SceneManager[_0x317a61(0x23e)][_0x317a61(0x3f3)](),this[_0x317a61(0x464)];},VisuMZ[_0x23168f(0x895)][_0x23168f(0x849)]=Window_ActorCommand[_0x23168f(0xa01)][_0x23168f(0x85b)],Window_ActorCommand[_0x23168f(0xa01)]['setup']=function(_0x2ee855){const _0x1af19f=_0x23168f,_0x1b4178=this[_0x1af19f(0x3f3)]();if(_0x2ee855&&['xp',_0x1af19f(0x9e8)][_0x1af19f(0x2d8)](_0x1b4178))this['resizeWindowXPStyle'](_0x2ee855);else _0x2ee855&&['border'][_0x1af19f(0x2d8)](_0x1b4178)&&(this[_0x1af19f(0x23b)](_0x2ee855),this[_0x1af19f(0x146)]());VisuMZ[_0x1af19f(0x895)][_0x1af19f(0x849)][_0x1af19f(0x88f)](this,_0x2ee855),_0x2ee855&&$gameTroop[_0x1af19f(0x2a6)]()['length']>0x0&&_0x2ee855[_0x1af19f(0xbb5)]()&&_0x2ee855[_0x1af19f(0xbb5)]()[_0x1af19f(0x207)]();},Window_ActorCommand[_0x23168f(0xa01)][_0x23168f(0x485)]=function(_0x4c7d7c){const _0x2d86c3=_0x23168f,_0x135088=VisuMZ[_0x2d86c3(0x895)][_0x2d86c3(0xbac)][_0x2d86c3(0x553)][_0x2d86c3(0x6b3)],_0x6b2681=Math[_0x2d86c3(0x1fc)](Graphics[_0x2d86c3(0x2d7)]/0x3),_0x3b2b83=Math[_0x2d86c3(0x1fc)](Graphics['boxWidth']/$gameParty['battleMembers']()['length']),_0x163277=Math[_0x2d86c3(0x705)](Math[_0x2d86c3(0x690)](_0x6b2681,_0x3b2b83),_0x135088),_0x2e1acd=this[_0x2d86c3(0x390)](VisuMZ[_0x2d86c3(0x895)][_0x2d86c3(0xbac)][_0x2d86c3(0x553)][_0x2d86c3(0x6c2)]),_0x5c4709=Math[_0x2d86c3(0x58e)]((Graphics[_0x2d86c3(0x2d7)]-Graphics[_0x2d86c3(0x2e0)])/0x2),_0x683354=Graphics['boxWidth']-_0x5c4709,_0x3d11bd=(Math['round'](_0x3b2b83*_0x4c7d7c[_0x2d86c3(0x216)]())+Math[_0x2d86c3(0x1fc)]((_0x3b2b83-_0x163277)/0x2))[_0x2d86c3(0x159)](_0x5c4709,_0x683354-_0x163277),_0x29ba01=Math[_0x2d86c3(0x1fc)](SceneManager[_0x2d86c3(0x23e)][_0x2d86c3(0x1fa)]['y']-_0x2e1acd);this[_0x2d86c3(0x817)](_0x3d11bd,_0x29ba01,_0x163277,_0x2e1acd),this[_0x2d86c3(0x8cc)](),this[_0x2d86c3(0x90b)](0x1);},Window_ActorCommand['prototype'][_0x23168f(0x23b)]=function(_0x898a13){const _0x43c848=_0x23168f,_0x1a7ba0=SceneManager[_0x43c848(0x23e)]['partyCommandWindowRectBorderStyle']();this[_0x43c848(0x817)](_0x1a7ba0['x'],_0x1a7ba0['y'],_0x1a7ba0[_0x43c848(0x2e0)],_0x1a7ba0['height']),this[_0x43c848(0x8cc)](),this['setBackgroundType'](0x0);},Window_ActorCommand['prototype']['refreshDimmerBitmap']=function(){const _0xfd82c2=_0x23168f;if(this['_dimmerSprite']){const _0xb50faf=this[_0xfd82c2(0x765)][_0xfd82c2(0xa65)],_0x4e5d68=this[_0xfd82c2(0x2e0)]-0x8,_0x12e88d=this[_0xfd82c2(0xb1c)],_0x159d90=this[_0xfd82c2(0x1d3)],_0x3d83a3=ColorManager[_0xfd82c2(0x8b1)](),_0x261fc7=ColorManager[_0xfd82c2(0x927)]();this[_0xfd82c2(0x765)]['x']=0x4,_0xb50faf[_0xfd82c2(0x953)](_0x4e5d68,_0x12e88d),_0xb50faf[_0xfd82c2(0xbdb)](0x0,0x0,_0x4e5d68,_0x159d90,_0x261fc7,_0x3d83a3,!![]),_0xb50faf[_0xfd82c2(0xbf5)](0x0,_0x159d90,_0x4e5d68,_0x12e88d-_0x159d90*0x2,_0x3d83a3),_0xb50faf[_0xfd82c2(0xbdb)](0x0,_0x12e88d-_0x159d90,_0x4e5d68,_0x159d90,_0x3d83a3,_0x261fc7,!![]),this[_0xfd82c2(0x765)][_0xfd82c2(0x7d6)](0x0,0x0,_0x4e5d68,_0x12e88d);}},Window_ActorCommand[_0x23168f(0xa01)][_0x23168f(0xaa8)]=function(){const _0x528498=_0x23168f;if(!this['_actor'])return;const _0x3aeb85=VisuMZ[_0x528498(0x895)]['Settings'][_0x528498(0x6f4)],_0x47f4b7=this['currentSymbol']();switch(_0x47f4b7){case _0x528498(0xada):this['setHelpWindowItem']($dataSkills[this[_0x528498(0x95d)][_0x528498(0x65b)]()]);break;case _0x528498(0xb64):this['setHelpWindowItem']($dataSkills[this[_0x528498(0x95d)][_0x528498(0x6de)]()]);break;case _0x528498(0x28c):const _0x441988=_0x3aeb85['HelpSkillType'],_0x2869f2=_0x441988['format']($dataSystem[_0x528498(0x5e3)][this[_0x528498(0x93c)]()]);this[_0x528498(0x10a)][_0x528498(0x8be)](_0x2869f2);break;case _0x528498(0x6db):this[_0x528498(0x5d2)]($dataSkills[this['currentExt']()]);break;case'item':this['_helpWindow'][_0x528498(0x8be)](_0x3aeb85[_0x528498(0x74e)]);break;case _0x528498(0xb96):this[_0x528498(0x10a)][_0x528498(0x8be)](_0x3aeb85[_0x528498(0x59a)]);break;case'autoBattle':this[_0x528498(0x10a)][_0x528498(0x8be)](_0x3aeb85[_0x528498(0x5ce)]);break;case _0x528498(0x38e):this[_0x528498(0x10a)]['setText'](Window_InBattleStatus[_0x528498(0xb9c)]['statusHelpDesc']);break;default:this[_0x528498(0x10a)]['setText']('');break;}},Window_ActorCommand[_0x23168f(0xa01)][_0x23168f(0x7c3)]=function(){const _0x2b79fa=_0x23168f;this['forceSelect'](0x0);if(this[_0x2b79fa(0x95d)]&&ConfigManager['commandRemember']){const _0x39e184=this[_0x2b79fa(0x95d)][_0x2b79fa(0x237)]();this[_0x2b79fa(0x49f)](_0x39e184);if(_0x39e184===_0x2b79fa(0x28c)){const _0x25455e=this[_0x2b79fa(0x95d)]['lastBattleSkill']();if(_0x25455e){const _0x3aefe6=this[_0x2b79fa(0x537)]('skill',_0x25455e[_0x2b79fa(0x1f4)]);this['select'](_0x3aefe6||0x0);}}else{if(_0x39e184===_0x2b79fa(0x6db)){const _0x14a558=this[_0x2b79fa(0x95d)][_0x2b79fa(0xb0f)]();if(_0x14a558){const _0x5f4f8f=this[_0x2b79fa(0x537)]('singleSkill',_0x14a558['id']);this[_0x2b79fa(0x3a0)](_0x5f4f8f||0x0);}}}}},Window_ActorCommand['prototype'][_0x23168f(0x537)]=function(_0x4c1321,_0x4c1baf){const _0x1b0ebd=_0x23168f;return this['_list'][_0x1b0ebd(0x7ca)](_0x3ba2db=>_0x3ba2db['symbol']===_0x4c1321&&_0x3ba2db['ext']===_0x4c1baf);},VisuMZ[_0x23168f(0x895)]['Window_BattleStatus_initialize']=Window_BattleStatus[_0x23168f(0xa01)][_0x23168f(0x8c9)],Window_BattleStatus['prototype'][_0x23168f(0x8c9)]=function(_0x718bc){const _0x5e7b79=_0x23168f;VisuMZ['BattleCore'][_0x5e7b79(0x8e5)][_0x5e7b79(0x88f)](this,_0x718bc),this[_0x5e7b79(0x641)](),this['createAttachmentSprites']();},Window_BattleStatus[_0x23168f(0xa01)][_0x23168f(0x3f3)]=function(){const _0x54ed1c=_0x23168f;if(this[_0x54ed1c(0x464)])return this['_battleLayoutStyle'];return this[_0x54ed1c(0x464)]=SceneManager[_0x54ed1c(0x23e)][_0x54ed1c(0x3f3)](),this[_0x54ed1c(0x464)];},Window_BattleStatus[_0x23168f(0xa01)][_0x23168f(0x641)]=function(){const _0x4c91bd=_0x23168f;this[_0x4c91bd(0x610)]=this[_0x4c91bd(0x40f)]();const _0x55a197=VisuMZ['BattleCore'][_0x4c91bd(0xbac)][_0x4c91bd(0x553)];_0x55a197['StatusWindowSkinHide']&&(this[_0x4c91bd(0x798)]=0x0);},Window_BattleStatus['prototype'][_0x23168f(0x40f)]=function(){const _0x4bc549=_0x23168f,_0x255cbb=VisuMZ[_0x4bc549(0x895)][_0x4bc549(0xbac)]['BattleLayout'];if(_0x255cbb[_0x4bc549(0x1bb)])return!![];const _0x4bb270=this[_0x4bc549(0x3f3)]();switch(_0x4bb270){case _0x4bc549(0x290):case _0x4bc549(0x829):return!![];break;case _0x4bc549(0xa7c):case'xp':case'portrait':default:return![];break;}},Window_BattleStatus[_0x23168f(0xa01)][_0x23168f(0x42b)]=function(){const _0x489ecc=_0x23168f;return this[_0x489ecc(0x40f)]()?0x0:0xa;},Window_BattleStatus[_0x23168f(0xa01)]['maxCols']=function(){const _0x5bce77=_0x23168f,_0x755db4=this['battleLayoutStyle']();switch(_0x755db4){case _0x5bce77(0x290):return 0x1;break;case'xp':case _0x5bce77(0x9e8):return $gameParty[_0x5bce77(0x4e1)]()[_0x5bce77(0x312)];break;case'default':default:return $gameParty[_0x5bce77(0x2a4)]();break;}},Window_BattleStatus[_0x23168f(0xa01)][_0x23168f(0x665)]=function(){const _0x30d058=_0x23168f,_0x3ef4d7=this[_0x30d058(0x3f3)]();switch(_0x3ef4d7){case'list':return Window_StatusBase[_0x30d058(0xa01)]['itemHeight'][_0x30d058(0x88f)](this);break;case _0x30d058(0xa7c):case'xp':case'portrait':default:return this[_0x30d058(0x5f9)];break;}},Window_BattleStatus[_0x23168f(0xa01)]['rowSpacing']=function(){const _0x2d0de7=_0x23168f,_0x8b0433=this[_0x2d0de7(0x3f3)]();switch(_0x8b0433){case _0x2d0de7(0x290):return Window_StatusBase[_0x2d0de7(0xa01)]['rowSpacing'][_0x2d0de7(0x88f)](this);break;case _0x2d0de7(0xa7c):case'xp':case _0x2d0de7(0x9e8):default:return 0x0;break;}},Window_BattleStatus['prototype'][_0x23168f(0xbb1)]=function(){const _0x5d7b3a=_0x23168f;this['isFrameVisible']()?Window_StatusBase['prototype'][_0x5d7b3a(0xbb1)][_0x5d7b3a(0x88f)](this):this[_0x5d7b3a(0x1d3)]=0x8;},Window_BattleStatus[_0x23168f(0xa01)][_0x23168f(0xae1)]=function(){const _0x43f099=_0x23168f,_0x533352=VisuMZ[_0x43f099(0x895)][_0x43f099(0xbac)]['BattleLayout'];_0x533352[_0x43f099(0x1bb)]?this[_0x43f099(0x9c7)]=ImageManager['loadSystem'](_0x533352[_0x43f099(0x1bb)]):Window_StatusBase[_0x43f099(0xa01)][_0x43f099(0xae1)][_0x43f099(0x88f)](this);},Window_BattleStatus['prototype'][_0x23168f(0x93e)]=function(_0x4a231b){const _0x165219=_0x23168f,_0x1d98a0=VisuMZ[_0x165219(0x895)]['Settings'][_0x165219(0x553)];if(_0x1d98a0[_0x165219(0x78e)])return;Window_StatusBase[_0x165219(0xa01)][_0x165219(0x93e)]['call'](this,_0x4a231b);},Window_BattleStatus[_0x23168f(0xa01)][_0x23168f(0x14d)]=function(){const _0x1e27a8=_0x23168f;this[_0x1e27a8(0xa21)]=!![];},Window_BattleStatus[_0x23168f(0xa01)]['update']=function(){const _0x20a9b1=_0x23168f;Window_StatusBase['prototype'][_0x20a9b1(0x926)]['call'](this),this['updateRefresh'](),this[_0x20a9b1(0xa5f)]();if(this[_0x20a9b1(0x3f3)]()===_0x20a9b1(0x829))this[_0x20a9b1(0x4b1)]();},Window_BattleStatus[_0x23168f(0xa01)][_0x23168f(0x1e9)]=function(){const _0x51e638=_0x23168f;if($gameTemp[_0x51e638(0x98d)]())this['preparePartyRefresh'](),this[_0x51e638(0xa21)]=![],$gameTemp['clearBattleRefreshRequest']();else this[_0x51e638(0xa21)]&&(this[_0x51e638(0xa21)]=![],this[_0x51e638(0xa39)](),this[_0x51e638(0x568)]());},Window_BattleStatus[_0x23168f(0xa01)][_0x23168f(0xaa3)]=function(){const _0x13d55e=_0x23168f;Window_StatusBase[_0x13d55e(0xa01)]['show'][_0x13d55e(0x88f)](this);if(!$gameSystem[_0x13d55e(0x18f)]())this[_0x13d55e(0xa39)]();},Window_BattleStatus['prototype'][_0x23168f(0x198)]=function(){const _0x155d7b=_0x23168f;if(this[_0x155d7b(0xbc5)]===Window_BattleStatus)return;Window_StatusBase['prototype']['hide']['call'](this);},Window_BattleStatus[_0x23168f(0xa01)]['drawBackgroundRect']=function(_0xf292de){const _0x5001cc=_0x23168f,_0x3ecf28=this['battleLayoutStyle']();switch(_0x3ecf28){case'xp':case _0x5001cc(0x9e8):break;case _0x5001cc(0xa7c):case _0x5001cc(0x290):case _0x5001cc(0x829):default:return Window_StatusBase[_0x5001cc(0xa01)][_0x5001cc(0x5a2)][_0x5001cc(0x88f)](this,_0xf292de);break;}},VisuMZ[_0x23168f(0x895)][_0x23168f(0xaf4)]=Window_BattleStatus[_0x23168f(0xa01)][_0x23168f(0x20f)],Window_BattleStatus[_0x23168f(0xa01)][_0x23168f(0x20f)]=function(_0x444181){const _0x10f94d=_0x23168f,_0x36376f=this[_0x10f94d(0x3f3)]();switch(_0x36376f){case _0x10f94d(0x290):this[_0x10f94d(0x9db)](_0x444181);break;case'xp':this[_0x10f94d(0x87b)](_0x444181);break;case _0x10f94d(0x9e8):this['drawItemImagePortraitStyle'](_0x444181);break;case _0x10f94d(0xa7c):case _0x10f94d(0x829):default:VisuMZ[_0x10f94d(0x895)][_0x10f94d(0xaf4)][_0x10f94d(0x88f)](this,_0x444181);break;}},Window_BattleStatus[_0x23168f(0xa01)][_0x23168f(0x617)]=function(_0xd3aac4){const _0x25aa80=_0x23168f,_0x236b04=this[_0x25aa80(0x3f3)]();if(!$gameSystem[_0x25aa80(0x18f)]())this['centerFrontViewSprite'](_0xd3aac4);switch(_0x236b04){case'list':this[_0x25aa80(0x614)](_0xd3aac4);break;case'xp':case _0x25aa80(0x9e8):case _0x25aa80(0xa7c):case _0x25aa80(0x829):default:this[_0x25aa80(0x782)](_0xd3aac4);break;}},Window_BattleStatus[_0x23168f(0xa01)][_0x23168f(0x430)]=function(){const _0x1f2174=_0x23168f,_0x5f1bdc=this[_0x1f2174(0x3f3)]();if(['xp'][_0x1f2174(0x2d8)](_0x5f1bdc)&&!$gameSystem[_0x1f2174(0x18f)]()){this['setCursorRect'](0x0,0x0,0x0,0x0);return;}Window_StatusBase[_0x1f2174(0xa01)][_0x1f2174(0x430)][_0x1f2174(0x88f)](this);},Window_BattleStatus['prototype'][_0x23168f(0xb36)]=function(_0x78ff77){const _0x1de9c8=_0x23168f,_0x3bd6d0=this[_0x1de9c8(0x20c)](_0x78ff77)['battler']();if(!_0x3bd6d0)return;const _0x3f293b=this[_0x1de9c8(0x3f3)](),_0x10550e=this['itemRect'](_0x78ff77);let _0x3f6d52=Math[_0x1de9c8(0x1fc)](_0x10550e['x']+_0x10550e[_0x1de9c8(0x2e0)]/0x2)+this[_0x1de9c8(0x1d3)];[_0x1de9c8(0x290)]['includes'](_0x3f293b)&&(_0x3f6d52=_0x10550e[_0x1de9c8(0x2e0)]/$gameParty[_0x1de9c8(0x4e1)]()[_0x1de9c8(0x312)],_0x3f6d52*=_0x78ff77,_0x3f6d52+=_0x10550e[_0x1de9c8(0x2e0)]/$gameParty[_0x1de9c8(0x4e1)]()[_0x1de9c8(0x312)]/0x2);let _0x3ae440=Math[_0x1de9c8(0x1fc)](this[_0x1de9c8(0xba6)](_0x78ff77,_0x3bd6d0,_0x10550e));_0x3bd6d0['setHome'](_0x3f6d52,_0x3ae440),this['addChildAt'](_0x3bd6d0,0x1),_0x3bd6d0[_0x1de9c8(0xaa3)](),this[_0x1de9c8(0xbdc)](),this[_0x1de9c8(0x568)]();},Window_BattleStatus[_0x23168f(0xa01)][_0x23168f(0xba6)]=function(_0x334b16,_0x2363c9,_0x5a04b2){const _0x6e2726=_0x23168f,_0x3d0a9e=VisuMZ[_0x6e2726(0x895)][_0x6e2726(0xbac)][_0x6e2726(0x553)],_0x16098f=this[_0x6e2726(0x3f3)]();if(_0x16098f==='xp'){const _0x5e7936=_0x3d0a9e[_0x6e2726(0x74b)];switch(_0x5e7936[_0x6e2726(0x645)]()[_0x6e2726(0xf4)]()){case _0x6e2726(0x419):return _0x5a04b2[_0x6e2726(0xb1c)]-_0x2363c9[_0x6e2726(0x121)][_0x6e2726(0xb1c)]/0x4;break;case _0x6e2726(0x283):const _0x376ae6=_0x3d0a9e[_0x6e2726(0x59b)];return(_0x5a04b2[_0x6e2726(0xb1c)]+(_0x2363c9[_0x6e2726(0xb1c)]||_0x376ae6))/0x2;break;case _0x6e2726(0xab7):return 0x0;case'name':default:return this['nameY'](_0x5a04b2);break;}}else{if(_0x16098f===_0x6e2726(0x9e8)){}}return _0x2363c9['height'];},Sprite_Name[_0x23168f(0xa01)]['bitmapHeight']=function(){return 0x24;},Sprite_Name[_0x23168f(0xa01)][_0x23168f(0x58a)]=function(){const _0x37ee12=_0x23168f,_0x32f0cd=this[_0x37ee12(0x611)](),_0x26a6bb=this[_0x37ee12(0x7a0)](),_0x391713=this[_0x37ee12(0xb87)]();this['setupFont'](),this['bitmap'][_0x37ee12(0x176)](),this['bitmap'][_0x37ee12(0x6bd)](_0x32f0cd,0x4,0x0,_0x26a6bb,_0x391713,_0x37ee12(0xb07));},Bitmap[_0x23168f(0xa01)][_0x23168f(0x6bd)]=function(_0x470811,_0x36e80d,_0x163211,_0xdf1ad3,_0x145e40,_0x3c51e8){const _0x1d6813=_0x23168f;TextManager[_0x1d6813(0x395)]&&(_0x470811=TextManager['parseLocalizedText'](_0x470811));const _0x342ec5=this[_0x1d6813(0x808)],_0x45df1d=_0x342ec5['globalAlpha'];_0xdf1ad3=_0xdf1ad3||0xffffffff;let _0x1fdc99=_0x36e80d,_0x4b0dd1=Math[_0x1d6813(0x1fc)](_0x163211+0x18/0x2+this[_0x1d6813(0x64f)]*0.35);_0x3c51e8===_0x1d6813(0x283)&&(_0x1fdc99+=_0xdf1ad3/0x2),_0x3c51e8===_0x1d6813(0x945)&&(_0x1fdc99+=_0xdf1ad3),_0x342ec5[_0x1d6813(0x434)](),_0x342ec5['font']=this[_0x1d6813(0x1ff)](),_0x342ec5[_0x1d6813(0xa17)]=_0x3c51e8,_0x342ec5[_0x1d6813(0x32c)]=_0x1d6813(0xa3f),_0x342ec5[_0x1d6813(0x7e2)]=0x1,this[_0x1d6813(0x2eb)](_0x470811,_0x1fdc99,_0x4b0dd1,_0xdf1ad3),_0x342ec5[_0x1d6813(0x7e2)]=_0x45df1d,this['_drawTextBody'](_0x470811,_0x1fdc99,_0x4b0dd1,_0xdf1ad3),_0x342ec5[_0x1d6813(0x130)](),this[_0x1d6813(0xb46)][_0x1d6813(0x926)]();},Window_BattleStatus[_0x23168f(0xa01)][_0x23168f(0x1c3)]=function(_0x5c1f9a){const _0x110158=_0x23168f;return this['basicGaugesY'](_0x5c1f9a)-this[_0x110158(0x9ba)]();},Window_BattleStatus[_0x23168f(0xa01)]['drawItemImageListStyle']=function(_0x33554a){const _0x1e6481=_0x23168f;if(!VisuMZ[_0x1e6481(0x895)]['Settings']['BattleLayout'][_0x1e6481(0x300)])return;const _0x307cf8=this[_0x1e6481(0x20c)](_0x33554a),_0x5bf69c=this['itemRect'](_0x33554a);_0x5bf69c[_0x1e6481(0x2e0)]=ImageManager['faceWidth'],_0x5bf69c['height']-=0x2,this[_0x1e6481(0x67d)](_0x307cf8,_0x5bf69c['x']+0x1,_0x5bf69c['y']+0x1,_0x5bf69c[_0x1e6481(0x2e0)],_0x5bf69c['height']);},Window_BattleStatus[_0x23168f(0xa01)][_0x23168f(0x614)]=function(_0x562719){const _0x32bc48=_0x23168f,_0x168524=VisuMZ[_0x32bc48(0x895)][_0x32bc48(0xbac)]['BattleLayout'],_0x2df876=$dataSystem['optDisplayTp']?0x4:0x3,_0x15fbc2=_0x2df876*0x80+(_0x2df876-0x1)*0x8+0x4,_0x474465=this['actor'](_0x562719),_0x5510f5=this[_0x32bc48(0xac8)](_0x562719);let _0xb2fd54=_0x5510f5['x']+this[_0x32bc48(0x1d3)];_0x168524[_0x32bc48(0x300)]?_0xb2fd54=_0x5510f5['x']+ImageManager[_0x32bc48(0x6b2)]+0x8:_0xb2fd54+=ImageManager[_0x32bc48(0x36c)];const _0xf295a0=Math[_0x32bc48(0x1fc)](Math['min'](_0x5510f5['x']+_0x5510f5[_0x32bc48(0x2e0)]-_0x15fbc2,_0xb2fd54)),_0x5514dd=Math[_0x32bc48(0x1fc)](_0x5510f5['y']+(_0x5510f5[_0x32bc48(0xb1c)]-Sprite_Name[_0x32bc48(0xa01)][_0x32bc48(0xb87)]())/0x2),_0x3bfc84=Math[_0x32bc48(0x1fc)](_0xf295a0-ImageManager['iconWidth']/0x2-0x4),_0x41f8fe=Math[_0x32bc48(0x1fc)](_0x5510f5['y']+(_0x5510f5[_0x32bc48(0xb1c)]-ImageManager['iconHeight'])/0x2+ImageManager[_0x32bc48(0x960)]/0x2);let _0x57cd5f=_0xf295a0+0x88;const _0x38a26c=_0x5514dd;this[_0x32bc48(0x670)](_0x474465,_0xf295a0-0x4+(_0x168524[_0x32bc48(0xa89)]||0x0),_0x5514dd+(_0x168524[_0x32bc48(0x520)]||0x0)),this[_0x32bc48(0x557)](_0x474465,_0xf295a0+(_0x168524[_0x32bc48(0x3dc)]||0x0),_0x5514dd+(_0x168524[_0x32bc48(0x1a3)]||0x0)),this[_0x32bc48(0x412)](_0x474465,_0x3bfc84+(_0x168524[_0x32bc48(0x75d)]||0x0),_0x41f8fe+(_0x168524['StateIconOffsetY']||0x0)),this[_0x32bc48(0x9d8)](_0x474465,'hp',_0x57cd5f+0x88*0x0+(_0x168524[_0x32bc48(0xa8c)]||0x0),_0x38a26c+(_0x168524[_0x32bc48(0x253)]||0x0)),this[_0x32bc48(0x9d8)](_0x474465,'mp',_0x57cd5f+0x88*0x1+(_0x168524[_0x32bc48(0x8aa)]||0x0),_0x38a26c+(_0x168524['MpGaugeOffsetY']||0x0)),$dataSystem['optDisplayTp']&&this[_0x32bc48(0x9d8)](_0x474465,'tp',_0x57cd5f+0x88*0x2+(_0x168524[_0x32bc48(0xb94)]||0x0),_0x38a26c+(_0x168524[_0x32bc48(0x3a3)]||0x0));},Window_BattleStatus[_0x23168f(0xa01)][_0x23168f(0x87b)]=function(_0x1c4598){const _0x5d9ab3=_0x23168f;if(!$gameSystem['isSideView']())return;VisuMZ['BattleCore'][_0x5d9ab3(0xaf4)][_0x5d9ab3(0x88f)](this,_0x1c4598);},Window_BattleStatus[_0x23168f(0xa01)][_0x23168f(0x782)]=function(_0x11045e){const _0x3c7c4b=_0x23168f,_0x4b1f13=VisuMZ['BattleCore'][_0x3c7c4b(0xbac)][_0x3c7c4b(0x553)],_0x32b9b0=this[_0x3c7c4b(0x20c)](_0x11045e),_0x2a1d28=this[_0x3c7c4b(0xac8)](_0x11045e),_0x2518bc=Math[_0x3c7c4b(0x1fc)](_0x2a1d28['x']+(_0x2a1d28[_0x3c7c4b(0x2e0)]-0x80)/0x2),_0x44119e=this[_0x3c7c4b(0x1c3)](_0x2a1d28);let _0x22e69f=_0x2518bc-ImageManager[_0x3c7c4b(0x36c)]/0x2-0x4,_0x633909=_0x44119e+ImageManager[_0x3c7c4b(0x960)]/0x2;_0x22e69f-ImageManager[_0x3c7c4b(0x36c)]/0x2<_0x2a1d28['x']&&(_0x22e69f=_0x2518bc+ImageManager['iconWidth']/0x2-0x4,_0x633909=_0x44119e-ImageManager[_0x3c7c4b(0x960)]/0x2);const _0x39fd53=_0x2518bc,_0x26d1ea=this[_0x3c7c4b(0x937)](_0x2a1d28);this[_0x3c7c4b(0x670)](_0x32b9b0,_0x2518bc+(_0x4b1f13[_0x3c7c4b(0xa89)]||0x0),_0x44119e+(_0x4b1f13[_0x3c7c4b(0x520)]||0x0)),this[_0x3c7c4b(0x557)](_0x32b9b0,_0x2518bc+(_0x4b1f13[_0x3c7c4b(0x3dc)]||0x0),_0x44119e+(_0x4b1f13['NameOffsetY']||0x0)),this[_0x3c7c4b(0x412)](_0x32b9b0,_0x22e69f+(_0x4b1f13[_0x3c7c4b(0x75d)]||0x0),_0x633909+(_0x4b1f13[_0x3c7c4b(0x462)]||0x0)),this['placeGauge'](_0x32b9b0,'hp',_0x39fd53+(_0x4b1f13['HpGaugeOffsetX']||0x0),_0x26d1ea+(_0x4b1f13[_0x3c7c4b(0x253)]||0x0)),this['placeGauge'](_0x32b9b0,'mp',_0x39fd53+(_0x4b1f13['MpGaugeOffsetX']||0x0),_0x26d1ea+this['gaugeLineHeight']()+(_0x4b1f13[_0x3c7c4b(0x81e)]||0x0)),$dataSystem[_0x3c7c4b(0x9d0)]&&this[_0x3c7c4b(0x9d8)](_0x32b9b0,'tp',_0x39fd53+(_0x4b1f13[_0x3c7c4b(0xb94)]||0x0),_0x26d1ea+this[_0x3c7c4b(0x9ba)]()*0x2+(_0x4b1f13[_0x3c7c4b(0x3a3)]||0x0));},Window_BattleStatus['prototype'][_0x23168f(0x3c2)]=function(_0x3e8191){const _0x186756=_0x23168f;if(!VisuMZ[_0x186756(0x895)][_0x186756(0xbac)][_0x186756(0x553)][_0x186756(0xa97)])return![];if(_0x3e8191[_0x186756(0xa70)]())return!![];return Imported[_0x186756(0x787)]&&_0x3e8191[_0x186756(0x267)]();},Game_Actor[_0x23168f(0xa01)][_0x23168f(0x96c)]=function(){const _0x243c58=_0x23168f;if(this[_0x243c58(0x20c)]()[_0x243c58(0xae7)]['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this[_0x243c58(0x20c)]()[_0x243c58(0xae7)][_0x243c58(0x26e)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);}return 0x0;},Game_Actor[_0x23168f(0xa01)][_0x23168f(0x13f)]=function(){const _0xb2aa62=_0x23168f;if(this[_0xb2aa62(0x20c)]()['note'][_0xb2aa62(0x26e)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this[_0xb2aa62(0x20c)]()['note']['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$2']);}return 0x0;},Window_BattleStatus['prototype']['drawItemImagePortraitStyle']=function(_0x117a45){const _0x245d5a=_0x23168f,_0x2c99b7=this['actor'](_0x117a45);if(this[_0x245d5a(0x3c2)](_0x2c99b7)){const _0x3147f8=_0x245d5a(0xbbf)['format'](_0x2c99b7[_0x245d5a(0x5d0)]()),_0x50634b=this[_0x245d5a(0xbb)](_0x3147f8,Sprite),_0x508a10=_0x2c99b7['getBattlePortraitFilename']();_0x508a10!==''?_0x50634b[_0x245d5a(0xa65)]=ImageManager[_0x245d5a(0xa4c)](_0x508a10):_0x50634b[_0x245d5a(0xa65)]=ImageManager[_0x245d5a(0x8f5)];const _0x24713b=this[_0x245d5a(0xac8)](_0x117a45);_0x50634b[_0x245d5a(0x4d5)]['x']=0.5,_0x50634b[_0x245d5a(0x4d5)]['y']=0x1;let _0x56c2fe=Math[_0x245d5a(0x1fc)](_0x24713b['x']+_0x24713b[_0x245d5a(0x2e0)]/0x2)+this[_0x245d5a(0x1d3)];_0x56c2fe+=_0x2c99b7[_0x245d5a(0x96c)]();let _0x2ac8cd=Math['round'](this[_0x245d5a(0xb1c)]);_0x2ac8cd+=_0x2c99b7['getBattlePortraitOffsetY'](),_0x50634b[_0x245d5a(0x817)](_0x56c2fe,_0x2ac8cd);const _0x5a6835=VisuMZ['BattleCore']['Settings'][_0x245d5a(0x553)][_0x245d5a(0xb7f)];_0x50634b['scale']['x']=_0x5a6835,_0x50634b[_0x245d5a(0x145)]['y']=_0x5a6835,_0x50634b['show']();}else{const _0x4f3959=this['faceRect'](_0x117a45);this[_0x245d5a(0x67d)](_0x2c99b7,_0x4f3959['x'],_0x4f3959['y'],_0x4f3959[_0x245d5a(0x2e0)],_0x4f3959[_0x245d5a(0xb1c)]);}},Window_BattleStatus[_0x23168f(0xa01)][_0x23168f(0xbb)]=function(_0x42b297,_0x100da6){const _0x4ee381=_0x23168f,_0x4569e0=this[_0x4ee381(0x3e2)];if(_0x4569e0[_0x42b297])return _0x4569e0[_0x42b297];else{const _0x45d578=new _0x100da6();return _0x4569e0[_0x42b297]=_0x45d578,this[_0x4ee381(0x886)](_0x45d578),this['addChildToBack'](this[_0x4ee381(0x4a9)]),_0x45d578;}},Window_BattleStatus['prototype'][_0x23168f(0x48b)]=function(){const _0x1c3dbc=_0x23168f;this[_0x1c3dbc(0x127)](),this[_0x1c3dbc(0x7a4)](),Window_StatusBase[_0x1c3dbc(0xa01)]['_createClientArea'][_0x1c3dbc(0x88f)](this),this[_0x1c3dbc(0x777)]();},Window_BattleStatus['prototype'][_0x23168f(0x127)]=function(){const _0x53b795=_0x23168f;this[_0x53b795(0x4a9)]=new Sprite(),this['_cursorArea']['filters']=[new PIXI['filters'][(_0x53b795(0x291))]()],this[_0x53b795(0x4a9)][_0x53b795(0x5fc)]=new Rectangle(),this[_0x53b795(0x4a9)][_0x53b795(0x817)](this[_0x53b795(0xa86)],this['_padding']),this[_0x53b795(0x314)](this['_cursorArea']);},Window_BattleStatus['prototype']['_createEffectsContainer']=function(){const _0x40c1d1=_0x23168f;this[_0x40c1d1(0x1d4)]=new Sprite(),this[_0x40c1d1(0x314)](this[_0x40c1d1(0x1d4)]);},Window_BattleStatus[_0x23168f(0xa01)]['updateEffectsContainer']=function(){const _0x2c6d00=_0x23168f;this['_effectsContainer']&&this['addChild'](this[_0x2c6d00(0x1d4)]);},Window_BattleStatus[_0x23168f(0xa01)][_0x23168f(0x777)]=function(){const _0x248cbf=_0x23168f;this['_damageContainer']=new Sprite(),this[_0x248cbf(0x314)](this[_0x248cbf(0x494)]);},Window_BattleStatus[_0x23168f(0xa01)][_0x23168f(0x287)]=function(){const _0x1c775f=_0x23168f;this[_0x1c775f(0x941)]=new Sprite();for(let _0x5b16a2=0x0;_0x5b16a2<0x9;_0x5b16a2++){this[_0x1c775f(0x941)][_0x1c775f(0x314)](new Sprite());}this['_cursorArea'][_0x1c775f(0x314)](this[_0x1c775f(0x941)]);},Window_BattleStatus[_0x23168f(0xa01)][_0x23168f(0xb27)]=function(){const _0xece390=_0x23168f;Window_StatusBase['prototype'][_0xece390(0xb27)]['call'](this),this['_updateCursorArea']();},Window_BattleStatus[_0x23168f(0xa01)]['_updateCursorArea']=function(){const _0x34d588=_0x23168f,_0x404235=this[_0x34d588(0xa86)];this[_0x34d588(0x4a9)][_0x34d588(0x817)](_0x404235,_0x404235),this[_0x34d588(0x4a9)]['x']=_0x404235-this[_0x34d588(0x26d)]['x'],this[_0x34d588(0x4a9)]['y']=_0x404235-this[_0x34d588(0x26d)]['y'],this['innerWidth']>0x0&&this[_0x34d588(0x5f9)]>0x0?this[_0x34d588(0x4a9)][_0x34d588(0x12e)]=this[_0x34d588(0x4af)]():this['_cursorArea']['visible']=![];},Window_BattleStatus[_0x23168f(0xa01)][_0x23168f(0x80d)]=function(){const _0x1ff56a=_0x23168f;Window_StatusBase[_0x1ff56a(0xa01)][_0x1ff56a(0x80d)][_0x1ff56a(0x88f)](this),this[_0x1ff56a(0x752)]();},Window_BattleStatus[_0x23168f(0xa01)]['_updateCursorFilterArea']=function(){const _0x108a06=_0x23168f,_0xb1fc8f=this[_0x108a06(0x4a9)][_0x108a06(0x729)][_0x108a06(0x260)](new Point(0x0,0x0)),_0x2ebeeb=this[_0x108a06(0x4a9)]['filterArea'];_0x2ebeeb['x']=_0xb1fc8f['x']+this['origin']['x'],_0x2ebeeb['y']=_0xb1fc8f['y']+this[_0x108a06(0x26d)]['y'],_0x2ebeeb['width']=this[_0x108a06(0xb84)],_0x2ebeeb[_0x108a06(0xb1c)]=this['innerHeight'];},Window_BattleStatus['prototype'][_0x23168f(0xb62)]=function(_0x458992){const _0x8d4f67=_0x23168f;if(this[_0x8d4f67(0x3f3)]()!=='portrait')return;this['drawItemImagePortraitStyle'](_0x458992[_0x8d4f67(0x216)]());},Window_BattleStatus[_0x23168f(0xa01)][_0x23168f(0xa04)]=function(_0x4b8984,_0x3565c8){const _0x1f10e6=_0x23168f;if(!this['_damageContainer'])return;if(!_0x4b8984)return;if(!_0x3565c8)return;const _0x457f8a=this['itemRect'](_0x3565c8[_0x1f10e6(0x216)]());_0x457f8a['x']+=_0x457f8a[_0x1f10e6(0x2e0)]/0x2+this[_0x1f10e6(0x1d3)],_0x4b8984['x']=_0x457f8a['x'],_0x4b8984['y']=_0x457f8a['y'],this[_0x1f10e6(0x494)][_0x1f10e6(0x314)](_0x4b8984);},Window_BattleStatus[_0x23168f(0xa01)][_0x23168f(0xbe7)]=function(_0x37f920){const _0x453def=_0x23168f;if(!this[_0x453def(0x494)])return;if(!_0x37f920)return;this[_0x453def(0x494)][_0x453def(0xa29)](_0x37f920);},Window_BattleStatus[_0x23168f(0xa01)][_0x23168f(0x4b1)]=function(){const _0x4aea20=_0x23168f;if(!this[_0x4aea20(0xe5)]())return;if(!this['_borderPortraitSprite'])this['createBorderStylePortraitSprite']();this[_0x4aea20(0xa5d)](),this['updateBorderSprite']();},Window_BattleStatus[_0x23168f(0xa01)][_0x23168f(0xe5)]=function(){const _0x224ca5=_0x23168f;if(this[_0x224ca5(0xbc5)]!==Window_BattleStatus)return![];if(!SceneManager[_0x224ca5(0xbef)]())return![];return VisuMZ[_0x224ca5(0x895)]['Settings'][_0x224ca5(0x553)][_0x224ca5(0x376)];},Window_BattleStatus[_0x23168f(0xa01)][_0x23168f(0x60b)]=function(){const _0x4c466d=_0x23168f;this[_0x4c466d(0x9bc)]=new Sprite();const _0x1f3308=SceneManager[_0x4c466d(0x23e)],_0x355f7e=_0x1f3308[_0x4c466d(0x213)][_0x4c466d(0xb3c)](_0x1f3308[_0x4c466d(0x946)]);_0x1f3308[_0x4c466d(0xbe0)](this[_0x4c466d(0x9bc)],_0x355f7e),this[_0x4c466d(0x9bc)][_0x4c466d(0x4d5)]['x']=0.5,this[_0x4c466d(0x9bc)]['anchor']['y']=0x1;const _0x16ef5c=VisuMZ[_0x4c466d(0x895)]['Settings'][_0x4c466d(0x553)][_0x4c466d(0x656)];this[_0x4c466d(0x9bc)][_0x4c466d(0x145)]['x']=_0x16ef5c,this['_borderPortraitSprite'][_0x4c466d(0x145)]['y']=_0x16ef5c,this[_0x4c466d(0x9bc)]['y']=this['y']+this[_0x4c466d(0xb1c)],this['_borderPortraitDuration']=0x0;},Window_BattleStatus['prototype'][_0x23168f(0x795)]=function(){const _0x19f62b=_0x23168f;return BattleManager[_0x19f62b(0xb23)]();},Window_BattleStatus[_0x23168f(0xa01)][_0x23168f(0xa5d)]=function(){const _0x122125=_0x23168f;this[_0x122125(0x9bc)][_0x122125(0x12e)]=this[_0x122125(0x795)]();const _0x40c664=BattleManager[_0x122125(0x20c)](),_0x4cd2d7=_0x40c664?_0x40c664[_0x122125(0xbab)]()||'':'';if(_0x40c664===this[_0x122125(0x9bc)]['actor']&&_0x4cd2d7===this[_0x122125(0x9bc)]['lastFilename'])return;this[_0x122125(0x9bc)][_0x122125(0x20c)]=_0x40c664||this[_0x122125(0x9bc)][_0x122125(0x20c)],this[_0x122125(0x9bc)][_0x122125(0xbad)]=_0x4cd2d7;if(!_0x40c664)return;else{if(_0x4cd2d7===''){this['_borderPortraitSprite']['bitmap']=ImageManager[_0x122125(0x8f5)],this[_0x122125(0x9bc)][_0x122125(0xbad)]='';return;}else{const _0x5e3f8b=ImageManager[_0x122125(0xa4c)](_0x4cd2d7);this[_0x122125(0x9bc)][_0x122125(0x798)]=0x0,_0x5e3f8b[_0x122125(0x313)](this[_0x122125(0x61f)][_0x122125(0x7f5)](this,_0x5e3f8b));}}},Window_BattleStatus[_0x23168f(0xa01)][_0x23168f(0x61f)]=function(_0x2312fa){const _0x5dfd18=_0x23168f;this[_0x5dfd18(0x7f2)]=0x14,this[_0x5dfd18(0x9bc)][_0x5dfd18(0xa65)]=_0x2312fa;SceneManager[_0x5dfd18(0x23e)][_0x5dfd18(0x82f)]()?(this[_0x5dfd18(0x9bc)]['x']=0x0,this[_0x5dfd18(0x322)]=Math[_0x5dfd18(0x330)](_0x2312fa[_0x5dfd18(0x2e0)]/0x2)):(this[_0x5dfd18(0x9bc)]['x']=this[_0x5dfd18(0x2e0)],this[_0x5dfd18(0x322)]=this[_0x5dfd18(0x2e0)]*0x3/0x4);this[_0x5dfd18(0x9bc)][_0x5dfd18(0x798)]=0x0,this[_0x5dfd18(0x9bc)]['y']=this['y']+this['height'];const _0x4515a6=BattleManager['actor']();_0x4515a6&&(this[_0x5dfd18(0x322)]+=_0x4515a6[_0x5dfd18(0x96c)](),this[_0x5dfd18(0x9bc)]['y']+=_0x4515a6[_0x5dfd18(0x13f)]());},Window_BattleStatus[_0x23168f(0xa01)][_0x23168f(0x41c)]=function(){const _0x1a978a=_0x23168f;if(this['_borderPortraitDuration']>0x0){const _0x889f6e=this[_0x1a978a(0x7f2)],_0x3a4c22=this['_borderPortraitSprite'];_0x3a4c22['x']=(_0x3a4c22['x']*(_0x889f6e-0x1)+this[_0x1a978a(0x322)])/_0x889f6e,_0x3a4c22[_0x1a978a(0x798)]=(_0x3a4c22[_0x1a978a(0x798)]*(_0x889f6e-0x1)+0xff)/_0x889f6e,this[_0x1a978a(0x7f2)]--;}},Window_BattleStatus[_0x23168f(0xa01)][_0x23168f(0xa5f)]=function(){const _0x4859ac=_0x23168f;return;this[_0x4859ac(0x1d4)]&&(this['_effectsContainer']['x']=this['x'],this[_0x4859ac(0x1d4)]['y']=this['y']),this[_0x4859ac(0x494)]&&(this[_0x4859ac(0x494)]['x']=this['x'],this[_0x4859ac(0x494)]['y']=this['y']);},Window_BattleStatus['prototype']['createAttachmentSprites']=function(){const _0xc34d67=_0x23168f,_0x3d9054=VisuMZ[_0xc34d67(0x895)]['Settings'][_0xc34d67(0x553)];if(_0x3d9054[_0xc34d67(0x254)]){const _0x48f42e=new Sprite();_0x48f42e[_0xc34d67(0xa65)]=ImageManager[_0xc34d67(0xbb3)](_0x3d9054[_0xc34d67(0x254)]),_0x48f42e['x']=_0x3d9054[_0xc34d67(0x519)]||0x0,_0x48f42e['y']=_0x3d9054[_0xc34d67(0x53b)]||0x0,this['addChildToBack'](_0x48f42e),this[_0xc34d67(0x2a9)]=_0x48f42e;}if(_0x3d9054[_0xc34d67(0x86e)]){const _0x3d9244=new Sprite();_0x3d9244[_0xc34d67(0xa65)]=ImageManager['loadSystem'](_0x3d9054[_0xc34d67(0x86e)]),_0x3d9244['x']=_0x3d9054['StatusWindowAttachmentFrontOffsetX']||0x0,_0x3d9244['y']=_0x3d9054['StatusWindowAttachmentFrontOffsetY']||0x0,this[_0xc34d67(0x314)](_0x3d9244),this[_0xc34d67(0x3b3)]=_0x3d9244;}},Window_BattleStatus[_0x23168f(0xa01)][_0x23168f(0x568)]=function(){const _0x2106b8=_0x23168f;this['_frontAttachmentSprite']&&this[_0x2106b8(0x314)](this[_0x2106b8(0x3b3)]),this[_0x2106b8(0x2a9)]&&this[_0x2106b8(0x886)](this['_backAttachmentSprite']);},Window_BattleActor['prototype'][_0x23168f(0x890)]=function(){return this['isActionSelectionValid']();},Window_BattleActor['prototype'][_0x23168f(0x6a5)]=function(){const _0x49237d=_0x23168f,_0x180912=BattleManager['inputtingAction']();if(!_0x180912)return!![];if(!_0x180912[_0x49237d(0x42e)]())return!![];const _0x5657aa=this['actor'](this['index']()),_0x30dd22=_0x180912[_0x49237d(0x42e)]()['note'];if(_0x180912[_0x49237d(0x581)]()){if(_0x5657aa===BattleManager[_0x49237d(0x20c)]())return![];}if(_0x180912[_0x49237d(0x4e2)]()){if(!_0x5657aa[_0x49237d(0x14e)]())return![];}if(_0x180912[_0x49237d(0x63e)]()){if(!_0x5657aa[_0x49237d(0x942)]())return![];}return!![];},Window_BattleActor[_0x23168f(0xa01)][_0x23168f(0x82a)]=function(_0x19bc31){const _0xf1baa3=_0x23168f;this[_0xf1baa3(0x72f)]=_0x19bc31;},VisuMZ[_0x23168f(0x895)][_0x23168f(0xb55)]=Window_BattleActor[_0x23168f(0xa01)][_0x23168f(0x4a8)],Window_BattleActor[_0x23168f(0xa01)][_0x23168f(0x4a8)]=function(){const _0x253e0=_0x23168f;Window_BattleStatus[_0x253e0(0xa01)]['processTouch'][_0x253e0(0x88f)](this),this['_enemyWindowMode']?this[_0x253e0(0x91b)]():VisuMZ[_0x253e0(0x895)][_0x253e0(0xb55)][_0x253e0(0x88f)](this);},Window_BattleActor[_0x23168f(0xa01)][_0x23168f(0x91b)]=function(){const _0xd8134b=_0x23168f,_0x12d131=SceneManager[_0xd8134b(0x23e)][_0xd8134b(0x24c)];if(!_0x12d131)return;this[_0xd8134b(0x9aa)]=![];const _0x342189=this[_0xd8134b(0xb4b)]();if(_0x342189>=0x0){this[_0xd8134b(0x3a0)](_0x342189);if(TouchInput[_0xd8134b(0x6cf)]()){const _0x50e323=$gameParty[_0xd8134b(0xa1d)]()[_0x342189],_0x31c393=_0x12d131[_0xd8134b(0x4b7)][_0xd8134b(0xb3c)](_0x50e323);_0x31c393>=0x0&&(_0x12d131[_0xd8134b(0x3a0)](_0x31c393),_0x12d131[_0xd8134b(0xb71)]());}}},Window_BattleActor[_0x23168f(0xa01)][_0x23168f(0x8b6)]=function(){const _0x76b622=_0x23168f;this[_0x76b622(0x72f)]&&(this[_0x76b622(0x47b)]++,this[_0x76b622(0x4fc)]=!![]);const _0x2a9245=Window_BattleStatus['prototype'][_0x76b622(0x8b6)]['call'](this);return this[_0x76b622(0x72f)]&&(this[_0x76b622(0x4fc)]=![]),_0x2a9245;},VisuMZ[_0x23168f(0x895)][_0x23168f(0x6ac)]=Window_BattleActor[_0x23168f(0xa01)][_0x23168f(0xaa3)],Window_BattleActor[_0x23168f(0xa01)][_0x23168f(0xaa3)]=function(){const _0x421243=_0x23168f;VisuMZ[_0x421243(0x895)][_0x421243(0x6ac)][_0x421243(0x88f)](this);const _0x4217a0=BattleManager[_0x421243(0xaee)]();if(_0x4217a0){const _0x3d981b=$gameParty[_0x421243(0x2a6)]();_0x4217a0['canSingleOrMultipleSelect']()&&_0x3d981b[_0x421243(0x312)]>0x1&&this['setHandler'](_0x421243(0x5eb),this[_0x421243(0x691)][_0x421243(0x7f5)](this));}},VisuMZ[_0x23168f(0x895)][_0x23168f(0x7c7)]=Window_BattleActor[_0x23168f(0xa01)]['hide'],Window_BattleActor[_0x23168f(0xa01)]['hide']=function(){const _0x2a07b9=_0x23168f;VisuMZ[_0x2a07b9(0x895)][_0x2a07b9(0x7c7)][_0x2a07b9(0x88f)](this),delete this[_0x2a07b9(0x646)][_0x2a07b9(0xbf0)],delete this[_0x2a07b9(0x646)][_0x2a07b9(0x5eb)];},Window_BattleActor['prototype'][_0x23168f(0x691)]=function(){const _0x255857=_0x23168f,_0x4d7533=BattleManager[_0x255857(0xaee)]();if(_0x4d7533)_0x4d7533[_0x255857(0x8c6)](_0x255857(0x7a9));this[_0x255857(0xb71)]();},VisuMZ['BattleCore']['Window_BattleEnemy_initialize']=Window_BattleEnemy['prototype'][_0x23168f(0x8c9)],Window_BattleEnemy[_0x23168f(0xa01)]['initialize']=function(_0x476d84){const _0x2e9f58=_0x23168f;this[_0x2e9f58(0xb51)]=null,VisuMZ[_0x2e9f58(0x895)][_0x2e9f58(0x20a)][_0x2e9f58(0x88f)](this,_0x476d84);if(Imported[_0x2e9f58(0x358)]){if(VisuMZ[_0x2e9f58(0x46c)][_0x2e9f58(0x82e)]<1.12){let _0x198049='';_0x198049+=_0x2e9f58(0x36e),_0x198049+=_0x2e9f58(0x201),_0x198049+='with\x20latest\x20version\x20of\x20VisuMZ_1_BattleCore!',alert(_0x198049),SceneManager[_0x2e9f58(0x46e)]();}}},Window_BattleEnemy['prototype']['maxCols']=function(){const _0xbf6a52=_0x23168f;return this[_0xbf6a52(0xac5)]();},VisuMZ[_0x23168f(0x895)][_0x23168f(0xa3c)]=Window_BattleEnemy['prototype'][_0x23168f(0xaa3)],Window_BattleEnemy[_0x23168f(0xa01)][_0x23168f(0xaa3)]=function(){const _0x4192eb=_0x23168f;VisuMZ['BattleCore'][_0x4192eb(0xa3c)][_0x4192eb(0x88f)](this),this['y']=Graphics[_0x4192eb(0xb1c)]*0xa,this[_0x4192eb(0x4d6)]()&&this[_0x4192eb(0x353)]();},VisuMZ[_0x23168f(0x895)][_0x23168f(0x48a)]=Window_BattleEnemy[_0x23168f(0xa01)][_0x23168f(0x198)],Window_BattleEnemy['prototype'][_0x23168f(0x198)]=function(){const _0x1a5d89=_0x23168f;VisuMZ[_0x1a5d89(0x895)][_0x1a5d89(0x48a)][_0x1a5d89(0x88f)](this),$gameParty[_0x1a5d89(0x3a0)](null),delete this[_0x1a5d89(0x646)][_0x1a5d89(0xbf0)],delete this[_0x1a5d89(0x646)][_0x1a5d89(0x5eb)];},Window_BattleEnemy[_0x23168f(0xa01)]['validTargets']=function(){const _0x4af6c5=_0x23168f;let _0x255627=$gameTroop[_0x4af6c5(0x2a6)]();const _0x27ec37=BattleManager['inputtingAction']();if(_0x27ec37){_0x27ec37[_0x4af6c5(0x584)]()&&_0x255627['length']>0x1&&this[_0x4af6c5(0x838)](_0x4af6c5(0xbf0),this[_0x4af6c5(0x793)][_0x4af6c5(0x7f5)](this));if(_0x27ec37[_0x4af6c5(0x427)]()){const _0x3358d9=$gameParty['aliveMembers']();_0x255627=_0x255627[_0x4af6c5(0x23c)](_0x3358d9),_0x27ec37[_0x4af6c5(0x584)]()&&_0x3358d9['length']>0x1&&this[_0x4af6c5(0x838)](_0x4af6c5(0x5eb),this[_0x4af6c5(0x691)][_0x4af6c5(0x7f5)](this));}}return _0x255627;},Window_BattleEnemy[_0x23168f(0xa01)][_0x23168f(0xa39)]=function(){const _0x4fb6d2=_0x23168f;this[_0x4fb6d2(0x4b7)]=this['validTargets'](),this['sortEnemies'](),Window_Selectable[_0x4fb6d2(0xa01)][_0x4fb6d2(0xa39)]['call'](this);},Window_BattleEnemy[_0x23168f(0xa01)][_0x23168f(0x868)]=function(){const _0x1342af=_0x23168f;this[_0x1342af(0x4b7)]['sort']((_0x4daa2e,_0x362e6e)=>{const _0x13ba3a=_0x1342af;if(_0x4daa2e[_0x13ba3a(0x36b)]()!==_0x362e6e[_0x13ba3a(0x36b)]()){if(_0x4daa2e[_0x13ba3a(0x77b)]())return-0x1;if(_0x362e6e[_0x13ba3a(0x77b)]())return 0x1;}if(_0x4daa2e[_0x13ba3a(0x36b)]()&&_0x362e6e[_0x13ba3a(0x36b)]())return _0x4daa2e[_0x13ba3a(0x216)]()-_0x362e6e[_0x13ba3a(0x216)]();return _0x4daa2e['battler']()[_0x13ba3a(0x9af)]===_0x362e6e['battler']()[_0x13ba3a(0x9af)]?_0x4daa2e[_0x13ba3a(0xbb5)]()[_0x13ba3a(0x489)]-_0x362e6e[_0x13ba3a(0xbb5)]()[_0x13ba3a(0x489)]:_0x4daa2e[_0x13ba3a(0xbb5)]()[_0x13ba3a(0x9af)]-_0x362e6e[_0x13ba3a(0xbb5)]()['_baseX'];}),SceneManager['isBattleFlipped']()&&this[_0x1342af(0x4b7)][_0x1342af(0xac3)]();},Window_BattleEnemy[_0x23168f(0xa01)]['autoSelect']=function(){const _0x384a8c=_0x23168f,_0x1e863c=VisuMZ['BattleCore'][_0x384a8c(0xbac)][_0x384a8c(0xbeb)];_0x1e863c[_0x384a8c(0x585)]?this[_0x384a8c(0x2e2)]():this[_0x384a8c(0x755)]();},Window_BattleEnemy['prototype'][_0x23168f(0x2e2)]=function(){const _0x2f8613=_0x23168f,_0x32c3a6=BattleManager[_0x2f8613(0xaee)]();if(_0x32c3a6&&_0x32c3a6[_0x2f8613(0x427)]()){if(_0x32c3a6['isForAnyoneFocusFriends']()){if(this['_lastActor']&&this[_0x2f8613(0x4b7)][_0x2f8613(0x2d8)](this[_0x2f8613(0x4c1)])){const _0x13daa7=this['_enemies'][_0x2f8613(0xb3c)](this['_lastActor']);return this[_0x2f8613(0x396)](_0x13daa7);}else return this[_0x2f8613(0x755)]();}}if(this[_0x2f8613(0xb51)]&&this[_0x2f8613(0x4b7)][_0x2f8613(0x2d8)](this[_0x2f8613(0xb51)])){const _0x25c427=this['_enemies']['indexOf'](this['_lastEnemy']);this[_0x2f8613(0x396)](_0x25c427);}else this[_0x2f8613(0x755)]();},Window_BattleEnemy['prototype'][_0x23168f(0x755)]=function(){const _0x1216cc=_0x23168f,_0x57b88b=BattleManager[_0x1216cc(0xaee)]();if(_0x57b88b&&_0x57b88b[_0x1216cc(0x427)]()){const _0x234af6=$gameParty['aliveMembers']()[0x0];let _0x5a072c=this[_0x1216cc(0x4b7)][_0x1216cc(0xb3c)](_0x234af6);const _0x39afae=_0x57b88b[_0x1216cc(0x42e)]()[_0x1216cc(0xb4c)];if(_0x39afae[_0x1216cc(0x26e)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i)){this['forceSelect'](_0x5a072c);return;}else{if(_0x39afae[_0x1216cc(0x26e)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i)){this[_0x1216cc(0x396)](_0x5a072c-0x1);return;}}}const _0x1e5159=VisuMZ['BattleCore']['Settings'][_0x1216cc(0xbeb)];let _0x49e82c=![];$gameSystem['isSideView']()?_0x49e82c=_0x1e5159['SideviewSelect']:_0x49e82c=_0x1e5159[_0x1216cc(0x4d4)],this['forceSelect'](_0x49e82c?this[_0x1216cc(0xac5)]()-0x1:0x0);},Window_BattleEnemy[_0x23168f(0xa01)]['callOkHandler']=function(){const _0x4e7e82=_0x23168f;Window_Selectable[_0x4e7e82(0xa01)][_0x4e7e82(0xb3f)]['call'](this);if(!this[_0x4e7e82(0x417)]())return;if(this['enemy']()[_0x4e7e82(0x77b)]())this['_lastEnemy']=this[_0x4e7e82(0x417)]();if(this[_0x4e7e82(0x417)]()[_0x4e7e82(0x36b)]())this[_0x4e7e82(0x4c1)]=this[_0x4e7e82(0x417)]();},Window_BattleEnemy['prototype'][_0x23168f(0x3a0)]=function(_0x5d5a0e){const _0x1cf7f6=_0x23168f;Window_Selectable[_0x1cf7f6(0xa01)][_0x1cf7f6(0x3a0)][_0x1cf7f6(0x88f)](this,_0x5d5a0e),$gameTroop[_0x1cf7f6(0x3a0)](this[_0x1cf7f6(0x417)]()),$gameParty[_0x1cf7f6(0x3a0)](this[_0x1cf7f6(0x417)]());if(!this[_0x1cf7f6(0x417)]())return;if(this[_0x1cf7f6(0x4d6)]()){const _0x16fbc4=SceneManager[_0x1cf7f6(0x23e)][_0x1cf7f6(0x77c)];this[_0x1cf7f6(0x417)]()[_0x1cf7f6(0x36b)]()?_0x16fbc4[_0x1cf7f6(0x3a0)](this[_0x1cf7f6(0x417)]()[_0x1cf7f6(0x216)]()):_0x16fbc4[_0x1cf7f6(0xb20)]();}},Window_BattleEnemy['prototype'][_0x23168f(0x4d6)]=function(){const _0x1e8378=_0x23168f;if(!this[_0x1e8378(0x12e)])return![];if($gameSystem[_0x1e8378(0x18f)]())return![];const _0x122dca=SceneManager[_0x1e8378(0x23e)][_0x1e8378(0x3f3)](),_0x547917=['default',_0x1e8378(0x290),'xp','portrait',_0x1e8378(0x829)];return _0x547917[_0x1e8378(0x2d8)](_0x122dca);},Window_BattleEnemy['prototype'][_0x23168f(0x353)]=function(){const _0x2f9c27=_0x23168f,_0x235611=SceneManager[_0x2f9c27(0x23e)][_0x2f9c27(0x77c)];_0x235611[_0x2f9c27(0xaa3)](),_0x235611[_0x2f9c27(0x82a)](!![]),_0x235611[_0x2f9c27(0xa39)](),_0x235611[_0x2f9c27(0xb20)]();const _0x264b3a=SceneManager[_0x2f9c27(0x23e)]['battleLayoutStyle'](),_0x527411=['xp',_0x2f9c27(0x9e8),_0x2f9c27(0x829)];if(_0x527411['includes'](_0x264b3a)){const _0x4505ac=SceneManager['_scene'][_0x2f9c27(0x1fa)];_0x4505ac[_0x2f9c27(0x145)]['y']=0x0;}},Window_BattleEnemy[_0x23168f(0xa01)][_0x23168f(0x6cc)]=function(){const _0x413a60=_0x23168f,_0x5b292b=SceneManager[_0x413a60(0x23e)][_0x413a60(0x77c)];_0x5b292b[_0x413a60(0x198)](),_0x5b292b[_0x413a60(0x82a)](![]),_0x5b292b[_0x413a60(0xb20)]();const _0x1407a4=SceneManager['_scene'][_0x413a60(0x1fa)];_0x1407a4['scale']['y']=0x1;},Window_BattleEnemy[_0x23168f(0xa01)][_0x23168f(0x793)]=function(){const _0x39bdf5=_0x23168f,_0x1583a8=BattleManager[_0x39bdf5(0xaee)]();if(_0x1583a8)_0x1583a8['setTargetBattlerKey'](_0x39bdf5(0x512));this['processOk']();},Window_BattleEnemy[_0x23168f(0xa01)][_0x23168f(0x691)]=function(){const _0x3a97aa=_0x23168f,_0x48332c=BattleManager[_0x3a97aa(0xaee)]();if(_0x48332c)_0x48332c[_0x3a97aa(0x8c6)](_0x3a97aa(0x7a9));this['processOk']();},Window_BattleEnemy['prototype'][_0x23168f(0x890)]=function(){const _0x4b104a=_0x23168f;return this[_0x4b104a(0x6a5)]();},Window_BattleEnemy[_0x23168f(0xa01)][_0x23168f(0x6a5)]=function(){const _0x24e2e0=_0x23168f,_0xf9c846=BattleManager['inputtingAction']();if(!_0xf9c846)return!![];if(!_0xf9c846[_0x24e2e0(0x42e)]())return!![];const _0x471686=this[_0x24e2e0(0x417)](),_0xebb482=_0xf9c846[_0x24e2e0(0x42e)]()[_0x24e2e0(0xae7)];if(_0xf9c846[_0x24e2e0(0x581)]()){if(_0x471686===BattleManager[_0x24e2e0(0x20c)]())return![];}return!![];},Window_BattleItem[_0x23168f(0xa01)][_0x23168f(0x2d8)]=function(_0x59966a){const _0x1684a0=_0x23168f;if(!_0x59966a)return![];return _0x59966a[_0x1684a0(0x2b3)]===0x0||_0x59966a[_0x1684a0(0x2b3)]===0x1;};function Window_AutoBattleCancel(){const _0x26f238=_0x23168f;this[_0x26f238(0x8c9)](...arguments);}Window_AutoBattleCancel[_0x23168f(0xa01)]=Object[_0x23168f(0x69e)](Window_Base[_0x23168f(0xa01)]),Window_AutoBattleCancel['prototype'][_0x23168f(0xbc5)]=Window_AutoBattleCancel,Window_AutoBattleCancel[_0x23168f(0xa01)]['initialize']=function(_0x9b761f){const _0x11cc68=_0x23168f;Window_Base[_0x11cc68(0xa01)]['initialize'][_0x11cc68(0x88f)](this,_0x9b761f),this['setBackgroundType'](this['bgType']()),this[_0x11cc68(0xa39)]();},Window_AutoBattleCancel[_0x23168f(0xa01)][_0x23168f(0xb31)]=function(){const _0x504609=_0x23168f;return VisuMZ[_0x504609(0x895)][_0x504609(0xbac)]['AutoBattle']['AutoBattleBgType'];},Window_AutoBattleCancel['prototype']['refresh']=function(){const _0x132f33=_0x23168f;this[_0x132f33(0x5c3)][_0x132f33(0x176)]();const _0x3831f6=VisuMZ[_0x132f33(0x895)]['Settings'][_0x132f33(0x771)][_0x132f33(0xbe4)],_0x1f45b9=_0x3831f6[_0x132f33(0x7d3)](this[_0x132f33(0xe6)](),this[_0x132f33(0x513)]()),_0x48db2e=this['textSizeEx'](_0x1f45b9)[_0x132f33(0x2e0)],_0x5a53ce=Math[_0x132f33(0x58e)]((this['innerWidth']-_0x48db2e)/0x2);this[_0x132f33(0x9c5)](_0x1f45b9,_0x5a53ce,0x0,_0x48db2e);},Window_AutoBattleCancel[_0x23168f(0xa01)][_0x23168f(0xe6)]=function(){const _0x53f968=_0x23168f;return Imported[_0x53f968(0x74a)]?TextManager[_0x53f968(0x4c2)]('ok'):VisuMZ['BattleCore'][_0x53f968(0xbac)]['AutoBattle']['AutoBattleOK'];},Window_AutoBattleCancel[_0x23168f(0xa01)][_0x23168f(0x513)]=function(){const _0x58a613=_0x23168f;return Imported[_0x58a613(0x74a)]?TextManager[_0x58a613(0x4c2)](_0x58a613(0x7f1)):VisuMZ['BattleCore'][_0x58a613(0xbac)]['AutoBattle']['AutoBattleCancel'];},Window_AutoBattleCancel[_0x23168f(0xa01)][_0x23168f(0x926)]=function(){const _0x379154=_0x23168f;Window_Base[_0x379154(0xa01)][_0x379154(0x926)][_0x379154(0x88f)](this),this[_0x379154(0x4ee)](),this[_0x379154(0x76d)]();},Window_AutoBattleCancel[_0x23168f(0xa01)][_0x23168f(0x4ee)]=function(){const _0x4e87c7=_0x23168f;this[_0x4e87c7(0x12e)]=BattleManager[_0x4e87c7(0x174)];},Window_AutoBattleCancel[_0x23168f(0xa01)][_0x23168f(0x76d)]=function(){const _0x4f1d1d=_0x23168f;if(!BattleManager[_0x4f1d1d(0x174)])return;(Input['isTriggered']('ok')||Input[_0x4f1d1d(0xaa6)](_0x4f1d1d(0x7f1))||TouchInput[_0x4f1d1d(0x6cf)]()||TouchInput['isCancelled']())&&(SoundManager['playCancel'](),BattleManager['_autoBattle']=![],Input[_0x4f1d1d(0x176)](),TouchInput['clear']());};function Window_EnemyName(){const _0x4ab4ab=_0x23168f;this[_0x4ab4ab(0x8c9)](...arguments);}Window_EnemyName[_0x23168f(0xa01)]=Object[_0x23168f(0x69e)](Window_StatusBase[_0x23168f(0xa01)]),Window_EnemyName[_0x23168f(0xa01)][_0x23168f(0xbc5)]=Window_EnemyName,Window_EnemyName[_0x23168f(0xa01)][_0x23168f(0x8c9)]=function(_0x427c04){const _0xaa4130=_0x23168f;this[_0xaa4130(0x699)]=_0x427c04,this[_0xaa4130(0x1af)]='';const _0x99753a=new Rectangle(0x0,0x0,Graphics[_0xaa4130(0x2d7)],this[_0xaa4130(0x6ad)]()*0x4);Window_StatusBase[_0xaa4130(0xa01)]['initialize'][_0xaa4130(0x88f)](this,_0x99753a),this[_0xaa4130(0x90b)](0x2),this['contentsOpacity']=0x0;},Window_EnemyName['prototype'][_0x23168f(0xbb1)]=function(){this['padding']=0x0;},Window_EnemyName[_0x23168f(0xa01)][_0x23168f(0x417)]=function(){const _0x3ae39b=_0x23168f;return $gameTroop['members']()[this[_0x3ae39b(0x699)]];},Window_EnemyName[_0x23168f(0xa01)][_0x23168f(0x926)]=function(){const _0x3d194f=_0x23168f;Window_StatusBase['prototype'][_0x3d194f(0x926)][_0x3d194f(0x88f)](this),this[_0x3d194f(0x417)]()&&this[_0x3d194f(0x417)]()['name']()!==this[_0x3d194f(0x1af)]&&(this['_text']=this['enemy']()[_0x3d194f(0x611)](),this['refresh']()),this[_0x3d194f(0x84d)](),this[_0x3d194f(0x32b)]();},Window_EnemyName[_0x23168f(0xa01)][_0x23168f(0x84d)]=function(){const _0x586c72=_0x23168f;if(!this[_0x586c72(0x417)]()){if(this[_0x586c72(0x599)]>0x0)this[_0x586c72(0x599)]-=0x10;}else{if(this[_0x586c72(0x417)]()[_0x586c72(0x14e)]()){if(this['contentsOpacity']>0x0)this[_0x586c72(0x599)]-=0x10;}else{if(SceneManager['_scene']['_enemyWindow']&&SceneManager[_0x586c72(0x23e)]['_enemyWindow'][_0x586c72(0x4fc)]&&SceneManager[_0x586c72(0x23e)][_0x586c72(0x24c)][_0x586c72(0x4b7)][_0x586c72(0x2d8)](this[_0x586c72(0x417)]())){if(this['contentsOpacity']<0xff)this['contentsOpacity']+=0x10;}else this[_0x586c72(0x599)]>0x0&&(this[_0x586c72(0x599)]-=0x10);}}},Window_EnemyName[_0x23168f(0xa01)][_0x23168f(0x32b)]=function(){const _0x472c11=_0x23168f;if(!this['enemy']())return;SceneManager[_0x472c11(0x195)]()?this['x']=Graphics['boxWidth']-this[_0x472c11(0x417)]()[_0x472c11(0xbb5)]()[_0x472c11(0x9af)]:this['x']=this['enemy']()[_0x472c11(0xbb5)]()[_0x472c11(0x9af)];this['x']-=Math[_0x472c11(0x1fc)](this[_0x472c11(0x2e0)]/0x2),this['y']=this[_0x472c11(0x417)]()['battler']()[_0x472c11(0x489)]-Math[_0x472c11(0x1fc)](this['lineHeight']()*1.5);const _0x374366=VisuMZ[_0x472c11(0x895)][_0x472c11(0xbac)][_0x472c11(0xbeb)];this['x']+=_0x374366[_0x472c11(0x3dc)]||0x0,this['y']+=_0x374366['NameOffsetY']||0x0;},Window_EnemyName[_0x23168f(0xa01)][_0x23168f(0xa4d)]=function(){const _0x5e2b2c=_0x23168f;Window_Base[_0x5e2b2c(0xa01)]['resetFontSettings'][_0x5e2b2c(0x88f)](this),this[_0x5e2b2c(0x5c3)][_0x5e2b2c(0x64f)]=VisuMZ[_0x5e2b2c(0x895)]['Settings'][_0x5e2b2c(0xbeb)][_0x5e2b2c(0x3ea)];},Window_EnemyName[_0x23168f(0xa01)][_0x23168f(0xa39)]=function(){const _0x3e3f42=_0x23168f;Window_StatusBase['prototype'][_0x3e3f42(0xa39)]['call'](this),this[_0x3e3f42(0x5c3)]['clear']();if(!this[_0x3e3f42(0x417)]())return;this[_0x3e3f42(0x58f)]();},Window_EnemyName[_0x23168f(0xa01)]['drawEnemyName']=function(){const _0x5a9d75=_0x23168f;this[_0x5a9d75(0x1af)]=this[_0x5a9d75(0x417)]()['name']();const _0x1d15da=this[_0x5a9d75(0xab8)](this[_0x5a9d75(0x1af)])[_0x5a9d75(0x2e0)],_0x3317e1=Math[_0x5a9d75(0x1fc)]((this[_0x5a9d75(0xb84)]-_0x1d15da)/0x2);this['drawTextEx'](this[_0x5a9d75(0x1af)],_0x3317e1,0x0,_0x1d15da+0x8);},Window_BattleLog['prototype'][_0x23168f(0xb82)]=function(){const _0x5bc4c8=_0x23168f;return VisuMZ[_0x5bc4c8(0x895)]['Settings'][_0x5bc4c8(0x15b)][_0x5bc4c8(0x6e2)];},Window_BattleLog['prototype'][_0x23168f(0x673)]=function(){const _0x23108a=_0x23168f;return VisuMZ[_0x23108a(0x895)][_0x23108a(0xbac)][_0x23108a(0x15b)][_0x23108a(0x756)];},Window_BattleLog['prototype'][_0x23168f(0x7eb)]=function(){const _0x22aa3f=_0x23168f;return VisuMZ[_0x22aa3f(0x895)][_0x22aa3f(0xbac)][_0x22aa3f(0x15b)][_0x22aa3f(0x41d)];},Window_BattleLog['prototype'][_0x23168f(0x25b)]=function(){return![];},Window_BattleLog['prototype']['actionEffect']=function(_0x26067c,_0x53ccca){const _0x549691=_0x23168f;this['unshift'](_0x549691(0x2bd)),BattleManager[_0x549691(0x32a)](_0x26067c,_0x53ccca),this[_0x549691(0xa5e)]();},Window_BattleLog['prototype'][_0x23168f(0x789)]=function(_0x33873b,_0x2ee2f6,_0x4285a4){this['unshift']('actionSplicePoint'),BattleManager['emulateAction'](_0x33873b,_0x2ee2f6,_0x4285a4),this['callNextMethod']();},Window_BattleLog['prototype'][_0x23168f(0x2bd)]=function(){this['callNextMethod']();},Window_BattleLog[_0x23168f(0xa01)][_0x23168f(0x908)]=function(_0x3a122a){const _0x1dd25e=_0x23168f,_0x12f57b=Array['prototype'][_0x1dd25e(0x760)]['call'](arguments,0x1),_0x34fd46={'name':_0x3a122a,'params':_0x12f57b},_0x4e95c4=this[_0x1dd25e(0x39d)][_0x1dd25e(0x37f)](_0x4be9cf=>_0x4be9cf[_0x1dd25e(0x611)])[_0x1dd25e(0xb3c)]('actionSplicePoint');_0x4e95c4>=0x0?this[_0x1dd25e(0x39d)][_0x1dd25e(0x515)](_0x4e95c4,0x0,_0x34fd46):this[_0x1dd25e(0x39d)][_0x1dd25e(0x908)](_0x34fd46);},Window_BattleLog[_0x23168f(0xa01)][_0x23168f(0xb93)]=function(_0xec9d32){const _0x1b56c5=_0x23168f,_0x1c97b2=Array[_0x1b56c5(0xa01)]['slice'][_0x1b56c5(0x88f)](arguments,0x1);this[_0x1b56c5(0x39d)]['unshift']({'name':_0xec9d32,'params':_0x1c97b2});},Window_BattleLog[_0x23168f(0xa01)][_0x23168f(0x6d0)]=function(){const _0x45a596=_0x23168f;if(!$gameTemp['isPlaytest']())return;console[_0x45a596(0x7dc)](this[_0x45a596(0x39d)]['map'](_0x313354=>_0x313354[_0x45a596(0x611)])[_0x45a596(0x6f0)]('\x0a'));},VisuMZ[_0x23168f(0x895)][_0x23168f(0x7b5)]=Window_BattleLog['prototype'][_0x23168f(0xa39)],Window_BattleLog[_0x23168f(0xa01)][_0x23168f(0xa39)]=function(){const _0x3da96e=_0x23168f;this[_0x3da96e(0xa21)]=!![];},VisuMZ['BattleCore'][_0x23168f(0x76c)]=Window_BattleLog['prototype'][_0x23168f(0x926)],Window_BattleLog['prototype'][_0x23168f(0x926)]=function(){const _0x3743f9=_0x23168f;VisuMZ[_0x3743f9(0x895)][_0x3743f9(0x76c)][_0x3743f9(0x88f)](this);if(this[_0x3743f9(0xa21)])this[_0x3743f9(0xa41)]();},Window_BattleLog[_0x23168f(0xa01)][_0x23168f(0xa41)]=function(){const _0x195bd6=_0x23168f;this['_requestRefresh']=![],VisuMZ[_0x195bd6(0x895)]['Window_BattleLog_refresh'][_0x195bd6(0x88f)](this);},Window_BattleLog[_0x23168f(0xa01)][_0x23168f(0x52a)]=function(_0x17ce6b){const _0x579e75=_0x23168f;let _0x5f476c=VisuMZ['BattleCore'][_0x579e75(0xbac)][_0x579e75(0x15b)]['TextAlign']['toLowerCase']()[_0x579e75(0xf4)](),_0x28a5e7=this[_0x579e75(0x45c)][_0x17ce6b];if(_0x28a5e7[_0x579e75(0x26e)](/<LEFT>/i))_0x5f476c=_0x579e75(0xb07);else{if(_0x28a5e7[_0x579e75(0x26e)](/<CENTER>/i))_0x5f476c=_0x579e75(0x283);else _0x28a5e7[_0x579e75(0x26e)](/<RIGHT>/i)&&(_0x5f476c=_0x579e75(0x945));}_0x28a5e7=_0x28a5e7[_0x579e75(0x5c0)](/<(?:LEFT|CENTER|RIGHT)>/gi,''),_0x28a5e7=_0x28a5e7['replace'](/\\I\[0\]/gi,'');const _0x25d6b2=this[_0x579e75(0x836)](_0x17ce6b);this['contents']['clearRect'](_0x25d6b2['x'],_0x25d6b2['y'],_0x25d6b2[_0x579e75(0x2e0)],_0x25d6b2[_0x579e75(0xb1c)]);const _0x1e97b8=this[_0x579e75(0xab8)](_0x28a5e7)[_0x579e75(0x2e0)];let _0x332859=_0x25d6b2['x'];if(_0x5f476c===_0x579e75(0x283))_0x332859+=(_0x25d6b2['width']-_0x1e97b8)/0x2;else _0x5f476c===_0x579e75(0x945)&&(_0x332859+=_0x25d6b2[_0x579e75(0x2e0)]-_0x1e97b8);this[_0x579e75(0x9c5)](_0x28a5e7,_0x332859,_0x25d6b2['y'],_0x1e97b8+0x8);},Window_BattleLog[_0x23168f(0xa01)]['addText']=function(_0x3d0d55){const _0x44083d=_0x23168f;this['_lines'][_0x44083d(0x908)](_0x3d0d55),this[_0x44083d(0xa39)](),this[_0x44083d(0xa5e)]();},Window_BattleLog[_0x23168f(0xa01)]['updateWaitMode']=function(){const _0x3e1dd2=_0x23168f;let _0x347997=![];switch(this[_0x3e1dd2(0x15e)]){case _0x3e1dd2(0xaae):_0x347997=this['_spriteset'][_0x3e1dd2(0xa9c)]();break;case _0x3e1dd2(0x9c6):_0x347997=this[_0x3e1dd2(0xa73)][_0x3e1dd2(0xa3a)]();break;case'animation':_0x347997=this[_0x3e1dd2(0xa73)]['isAnimationPlaying']();break;case _0x3e1dd2(0x54e):_0x347997=this[_0x3e1dd2(0xa73)][_0x3e1dd2(0x4f2)]();break;case _0x3e1dd2(0x22c):_0x347997=this['_spriteset'][_0x3e1dd2(0xb7)]();break;case _0x3e1dd2(0x798):_0x347997=this[_0x3e1dd2(0xa73)][_0x3e1dd2(0x533)]();break;}return!_0x347997&&(this[_0x3e1dd2(0x15e)]=''),_0x347997;},Window_BattleLog['prototype'][_0x23168f(0x273)]=function(){const _0x59734f=_0x23168f;this[_0x59734f(0x351)](_0x59734f(0x73c));},Window_BattleLog[_0x23168f(0xa01)][_0x23168f(0xa08)]=function(){const _0x1259cf=_0x23168f;this[_0x1259cf(0x351)](_0x1259cf(0x54e));},Window_BattleLog['prototype'][_0x23168f(0x7ec)]=function(){const _0x59de78=_0x23168f;this[_0x59de78(0x351)](_0x59de78(0x22c));},Window_BattleLog[_0x23168f(0xa01)][_0x23168f(0x1a0)]=function(){const _0x548597=_0x23168f;this[_0x548597(0x351)](_0x548597(0x798));},Window_BattleLog[_0x23168f(0xa01)]['startTurn']=function(){const _0x4fe33f=_0x23168f,_0x5dc061=VisuMZ[_0x4fe33f(0x895)][_0x4fe33f(0xbac)][_0x4fe33f(0x15b)];if(!_0x5dc061[_0x4fe33f(0x6fc)])return;this[_0x4fe33f(0x908)](_0x4fe33f(0x86c),_0x5dc061[_0x4fe33f(0x801)][_0x4fe33f(0x7d3)]($gameTroop[_0x4fe33f(0xaf1)]())),this[_0x4fe33f(0x908)](_0x4fe33f(0x13b),_0x5dc061[_0x4fe33f(0xa8a)]),this[_0x4fe33f(0x908)]('clear');};var $subject,$action,$targets;Window_BattleLog[_0x23168f(0xa01)][_0x23168f(0xbb8)]=function(_0x4d4590,_0x25250a,_0x422425){const _0x60a79e=_0x23168f;$subject=_0x4d4590,$action=_0x25250a,$targets=_0x422425,this[_0x60a79e(0x3be)](_0x25250a)?BattleManager[_0x60a79e(0x1a1)]():this[_0x60a79e(0x696)](_0x4d4590,_0x25250a,_0x422425);},Window_BattleLog[_0x23168f(0xa01)][_0x23168f(0x3be)]=function(_0x2297c0){const _0x37f402=_0x23168f;if(!SceneManager['isSceneBattle']())return![];if(!_0x2297c0)return![];if(!_0x2297c0[_0x37f402(0x42e)]())return![];if(_0x2297c0[_0x37f402(0x42e)]()['note'][_0x37f402(0x26e)](/<CUSTOM ACTION SEQUENCE>/i))return!![];if(DataManager[_0x37f402(0x501)](_0x2297c0[_0x37f402(0x42e)]()))return!![];return![];},Window_BattleLog['prototype'][_0x23168f(0x696)]=function(_0x168778,_0x8cb1e0,_0x3f6221){const _0xa94660=_0x23168f;this[_0xa94660(0x436)](_0x168778,_0x8cb1e0,_0x3f6221),this[_0xa94660(0x809)](_0x168778,_0x8cb1e0,_0x3f6221),this[_0xa94660(0x894)](_0x168778,_0x8cb1e0,_0x3f6221);},Window_BattleLog['prototype'][_0x23168f(0x51c)]=function(_0x56dda0,_0x2122f8){const _0x164fd5=_0x23168f,_0x3d58a0=VisuMZ[_0x164fd5(0x895)]['Settings'][_0x164fd5(0x15b)];_0x3d58a0[_0x164fd5(0x1ae)]&&this[_0x164fd5(0x908)]('addText',_0x164fd5(0xabd)['format'](DataManager['battleDisplayText'](_0x2122f8)));if(DataManager['isSkill'](_0x2122f8)){if(_0x3d58a0[_0x164fd5(0x6f3)])this[_0x164fd5(0x480)](_0x2122f8[_0x164fd5(0xbe6)],_0x56dda0,_0x2122f8);if(_0x3d58a0[_0x164fd5(0x420)])this[_0x164fd5(0x480)](_0x2122f8[_0x164fd5(0x41a)],_0x56dda0,_0x2122f8);}else{if(_0x3d58a0[_0x164fd5(0x3ed)])this[_0x164fd5(0x480)](TextManager[_0x164fd5(0x7cc)],_0x56dda0,_0x2122f8);}},Window_BattleLog[_0x23168f(0xa01)][_0x23168f(0x436)]=function(_0x260cab,_0x2a84bc,_0x39b5f2){const _0x4ce865=_0x23168f,_0x49ce00=_0x2a84bc[_0x4ce865(0x42e)]();this[_0x4ce865(0x51c)](_0x260cab,_0x49ce00),this[_0x4ce865(0x908)]('applyImmortal',_0x260cab,_0x39b5f2,!![]),this[_0x4ce865(0x908)](_0x4ce865(0xb9a),_0x260cab,_0x2a84bc),this['push'](_0x4ce865(0xac7)),this[_0x4ce865(0x908)](_0x4ce865(0x5e6),_0x260cab,_0x2a84bc),this['push'](_0x4ce865(0x273));},Window_BattleLog['prototype'][_0x23168f(0x809)]=function(_0x20100e,_0x22f3fa,_0x127566){const _0x52685b=_0x23168f;if(this[_0x52685b(0x442)](_0x22f3fa))this[_0x52685b(0xa60)](_0x20100e,_0x22f3fa,_0x127566);else{if(this[_0x52685b(0x506)](_0x22f3fa))this['autoMeleeMultiTargetActionSet'](_0x20100e,_0x22f3fa,_0x127566);else _0x22f3fa[_0x52685b(0x9be)]()?this['targetActionSet'](_0x20100e,_0x22f3fa,_0x127566):this[_0x52685b(0x9d6)](_0x20100e,_0x22f3fa,_0x127566);}},Window_BattleLog[_0x23168f(0xa01)]['addMeleeReturnActionSet']=function(_0xbcf08d,_0x4b0fd4,_0x59516d,_0x374134){const _0x2253f7=_0x23168f;if(_0x4b0fd4){const _0x15fb5f=_0xbcf08d[_0x2253f7(0xbb5)]();this[_0x2253f7(0x908)](_0x2253f7(0x5f4),[_0xbcf08d],_0x59516d,_0x374134),this[_0x2253f7(0x908)](_0x2253f7(0x8ea),_0xbcf08d,_0x15fb5f[_0x2253f7(0x1c6)],_0x15fb5f[_0x2253f7(0x22d)],_0x374134,![],_0x2253f7(0xa7f)),this['push']('requestMotion',[_0xbcf08d],_0x2253f7(0xb0a)),this[_0x2253f7(0x908)](_0x2253f7(0xac7)),this[_0x2253f7(0x908)](_0x2253f7(0x67a),[_0xbcf08d],_0x2253f7(0x472));}},Window_BattleLog[_0x23168f(0xa01)][_0x23168f(0x442)]=function(_0x13c6ad){const _0x566d20=_0x23168f;if(!_0x13c6ad[_0x566d20(0x64b)]())return![];if(!_0x13c6ad[_0x566d20(0x83b)]())return![];if(!_0x13c6ad[_0x566d20(0x951)]())return![];return VisuMZ[_0x566d20(0x895)][_0x566d20(0xbac)]['ActionSequence'][_0x566d20(0x715)];},Window_BattleLog[_0x23168f(0xa01)][_0x23168f(0xa60)]=function(_0x4b9990,_0x2415db,_0x3ba123){const _0x484385=_0x23168f,_0x5b2afc=_0x4b9990[_0x484385(0x79f)]()[_0x484385(0x158)]<0x2,_0xcc56ed=0x14,_0xe8f5bb=0x30;let _0xf7d84=!![];_0x3ba123[_0x484385(0x312)]>0x0&&_0x4b9990[_0x484385(0x36b)]()===_0x3ba123[0x0][_0x484385(0x36b)]()&&(_0xf7d84=![]);_0x5b2afc&&_0xf7d84&&(this[_0x484385(0x908)]('performJump',[_0x4b9990],_0xe8f5bb,_0xcc56ed),this[_0x484385(0x908)](_0x484385(0x57a),_0x4b9990,_0x3ba123,_0x484385(0x8b5),_0xcc56ed,!![],_0x484385(0xa7f),!![]),this['push']('requestMotion',[_0x4b9990],'walk'),this['push'](_0x484385(0xac7)));let _0x2b2eff=_0x2415db[_0x484385(0xa37)]()?this['getDualWieldTimes'](_0x4b9990):0x1;for(let _0x4a2c33=0x0;_0x4a2c33<_0x2b2eff;_0x4a2c33++){_0x2415db[_0x484385(0xa37)]()&&_0x4b9990[_0x484385(0x36b)]()&&this[_0x484385(0x908)]('setActiveWeaponSet',_0x4b9990,_0x4a2c33),_0x2415db[_0x484385(0x42e)]()[_0x484385(0x6b8)]<0x0?this[_0x484385(0xb30)](_0x4b9990,_0x2415db,_0x3ba123):this[_0x484385(0x9d6)](_0x4b9990,_0x2415db,_0x3ba123);}_0x2415db[_0x484385(0xa37)]()&&_0x4b9990[_0x484385(0x36b)]()&&this['push'](_0x484385(0x8c3),_0x4b9990),this[_0x484385(0x908)](_0x484385(0x940),_0x4b9990,_0x3ba123,![]),this[_0x484385(0x108)](_0x4b9990,_0x5b2afc,_0xe8f5bb,_0xcc56ed);},Window_BattleLog[_0x23168f(0xa01)][_0x23168f(0x506)]=function(_0x23f1f8){const _0x311c0b=_0x23168f;if(!_0x23f1f8[_0x311c0b(0x64b)]())return![];if(!_0x23f1f8[_0x311c0b(0x7e6)]())return![];if(!_0x23f1f8[_0x311c0b(0x951)]())return![];return VisuMZ[_0x311c0b(0x895)][_0x311c0b(0xbac)]['ActionSequence']['AutoMeleeAoE'];},Window_BattleLog[_0x23168f(0xa01)][_0x23168f(0xb9b)]=function(_0xba3780,_0x4260d7,_0x2bf33d){const _0x2760a1=_0x23168f,_0xaf3898=_0xba3780[_0x2760a1(0x79f)]()['type']<0x2,_0x3d79a5=0x14,_0x19fa1f=0x30;if(_0xaf3898){this[_0x2760a1(0x908)](_0x2760a1(0x5f4),[_0xba3780],_0x19fa1f,_0x3d79a5);const _0x3e519a=_0x2bf33d[_0x2760a1(0x312)]>0x1?_0x2760a1(0x3b0):_0x2760a1(0x8b5);this['push'](_0x2760a1(0x57a),_0xba3780,_0x2bf33d,_0x3e519a,_0x3d79a5,!![],_0x2760a1(0xa7f),!![]),this[_0x2760a1(0x908)](_0x2760a1(0x67a),[_0xba3780],'walk'),this[_0x2760a1(0x908)](_0x2760a1(0xac7));}let _0x40d46d=_0x4260d7[_0x2760a1(0xa37)]()?this[_0x2760a1(0x7cb)](_0xba3780):0x1;for(let _0x444f54=0x0;_0x444f54<_0x40d46d;_0x444f54++){_0x4260d7[_0x2760a1(0xa37)]()&&_0xba3780[_0x2760a1(0x36b)]()&&this[_0x2760a1(0x908)](_0x2760a1(0x7df),_0xba3780,_0x444f54),this['wholeActionSet'](_0xba3780,_0x4260d7,_0x2bf33d);}_0x4260d7[_0x2760a1(0xa37)]()&&_0xba3780[_0x2760a1(0x36b)]()&&this['push'](_0x2760a1(0x8c3),_0xba3780),this[_0x2760a1(0x908)](_0x2760a1(0x940),_0xba3780,_0x2bf33d,![]),this[_0x2760a1(0x108)](_0xba3780,_0xaf3898,_0x19fa1f,_0x3d79a5);},Window_BattleLog[_0x23168f(0xa01)][_0x23168f(0xb30)]=function(_0x1b43e9,_0x5c5150,_0x48a071){const _0x515f2b=_0x23168f,_0x483152=_0x5c5150[_0x515f2b(0x42e)]();for(const _0x34b3ab of _0x48a071){if(!_0x34b3ab)continue;this[_0x515f2b(0x908)](_0x515f2b(0xb80),_0x1b43e9,_0x5c5150),this['push']('waitCount',Sprite_Battler['_motionSpeed']),this['push']('showAnimation',_0x1b43e9,[_0x34b3ab],_0x483152[_0x515f2b(0x6b8)]),this[_0x515f2b(0x908)]('waitCount',0x18),this[_0x515f2b(0x908)](_0x515f2b(0x2b7),_0x1b43e9,_0x34b3ab);}},Window_BattleLog[_0x23168f(0xa01)][_0x23168f(0x9d6)]=function(_0x49ca09,_0x9e0cd0,_0x54cade){const _0x246f44=_0x23168f,_0x51bbe6=_0x9e0cd0[_0x246f44(0x42e)]();let _0x9b37d=_0x9e0cd0[_0x246f44(0xa37)]()?0x1+_0x49ca09['attackTimesAdd']():0x1;while(_0x9b37d--){this[_0x246f44(0x908)](_0x246f44(0xb80),_0x49ca09,_0x9e0cd0),this[_0x246f44(0x908)]('waitCount',Sprite_Battler['_motionSpeed']),this[_0x246f44(0x908)](_0x246f44(0x7f7),_0x49ca09,_0x54cade[_0x246f44(0x42a)](),_0x51bbe6[_0x246f44(0x6b8)]),this[_0x246f44(0x908)](_0x246f44(0x273));}for(const _0x4745a8 of _0x54cade){if(!_0x4745a8)continue;this['push']('actionEffect',_0x49ca09,_0x4745a8);}},Window_BattleLog['prototype'][_0x23168f(0x894)]=function(_0x284b76,_0x23470b,_0x1c9f99){const _0x569cee=_0x23168f,_0x53a6b5=_0x23470b[_0x569cee(0x42e)]();this[_0x569cee(0x908)](_0x569cee(0x940),_0x284b76,_0x1c9f99,![]),this[_0x569cee(0x908)](_0x569cee(0x547)),this[_0x569cee(0x908)](_0x569cee(0x31a)),this['push']('clear'),this[_0x569cee(0x908)]('performActionEnd',_0x284b76),this[_0x569cee(0x908)](_0x569cee(0xac7));},Window_BattleLog[_0x23168f(0xa01)]['endAction']=function(_0x17d292){$subject=null,$action=null,$targets=[];},VisuMZ['BattleCore'][_0x23168f(0x93a)]=Window_BattleLog['prototype'][_0x23168f(0x7fe)],Window_BattleLog[_0x23168f(0xa01)]['displayCurrentState']=function(_0x149a59){const _0xbf389b=_0x23168f;if(!VisuMZ[_0xbf389b(0x895)][_0xbf389b(0xbac)][_0xbf389b(0x15b)][_0xbf389b(0xb0d)])return;VisuMZ[_0xbf389b(0x895)][_0xbf389b(0x93a)][_0xbf389b(0x88f)](this,_0x149a59);},Window_BattleLog[_0x23168f(0xa01)][_0x23168f(0x476)]=function(_0xe06463){const _0x5950ac=_0x23168f;this[_0x5950ac(0x908)]('performCounter',_0xe06463);VisuMZ[_0x5950ac(0x895)][_0x5950ac(0xbac)][_0x5950ac(0x8d2)][_0x5950ac(0xa7e)]&&this[_0x5950ac(0x908)]('showAnimation',_0xe06463,[BattleManager[_0x5950ac(0x530)]],-0x1);if(!VisuMZ['BattleCore'][_0x5950ac(0xbac)][_0x5950ac(0x15b)][_0x5950ac(0x5a1)])return;this['push']('addText',TextManager[_0x5950ac(0x877)][_0x5950ac(0x7d3)](_0xe06463[_0x5950ac(0x611)]()));const _0x49f7b5=VisuMZ[_0x5950ac(0x895)]['Settings'][_0x5950ac(0x15b)][_0x5950ac(0x2e4)]??0x0;if(_0x49f7b5>0x0)this[_0x5950ac(0x908)](_0x5950ac(0x13b),_0x49f7b5);;},Window_BattleLog[_0x23168f(0xa01)][_0x23168f(0x54a)]=function(_0x416c97){const _0x547352=_0x23168f;this[_0x547352(0x908)]('performReflection',_0x416c97);if(!VisuMZ[_0x547352(0x895)][_0x547352(0xbac)][_0x547352(0x15b)][_0x547352(0x11c)])return;this[_0x547352(0x908)](_0x547352(0x86c),TextManager[_0x547352(0x29b)][_0x547352(0x7d3)](_0x416c97[_0x547352(0x611)]()));const _0x39625c=VisuMZ[_0x547352(0x895)][_0x547352(0xbac)][_0x547352(0x15b)][_0x547352(0x180)]??0x0;if(_0x39625c>0x0)this[_0x547352(0x908)](_0x547352(0x13b),_0x39625c);;},Window_BattleLog[_0x23168f(0xa01)]['displayReflectionPlayBack']=function(_0x3e3320,_0x37239d){const _0x56d7d7=_0x23168f;if(VisuMZ[_0x56d7d7(0x895)][_0x56d7d7(0xbac)]['ActionSequence'][_0x56d7d7(0x666)]){const _0x2f7724=_0x37239d[_0x56d7d7(0x42e)]();this[_0x56d7d7(0x908)](_0x56d7d7(0x7f7),_0x3e3320,[_0x3e3320],_0x2f7724['animationId']);}},Window_BattleLog['prototype'][_0x23168f(0xb2b)]=function(_0x380005,_0x1401f8){const _0x4efd81=_0x23168f;this[_0x4efd81(0x908)](_0x4efd81(0x4a5),_0x380005,_0x1401f8);if(!VisuMZ[_0x4efd81(0x895)][_0x4efd81(0xbac)][_0x4efd81(0x15b)][_0x4efd81(0x1b5)])return;const _0x29bc95=_0x380005[_0x4efd81(0x611)](),_0xc65905=TextManager[_0x4efd81(0x796)][_0x4efd81(0x7d3)](_0x29bc95,_0x1401f8[_0x4efd81(0x611)]());this[_0x4efd81(0x908)](_0x4efd81(0x86c),_0xc65905);const _0xdd0d58=VisuMZ[_0x4efd81(0x895)][_0x4efd81(0xbac)][_0x4efd81(0x15b)][_0x4efd81(0x10b)]??0x0;if(_0xdd0d58>0x0)this[_0x4efd81(0x908)]('waitCount',_0xdd0d58);;},VisuMZ['BattleCore'][_0x23168f(0xb67)]=Window_BattleLog[_0x23168f(0xa01)][_0x23168f(0x50a)],Window_BattleLog[_0x23168f(0xa01)][_0x23168f(0x50a)]=function(_0x1d45ee,_0x3c439b){const _0x48655e=_0x23168f;VisuMZ['BattleCore'][_0x48655e(0xb67)][_0x48655e(0x88f)](this,_0x1d45ee,_0x3c439b);},VisuMZ[_0x23168f(0x895)][_0x23168f(0x219)]=Window_BattleLog[_0x23168f(0xa01)]['displayFailure'],Window_BattleLog[_0x23168f(0xa01)][_0x23168f(0x348)]=function(_0x14695f){const _0x402193=_0x23168f;if(!VisuMZ[_0x402193(0x895)]['Settings']['BattleLog'][_0x402193(0x6d1)])return;VisuMZ[_0x402193(0x895)][_0x402193(0x219)][_0x402193(0x88f)](this,_0x14695f);},VisuMZ[_0x23168f(0x895)]['Window_BattleLog_displayCritical']=Window_BattleLog[_0x23168f(0xa01)]['displayCritical'],Window_BattleLog[_0x23168f(0xa01)][_0x23168f(0x404)]=function(_0x5d203b){const _0x5bcb7b=_0x23168f;if(!VisuMZ[_0x5bcb7b(0x895)][_0x5bcb7b(0xbac)]['BattleLog'][_0x5bcb7b(0x7d5)])return;VisuMZ['BattleCore']['Window_BattleLog_displayCritical'][_0x5bcb7b(0x88f)](this,_0x5d203b);},VisuMZ['BattleCore'][_0x23168f(0x703)]=Window_BattleLog[_0x23168f(0xa01)][_0x23168f(0x34a)],Window_BattleLog[_0x23168f(0xa01)][_0x23168f(0x34a)]=function(_0x3da78e){const _0x387821=_0x23168f;!VisuMZ['BattleCore'][_0x387821(0xbac)][_0x387821(0x15b)][_0x387821(0xa10)]?this[_0x387821(0x908)]('performMiss',_0x3da78e):VisuMZ[_0x387821(0x895)][_0x387821(0x703)][_0x387821(0x88f)](this,_0x3da78e);},VisuMZ['BattleCore'][_0x23168f(0x6fe)]=Window_BattleLog['prototype'][_0x23168f(0x2ff)],Window_BattleLog[_0x23168f(0xa01)][_0x23168f(0x2ff)]=function(_0x3100b5){const _0x482bf0=_0x23168f;!VisuMZ[_0x482bf0(0x895)][_0x482bf0(0xbac)]['BattleLog'][_0x482bf0(0xa10)]?_0x3100b5[_0x482bf0(0x759)]()['physical']?this[_0x482bf0(0x908)](_0x482bf0(0x8c4),_0x3100b5):this['push'](_0x482bf0(0x2aa),_0x3100b5):VisuMZ[_0x482bf0(0x895)][_0x482bf0(0x6fe)][_0x482bf0(0x88f)](this,_0x3100b5);},Window_BattleLog[_0x23168f(0xa01)][_0x23168f(0x5e4)]=function(_0x212f7e){const _0x356355=_0x23168f;_0x212f7e[_0x356355(0x759)]()[_0x356355(0x1e0)]&&(_0x212f7e[_0x356355(0x57d)]=0x0,_0x212f7e[_0x356355(0x759)]()['hpDamage']>0x0&&!_0x212f7e[_0x356355(0x759)]()['drain']&&(_0x212f7e['_lastHpDamage']=_0x212f7e[_0x356355(0x759)]()['hpDamage'],this['push'](_0x356355(0x335),_0x212f7e)),_0x212f7e[_0x356355(0x759)]()[_0x356355(0x187)]<0x0&&this['push']('performRecovery',_0x212f7e),VisuMZ[_0x356355(0x895)][_0x356355(0xbac)][_0x356355(0x15b)][_0x356355(0x118)]&&this[_0x356355(0x908)](_0x356355(0x86c),this['makeHpDamageText'](_0x212f7e)));},VisuMZ[_0x23168f(0x895)]['Window_BattleLog_displayMpDamage']=Window_BattleLog['prototype']['displayMpDamage'],Window_BattleLog[_0x23168f(0xa01)][_0x23168f(0x9f6)]=function(_0x41bfcc){const _0x198006=_0x23168f;if(!VisuMZ['BattleCore'][_0x198006(0xbac)][_0x198006(0x15b)][_0x198006(0xa8b)])return;VisuMZ['BattleCore'][_0x198006(0x75b)][_0x198006(0x88f)](this,_0x41bfcc);},VisuMZ[_0x23168f(0x895)][_0x23168f(0x816)]=Window_BattleLog['prototype']['displayTpDamage'],Window_BattleLog[_0x23168f(0xa01)][_0x23168f(0x1a6)]=function(_0x49099f){const _0x4f2c90=_0x23168f;if(!VisuMZ[_0x4f2c90(0x895)]['Settings'][_0x4f2c90(0x15b)][_0x4f2c90(0xafe)])return;VisuMZ[_0x4f2c90(0x895)][_0x4f2c90(0x816)][_0x4f2c90(0x88f)](this,_0x49099f);},Window_BattleLog[_0x23168f(0xa01)][_0x23168f(0x4f6)]=function(_0x3b0787){const _0x260d4b=_0x23168f;_0x3b0787[_0x260d4b(0x759)]()[_0x260d4b(0xce)]()&&(this[_0x260d4b(0x908)](_0x260d4b(0x928)),this['displayChangedStates'](_0x3b0787),this['displayChangedBuffs'](_0x3b0787),this['push']('waitForNewLine'));},Window_BattleLog['prototype'][_0x23168f(0x626)]=function(_0x4dce50){const _0x4ab689=_0x23168f,_0x47b6fd=_0x4dce50[_0x4ab689(0x759)](),_0x338734=_0x47b6fd['addedStateObjects']();for(const _0x1b397b of _0x338734){const _0x215789=_0x4dce50[_0x4ab689(0x36b)]()?_0x1b397b['message1']:_0x1b397b[_0x4ab689(0x41a)];_0x215789&&VisuMZ[_0x4ab689(0x895)]['Settings'][_0x4ab689(0x15b)][_0x4ab689(0x44e)]&&(this[_0x4ab689(0x908)](_0x4ab689(0x452)),this[_0x4ab689(0x908)]('pushBaseLine'),this['push'](_0x4ab689(0x86c),_0x215789[_0x4ab689(0x7d3)](_0x4dce50['name']())),this[_0x4ab689(0x908)]('wait')),_0x1b397b['id']===_0x4dce50[_0x4ab689(0x915)]()&&this[_0x4ab689(0x908)](_0x4ab689(0x5dd),_0x4dce50);}},Window_BattleLog[_0x23168f(0xa01)][_0x23168f(0x8ab)]=function(_0xc68596){const _0x191f3e=_0x23168f;if(!VisuMZ[_0x191f3e(0x895)]['Settings'][_0x191f3e(0x15b)][_0x191f3e(0xb79)])return;const _0x1b3244=_0xc68596[_0x191f3e(0x759)](),_0x346cc8=_0x1b3244[_0x191f3e(0xb74)]();for(const _0x111e53 of _0x346cc8){_0x111e53[_0x191f3e(0x896)]&&(this[_0x191f3e(0x908)](_0x191f3e(0x452)),this[_0x191f3e(0x908)](_0x191f3e(0x928)),this[_0x191f3e(0x908)](_0x191f3e(0x86c),_0x111e53[_0x191f3e(0x896)][_0x191f3e(0x7d3)](_0xc68596[_0x191f3e(0x611)]())),this[_0x191f3e(0x908)](_0x191f3e(0x707)));}},Window_BattleLog[_0x23168f(0xa01)][_0x23168f(0x775)]=function(_0xcda6ae){const _0x43d0bc=_0x23168f,_0x1c6a84=VisuMZ[_0x43d0bc(0x895)][_0x43d0bc(0xbac)][_0x43d0bc(0x15b)],_0x44d813=_0xcda6ae[_0x43d0bc(0x759)]();if(_0x1c6a84[_0x43d0bc(0xbe2)])this[_0x43d0bc(0x35a)](_0xcda6ae,_0x44d813[_0x43d0bc(0x34e)],TextManager[_0x43d0bc(0xaa9)]);if(_0x1c6a84[_0x43d0bc(0xba0)])this['displayBuffs'](_0xcda6ae,_0x44d813['addedDebuffs'],TextManager['debuffAdd']);if(_0x1c6a84[_0x43d0bc(0x37c)])this[_0x43d0bc(0x35a)](_0xcda6ae,_0x44d813[_0x43d0bc(0x949)],TextManager[_0x43d0bc(0xa0d)]);},Window_BattleLog[_0x23168f(0xa01)][_0x23168f(0x35a)]=function(_0x232e6f,_0x3ef9ac,_0x5b16ab){const _0x29410e=_0x23168f;for(const _0x6edc06 of _0x3ef9ac){const _0x44df90=_0x5b16ab[_0x29410e(0x7d3)](_0x232e6f[_0x29410e(0x611)](),TextManager[_0x29410e(0xa2b)](_0x6edc06));this['push'](_0x29410e(0x452)),this[_0x29410e(0x908)]('pushBaseLine'),this['push'](_0x29410e(0x86c),_0x44df90),this[_0x29410e(0x908)](_0x29410e(0x707));}},VisuMZ['BattleCore'][_0x23168f(0xae6)]=Window_BattleLog[_0x23168f(0xa01)][_0x23168f(0x176)],Window_BattleLog['prototype'][_0x23168f(0x176)]=function(){const _0x28d950=_0x23168f;VisuMZ['BattleCore'][_0x28d950(0xae6)]['call'](this),this[_0x28d950(0xa5e)]();},VisuMZ[_0x23168f(0x895)][_0x23168f(0x45f)]=Window_BattleLog['prototype'][_0x23168f(0x928)],Window_BattleLog['prototype']['pushBaseLine']=function(){const _0xf6f821=_0x23168f;VisuMZ['BattleCore'][_0xf6f821(0x45f)][_0xf6f821(0x88f)](this),this['callNextMethod']();},VisuMZ[_0x23168f(0x895)]['Window_BattleLog_popBaseLine']=Window_BattleLog[_0x23168f(0xa01)][_0x23168f(0x452)],Window_BattleLog[_0x23168f(0xa01)][_0x23168f(0x452)]=function(){const _0x556c0f=_0x23168f;VisuMZ[_0x556c0f(0x895)]['Window_BattleLog_popBaseLine'][_0x556c0f(0x88f)](this),this[_0x556c0f(0xa41)](),this[_0x556c0f(0xa5e)]();},VisuMZ[_0x23168f(0x895)][_0x23168f(0x48d)]=Window_BattleLog['prototype'][_0x23168f(0x47e)],Window_BattleLog[_0x23168f(0xa01)][_0x23168f(0x47e)]=function(_0x222ce0){const _0x4ec892=_0x23168f;VisuMZ[_0x4ec892(0x895)]['Window_BattleLog_popupDamage'][_0x4ec892(0x88f)](this,_0x222ce0),this[_0x4ec892(0xa5e)]();},Window_BattleLog[_0x23168f(0xa01)][_0x23168f(0x547)]=function(){const _0xbbc3b3=_0x23168f;let _0x10c093=0x0;this[_0xbbc3b3(0x31b)][_0xbbc3b3(0x312)]>0x0&&(_0x10c093=this[_0xbbc3b3(0x31b)][this['_baseLineStack'][_0xbbc3b3(0x312)]-0x1]),this['_lines'][_0xbbc3b3(0x312)]>_0x10c093?this['wait']():this[_0xbbc3b3(0xa5e)]();},VisuMZ[_0x23168f(0x895)]['Window_BattleLog_performActionStart']=Window_BattleLog[_0x23168f(0xa01)][_0x23168f(0xb9a)],Window_BattleLog[_0x23168f(0xa01)][_0x23168f(0xb9a)]=function(_0x815a0,_0x4259d0){const _0x15bfc3=_0x23168f;VisuMZ[_0x15bfc3(0x895)][_0x15bfc3(0xb78)][_0x15bfc3(0x88f)](this,_0x815a0,_0x4259d0),this[_0x15bfc3(0xa5e)]();},VisuMZ[_0x23168f(0x895)]['Window_BattleLog_performAction']=Window_BattleLog[_0x23168f(0xa01)]['performAction'],Window_BattleLog[_0x23168f(0xa01)][_0x23168f(0xb80)]=function(_0x4103cb,_0x57d63a){const _0x34f79d=_0x23168f;VisuMZ[_0x34f79d(0x895)][_0x34f79d(0x169)][_0x34f79d(0x88f)](this,_0x4103cb,_0x57d63a),this[_0x34f79d(0xa5e)]();},VisuMZ[_0x23168f(0x895)]['Window_BattleLog_performActionEnd']=Window_BattleLog[_0x23168f(0xa01)]['performActionEnd'],Window_BattleLog['prototype']['performActionEnd']=function(_0x3dc4be){const _0x11fc34=_0x23168f;VisuMZ['BattleCore'][_0x11fc34(0xaca)][_0x11fc34(0x88f)](this,_0x3dc4be);for(const _0xb3a62 of BattleManager[_0x11fc34(0x29e)]()){if(!_0xb3a62)continue;if(_0xb3a62[_0x11fc34(0x14e)]())continue;_0xb3a62['performActionEndMembers']();}this[_0x11fc34(0xa5e)]();},VisuMZ[_0x23168f(0x895)][_0x23168f(0x3f6)]=Window_BattleLog[_0x23168f(0xa01)][_0x23168f(0x335)],Window_BattleLog[_0x23168f(0xa01)][_0x23168f(0x335)]=function(_0x365f13){const _0x282c4e=_0x23168f;VisuMZ[_0x282c4e(0x895)]['Window_BattleLog_performDamage'][_0x282c4e(0x88f)](this,_0x365f13),this[_0x282c4e(0xa5e)]();},VisuMZ[_0x23168f(0x895)][_0x23168f(0x95a)]=Window_BattleLog[_0x23168f(0xa01)][_0x23168f(0x776)],Window_BattleLog[_0x23168f(0xa01)][_0x23168f(0x776)]=function(_0x2425c1){const _0x422f4c=_0x23168f;VisuMZ['BattleCore'][_0x422f4c(0x95a)][_0x422f4c(0x88f)](this,_0x2425c1),this[_0x422f4c(0xa5e)]();},VisuMZ[_0x23168f(0x895)][_0x23168f(0x334)]=Window_BattleLog[_0x23168f(0xa01)][_0x23168f(0x211)],Window_BattleLog[_0x23168f(0xa01)][_0x23168f(0x211)]=function(_0x28e6d6){const _0x3b450a=_0x23168f;VisuMZ[_0x3b450a(0x895)][_0x3b450a(0x334)][_0x3b450a(0x88f)](this,_0x28e6d6),this[_0x3b450a(0xa5e)]();},VisuMZ['BattleCore'][_0x23168f(0x9c1)]=Window_BattleLog['prototype'][_0x23168f(0x8c4)],Window_BattleLog[_0x23168f(0xa01)][_0x23168f(0x8c4)]=function(_0x30c4ed){const _0x3b212e=_0x23168f;VisuMZ[_0x3b212e(0x895)]['Window_BattleLog_performEvasion'][_0x3b212e(0x88f)](this,_0x30c4ed),this[_0x3b212e(0xa5e)]();},VisuMZ[_0x23168f(0x895)][_0x23168f(0x6b9)]=Window_BattleLog['prototype'][_0x23168f(0x2aa)],Window_BattleLog[_0x23168f(0xa01)][_0x23168f(0x2aa)]=function(_0x54f9d6){const _0x19eb19=_0x23168f;VisuMZ['BattleCore'][_0x19eb19(0x6b9)][_0x19eb19(0x88f)](this,_0x54f9d6),this[_0x19eb19(0xa5e)]();},VisuMZ[_0x23168f(0x895)][_0x23168f(0x71b)]=Window_BattleLog[_0x23168f(0xa01)][_0x23168f(0x1c5)],Window_BattleLog[_0x23168f(0xa01)][_0x23168f(0x1c5)]=function(_0x3b2668){const _0x3fd690=_0x23168f;VisuMZ['BattleCore'][_0x3fd690(0x71b)][_0x3fd690(0x88f)](this,_0x3b2668),this[_0x3fd690(0xa5e)]();},VisuMZ[_0x23168f(0x895)]['Window_BattleLog_performReflection']=Window_BattleLog[_0x23168f(0xa01)][_0x23168f(0x352)],Window_BattleLog[_0x23168f(0xa01)]['performReflection']=function(_0x37c68c){const _0x4a229d=_0x23168f;VisuMZ[_0x4a229d(0x895)]['Window_BattleLog_performReflection']['call'](this,_0x37c68c),this[_0x4a229d(0xa5e)]();},VisuMZ[_0x23168f(0x895)][_0x23168f(0xacb)]=Window_BattleLog[_0x23168f(0xa01)][_0x23168f(0x4a5)],Window_BattleLog[_0x23168f(0xa01)][_0x23168f(0x4a5)]=function(_0xea6cf7,_0x203d56){const _0x163b61=_0x23168f;VisuMZ[_0x163b61(0x895)][_0x163b61(0xacb)][_0x163b61(0x88f)](this,_0xea6cf7,_0x203d56),this[_0x163b61(0xa5e)]();},VisuMZ['BattleCore'][_0x23168f(0x13c)]=Window_BattleLog[_0x23168f(0xa01)]['performCollapse'],Window_BattleLog[_0x23168f(0xa01)][_0x23168f(0x5dd)]=function(_0xd1483e){const _0xd0390b=_0x23168f;VisuMZ[_0xd0390b(0x895)]['Window_BattleLog_performCollapse'][_0xd0390b(0x88f)](this,_0xd1483e),this['callNextMethod']();},Window_BattleLog[_0x23168f(0xa01)][_0x23168f(0x5e6)]=function(_0x5a7c2f,_0x40bf35){const _0x4190d5=_0x23168f;_0x5a7c2f[_0x4190d5(0x5e6)](_0x40bf35),this[_0x4190d5(0xa5e)]();},Window_BattleLog[_0x23168f(0xa01)][_0x23168f(0xaef)]=function(_0x1c7914,_0x215841){const _0x4bb74e=_0x23168f,_0x57ffba=_0x1c7914['attackAnimationId1']();_0x57ffba<=0x0?SoundManager[_0x4bb74e(0x5d1)]():this['showNormalAnimation'](_0x215841,_0x57ffba);},Window_BattleLog[_0x23168f(0xa01)]['applyImmortal']=function(_0x2fcbc2,_0x402252,_0x31a85d){const _0x55a000=_0x23168f,_0x33052c=[_0x2fcbc2][_0x55a000(0x23c)](_0x402252);for(const _0x4eb00b of _0x33052c){if(!_0x4eb00b)continue;_0x4eb00b['setImmortal'](_0x31a85d);}this[_0x55a000(0xa5e)]();},Window_BattleLog['prototype'][_0x23168f(0x13b)]=function(_0x39903e){const _0x58040b=_0x23168f;this[_0x58040b(0x687)]=_0x39903e;},Window_BattleLog['prototype'][_0x23168f(0x67a)]=function(_0x3988d4,_0x168a5f){const _0x3bccd6=_0x23168f;for(const _0x1a02df of _0x3988d4){if(!_0x1a02df)continue;_0x1a02df[_0x3bccd6(0x67a)](_0x168a5f);}this[_0x3bccd6(0xa5e)]();},Window_BattleLog['prototype'][_0x23168f(0x8ea)]=function(_0x101926,_0x21e092,_0x12ae47,_0x27b860,_0x15af0a,_0x4f9ab9){const _0x9b94cf=_0x23168f;_0x101926['moveBattlerToPoint'](_0x21e092,_0x12ae47,_0x27b860,_0x15af0a,_0x4f9ab9,-0x1),this[_0x9b94cf(0xa5e)]();},Window_BattleLog[_0x23168f(0xa01)][_0x23168f(0x57a)]=function(_0x2e5564,_0x3e2063,_0x3e11a1,_0xcd0913,_0x432b99,_0x43724f,_0x540f68){const _0x3f074f=_0x23168f,_0x5c6d9d=Math[_0x3f074f(0x690)](..._0x3e2063[_0x3f074f(0x37f)](_0x1ad5ba=>_0x1ad5ba[_0x3f074f(0xbb5)]()[_0x3f074f(0x9af)]-_0x1ad5ba[_0x3f074f(0xbb5)]()['mainSpriteWidth']()/0x2)),_0x5dba8d=Math[_0x3f074f(0x705)](..._0x3e2063[_0x3f074f(0x37f)](_0x559230=>_0x559230[_0x3f074f(0xbb5)]()['_baseX']+_0x559230[_0x3f074f(0xbb5)]()[_0x3f074f(0x56b)]()/0x2)),_0x458690=Math[_0x3f074f(0x690)](..._0x3e2063[_0x3f074f(0x37f)](_0x59e138=>_0x59e138['battler']()[_0x3f074f(0x489)]-_0x59e138[_0x3f074f(0xbb5)]()[_0x3f074f(0x371)]())),_0x5f3d6f=Math[_0x3f074f(0x705)](..._0x3e2063['map'](_0x9f2720=>_0x9f2720[_0x3f074f(0xbb5)]()[_0x3f074f(0x489)])),_0x104c45=_0x3e2063[_0x3f074f(0x239)](_0x55488e=>_0x55488e['isActor']())[_0x3f074f(0x312)],_0x414b25=_0x3e2063[_0x3f074f(0x239)](_0x31deb5=>_0x31deb5['isEnemy']())[_0x3f074f(0x312)];let _0x4b69e6=0x0,_0x155b99=0x0;if(_0x3e11a1[_0x3f074f(0x26e)](/front/i))_0x4b69e6=_0x104c45>=_0x414b25?_0x5c6d9d:_0x5dba8d;else{if(_0x3e11a1[_0x3f074f(0x26e)](/middle/i))_0x4b69e6=(_0x5c6d9d+_0x5dba8d)/0x2,_0x540f68=-0x1;else _0x3e11a1[_0x3f074f(0x26e)](/back/i)&&(_0x4b69e6=_0x104c45>=_0x414b25?_0x5dba8d:_0x5c6d9d);}if(_0x3e11a1[_0x3f074f(0x26e)](/head/i))_0x155b99=_0x458690;else{if(_0x3e11a1[_0x3f074f(0x26e)](/center/i)){_0x155b99=(_0x458690+_0x5f3d6f)/0x2;if(_0x2e5564[_0x3f074f(0xbb5)]())_0x155b99+=_0x2e5564[_0x3f074f(0xbb5)]()['height']/0x2;}else _0x3e11a1[_0x3f074f(0x26e)](/base/i)&&(_0x155b99=_0x5f3d6f);}_0x2e5564[_0x3f074f(0x87c)](_0x4b69e6,_0x155b99,_0xcd0913,_0x432b99,_0x43724f,_0x540f68),this[_0x3f074f(0xa5e)]();},Window_BattleLog['prototype']['performJump']=function(_0x13afaf,_0x3d1c41,_0x54ba45){const _0x3548ef=_0x23168f;for(const _0x5c39a3 of _0x13afaf){if(!_0x5c39a3)continue;_0x5c39a3[_0x3548ef(0x8e1)](_0x3d1c41,_0x54ba45);}this['callNextMethod']();};function Window_BattleMultiTarget(){this['initialize'](...arguments);}Window_BattleMultiTarget['prototype']=Object['create'](Window_Command[_0x23168f(0xa01)]),Window_BattleMultiTarget[_0x23168f(0xa01)]['constructor']=Window_BattleMultiTarget,VisuMZ['BattleCore'][_0x23168f(0xbac)][_0x23168f(0x749)]=VisuMZ[_0x23168f(0x895)]['Settings']['MultiTarget']||{},Window_BattleMultiTarget[_0x23168f(0xb85)]=VisuMZ[_0x23168f(0x895)][_0x23168f(0xbac)][_0x23168f(0x749)][_0x23168f(0x63c)]??0x118,Window_BattleMultiTarget['BG_TYPE']=VisuMZ[_0x23168f(0x895)][_0x23168f(0xbac)][_0x23168f(0x749)][_0x23168f(0x280)]??0x2,Window_BattleMultiTarget[_0x23168f(0x78c)]=VisuMZ[_0x23168f(0x895)][_0x23168f(0xbac)][_0x23168f(0x749)]['ShowButton']??!![],Window_BattleMultiTarget[_0x23168f(0x8dd)]=VisuMZ['BattleCore'][_0x23168f(0xbac)][_0x23168f(0x749)][_0x23168f(0x7f3)]??_0x23168f(0x27d),Window_BattleMultiTarget['ALL_ENEMIES']=VisuMZ[_0x23168f(0x895)][_0x23168f(0xbac)][_0x23168f(0x749)][_0x23168f(0x49e)]??'All\x20Enemies',Window_BattleMultiTarget[_0x23168f(0x9b9)]=VisuMZ[_0x23168f(0x895)]['Settings'][_0x23168f(0x749)]['ActorOffsetX']??0x0,Window_BattleMultiTarget[_0x23168f(0x2a3)]=VisuMZ[_0x23168f(0x895)]['Settings'][_0x23168f(0x749)][_0x23168f(0x26f)]??0x0,Window_BattleMultiTarget['ENEMY_OFFSET_X']=VisuMZ[_0x23168f(0x895)][_0x23168f(0xbac)][_0x23168f(0x749)]['EnemyOffsetX']??0x0,Window_BattleMultiTarget[_0x23168f(0x1b0)]=VisuMZ[_0x23168f(0x895)]['Settings']['MultiTarget'][_0x23168f(0x306)]??0x0,Window_BattleMultiTarget[_0x23168f(0xa01)][_0x23168f(0x8c9)]=function(_0x33e15b,_0x244d06){const _0x563e97=_0x23168f;this['_forActor']=_0x244d06,Window_Command[_0x563e97(0xa01)]['initialize'][_0x563e97(0x88f)](this,_0x33e15b),this[_0x563e97(0x90b)](Window_BattleMultiTarget[_0x563e97(0x5c2)]),this[_0x563e97(0xad5)](),this[_0x563e97(0x198)](),this['deselect']();},Window_BattleMultiTarget['prototype']['forActor']=function(){const _0x3ca867=_0x23168f;return this[_0x3ca867(0x7ed)];},Window_BattleMultiTarget['prototype'][_0x23168f(0x8b2)]=function(){const _0x4c5992=_0x23168f;let _0x5dc171=this[_0x4c5992(0xa5a)]()?Window_BattleMultiTarget[_0x4c5992(0x8dd)]:Window_BattleMultiTarget[_0x4c5992(0x8c2)];if(Imported[_0x4c5992(0x74a)]&&Window_BattleMultiTarget[_0x4c5992(0x78c)]){this[_0x4c5992(0xbca)]=this['forActor']()?'pagedown':'pageup',this[_0x4c5992(0x67f)]=TextManager[_0x4c5992(0x4c2)](this[_0x4c5992(0xbca)]);const _0x1c5a2f=VisuMZ['CoreEngine'][_0x4c5992(0xbac)]['ButtonAssist'][_0x4c5992(0x329)];_0x5dc171=_0x1c5a2f[_0x4c5992(0x7d3)](this[_0x4c5992(0x67f)],_0x5dc171);}this[_0x4c5992(0x21e)](_0x5dc171,_0x4c5992(0x497));},Window_BattleMultiTarget[_0x23168f(0xa01)][_0x23168f(0x5a8)]=function(_0x218b62){const _0x5431f3=_0x23168f,_0x518342=this[_0x5431f3(0x5b2)](_0x218b62);this[_0x5431f3(0x45e)](),this[_0x5431f3(0x623)](this[_0x5431f3(0x19f)](_0x218b62));const _0xc1c30c=this['commandName'](_0x218b62),_0x53f95a=this[_0x5431f3(0xab8)](_0xc1c30c)[_0x5431f3(0x2e0)],_0x1a2e0b=_0x518342['x']+Math['floor']((_0x518342[_0x5431f3(0x2e0)]-_0x53f95a)/0x2);this[_0x5431f3(0x9c5)](_0xc1c30c,_0x1a2e0b,_0x518342['y'],_0x518342[_0x5431f3(0x2e0)]);},Window_BattleMultiTarget['prototype']['update']=function(){const _0x495c80=_0x23168f;Window_Command[_0x495c80(0xa01)][_0x495c80(0x926)][_0x495c80(0x88f)](this),this[_0x495c80(0x4ee)](),this['updateKeyboardKeys']();},Window_BattleMultiTarget[_0x23168f(0xa01)][_0x23168f(0x4ee)]=function(){const _0x3f6954=_0x23168f;this['visible']=this[_0x3f6954(0x22a)]();},Window_BattleMultiTarget[_0x23168f(0xa01)][_0x23168f(0x22a)]=function(){const _0x340228=_0x23168f,_0x5532c6=BattleManager['inputtingAction'](),_0x11ba0c=_0x5532c6&&_0x5532c6[_0x340228(0x584)]();if(!_0x11ba0c)return![];const _0x485493=SceneManager['_scene'];if(this[_0x340228(0xa5a)]()){if(_0x485493[_0x340228(0x77c)][_0x340228(0x4fc)]&&_0x485493['_actorWindow'][_0x340228(0x646)][_0x340228(0x5eb)])return!![];if(_0x485493[_0x340228(0x24c)][_0x340228(0x4fc)]&&_0x485493[_0x340228(0x24c)][_0x340228(0x646)][_0x340228(0x5eb)])return!![];}else{if(_0x485493[_0x340228(0x24c)]['active']&&_0x485493[_0x340228(0x24c)][_0x340228(0x646)]['pageup'])return!![];}return![];},Window_BattleMultiTarget[_0x23168f(0xa01)][_0x23168f(0x7bd)]=function(){const _0x21a8c3=_0x23168f;if(!Imported[_0x21a8c3(0x74a)])return;this[_0x21a8c3(0x67f)]!==TextManager[_0x21a8c3(0x4c2)](this['_buttonKey'])&&this[_0x21a8c3(0xa39)]();},Window_BattleMultiTarget[_0x23168f(0xa01)][_0x23168f(0x4a8)]=function(){const _0x463ba9=_0x23168f;if(this[_0x463ba9(0x12e)]&&TouchInput[_0x463ba9(0x6cf)]()){const _0x117797=this[_0x463ba9(0xb4b)]();if(_0x117797>=0x0){const _0x12aaa3=this[_0x463ba9(0xa5a)]()?_0x463ba9(0x5eb):_0x463ba9(0xbf0);Input[_0x463ba9(0x745)](_0x12aaa3);}}};function Window_DamageCounter(){const _0x1a0231=_0x23168f;this[_0x1a0231(0x8c9)](...arguments);}Window_DamageCounter[_0x23168f(0xa01)]=Object[_0x23168f(0x69e)](Window_Base[_0x23168f(0xa01)]),Window_DamageCounter[_0x23168f(0xa01)]['constructor']=Window_DamageCounter,Window_DamageCounter[_0x23168f(0xb9c)]={'enabled':VisuMZ['BattleCore'][_0x23168f(0xbac)][_0x23168f(0x65a)][_0x23168f(0x77d)]??!![],'customFontFace':VisuMZ[_0x23168f(0x895)]['Settings'][_0x23168f(0x65a)][_0x23168f(0xaf2)]??'','textAlign':VisuMZ[_0x23168f(0x895)][_0x23168f(0xbac)]['ComboWindow'][_0x23168f(0xa47)]??'left','hitsDmgFmt':VisuMZ['BattleCore'][_0x23168f(0xbac)][_0x23168f(0x65a)][_0x23168f(0xb29)]??_0x23168f(0x150),'hitsHealFmt':VisuMZ[_0x23168f(0x895)][_0x23168f(0xbac)][_0x23168f(0x65a)]['hitsHealFmt']??_0x23168f(0xa67),'totalDmgFmt':VisuMZ['BattleCore'][_0x23168f(0xbac)][_0x23168f(0x65a)][_0x23168f(0x8eb)]??_0x23168f(0x99f),'totalHealFmt':VisuMZ[_0x23168f(0x895)]['Settings'][_0x23168f(0x65a)][_0x23168f(0x75c)]??_0x23168f(0x8ae),'fadeShiftX':VisuMZ[_0x23168f(0x895)][_0x23168f(0xbac)][_0x23168f(0x65a)][_0x23168f(0x4e4)]??-0x2,'fadeShiftY':VisuMZ[_0x23168f(0x895)]['Settings'][_0x23168f(0x65a)][_0x23168f(0x16a)]??0x0,'positionOffsetX':VisuMZ[_0x23168f(0x895)][_0x23168f(0xbac)][_0x23168f(0x65a)][_0x23168f(0x963)]??0x0,'positionOffsetY':VisuMZ[_0x23168f(0x895)][_0x23168f(0xbac)]['ComboWindow'][_0x23168f(0x773)]??0x0,'updateDuration':VisuMZ[_0x23168f(0x895)][_0x23168f(0xbac)]['ComboWindow'][_0x23168f(0x5af)]??0x14,'minimumStayDuration':VisuMZ[_0x23168f(0x895)]['Settings'][_0x23168f(0x65a)][_0x23168f(0xa05)]??0x28,'minimumHits':VisuMZ[_0x23168f(0x895)][_0x23168f(0xbac)][_0x23168f(0x65a)][_0x23168f(0x117)]??0x1,'opacitySpeed':VisuMZ[_0x23168f(0x895)][_0x23168f(0xbac)]['ComboWindow']['opacitySpeed']??0x10},Window_DamageCounter['prototype'][_0x23168f(0x8c9)]=function(_0x2e6d4f){const _0x484e29=_0x23168f;this['_visibleDuration']=0x0,Window_Base[_0x484e29(0xa01)][_0x484e29(0x8c9)]['call'](this,_0x2e6d4f),this[_0x484e29(0x14c)]=_0x2e6d4f['x'],this[_0x484e29(0x399)]=_0x2e6d4f['y'],this[_0x484e29(0x6be)](),this[_0x484e29(0x90b)](0x2);},Window_DamageCounter[_0x23168f(0xa01)][_0x23168f(0x6be)]=function(){const _0x3cbe27=_0x23168f;this[_0x3cbe27(0x598)]=0x0,this[_0x3cbe27(0xa92)]=0x0,this[_0x3cbe27(0xb6d)]=0x0,this[_0x3cbe27(0x6a7)]=0x0,this['_targetDamage']=0x0;},Window_DamageCounter['prototype']['resetFontSettings']=function(){const _0x3a8ba2=_0x23168f;Window_Base[_0x3a8ba2(0xa01)][_0x3a8ba2(0xa4d)]['call'](this);const _0x30ca68=Window_DamageCounter[_0x3a8ba2(0xb9c)];_0x30ca68['customFontFace']?this[_0x3a8ba2(0x5c3)][_0x3a8ba2(0x218)]=_0x30ca68[_0x3a8ba2(0x741)]:this[_0x3a8ba2(0x5c3)]['fontFace']=$gameSystem[_0x3a8ba2(0x57b)]();};var $comboWindowReset=function(){const _0x118598=_0x23168f;if(!SceneManager[_0x118598(0xbef)]())return;const _0x1e8bae=SceneManager[_0x118598(0x23e)][_0x118598(0x832)];if(_0x1e8bae)_0x1e8bae['resetCounter']();};Window_DamageCounter[_0x23168f(0xa01)][_0x23168f(0xb6e)]=function(_0x31ae0b){const _0x1db37b=_0x23168f;this['_targetHits']+=Math[_0x1db37b(0x1fc)](_0x31ae0b);const _0x129622=Window_DamageCounter[_0x1db37b(0xb9c)];this['_updateDuration']=_0x129622[_0x1db37b(0x5af)],this[_0x1db37b(0x6a7)]>=_0x129622[_0x1db37b(0x117)]&&(this[_0x1db37b(0x1a7)]=_0x129622[_0x1db37b(0xa05)]);};var $comboWindowIncreaseHits=function(_0x472f67){const _0x35001d=_0x23168f;if(!SceneManager[_0x35001d(0xbef)]())return;const _0x3c61f2=SceneManager[_0x35001d(0x23e)][_0x35001d(0x832)];if(_0x3c61f2)_0x3c61f2[_0x35001d(0xb6e)](_0x472f67);};Window_DamageCounter[_0x23168f(0xa01)]['increaseTotal']=function(_0x38f74f){const _0x3f3c1d=_0x23168f;this[_0x3f3c1d(0x38f)]+=Math[_0x3f3c1d(0x1fc)](_0x38f74f);const _0x3870d9=Window_DamageCounter[_0x3f3c1d(0xb9c)];this[_0x3f3c1d(0x598)]=_0x3870d9[_0x3f3c1d(0x5af)],this[_0x3f3c1d(0x6a7)]>=_0x3870d9[_0x3f3c1d(0x117)]&&(this['_visibleDuration']=_0x3870d9[_0x3f3c1d(0xa05)]);};var $comboWindowIncreaseDamage=function(_0x15d3ab){const _0x15ba84=_0x23168f;if(!SceneManager[_0x15ba84(0xbef)]())return;const _0x3b67b1=SceneManager[_0x15ba84(0x23e)]['_damageCounterWindow'];if(_0x3b67b1)_0x3b67b1[_0x15ba84(0x7ba)](_0x15d3ab);},$comboWindowIncreaseHealing=function(_0x3292cb){const _0x5af32c=_0x23168f;if(!SceneManager[_0x5af32c(0xbef)]())return;const _0x5cd4b7=SceneManager['_scene'][_0x5af32c(0x832)];if(_0x5cd4b7)_0x5cd4b7[_0x5af32c(0x7ba)](-_0x3292cb);};VisuMZ['BattleCore'][_0x23168f(0xaf0)]=Scene_Battle['prototype'][_0x23168f(0x1cb)],Scene_Battle[_0x23168f(0xa01)][_0x23168f(0x1cb)]=function(){const _0x16cf04=_0x23168f;this[_0x16cf04(0x4bf)](),VisuMZ['BattleCore']['Scene_Battle_createAllWindows_ComboWindow'][_0x16cf04(0x88f)](this);},Scene_Battle['prototype'][_0x23168f(0x4bf)]=function(){const _0x3125fc=_0x23168f;if(!Window_DamageCounter[_0x3125fc(0xb9c)][_0x3125fc(0x88c)])return;const _0x5e03ba=this[_0x3125fc(0xb6c)](),_0x59c762=new Window_DamageCounter(_0x5e03ba);this['addWindow'](_0x59c762),this['_damageCounterWindow']=_0x59c762;},Scene_Battle[_0x23168f(0xa01)][_0x23168f(0xb6c)]=function(){const _0x491ad8=_0x23168f;if(VisuMZ[_0x491ad8(0x895)][_0x491ad8(0xbac)][_0x491ad8(0x65a)][_0x491ad8(0x698)])return VisuMZ[_0x491ad8(0x895)][_0x491ad8(0xbac)][_0x491ad8(0x65a)][_0x491ad8(0x698)][_0x491ad8(0x88f)](this);const _0x5aa4d7=Math[_0x491ad8(0x330)](Graphics[_0x491ad8(0x2e0)]/0x4),_0x29c4e2=this[_0x491ad8(0x4ba)](0x2,!![]),_0x57279b=0x0+this[_0x491ad8(0x103)](),_0x28d00b=Math[_0x491ad8(0x1fc)](Graphics[_0x491ad8(0x493)]*0x1/0x3)+this[_0x491ad8(0x3d8)]();return new Rectangle(_0x57279b,_0x28d00b,_0x5aa4d7,_0x29c4e2);},Scene_Battle['prototype'][_0x23168f(0x103)]=function(){const _0x17d9af=_0x23168f;return Window_DamageCounter['SETTINGS'][_0x17d9af(0x44c)];},Scene_Battle[_0x23168f(0xa01)]['comboWindowOffsetY']=function(){const _0x3f5f2f=_0x23168f;return Window_DamageCounter[_0x3f5f2f(0xb9c)]['positionOffsetY'];},Window_DamageCounter[_0x23168f(0xa01)][_0x23168f(0x926)]=function(){const _0x2e9c58=_0x23168f;Window_Base[_0x2e9c58(0xa01)][_0x2e9c58(0x926)][_0x2e9c58(0x88f)](this),this[_0x2e9c58(0x6e1)](),this[_0x2e9c58(0x84d)]();},Window_DamageCounter['prototype'][_0x23168f(0x6e1)]=function(){const _0x3fe728=_0x23168f;if(this['_updateDuration']<=0x0)return;const _0x145528=this['_updateDuration'];this['_totalHits']=this[_0x3fe728(0x6a7)],this['_totalDamage']=(this[_0x3fe728(0xb6d)]*(_0x145528-0x1)+this[_0x3fe728(0x38f)])/_0x145528,this[_0x3fe728(0x598)]--,this[_0x3fe728(0x598)]<=0x0&&(this['_totalHits']=this[_0x3fe728(0x6a7)],this['_totalDamage']=this[_0x3fe728(0x38f)]),this[_0x3fe728(0xa39)]();},Window_DamageCounter[_0x23168f(0xa01)][_0x23168f(0x84d)]=function(){const _0x2fc056=_0x23168f,_0x5ada4b=Window_DamageCounter[_0x2fc056(0xb9c)],_0x5aa943=this[_0x2fc056(0x22a)](),_0xb0f188=_0x5ada4b['opacitySpeed']||0x1;if(_0x5aa943&&this[_0x2fc056(0x599)]<0xff)this[_0x2fc056(0x599)]+=_0xb0f188;else!_0x5aa943&&this[_0x2fc056(0x599)]>0x0&&(this['contentsOpacity']-=_0xb0f188,this['x']+=_0x5ada4b[_0x2fc056(0x4e4)]||0x0,this['y']+=_0x5ada4b[_0x2fc056(0x16a)]||0x0);},Window_DamageCounter['prototype'][_0x23168f(0x22a)]=function(){const _0x2e2a54=_0x23168f,_0x3c7921=Window_DamageCounter[_0x2e2a54(0xb9c)];if(this[_0x2e2a54(0x6a7)]>=_0x3c7921[_0x2e2a54(0x117)])return!![];if(this['_visibleDuration']-->0x0)return!![];return![];},VisuMZ[_0x23168f(0x895)][_0x23168f(0xb89)]=Game_Action[_0x23168f(0xa01)][_0x23168f(0x129)],Game_Action['prototype'][_0x23168f(0x129)]=function(_0x465793,_0x4948bd){const _0x4d77e5=_0x23168f;$comboWindowIncreaseHits(0x1),$comboWindowIncreaseDamage(_0x4948bd),VisuMZ[_0x4d77e5(0x895)]['Game_Action_executeHpDamage_ComboWindow'][_0x4d77e5(0x88f)](this,_0x465793,_0x4948bd);},VisuMZ[_0x23168f(0x895)]['BattleManager_endAction_ComboWindow']=BattleManager[_0x23168f(0x24b)],BattleManager[_0x23168f(0x24b)]=function(){const _0x41f20e=_0x23168f;$comboWindowReset(),VisuMZ[_0x41f20e(0x895)]['BattleManager_endAction_ComboWindow'][_0x41f20e(0x88f)](this);},Window_DamageCounter[_0x23168f(0xa01)]['refresh']=function(){const _0x2b797d=_0x23168f;this[_0x2b797d(0x5c3)][_0x2b797d(0x176)](),this[_0x2b797d(0x8d6)](),this['x']=this[_0x2b797d(0x14c)],this['y']=this[_0x2b797d(0x399)];},Window_DamageCounter['prototype']['textAlignment']=function(){const _0x3f5e2d=_0x23168f,_0x3d3d91=Window_DamageCounter['SETTINGS'];return _0x3d3d91[_0x3f5e2d(0xa17)]||_0x3f5e2d(0xb07);},Window_DamageCounter['prototype'][_0x23168f(0x5b4)]=function(){const _0x443288=_0x23168f,_0x1bf2d4=Window_DamageCounter['SETTINGS'];let _0xf6ce1b=this[_0x443288(0xb6d)]>=0x0?_0x1bf2d4[_0x443288(0xb29)]:_0x1bf2d4['hitsHealFmt'];return _0xf6ce1b[_0x443288(0x7d3)](Math[_0x443288(0x1c8)](Math[_0x443288(0x330)](this[_0x443288(0xa92)])));},Window_DamageCounter[_0x23168f(0xa01)][_0x23168f(0x967)]=function(){const _0x130941=_0x23168f,_0x22317e=Window_DamageCounter[_0x130941(0xb9c)];let _0x3b7fd2=this['_totalDamage']>=0x0?_0x22317e[_0x130941(0x8eb)]:_0x22317e[_0x130941(0x75c)];return _0x3b7fd2[_0x130941(0x7d3)](Math[_0x130941(0x1c8)](Math['round'](this[_0x130941(0xb6d)])));},Window_DamageCounter[_0x23168f(0xa01)]['drawComboText']=function(){const _0x2b2f6d=_0x23168f;if(VisuMZ[_0x2b2f6d(0x895)][_0x2b2f6d(0xbac)]['ComboWindow']['ComboWindow_DrawJS'])return VisuMZ[_0x2b2f6d(0x895)]['Settings'][_0x2b2f6d(0x65a)][_0x2b2f6d(0xacd)][_0x2b2f6d(0x88f)](this);let _0x119ea1=0x0,_0x57d034=0x0;const _0x1a1133=this[_0x2b2f6d(0x5b4)](),_0x5c15dd=this[_0x2b2f6d(0xab8)](_0x1a1133);if(this[_0x2b2f6d(0x175)]()===_0x2b2f6d(0x945))_0x119ea1=this[_0x2b2f6d(0xb84)]-this[_0x2b2f6d(0x3a2)]()-_0x5c15dd[_0x2b2f6d(0x2e0)];else this['textAlignment']()===_0x2b2f6d(0x283)?_0x119ea1=Math['floor']((this[_0x2b2f6d(0xb84)]-_0x5c15dd[_0x2b2f6d(0x2e0)])/0x2):_0x119ea1=this[_0x2b2f6d(0x3a2)]();this[_0x2b2f6d(0x9c5)](_0x1a1133,_0x119ea1,_0x57d034),_0x57d034+=Math['ceil'](this[_0x2b2f6d(0x6ad)]()*0x2/0x3);const _0x3e4ced=this[_0x2b2f6d(0x967)](),_0x2319d7=this[_0x2b2f6d(0xab8)](_0x3e4ced);if(this[_0x2b2f6d(0x175)]()===_0x2b2f6d(0x945))_0x119ea1=this[_0x2b2f6d(0xb84)]-this[_0x2b2f6d(0x3a2)]()-_0x2319d7['width'];else this[_0x2b2f6d(0x175)]()===_0x2b2f6d(0x283)?_0x119ea1=Math[_0x2b2f6d(0x58e)]((this[_0x2b2f6d(0xb84)]-_0x2319d7['width'])/0x2):_0x119ea1=this[_0x2b2f6d(0x3a2)]();this[_0x2b2f6d(0x9c5)](_0x3e4ced,_0x119ea1,_0x57d034);};function _0x1f1e(){const _0x51e273=['alive\x20opponents\x20not\x20target','_dragonbonesSpriteContainer','setBlendColor','HitFlat','_totalHits','parallaxScrollY','Scene_Battle_onActorOk','troop','createString','ShowPortraits','_jumpMaxHeight','updateStatusWindowPosition','traits','turns','isEffecting','performFlinch','ActSeq_BattleLog_AddText','performAttack','battleEnd','ActSeq_BattleLog_PopBaseLine','ActSeq_Impact_TimeStop','show','addBattlerBuffsDebuffs','helpAreaHeight','isTriggered','ForceRandom','updateHelp','buffAdd','isDisplayEmergedEnemies','BattleManager_processDefeat','isAutoBattleCommandEnabled','WaitForMovement','effect','Duration','Spriteset_Battle_createBattleField','ConfigManager_makeData','BULB','_preemptive','excludeListing','frameDelay','windowAreaHeight','top','textSizeEx','Scene_Battle_logWindowRect','FvAniEachTarget','PartyCmd','start','<CENTER>%1','forceEscapeSprite','itemLifeStealRate','battleInjectAni','_growDuration','ActSeq_Mechanics_AddState','reverse','RevertAngle','maxItems','isFloating','waitForMovement','itemRect','DEF','Window_BattleLog_performActionEnd','Window_BattleLog_performSubstitute','battleMove','ComboWindow_DrawJS','ExtraSettings','findTargetSprite','cancelLifeSteal','disarmLifeSteal','makeAutoBattleActions','statusHelpDesc','mpDamageFmt','deactivate','BattleManager_checkBattleEnd','actorCommandCancelTPB','createSeparateDamagePopups','Game_Action_setGuard','attack','initMembers','processBattleBalloonRequests','MIN_SAFE_INTEGER','onEnemyOk','currentClass','TurnsFmt','loadWindowskin','EscapeFail','onMoveEnd','ActSeq_Mechanics_EtbAction','ActSeq_Movement_HomeMoveToPoint','Window_BattleLog_clear','note','selectNextCommand','createCommandVisibleJS','battleSpriteSkew','JS\x20%1END\x20TURN','_actorCommandWindow','clearResult','inputtingAction','showEnemyAttackAnimation','Scene_Battle_createAllWindows_ComboWindow','turnCount','CustomFontFace','_battlerKeyCache','Window_BattleStatus_drawItemImage','_showWeapon','changeBattlerOpacity','debuffHelpFmt','onSkewEnd','ActSeq_Mechanics_CustomDmgFormula','isNextSceneBattleTransitionable','VisuMZ_1_MessageCore','setupBattleCoreAspects','_currentAngle','ShowTpDmg','ActionAnimation','isPTB','WeaponTypeID','Game_Action_clear','statusWindowRectXPStyle','damagePopupPosition','isCTB','getDamageStyle','left','WaitForEffect','ActSeq_Animation_CastAnimation','evade','Game_Action_makeTargets','Game_Battler_performDamage','ShowCurrentState','ActSeq_Horror_NoiseRemove','lastBattleSkill','BattleManager_checkSubstitute','text','setActorHome','CmdIconItem','737285fmElfS','makeBuffName','_flipScaleX','updateWaitMode','createActors','ScaleUp','CommandVisible','ActSeq_Zoom_WaitForZoom','height','setHalfActionsPTB','getConfigValue','processCancel','deselect','isSkipPartyCommandWindow','ActSeq_Movement_WaitForJump','isInputting','DamageFlat','head','commandStyle','_updateClientArea','createUIContainer','hitsDmgFmt','glitch','displaySubstitute','LIGHT\x20BULB','playOnceParallelInterpreter','bossCollapse','PostStartTurnJS','targetActionSet','bgType','Decreases\x20%1\x20to\x20%3%2\x5cC[0].\x20%4','skills','ActSeq_BattleLog_Refresh','CriticalDuration','centerFrontViewSprite','ActSeq_Impact_Negative','_phase','initElementStatusCore','_shakeFlinchDuration','processRandomizedData','indexOf','createShadowSprite','ActSeq_Movement_Scale','callOkHandler','_opacityWholeDuration','Radius','Game_BattlerBase_die','makeActions','PreApply%1JS','_forcedBattleLayout','_baseTexture','helpAreaBottom','makeTargetSelectionMoreVisible','Game_Interpreter_command283','alignBattleCoreDamageSprite','hitIndex','scope','_enemy','Game_Battler_onBattleEnd','RequiresDefeat','overworldBattleback2Name','_lastEnemy','MANUAL','reserveCommonEvent','ActionEndUpdate','Window_BattleActor_processTouch','paySkillCost','ActSeq_Impact_Desaturate','paramName','Scene_Battle_startEnemySelection','_targetOpacity','Game_System_initialize','_homeWholeDuration','ShowPopup','paintOpacity','ActionStart','svbattler','measureTextWidth','refreshActorPortrait','_hue','guard','_endBattle','HitRate','Window_BattleLog_displayActionResults','Index','addSkillTypeCommand','Game_BattlerBase_canAttack','Game_BattlerBase_eraseState','damageCounterWindowRect','_totalDamage','increaseHits','ActSeq_DB_DragonbonesTimeScale','ActSeq_Camera_FocusTarget','processOk','_targetSkewY','removeImmortal','removedStateObjects','SkillsStatesCore','ActSeq_Grid_TraverseToNode','frameCount','Window_BattleLog_performActionStart','ShowRemovedState','cutinEnter','SceneManager_isSceneChanging','_ptbActionCost','createEnemyNames','_floatDuration','PortraitScale','performAction','Exploited','maxLines','ActSeq_Mechanics_BoostPointsChange','innerWidth','WIDTH','battlelog','bitmapHeight','onEscapeFailure','Game_Action_executeHpDamage_ComboWindow','flashDuration','hasSvBattler','SWEAT','noise','destroy','applyTargetFilters','startShakeFlinch','allIcons','createInnerSprite','unshift','TpGaugeOffsetX','commandNameWindowCenter','escape','processEscape','ActSeq_Movement_Float','ARRAYFUNC','performActionStart','autoMeleeMultiTargetActionSet','SETTINGS','critical','Game_Action_itemHit','statusText','ShowAddedDebuff','VisuMZ_2_HorrorEffects','stopInjectAnimation','statusWindowRectBorderStyle','putActiveBattlerOnTop','mpColor','frontviewSpriteY','statusTextAutoBattleStyle','addChildToUiContainer','startTpbTurn','_growWholeDuration','getBattlePortraitFilename','Settings','lastFilename','balloonId','isMoving','requestFauxAnimation','updatePadding','MAXHP','loadSystem','Game_BattlerBase_refresh','battler','floatBattler','process_VisuMZ_BattleCore_TraitObject_Notetags','startAction','%1StartBattleJS','addOnceParallelInterpreter','updateBattlerContainer','Game_BattlerBase_canGuard','DefaultStyle','parent','actor%1-portrait','isTeamBased','attachSpritesToDistortionSprite','isFlipped','isUndecided','gaugeBackColor','constructor','actionBattleCoreJS','Targets','Frame','_battleCoreNoElement','_buttonKey','battleZoom','onOpacityEnd','CmdIconEscape','COMBAT\x20LOG','_forcing','ActSeq_Animation_BalloonAnimation','regionId','Game_Actor_makeActionList','commandSymbol','ActSeq_Mechanics_EmulateSkillEffect','Scene_Party','drawParamData','clearDamagePopup','getItemDamageAmountLabelBattleCore','SLEEP','startIcon','gradientFillRect','updateEffectsContainer','ActSeq_Motion_FreezeMotionFrame','ParseItemNotetags','_battleCoreForcedElements','addChildAt','FlinchDuration','ShowAddedBuff','_angleEasing','AutoBattleMsg','Sprite_StateIcon_updateFrame','message1','removeDamageSprite','TPB','Sprite_Battler_updateMain','createHelpWindow','Enemy','requestMotionRefresh','ActSeq_Inject_AnimationPauseResume','_weaponImageId','isSceneBattle','pageup','useDigitGrouping','_enemySprites','_motion','ActSeq_Animation_BalloonIconRange','fillRect','addBattlerAspect','command3011','2kQsExM','Game_Action_applyGlobal','evalDamageFormulaBattleCore','angle','clearFreezeMotion','processActorCommandCancelTPB','smoothness','USER-DEFINED\x203','isAnyoneJumping','DisablePartyCmd','needsInputWindowChange','process_VisuMZ_BattleCore_CommonEventKeys','createInnerPortrait','CheckActSeqProjectileVersion','BattleStartEvent','PrioritySortActors','itemWindowRect','Strength','_cacheTextWidth','DamageStyles','drawSkillCost','205974rKcuFd','position','snapForBackground','Sprite_Enemy_update','onSelectAction','missile','refreshStatusWindow','drawDebuffs','ActSeq_Camera_Clamp','startInjectAnimation','isStatusAffected','callUpdateHelp','playOkSound','Sprite_Battleback_adjustPosition','_armorPenetration','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','processVictory','Window_ActorCommand_initialize','WaitForSpin','svBattlerData','setBattlerFlip','jsAccuracy','command339','some','custom','Scene_Map_initializeAfter','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20rate\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalRate\x20=\x20rate;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(rate)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20rate\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20rate\x20to\x20%2\x27.format(\x27\x27,originalRate));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalRate;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20rate\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20rate;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','drawActorBuffTurns','SvMotionIdleSolo-%1-%2','AutoNotetag','enemyId','SvWeaponSolo-%1-%2','WaitForScale','isBorderStylePortraitShown','okButtonText','makeTargetSprites','ITEM','getBattleMembers','buffIconIndex','makeUniqueNames','Scene_Options_maxCommands','WaitCount1','\x5cI[%1]%2','Sprite_Actor_moveToStartPosition','_linkedSprite','performActionEnd','JS\x20BATTLE\x20DEFEAT','createWeather','trim','_animationContainer','onDisabledPartyCommandSelection','_selectionEffectCount','isAutoBattleCommandAdded','createAnimationContainer','animationBaseDelay','_returnWindow','getColor','SkillID','clearHorrorEffects','onStaticEnemyBitmapLoad','CriticalDmgFlat','Scene_Battle_update','Game_Interpreter_PluginCommand','comboWindowOffsetX','CriticalHitFlat','MP_Flat','\x5cC[6](Actions\x20%2%1\x5cC[6])\x5cC[0]','changeBattlebacks','addMeleeReturnActionSet','ActSeq_BattleLog_Clear','_helpWindow','ShowSubstituteWait','colSpacing','_playTestFastMode','_targetSkewX','DefeatEvent','_actorMultiTargetWindow','weaponImageId','enemyShowParametersIfDefeated','_mainSprite','Game_Action_evalDamageFormula','removeHorrorEffect','VisuMZ_3_VisualCutinEffect','minimumHits','ShowHpDmg','statusDescription','applyForcedGameTroopSettingsBattleCore','ActSeq_Mechanics_EmulateSkillCost','ShowReflect','JS\x20BATTLE\x20VICTORY','_activeWeaponSlot','Game_Temp_initialize','contentsBack','_shadowSprite','value1','isForRandomBattleCore','PerformAction','ChangeOrderBy','_battlerName','_createCursorArea','loop','executeHpDamage','allowRandomSpeed','Sprite_Damage_createChildSprite','Defeat','_pageupButton','visible','MotionAni','restore','hasSkill','Sprite_Weapon_loadBitmap','currentDisplayedValue','States','setBattlerBattleCore','ReflectAnimation','HalfActions','setupTextPopup','setLastBattleSkill','_action','waitCount','Window_BattleLog_performCollapse','ForceDeath','battleSys','getBattlePortraitOffsetY','ActSeq_Grid_AnimationJsAtNode','ActSeq_Zoom_Reset','code','transform','isETB','scale','showHelpWindow','ActSeq_Mechanics_BtbGain','setItem','isIncludedInEnemyWindow','Scene_Battle_windowAreaHeight','CommonEventID','_targetX','requestRefresh','isDead','ActSeq_Animation_ShowAnimation','\x5cC[6]%1\x5c}\x20\x5cC[4]Hit\x20Combo\x5c{','changeAtbChargeTime','isOpenAndActive','addCustomCommands','invokeCounterAttack','isSkewing','jsOneForOne','Sprite_Actor_initMembers','type','clamp','makeBuffHelpText','BattleLog','VariableDmg','startInBattleStatus','_waitMode','MotionSpeed','svActorVertCells','CommandAddStatus','battleCorePreBattleCommonEvent','Intensity','EVAL','loadCharacter','characterName','LUK','_shadowScaleX','Window_BattleLog_performAction','fadeShiftY','checkShowHideSwitchNotetags','Game_Battler_performActionStart','isCancelled','setSvBattlerSprite','makeDamageValue','ActSeq_Motion_RefreshMotion','Sprite_Battler_setHome','QUESTION','random','_autoBattle','textAlignment','clear','valueColor','battlerSmoothImage','weaponTypes','setLetter','_partyCommandWindow','drawIcon','applyResultSwitches','Sprite_AnimationMV_updatePosition','PostApplyAsUserJS','ShowReflectWait','CmdStyle','Spriteset_Battle_createLowerLayer','StateOverlayOffsetY','ActSeq_Movement_Jump','_underAnimationContainer','isOpponent','hpDamage','ActSeq_Angle_WaitForAngle','AntiTintUiElements','_targetFloatHeight','_growX','createStatesWindow','jsScaleDown','ActSeq_Movement_WaitForSkew','isSideView','forceAction','PopupDuration','commandStyleCheck','Scene_Battle_startActorSelection','loadBattleback2','isBattleFlipped','targetDistortionSpritePosition','Game_Battler_onBattleStart','hide','isImmortal','portraitType','PostApplyAsTargetJS','addPartyCommand','ActSeq_Inject_AnimationStart','adjustPosition_ScaleToFit','isCommandEnabled','waitForOpacity','prepareCustomActionSequence','Scene_Battle_partyCommandWindowRect','NameOffsetY','clearBattleCoreAspects','_surprise','displayTpDamage','_visibleDuration','Spriteset_Battle_update','sleep','DefaultSoftScaler','actorCommandSingleSkill','slices','BTestBypass','ActionCenteredName','_text','ENEMY_OFFSET_Y','getLastHpDamage','_freezeMotionData','moveBattlerHomeDistance','updateHpGaugePosition','ShowSubstitute','_nameTempVisibleDuration','ActSeq_Mechanics_PtbAlterCost','Class-%1-%2','equipSlots','isFightCommandEnabled','StatusWindowSkinFilename','shouldHideBattleEndPopups','ScaleY','VisuMZ_4_BreakShields','_forcedHomeY','applyFreezeMotionFrames','updateNameTempVisibility','parse','nameY','_offsetY','performCounter','_homeX','BattleManager_updatePhase','abs','addSingleSkillCommand','VisuMZ_3_BattleAI','createAllWindows','SyncBuffExpire','_duration','updateSelectionEffect','applyAngleChange','battleBalloon','process_VisuMZ_BattleCore_Action_Notetags','Actions','padding','_effectsContainer','GetParamIcon','Formula','Window_ItemList_maxCols','isShownOnBattlePortrait','_pagedownButton','setBattleCameraOffset','tpbActorSwitchConditionsMet','Sprite_Battler_setBattler','guardMpLifeSteal','ActSeq_Animation_ItemAnimation','partyCommandWindowRectXPStyle','hpAffected','battlerShadowScaleY','_frame','Parse_Notetags_HelpDescription','updateStaticSvBattlerFrames','PostDamageAsTargetJS','NO\x20ACTOR\x20FOUND!','enemyShowParametersAlways','disarmHpLifeSteal','updateRefresh','adjustPosition_1for1','BattlebackScale','Scene_Battle_stop','alive\x20actors','UNTITLED','toUpperCase','changeTurnOrderByCTB','▲%1','SvWeaponMass-%1-%2','onGrowEnd','stypeId','_wtypeIDs','canUse','NextTurn','VisuMZ_3_FrontviewBattleUI','ActSeq_Mechanics_PtbConvert','_statusWindow','enemyStatus','round','process_VisuMZ_BattleCore_jsFunctions','Sprite_Battler_startMove','_makeFontNameText','debuffNameFmt','in\x20order\x20for\x20Taunt\x20and\x20Provoke\x20features\x20to\x20work\x20','canBattlerMove','PreEndActionJS','removeAnimationFromContainer','Game_Map_battleback1Name','ActionEnd','stepForward','targetObjects','ArPenRate','Window_BattleEnemy_initialize','guardLifeSteal','actor','removeState','initVisibility','drawItemImage','Game_Action_executeHpDamage','performRecovery','FUNC','children','canEscape','Mute','index','missle','fontFace','Window_BattleLog_displayFailure','Game_Action_isForFriend','Window_PartyCommand_initialize','_forcedHomeX','Game_Action_setAttack','addCommand','ActSeq_Cutin_EndVisualCutinEffectType','ActSeq_Movement_WaitForScale','split','ActSeq_Mechanics_AtbGauge','DualWield','isBusy','getSkillIdWithName','processAbort','partyCommandWindowRectDefaultStyle','isActing','Weapon-%1-%2','visibilityState','AspectColor','jump','_homeY','setupWeaponAnimation','isSTB','Scene_Battle_initialize','process_VisuMZ_BattleCore_DamageStyles','ActSeq_Movement_FaceTarget','previousActor','ActSeq_Grid_AddTriggerToNode','ActSeq_Projectile_Animation','displayType','lastCommandSymbol','finalizeScale','filter','battleSpin','resizeWindowBorderStyle','concat','isEscapeCommandEnabled','_scene','GRID\x20MOVE','Window_Options_addGeneralOptions','casting','isTurnBased','isSkill','sort','thrust','Game_Interpreter_terminate','swapEnemyIDs','ConfigManager_applyData','Sprite_Battler_damageOffsetY','command283','endAction','_enemyWindow','clearMotion','ParseActorNotetags','FlinchDistanceY','collapse','battleInjectPrep','DamageStyleList','HpGaugeOffsetY','StatusWindowAttachmentBack','paramValueByName','isFriendly','disperseDamage','jsAccuracyAsUser','JS\x20%1START\x20TURN','Sprite_Actor_setActorHome','isFastForward','updateScale','_active','setBattlePortrait','isPartyTpbInputtable','apply','updateLastTarget','focus','_itemWindow','CmdIconOptions','Parse_Notetags_Targets','EndBattlePopups','getMenuImage','CriticalColor','helpWindowRect','ActSeq_BattleLog_WaitForBattleLog','initMembersBattleCore','victory','origin','match','ActorOffsetY','linkSprite','stepBack','WaitForProjectile','waitForAnimation','_iconIndex','WaitForAngle','8267116wXNcJE','SkipPartyCmd','endInBattleStatus','faceHeight','CommandAddOptions','getEnemyIdWithName','StepDistanceY','All\x20Allies','WaitCount','NewPopupBottom','BgType','WaitForSkew','iconText','center','ActSeq_Impact_ShockwaveEachTargets','removeOnceParallelInterpreter','sliceMax','_createCursorSprite','ActSeq_Element_ForceElements','refreshBattlerMotions','isTpbMainPhase','MaxMP','skill','startFloat','skillItemWindowRectMiddle','CheckVisibleSkillNotetags','list','AlphaFilter','startDamagePopup','value2','setBattlerMotionTrailData','USER-DEFINED\x205','Opacity','Game_Action_executeDamage','isAnimationPlaying','ActSeq_Mechanics_AnalyzeWeakness','setupDamagePopup','magicReflection','ArPenFlat','updatePositionBattleCore','allBattleMembers','isPreviousScene','ActSeq_Grid_ClearPassiveStatesFromNode','setBalloonPose','clearActiveWeaponSlot','ACTOR_OFFSET_Y','maxBattleMembers','Update\x20your\x20Battle\x20System\x20-\x20%1\x20to\x20the\x20latest','aliveMembers','_angleDuration','addStatusCommand','_backAttachmentSprite','performMagicEvasion','extraPositionX','BindCommonEventKeysForObj','updateCollapse','softDamageCap','_motionType','maxCommands','CriticalHitRate','_floatWholeDuration','occasion','damagePopupOffsetX','isCharging','ActSeq_Inject_WaitForInjectAni','actionEffect','setHue','ChantStyle','setupBattleback','delay','repeatTargets','actionSplicePoint','Game_Battler_clearDamagePopup','PreEndBattleJS','onJumpEnd','performAttackSlot','addItemCommand','GetActionSequenceSpecialTarget','_effectType','close','ActSeq_Movement_FacePoint','getAttackWeaponAnimationId','Scene_Battle_startActorCommandSelection','actorCommandAutoBattle','hpHealingFmt','drawActorSimpleStatus','effects','BattleEndEvent','autoBattleUseSkills','onActorCancel','alive\x20actors\x20not\x20target','VisuMZ_2_BattleSystemFTB','startGrow','parallaxScrollYinvertEnemy','makeTurnsText','changeTextColor','PostEndActionJS','boxWidth','includes','_motionCount','onBattleStartBattleCore','face','BattleManager_onEscapeFailure','isOTB','adjustPosition_ScaleDown','FlashDuration','width','DamageRate','autoSelectLastSelected','_hideAllIcons','ShowCounterWait','updateBattleBalloons','commandNameWindowDrawText','onBattleEnd','meetsUsableItemConditions','ActSeq_Horror_GlitchRemove','getWtypeIdWithName','_drawTextOutline','svBattlerName','endIcon','createAttachedSprites','Turns','addDebuff','canUseItemCommand','isMagical','SwitchCritical','opacityStart','ActSeq_Weapon_ClearActiveWeapon','BattleManager_endBattle','LOVE','_stateIconSprite','DisplayAction','drawingAreaWidth','MeleeDistance','createCommandNameWindow','commandEscape','playBattleVoice','displayEvasion','ShowFacesListStyle','Game_Action_setSkill','Parse_Notetags_Action','ActSeq_Impact_Oversaturate','_colorType','createDistortionSprite','EnemyOffsetY','isForAnyoneFocusFriends','declareGlobalVariables','_aspectData','isBattleTest','shouldDisperseDamage','ActSeq_Grid_AnimationTypeAtNode','FullActions','ChargeRate','makeSpeed','onDatabaseLoaded','_battler','length','addLoadListener','addChild','command301','coreEngineRepositionEnemies','ActSeq_Animation_PlayAtCoordinate','needsSelection','finishActorInput','waitForEffect','_baseLineStack','ActSeq_Mechanics_StateTurnsChangeTo','compatibilityVisible','_targetHomeX','CreateActionSequenceTargets','JS\x20ESCAPE\x20SUCCESS','removeActor','_borderPortraitTargetX','numRepeats','hidden','gaugeX','inputting','ShowEnemyGauge','checkBattleEnd','TextFmt','invokeAction','updatePosition','textBaseline','WaitForNewLine','_targetAngle','itemEffectRecoverHp','ceil','switchToWeaponType','drawActorLevel','EscapeSuccessJS','Window_BattleLog_performRecovery','performDamage','Game_Action_setSubject','friendsUnit','_skillIDs','motionType','ActSeq_Animation_WaitForAnimation','PostStartActionJS','isMagicSkill','Actor','moveToStartPosition','_regionBattleback1','isSceneChanging','GuardFormulaJS','ActSeq_Mechanics_StbExploit','PostApplyJS','getStateDisplay','ActSeq_Motion_WaitMotionFrame','ActSeq_Grid_MoveTargetsInDirection','normalHelp','displayFailure','_uiContainer','displayMiss','_battlerContainer','visualCutinPortraitType','adjustPosition_ScaleUp','addedBuffs','reduce','command357','setWaitMode','performReflection','openBattleActorWindow','Sprite_Actor_updateShadow','StateOverlayOffsetX','clearBattleCoreData','ActSeq_Mechanics_EmulateGuardEffect','VisuMZ_2_AggroControlSystem','endVisualCutin','displayBuffs','_canLose','processDefeat','createEnemySprite','pop','Scene_Battle_onActorCancel','motionSpeed','StateID','enemyShowLevel','isConfused','ActorJS','clearOnceParallelInterpreters','%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.','loadSvActor','MAXMP','ActSeq_Movement_FaceDirection','setupBlueRedInvertImpactFilter','isActor','iconWidth','VoiceLineType','VisuMZ_2_AggroControlSystem\x20needs\x20to\x20be\x20updated\x20','dataId','stop','mainSpriteHeight','graphicType','Sprite_Enemy_setHue','_enemyNameContainer','Scene_Battle_createActorCommandWindowIBS','ShowPortraitsBorderStyle','setActiveWeaponSlot','Wave','ActSeq_Zoom_Scale','updateActors','processHandling','ShowRemovedBuff','clearAllVisualCutins','hasBeenDefeatedBefore','map','updateBitmap','BattleAI','HpGauge','isTickBased','_currentActor','adjustPosition','ActSeq_Grid_AddPassiveStatesToNode','extendTroopMembers','auto','CmdIconAutoBattle','ActSeq_Mechanics_CtbOrder','Game_Action_updateLastTarget','VisuMZ_2_BattleSystemPTB','isAnyBattleBalloonPlaying','status','_targetDamage','fittingHeight','criticalDmgFlat','Scene_Battle_updateStatusWindowPosition','ParseStateNotetags','_actions','parseLocalizedText','forceSelect','_logWindow','ActSeq_Movement_MoveToPoint','_targetY','ActSeq_Animation_ActionAnimation','battleback2Name','drawItemActorSvBattler','_methods','getCommonEventIdWithName','updateMain','select','%1-%2','itemPadding','TpGaugeOffsetY','BattleManager_startAction','smoothSelect','isBattleSys','command301_PreBattleEvent','DistanceY','Game_Battler_clearMotion','Enemy-%1-%2','ActSeq_Animation_ChangeBattlePortrait','playOnceParallelTroopPage','ActSeq_Impact_BlueRedInvert','chantStyle','MOTIONS','front\x20center','checkShowHideBattleNotetags','ActSeq_Movement_HomeMoveBy','_frontAttachmentSprite','setupHpGaugeSprite','updateShadowPosition','statesMaxWidth','battleAngle','SceneManager_push','createActorCommandWindowBattleCore','evaded','isAnyoneInjectAniPrepping','Targets1','startActorCommandSelection','isCustomActionSequence','setupBattleCore','maxCols','freezeMotion','showPortraits','Game_Battler_performEvasion','%1Apply%2JS','FlashColor','_svBattlerData','paramBuffRate','visualCutinPortraitFilename','cancelActorInput','CommandAddAutoBattle','ShakeFlinchPower','50BoXZaI','setBattleImpactTimeScale','clearFreezeMotionForWeapons','_indent','ActSeq_Angle_Reset','normal','ActSeq_Grid_PullToTargetNode','logWindowRect','isATB','VisuMZ_3_BoostAction','currentSymbol','isNegativeLifeSteal','comboWindowOffsetY','processTurn','isTpb','applyArmorModifiers','NameOffsetX','_targetIndex','createActorCommandWindow','TargetLocation','_actorSprites','displayBattleCoreTransitionErrorMsg','_additionalSprites','state','startInput','CopyCombatLog','ActSeq_Horror_GlitchCreate','startEnemySelection','drawSingleSkillCost','battleStatusWindowAnimationContainer','NameFontSize','AllowCollapse','itemEffectAddAttackState','ActionItemMsg','_item','description','updateMotionCount','Game_Battler_onTurnEnd','AspectNameFmt','battleLayoutStyle','addAutoBattleCommands','_executeHpDamage','Window_BattleLog_performDamage','SlotID','Scene_Battle_selectNextCommand','Setting','_opacityEasing','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20','hpRate','Text','EscapeSuccess','emulateAction','ActSeq_Mechanics_BoostPointsStoreData','_escapeRatio','alive\x20friends\x20not\x20target','currentValue','displayCritical','none','setBattleCameraPoint','WtypeId','SILENCE','pageButtonPosition','toString','addBuff','isNonSubmenuCancel','Game_Party_removeActor','updateUiContainerPosition','isFrameVisible','getStypeIdWithName','isGuardLifeSteal','placeStateIcon','svActorHorzCells','updateLink','process_VisuMZ_BattleCore_BaseTroops','mpDamage','enemy','_enemyIDs','bottom','message2','Game_Actor_setup','updateBorderSprite','BackColor','Scene_Battle_commandFight','ARRAYSTR','ActionSkillMsg2','offsetY','addWindow','AutoBattleRect','_enemyMultiTargetWindow','isTimeActive','setSkill','isForAnyone','options','VoiceLine','clone','extraHeight','createEnemies','PreDamageAsUserJS','item','SkillItemBorderCols','refreshCursor','debuffColor','Game_Action_needsSelection','%1EndActionJS','save','changeAtbCastTime','setupActionSet','updateBossCollapse','BattleCmdList','CmdTextAlign','ActSeq_Animation_SkillAnimation','_createColorFilter','gainBravePoints','ActSeq_Grid_AnimationIDAtNode','ScaleX','isDeathStateAffected','special','PreApplyJS','isMeleeSingleTargetAction','_lastAction','_targetHomeY','isTpbCharged','dead\x20friends','setActionState','ActSeq_Movement_WaitForOpacity','PopupShiftY','Game_Action_testApply','itemEffectRecoverMp','positionOffsetX','PreStartTurnJS','ShowAddedState','_targetGrowY','frontview_ui','Buffs','popBaseLine','VisuMZ_4_CombatLog','terminate','debuffValueFmt','ActSeq_Grid_RemovePassiveStatesFromNode','Game_Action_numRepeats','AllowRandomSpeed','isSubjectValidForAnyoneSelect','ActSeq_Mechanics_SwapWeapon','setBattler','_lines','onBattleStart','resetTextColor','Window_BattleLog_pushBaseLine','NameAlwaysHidden','processExtendTroopMembers','StateIconOffsetY','updateTargetValue','_battleLayoutStyle','_tempEquipCheck','cameraClamp','_pattern','onFloatEnd','OverallFormulaJS','jsScaleUp','battleJump','AggroControlSystem','%1\x20is\x20missing\x20a\x20required\x20plugin.\x0aPlease\x20install\x20%2\x20into\x20the\x20Plugin\x20Manager.','exit','characterIndex','contains','displayReflectionPlayBack','walk','isDying','alive\x20opponents','playCancel','displayCounter','AnchorX','setReturnWindow','vertCells','NameAttachStateIcon','_animationCount','priority','ExtDisplayedParams','popupDamage','_eventId','displayItemMessage','_skewX','Scale','clearGlobalVariables','Sprite_Battler_update','resizeWindowXPStyle','createChildSprite','...','ActSeq_Mechanics_BreakShieldChange','_baseY','Window_BattleEnemy_hide','_createClientArea','VisuMZ_3_BattleVoices','Window_BattleLog_popupDamage','visualCutinPortraitIndex','Game_Map_battleback2Name','isDrain','SkewY','ActSeq_Grid_ActionAnimationAtNode','boxHeight','_damageContainer','_buffTurns','_svBattlerSprite','selectAll','requestPointAnimation','ARRAYJSON','_branch','moveBattlerHomeToPoint','setImmortal','sliceMin','AllEnemiesText','selectSymbol','pattern','isTpbReady','isCertainHit','_actionBattlers','partyCommandWindowRectBorderStyle','performSubstitute','MP_Rate','JS\x20%1START\x20ACTION','processTouch','_cursorArea','_homeEasing','ActSeq_Movement_MoveToJsPoint','extraPositionY','setupNegativeImpactFilter','ActSeq_Mechanics_Multipliers','isOpen','charging','updateBorderStyle','applyBattleCoreHitRateJS','StartName','commandNameWindowDrawBackground','removeBuff','CriticalHitMultiplier','_enemies','performTpbActiveCheckSwitch','VarianceFormulaJS','calcWindowHeight','USER-DEFINED\x202','ActSeq_Animation_GuardAnimation','Game_Temp_requestBalloon','Scene_Battle_isTimeActiveIBS','createDamageCounterWindow','attackStates','_lastActor','getInputButtonString','skew','addExtendedTroopMembers','targetObject','makeActionListAutoAttack','isStateResist','ParseWeaponNotetags','Destination','alive\x20enemies\x20not\x20user','playReflection','Name','processPostBattleCommonEvents','ANNOYED','StatusWindow_RectJS','ActSeq_Animation_AttackAnimation2','pageOffsetX','motionIdle','271155loApHr','FrontViewSelect','anchor','meetsSelectFrontviewActorConditions','updateCustomActionSequence','ActSeq_Mechanics_StbRemoveExcessActions','Variable','_damagePopupArray','retreat','visualCutinPortraitHue','ActSeq_Element_Clear','swing','updateFrame','startOpacity','battleMembers','isForDeadFriend','StepDistanceX','fadeShiftX','undecided','svBattlerAnchorX','current\x20target','ActSeq_Set_TargetActionSet','weatherType','autoRemovalTiming','MaxHP','_buffs','deadMembers','updateVisibility','onEncounterBattleCore','emerge','setFullActionsPTB','isAnyoneFloating','getHalfActionsPTB','dead\x20enemies','_list','displayAffectedStatus','_shadowScaleY','isSpriteVS8dir','VisuMZ_1_BattleCore\x20does\x20NOT\x20support\x20changing','CreateCutinSettings','ParseClassNotetags','active','_lineHeight','Parse_Notetags_TraitObjects','drawEnemyBattler','BattleManager_invokeCounterAttack','checkAutoCustomActionSequenceNotetagEffect','clearTargetBattlerKey','ActSeq_BattleLog_WaitForNewLine','\x5cI[%1]\x5cHEXCOLOR<%3>%2','ActSeq_BattleVoice_PlayCommonLine','isMeleeMultiTargetAction','autoBattleStyle','battleGrow','Sprite_Animation_targetSpritePosition','displayActionResults','_injectAnimationSprite','alterPriority','Pre','addAutoBattleCommand','targetsForOpponents','isForAnyoneFocusOpponents','process_VisuMZ_BattleCore_Notetags','all\x20enemies','cancelButtonText','TRAIT_PARAM','splice','clearWeaponAnimation','Scene_Map_updateCallMenu','651hvZigA','StatusWindowAttachmentBackOffsetX','autoBattleStart','moveToStartPositionBattleCore','displayAction','_allTargets','ConvertActionSequenceTarget','Sprite_Actor_setBattler','TpbGaugeOffsetY','stbGainInstant','ActSeqProjectiles','_isProjectile','battleOpacity','IconSet','setStateTooltipBattler','playEnemyDamage','Window_Options_statusText','_targetGrowX','drawLineText','_bypassCanCounterCheck','processAnimationRequests','_bypass_applyBattleCoreHitRateJS','drawActorName','okTargetSelectionVisibility','_subject','Users','ActSeq_Mechanics_Immortal','isAnyoneChangingOpacity','ext','addEscapeCommand','lukEffectRate','findSymbolExt','createRateJS','getParamBuffAndStateRate','_jumpWholeDuration','StatusWindowAttachmentBackOffsetY','_colorFilter','target','_fauxAnimationSprites','setBattleCameraTargets','ColorManager_mpColor','subject','_effectDuration','Scene_Battle_updateBattleProcess','ActSeq_Movement_WaitForSpin','DefaultHardCap','isBattlerTargeted','waitForNewLine','battleUIOffsetX','SKILLS','displayReflection','loadOtherActorImages','_floatEasing','_target','float','ConvertParams','isStateAffected','_inputting','Slot','BattleLayout','cancelHpLifeSteal','customDamageFormula','addAnimationSpriteToContainer','placeActorName','battleVoices','BattleManager_processAbort','hasStaticSvBattler','ActSeq_Impact_ZoomBlurTargetCenter','RegExp','ActSeq_Impact_TimeScale','PostEndBattleJS','_customDamageFormula','forceMotion','drawActorStateData','string','retrieveBattleBalloon','ActSeq_Weapon_SetActiveWeapon','ActSeq_Movement_Opacity','createDamageContainer','createInBattleStatusWindow','updateAttachmentSprites','onTurnEnd','AttachStateOffsetY','mainSpriteWidth','_angleRevertOnFinish','battleCommandName','isOptionsCommandEnabled','applySoftDamageCap','resetResultSwitches','ActionEffect','skillItemWindowRectBorderStyle','updateShadowVisibility','ANGLE','setupBattlebackBattleCore','displayedParams','VariableID','addNewState','SmoothImage','performMoveToTargets','numberFontFace','spriteId','_lastHpDamage','Sprite_Enemy_setBattler','expRate','Sprite_Actor_update','isForNotUser','requestAnimation','setVisibleUI','canSingleOrMultipleSelect','LastSelected','_commonEventIDs','updateInterpreter','VisuMZ_2_DragonbonesUnion','isDebuffAffected','redraw','<CUSTOM\x20ACTION\x20SEQUENCE>','weapons','-%1\x20MP','floor','drawEnemyName','FaceAway','startMotion','onActorOk','spinBattler','registerCommand','_statesWindow','BattleManager_processVictory','updateShadow','_updateDuration','contentsOpacity','HelpEscape','XPActorDefaultHeight','selectNextActor','hpDamageFmt','JumpToLabel','Game_Battler_performMiss','buffColor','ShowCounter','drawBackgroundRect','tone','Mirror','OffsetY','disarmMpLifeSteal','cancelTargetSelectionVisibility','drawItem','Angle','addImmortal','_hpGaugeSprite','HelpStatus','adjustFlippedBattlefield','normalIcon','updateDuration','STR','Scene_Battle_onEnemyCancel','itemLineRect','isActiveTpbReady','hitText','%1Event','setupOversaturateImpactFilter','_skillWindow','createActionSequenceProjectile','loadBattleback1','BattleManager_isTpbMainPhase','_stateSprite','AttackAnimation','ANTI_TINT_UI','createBattleFieldContainer','ScaleDown','replace','LIGHTBULB','BG_TYPE','contents','AnimationID','addState','startActorSelection','onBattleStartOnceParallels','\x5cC[%1]','alive\x20friends\x20not\x20user','requestBattleBalloon','_callSceneOptions','jsScaleToFit','atbInterrupt','HelpAutoBattle','processBattleCoreJS','actorId','playEnemyAttack','setHelpWindowItem','clearForcedGameTroopSettingsBattleCore','displayStartMessages','isOptionsCommandAdded','nextActor','onEscapeSuccess','isAlwaysHidden','ActSeq_ChangeSkew','loadEnemy','getDragonbones','BattleManager_abort','performCollapse','_damages','Spriteset_Battle_updateActors','Height','isFTB','setBattlerFacePoint','skillTypes','displayHpDamage','PreDamageJS','performCastAnimation','doesPageHaveOnceParallelStart','setupFont','setupMotion','_enemySprite','pagedown','ApplyImmortal','dead','ActSeq_Mechanics_EmulateAttackEffect','actions','onAngleEnd','isForOpponentBattleCore','addFightCommand','Letter','performJump','PreEndTurnJS','isGrowing','normalColor','ItemID','innerHeight','SwitchMissEvade','createAnimationSprite','filterArea','ActSeq_BattleLog_DisplayAction','makeDeepCopy','setSubject','createTroopNote','drawText','MAT','return\x200','createMultiTargetWindows','isRepeated','gainTp','battleCoreResumeLaunchBattle','_updateColorFilter','WaitForAnimation','updateAction','createBorderStylePortraitSprite','criticalDmgRate','battleProjectiles','Sprite_Battler_damageOffsetX','applyHardDamageCap','frameVisible','name','damageStyle','uiInputPosition','drawItemStatusListStyle','_skewWholeDuration','+%1\x20MP','drawItemStatus','getItemDamageAmountTextBattleCore','isGuardWaiting','WEAPON\x20SWAP','ActSeq_Mechanics_ActiveChainInputDisable','_endingBattle','WaitForExit','Scene_Battle_createAllWindows','processBorderActor','isOnCurrentMap','drawStates','getFullActionsPTB','changePaintOpacity','Scene_Battle_startPartyCommandSelection','statusWindowRect','displayAddedStates','%1\x20%2','Width','canGuard','battleEffect','autoBattleWindowRect','drawActorBuffRates','ActSeq_Mechanics_DeathBreak','SkillItemMiddleLayout','VariableHeal','performActionEndMembers','EscapeFailureJS','command119','Sprite_Actor_updateBitmap','updateOnceParallelInterpreters','updateShakeFlinch','VisuMZ_2_BattleSystemSTB','createLowerLayer','pha','itemTextAlign','recoverAll','ActSeq_Weapon_NextActiveWeapon','WindowWidth','buff','isForAliveFriend','makeTargets','isVisualHpGaugeDisplayed','initBattleCore','Damage','BindCommonEventKeysForGroup','#ffffff','toLowerCase','_handlers','BattleManager_onEncounter','FvAniCenterScreen','\x5cC[0]','updateJump','isPhysical','requestDragonbonesAnimation','_weaponSprite','updateCancelButton','fontSize','parallaxScrollXinvertEnemy','_motionSpeed','getNextDamagePopup','ShakeFlinchDuration','_targetBattlerKey','lifeStealTrait','PortraitScaleBorderStyle','Scene_Options','battleUIOffsetY','createStateIconSprite','ComboWindow','attackSkillId','BoostPoints','GUARD','isChangingOpacity','CheckMapBattleEventValid','inBattle','AS\x20TARGET','Game_Battler_makeSpeed','BARE\x20HANDS','textColor','itemHeight','ReflectPlayback','startTurn','missed','clearElementChanges','noSimilarSTypes','isPlaytest','PostRegenerateJS','updateBattleProcess','startAttackWeaponAnimation','actorCommandWindowRect','placeTimeGauge','inBattleStatusWindowRect','PostStartBattleJS','messageSpeed','Game_Action_isForAliveFriend','Targets2','redrawForGaugeRate','ATK','Scene_Battle_needsInputWindowChangeIBS','dying','requestMotion','stateHelpFmt','isChanting','drawActorFace','Item-%1-%2','_buttonText','checkSubstitute','createEnemyWindow','ActSeq_Projectile_Picture','cancelMpLifeSteal','BattleManager_initMembers','_tpbSceneChangeCacheActor','arPenRate','_waitCount','getTraitSetKeys','createBattleField','CriticalDmgRate','parallaxHue','Filename','Scene_Map_launchBattle','updateAngleCalculations','isBattlerFlipped','min','selectAllActors','addBattleCoreAutoBattleStyleCommand','battleback1Name','isBattleMember','AnchorY','usePremadeActionSequence','skewDuration','ComboWindow_RectJS','_enemyID','damagePopupOffsetY','Game_Action_executeMpDamage','Override','negativeLifeSteal','create','setCommonEvent','Scene_Battle_createCancelButton','BattleManager_endAction','setTroopPage','ActSeq_Grid_AddTriggerToNodeJS','CreateCommonEventKeys','isActionSelectionValid','find','_targetHits','drawItemActorFace','canInput','spell','loadSvEnemy','Window_BattleActor_show','lineHeight','Sprite_Actor_updateFrame','updateAttachedSprites','Param','isBypassDamageCap','faceWidth','CommandWidth','<%1>\x5cs*([\x5cs\x5cS]*)\x5cs*<\x5c/%1>','createAutoBattleWindow','ActSeq_Animation_ShowAnimationJS','process_VisuMZ_BattleCore_CreateRegExp','animationId','Window_BattleLog_performMagicEvasion','JS\x20%1APPLY\x20%2','makeActionOrders','_battleBalloonSprites','drawTextTopAligned','resetCounter','SvBattlerSolo-%1-%2','Sprite_Enemy_updateStateSprite','passiveText','XPActorCommandLines','VisuMZ_2_PartySystem','isCancelTriggered','expTotal','isDamagePopupRequested','updatePointAnimations','_reflectionTarget','autoSelect','isPartyCommandWindowDisabled','_opacityDuration','closeBattleActorWindow','_forcedBattlers','cutinExit','isClicked','logActionList','ShowFailure','ActSeq_Movement_MoveToTarget','makeSuccess','becomeSTBExploited','anchorY','in\x20order\x20for\x20Ally\x20or\x20Enemy\x20targeting\x20to\x20work\x20','applyDamageCaps','_interpreter','VisuMZ_3_WeaknessDisplay','_appeared','singleSkill','Game_Enemy_transform','MUSIC\x20NOTE','guardSkillId','Game_Action_isForRandom','all\x20targets','updateCounter','MaxLines','selectedBattlers','_commonEventQueue','ActSeq_Mechanics_StbExtraAction','updateGrow','onRegeneratePlayStateAnimation','battleCameraData','MUSIC-NOTE','isHidden','Actor-%1-%2','Scene_Battle_commandEscape','arRedFlat','resetBreakShield','_lastRegenFrameCount','join','_immortal','TimeScale','ActionSkillMsg1','ActorCmd','chant','isCustomBattleScope','Sprite_Actor_createStateSprite','VisuMZ_1_ElementStatusCore','VisuMZ_3_ActSeqCamera','setupCriticalEffect','Game_Action_setItem','StartTurnShow','_battleCoreBattleResumeAfter','Window_BattleLog_displayEvasion','removeStatesAuto','helpWindowRectBorderStyle','%1StartTurnJS','Reveal','Window_BattleLog_displayMiss','damageOffsetY','max','value','wait','isBattleCoreTargetScope','NameAsTarget','OffsetAdjust','_distortionSprite','_tpbState','Game_BattlerBase_meetsUsableItemConditions','DigitGroupingDamageSprites','applyGlobalCommonEventNotetags','HP_Rate','horzCells','enemyTpGaugeRate','setColorTone','gainHp','AutoMeleeSolo','getBattlerKeyTargetReplacement','Scene_Battle_createHelpWindow','_totalValue','TP_Flat','BattleVictoryJS','Window_BattleLog_performCounter','battleDisplayText','removeChildFromUiContainer','playCursor','abort','ARRAYNUM','IconStypeNorm','Game_BattlerBase_isStateResist','ActSeqImpact','STATUS','addSingleSkillCommands','checkShowHideSkillNotetags','skillWindowRect','_autoBattleWindow','worldTransform','makeStateHelpText','createBattleBalloon','ActSeq_Movement_Skew','_battleBalloonQueue','ActSeq_Impact_ColorBreak','_enemyWindowMode','createPageButtons','selectNextCommandTpb','setupBattleCoreData','updateStyleOpacity','next\x20target','isAppeared','ActSeq_Element_NullElements','gainStoredBoostPoints','MotionType','freezeFrame','canAttack','setMoveEasingType','animation','updateShadowBattleCore','ENEMY_OFFSET_X','gainCurrentActionsETB','allowCollapse','customFontFace','isBattlerGrounded','TextColor','%1▼','virtualClick','Game_Party_addActor','lifeSteaItem','Rate','MultiTarget','VisuMZ_0_CoreEngine','XPSpriteYLocation','Point','process_VisuMZ_BattleCore_Failsafes','HelpItem','updatePhase','isForFriendBattleCore','getAttackMotionSlot','_updateCursorFilterArea','-%1','parseForcedGameTroopSettingsBattleCore','autoSelectPriority','MessageWait','performLifeSteal','Game_Map_setupBattleback','result','updateForceAction','Window_BattleLog_displayMpDamage','totalHealFmt','StateIconOffsetX','_isBattlerFlipped','duration','slice','iconIndex','ActSeq_Target_RandTarget','removeCurrentAction','TpbActiveChangeEnabled','_dimmerSprite','%1Damage%2JS','formula','wtypeId','isAnimationShownOnBattlePortrait','Game_Action_apply','createDamageSprite','Window_BattleLog_update','updateCancel','pageButtons','CombatLogIcon','CmdTextAutoBattle','AutoBattle','_battlePortrait','PosOffsetY','STB','displayChangedBuffs','performMiss','_createDamageContainer','_preBattleCommonEvent','equips','addGeneralOptions','isEnemy','_actorWindow','Enable','PreDamageAsTargetJS','startBattle','BattleManager_inputtingAction','_tempActor','drawItemStatusXPStyle','AsTarget','sprite','commandFight','visualHpGauge','VisuMZ_1_MainMenuCore','isForFriend','emulateActionEffect','FaceDirection','battlerName','SHOW_BUTTON','updatePageButtonVisibility','StatusWindowSelectableBackHide','alive\x20enemies\x20not\x20target','gainHalfActionsPTB','powerUpColor','makeBattleCommand','selectAllEnemies','isSelected','isBorderPortraitSpriteVisible','substitute','blt','opacity','addAttackCommand','numTargets','skewBattler','alterBreakShield','ArRedFlat','Scene_Battle_start','getAttackMotion','bitmapWidth','_commandNameWindow','AS\x20USER','_jumpDuration','_createEffectsContainer','action','Scene_Map_initialize','addNormalStatus','drawBuffs','all\x20actors','getLastPluginCommandInterpreter','CalcActionSpeedJS','Game_Action_itemEffectAddNormalState','currentAction','pageButtonY','BattleGridSystem','PostApply%1JS','Scene_Battle_createEnemyWindow','createKeyJS','updateStateSprite','ActSeq_Grid_PushFromTargetNode','Window_BattleLog_refresh','createHpGaugeSprite','createCancelButton','LIGHT','applyBattleCoreCriticalHitRateJS','increaseTotal','launchBattle','compareBattlerSprites','updateKeyboardKeys','setupDesaturateImpactFilter','process_VisuMZ_BattleCore_PreBattleCommonEvent','updateSpin','touchUI','makeStateName','selectLast','_lastPluginCommandInterpreter','mhp','not\x20focus','Window_BattleActor_hide','attackAnimationId1','repositionCancelButtonBorderStyle','findIndex','getDualWieldTimes','useItem','_battleField','Sprite_Enemy_updateCollapse','testApply','isUnderAnimation','_stypeIDs','MotionFrameWait','format','moveBattlerDistance','ShowCritical','setFrame','_displayBattleCoreTransitionErrorMsg','ESCAPE','updateStateSpriteBattleCore','_performDamageMotion','WaitCount2','log','offsetX','createBattleFieldBattleCore','setActiveWeaponSet','scrollTo','makeTargetsBattleCore','globalAlpha','_skewY','setCustomDamageFormula','battlerSprites','isForAll','AutoAddState','CastPhysical','stateMotionIndex','PreStartBattleJS','backColor','waitForJump','_forActor','gainMp','VisuMZ_2_BattleSystemBTB','getBattlerKeyTargets','cancel','_borderPortraitDuration','AllActorsText','drawItemActorSprite','bind','drawActorIcons','showAnimation','makeTargetsBattleCoreJS','isAffectedByBreakShield','checkTpbInputClose','HITTYPE_PHYSICAL','ParseArmorNotetags','BattleManager_makeActionOrders','displayCurrentState','actor%1-gauge-%2','setEventCallback','StartTurnMsg','rate','createMultiTargetWindow','_offsetX','WaitForZoom','Game_Interpreter_updateWaitMode','Scene_Battle_createPartyCommandWindowIBS','context','createEffectActionSet','Game_Action_isForOpponent','setHome','_animation','_updateFilterArea','Game_Action_itemTargetCandidates','silentHomeMove','ForceExploited','ActSeq_Animation_AttackAnimation','animationShouldMirror','Debuffs','rec','portraitFlipHorz','Window_BattleLog_displayTpDamage','move','attackMotions','\x5cC[5](Turns\x20%2%1\x5cC[5])\x5cC[0]','Scene_Battle_updateCancelButton','EFFECT_COMMON_EVENT','battlerKey','%1EndBattleJS','MpGaugeOffsetY','addCombatLogCommand','ActSeq_Cutin_WaitForExit','notFocusValid','animationNextDelay','Scene_Boot_onDatabaseLoaded','hasAspectData','PreRegenerateJS','_skewDuration','checkExtendTroopCompatibility','drawItemStyleIconText','border','setEnemyWindowMode','windowPadding','_floatHeight','PopupPosition','version','isRightInputMode','turnOrderChangeOTB','partyCommandWindowRect','_damageCounterWindow','GroupDigits','toUseBoostPoints','WaitForOpacity','lineRect','endBattle','setHandler','fight','guardHpLifeSteal','isForOne','commandName','attackStatesRate','ATTACK','isBuffAffected','enemyHiddenParameter','_namesCount','VisuMZ_4_IconBalloons','_back1Sprite','addActor','onHomeMoveEnd','processForcedAction','user','process_VisuMZ_BattleCore_PluginParams','Window_ActorCommand_setup','svAnchorX','canAddSkillCommand','ZZZ','updateOpacity','evalDamageFormula','ActSeq_Horror_TVRemove','JS\x20%1REGENERATE','Action\x20Sequence\x20Impact\x20needs\x20an\x20update!','includeState','itemTargetCandidates','Game_BattlerBase_allIconsIBS','mainSprite','stepFlinch','temporaryVisibile','pageOffsetY','Shadow2','SvBattlerMass-%1-%2','setup','turn','updateHomeMove','VisuMZ_2_BattleSystemATB','Game_Troop_setup','battleFloat','Sprite_Enemy_createStateIconSprite','onEncounter','ActSeq_BattleLog_UI','portraitHue','isAutoBattle','portraitFilename','SvMotionIdleMass-%1-%2','sortEnemies','drawBattlerData','parameters','growBattler','addText','initBattlePortrait','StatusWindowAttachmentFront','mainSpriteScaleX','attackAnimationIdSlot','WaitComplete','checkSceneBattleTransitionable','Sprite_Enemy_initVisibility','itemHit','isItemCommandEnabled','isForOneBattleCore','counterAttack','onEnemyCancel','ClearBattleLog','drawTurnsRemaining','drawItemImageXPStyle','moveBattlerToPoint','createPartyCommandWindow','createTargetsJS','WaitForCamera','regenerateAll','ActSeq_Set_WholeActionSet','FvAniCenterAll','gaugeRate','_deathStateApplied','nameColor','addChildToBack','targetSpritePosition','setBattleZoom','enemyNames','mmp','traitObjects','enabled','callOptions','_character','call','isCurrentItemEnabled','eraseState','createHelpWindowBattleCore','maxTp','finishActionSet','BattleCore','message4','commandAutoBattle','pow','_attackAnimationId','getBattlerFromKey','Game_Battler_forceAction','ShowCosts','getAspectData','Scene_Battle_skillWindowRect','_battleCoreBattleStartEvent','revealNewWeaknesses','VisuMZ_2_BattleSystemCTB','ActSeq_Movement_FaceJsPoint','_flashDuration','ActionCount','isAtbChargingState','loadFaceImages','battleCommandIcon','FlinchDistanceX','isPreviousSceneBattleTransitionable','MpGaugeOffsetX','displayRemovedStates','animationWait','_shakeFlinchPower','\x5c}\x5cC[21]Total\x20Healing:\x20\x5c{\x5cC[24]+%1','setHorrorEffectSettings','+%1','dimColor1','makeCommandList','_cancelButton','CoreEngine','front\x20base','_makeCursorAlpha','ResetFocus','Post','HITTYPE_CERTAIN','trueRandomTarget','jsAccuracyAsTarget','statesWindowRect','Scene_ItemBase_applyItem','setText','AdjustRect','isAnyoneGrowing','icons','ALL_ENEMIES','clearActiveWeaponSet','performEvasion','createDigits','setTargetBattlerKey','sideview_ui','lifeStealRate','initialize','PopupOffsetY','getNextSubjectFromPool','createContents','removeAnimation','damageContainer','applyGlobal','clearNameTempVisibility','updateBattlebackBitmap2','ActionSequence','addBattleGridMoveCommand','checkCacheKey','ActSeq_Impact_MotionBlurTarget','drawComboText','removeBuffsAuto','shadow','ForceExploiter','PreStartActionJS','isNameTemporarilyVisible','actorCommandEscape','ALL_ACTORS','ActSeq_Mechanics_BreakShieldReset','ActSeq_Movement_Spin','CheckSkillCommandShowSwitches','jumpBattler','ActSeq_Cutin_AddVisualCutinEffect','maxWidth','isOverworld','Window_BattleStatus_initialize','Game_Battler_regenerateAll','flashColor','8LPUbwj','ActSeq_Movement_HomeMoveToTarget','performMoveToPoint','totalDmgFmt','ActSeq_Mechanics_AddBuffDebuff','canAttackBattleCore','updateSkew','nextActiveWeaponSlot','autoBattle','startMove','LifeStealRegExp','battleCamera','CriticalHitRateJS','_emptyBitmap','isAnyoneSkewing','collapseType','endAnimation','PopupShiftX','ActSeq_Mechanics_CtbSpeed','setupIconTextPopup','ActSeq_Cutin_WaitForEntrance','invokeMagicReflection','Window_SkillList_maxCols','changeInputWindow','FocusX','ActSeq_Animation_BalloonIcon','100%','CmdIconStatus','BattleSystemSTB','normalText','abnormal','updateEventMain','push','_performActionEnd','svAnchorY','setBackgroundType','ActSeq_Impact_MotionBlurScreen','setupChild','svBattlerShadowVisible','startHomeMove','portraitFlipVert','Game_Map_encounterList','PrioritySortActive','negativeHpLifeSteal','updateFlip','deathStateId','MDF','checkTpbInputOpen','\x5cI[%1]\x5cC[%3]%2','_jumpHeight','activate','processEnemyModeTouchBattleCore','WaitForEntrance','HomePosJS','opponentsUnit','POST-','needsActorInputCancel','▼%1','startSkew','pages','ActSeq_Impact_MotionTrailCreate','canGuardBattleCore','update','dimColor2','pushBaseLine','Mechanics','CheckVisibleBattleNotetags','%1RegenerateJS','performActionMotions','ActSeq_Horror_TVCreate','jsCritRateAsUser','VisuMZ_2_WeaponSwapSystem','\x5cC[16]%1\x5cC[0]','originalName','drawActorClass','BattleManager_cancelActorInput','WaitForJump','BattleDefeatJS','ActSeq_Movement_HomeReset','basicGaugesY','battleAnimation','damageOffsetX','Window_BattleLog_displayCurrentState','isItem','currentExt','ActSeq_Mechanics_PtbFullHalfAction','drawItemBackground','getSpecificBattlerKeyTarget','applyImmortal','_cursorSprite','isAlive','isCancelLifeSteal','isHiddenSkill','right','_windowLayer','registerDefeatedEnemy','isAlwaysVisible','removedBuffs','STRUCT','GetActionSequenceSpecialTargetWithFlags','enemyMpGaugeRate','enemyHpGaugeRate','ActSeq_Mechanics_HpMpTp','VisuMZ_3_ActSeqProjectiles','WaitForFloat','isForOpponent','cameraDuration','resize','Scene_Battle_createActorCommandWindow','pointY','IconStypeMagic','processDrawEnemyBattler','getHardDamageCap','isLearnedSkill','Window_BattleLog_performMiss','_animationSprites','extraPositionScaledY','_actor','ConvertCount','setAttack','iconHeight','isAnyoneSpinning','enemyShowParametersIfBattleTest','PosOffsetX','makeActionList','VisuMZ_3_ActSeqImpact','isActiveTpb','damageText','Scene_Battle_selectPreviousCommand','autoBattleAtStart','negativeMpLifeSteal','addGuardCommand','getBattlePortraitOffsetX','_tempBattler','damage','Normal','NameDamageVisibility','Scene_Battle_terminate','ActSeq_Skew_WaitForSkew','actionsFmt','_defeatedEnemies','skillId','attackTimesAdd','_growEasing','_skewEasing','isSkillItemWindowsMiddle','isSpriteVisible','updateWeather','smooth','alterCost','Balloon','PreDamage%1JS','Immortal','ActSeq_DB_DragonbonesMotionAni','isSideButtonLayout','Game_Actor_equips','unchanged','changeCtbCastTime','isMVAnimation','Game_Interpreter_command301','ShowWeapon','getReturnWindow','InBattleStatus','BattleManager_startTurn','setupShockwaveImpactFilter','isBattleRefreshRequested','isGuard','setStateTurns','_shake','ShowActorGauge','STYPES','StatusWindow_DrawJS','repeats','Scene_Battle_createPartyCommandWindow','Scene_Battle_itemWindowRect','startPartyCommandSelection','_angleWholeDuration','ActSeq_Mechanics_OnceParallel','softDamageCapRate','_regionBattleback2','dragonbonesData','BaseTroopIDs','svShadow','\x5c}\x5cC[21]Total\x20Damage:\x20\x5c{\x5cC[0]%1','alterType','2886152buHzuO','DistanceAdjust','VisuMZ_1_SkillsStatesCore','resetNameTempVisibility','currentMaxValue','battleCommands','_commonEventKey','setSTBExploited','_tpbNeedsPartyCommand','_doubleTouch','BattleManager_startBattle','AGI','ActSeq_Grid_TeleportToNode','createMainSprite','_baseX','EXCLAMATION','BattleLogRectJS','getDefeatedEnemies','Sprite_Battler_initMembers','_inBattleStatusWindow','hardDamageCap','isSpinning','BattleSystemCTB','8394yTgfrL','ACTOR_OFFSET_X','gaugeLineHeight','onAllActionsEnd','_borderPortraitSprite','%1\x20Aspect','isForRandom','dead\x20actors','OffsetX','Window_BattleLog_performEvasion','SkillItemStandardCols','time','VisualCutinEffect','drawTextEx','movement','windowskin','sortDamageSprites','forceWeaponAnimation','icon','flipVisualCutinVert','Amp','alive\x20friends','_homeDuration','preemptive','optDisplayTp','blockWidth','gainCurrentActionsFTB','isDTB','open','Game_Troop_expTotal','wholeActionSet','EnableSoftCap','placeGauge','createBattleUIOffsetX','USER-DEFINED\x204','drawItemImageListStyle','battleSkew','ARRAYSTRUCT','createJS','ShakeFlinch','NameAlwaysVisible','_inBattleStatusMode','itemCri','_states','setLastPluginCommandInterpreter','die','Game_Temp_requestAnimation','DTB','portrait','Style','mainFontSize','portraitIndex','hitRate','executeDamage','_actionInputIndex','buffNameFmt','updateFloat','addOptionsCommand','addStateTurns','_colorTone','_cache','StatusGraphic','displayMpDamage','isQueueOptionsMenu','QoL','PopupOffsetX','_executedValue','ActSeq_Cutin_EndVisualCutinEffectAll','createBattleUIOffsetY','AddOption','Game_Action_isForAll','battleCoreTpbMainPhase','ActSeq_Mechanics_OtbOrder','prototype','FilenameJS','textWidth','addDamageSprite','minimumStayDuration','BattleManager_onEscapeSuccess','BreakShields','waitForFloat','Elements','applyEasing','isBreakStunned','ActSeq_Impact_MotionTrailRemove','buffRemove','_weather','jsCritRateAsTarget','ShowMissEvasion','speed','NUM','applyItem','_speed','_battlerHue','33024dIoOZf','textAlign','createEnemyNameContainer','svBattlerAnchorY','drawActorGraphic','addSkillCommands','requestBalloon','members','_updateTargetValue','setHelpWindow','Game_Action_isForDeadFriend','_requestRefresh','AddHpGaugeOption','ActSeq_Projectile_Icon','isDisarmLifeSteal','hue','performWeaponAnimation','_multipliers','_blendColor','removeChild','anchorX','param','ActSeq_Mechanics_TextPopup','Sprite_Gauge_smoothness','applyGuard','ActSeq_Movement_WaitForMovement','shift','randomInt','remove','states','EasingType','updateCommandNameWindow','ActSeq_Horror_NoiseCreate','isAttack','AsUser','refresh','isAnyoneMoving','stateColor','Window_BattleEnemy_show','setupRgbSplitImpactFilter','startSpin','alphabetic','Sprite_Battler_updatePosition','processRefresh','Armor-%1-%2','_growY','ActSeq_Mechanics_Collapse','setValue','ActSeq_Impact_ZoomBlurPoint','TextAlign','ParseSkillNotetags','isBigCharacter','battleStatusSprite','changeWeather','loadPicture','resetFontSettings','Scene_QuickLoad','AttachStateOffsetX','executeMpDamage','setupMotionBlurImpactFilter','_targets','Game_Enemy_setup','gainFullActionsPTB','hitType','_flinched','drawDarkRect','_partyWindow','ShuffleArray','forActor','alive\x20battlers','canMove','prepareBorderActor','callNextMethod','updateEffectContainers','autoMeleeSingleTargetActionSet','NameLegacy','adjustWeaponSpriteOffset','_onceParallelInterpreters','DistanceX','bitmap','ActSeq_Grid_RemoveTriggerFromNode','\x5cC[6]%1\x5c}\x20\x5cC[4]Heal\x20Combo\x5c{','_flashColor','setGuard','makeData','Sprite_Battler_isMoving','Skill-%1-%2','ActSeq_Skew_Reset','isJumping','ParseEnemyNotetags','getBattlePortrait','timeScale','startWeaponAnimation','_spriteset','applyBattleCoreJS','ActSeq_Element_AddElements','_visualHpGauge_JustDied','loadBitmap','mainSpriteScaleY','needsSelectionBattleCore','getNextSubject','refreshMotion','default','setBattleAngle','CounterPlayback','Linear','\x5cC[4](Passive)','CalcEscapeRatioJS','clearBattleBalloons','ActSeq_Impact_ShockwavePoint','ElementStatusCore','base','_padding','onBattleEndBattleCore','selectPreviousCommand','TpbGaugeOffsetX','StartTurnWait','ShowMpDmg','HpGaugeOffsetX','battlerShadowScaleX'];_0x1f1e=function(){return _0x51e273;};return _0x1f1e();}function Window_InBattleStatus(){this['initialize'](...arguments);}Window_InBattleStatus[_0x23168f(0xa01)]=Object[_0x23168f(0x69e)](Window_StatusBase[_0x23168f(0xa01)]),Window_InBattleStatus[_0x23168f(0xa01)][_0x23168f(0xbc5)]=Window_InBattleStatus,Window_InBattleStatus[_0x23168f(0xb9c)]={'bgType':VisuMZ[_0x23168f(0x895)][_0x23168f(0xbac)]['InBattleStatus']['StatusWindow_BgType']??0x0,'statusGraphic':VisuMZ['BattleCore']['Settings']['InBattleStatus'][_0x23168f(0x9f5)]??_0x23168f(0x2db),'statusHelpDesc':VisuMZ['BattleCore']['Settings'][_0x23168f(0x98a)][_0x23168f(0x5ac)]??'View\x20battle\x20member\x20status.','pageButtons':VisuMZ[_0x23168f(0x895)][_0x23168f(0xbac)][_0x23168f(0x98a)][_0x23168f(0x76e)]??!![],'pageButtonPosition':VisuMZ[_0x23168f(0x895)][_0x23168f(0xbac)]['InBattleStatus'][_0x23168f(0x409)]??_0x23168f(0xb07),'pageOffsetX':VisuMZ[_0x23168f(0x895)]['Settings'][_0x23168f(0x98a)][_0x23168f(0x4d1)]??0x0,'pageOffsetY':VisuMZ[_0x23168f(0x895)][_0x23168f(0xbac)][_0x23168f(0x98a)]['pageOffsetY']??0x0,'buffValueFmt':VisuMZ[_0x23168f(0x895)][_0x23168f(0xbac)][_0x23168f(0x98a)]['buffValueFmt']??_0x23168f(0x1f1),'debuffValueFmt':VisuMZ[_0x23168f(0x895)]['Settings'][_0x23168f(0x98a)][_0x23168f(0x455)]??_0x23168f(0x921),'enemyStatus':VisuMZ[_0x23168f(0x895)]['Settings'][_0x23168f(0x98a)][_0x23168f(0x1fb)]??!![],'enemyShowLevel':VisuMZ[_0x23168f(0x895)][_0x23168f(0xbac)][_0x23168f(0x98a)][_0x23168f(0x362)]??!![],'enemyHpGaugeRate':!![],'enemyMpGaugeRate':!![],'enemyTpGaugeRate':!![],'enemyHiddenParameter':VisuMZ[_0x23168f(0x895)][_0x23168f(0xbac)][_0x23168f(0x98a)]['enemyHiddenParameter']??'???','enemyShowParametersAlways':VisuMZ['BattleCore']['Settings'][_0x23168f(0x98a)][_0x23168f(0x1e7)]??![],'enemyShowParametersIfBattleTest':VisuMZ[_0x23168f(0x895)]['Settings'][_0x23168f(0x98a)][_0x23168f(0x962)]??!![],'enemyShowParametersIfDefeated':VisuMZ['BattleCore'][_0x23168f(0xbac)][_0x23168f(0x98a)][_0x23168f(0x112)]??!![]},Window_InBattleStatus['prototype'][_0x23168f(0x8c9)]=function(_0x4e7c78){const _0x1101c7=_0x23168f;Window_StatusBase[_0x1101c7(0xa01)][_0x1101c7(0x8c9)][_0x1101c7(0x88f)](this,_0x4e7c78),this[_0x1101c7(0x90b)](Window_InBattleStatus[_0x1101c7(0xb9c)][_0x1101c7(0xb31)]),this[_0x1101c7(0x35d)](),this[_0x1101c7(0x18c)](),this[_0x1101c7(0x730)]();},Window_InBattleStatus[_0x23168f(0xa01)][_0x23168f(0x45b)]=function(_0x738bda){const _0x4a8126=_0x23168f;this['_battler']=_0x738bda,this[_0x4a8126(0xa39)](),this['_statesWindow']&&this[_0x4a8126(0x595)][_0x4a8126(0x45b)](_0x738bda);},Window_InBattleStatus[_0x23168f(0xa01)][_0x23168f(0x9d4)]=function(){const _0x1eba61=_0x23168f;Window_StatusBase[_0x1eba61(0xa01)][_0x1eba61(0x9d4)]['call'](this);if(this[_0x1eba61(0x595)])this[_0x1eba61(0x595)][_0x1eba61(0x9d4)]();this[_0x1eba61(0x78d)](),Imported['VisuMZ_3_StateTooltips']&&SceneManager[_0x1eba61(0x526)](null);},Window_InBattleStatus['prototype'][_0x23168f(0x2c5)]=function(){const _0xdf09d2=_0x23168f;Window_StatusBase[_0xdf09d2(0xa01)]['close'][_0xdf09d2(0x88f)](this);if(this[_0xdf09d2(0x595)])this[_0xdf09d2(0x595)][_0xdf09d2(0x2c5)]();},Window_InBattleStatus[_0x23168f(0xa01)][_0x23168f(0x478)]=function(_0x5b28b7){const _0x34e425=_0x23168f;this[_0x34e425(0xfb)]=_0x5b28b7;},Window_InBattleStatus['prototype'][_0x23168f(0x989)]=function(){const _0x175fea=_0x23168f;return this['_returnWindow']||SceneManager['_scene'][_0x175fea(0xa58)];},Window_InBattleStatus[_0x23168f(0xa01)][_0x23168f(0x8a6)]=function(){const _0x566252=_0x23168f;Window_StatusBase[_0x566252(0xa01)][_0x566252(0x8a6)][_0x566252(0x88f)](this),this[_0x566252(0x54b)]();},Window_InBattleStatus[_0x23168f(0xa01)][_0x23168f(0x54b)]=function(){const _0xef92f9=_0x23168f;for(const _0x29084c of $gameParty[_0xef92f9(0xa1d)]()){if(!_0x29084c)continue;_0x29084c[_0xef92f9(0x166)]()&&ImageManager[_0xef92f9(0x165)](_0x29084c[_0xef92f9(0x166)]()),_0x29084c['battlerName']()&&ImageManager[_0xef92f9(0x367)](_0x29084c['battlerName']()),Imported[_0xef92f9(0x787)]&&_0x29084c[_0xef92f9(0x267)]()&&ImageManager[_0xef92f9(0xa4c)](_0x29084c[_0xef92f9(0x267)]());}},Window_InBattleStatus['prototype'][_0x23168f(0x35d)]=function(){const _0x25e7a3=_0x23168f;this[_0x25e7a3(0x5ea)]=new Sprite(),this[_0x25e7a3(0x5ea)][_0x25e7a3(0x4d5)]['x']=0.5,this[_0x25e7a3(0x5ea)][_0x25e7a3(0x4d5)]['y']=0x1,this['addChild'](this[_0x25e7a3(0x5ea)]);},Window_InBattleStatus[_0x23168f(0xa01)]['createStatesWindow']=function(){const _0x3d5a03=_0x23168f,_0xc22f70=this['statesWindowRect'](),_0x281b87=new Window_InBattleStatusStates(_0xc22f70);this[_0x3d5a03(0x314)](_0x281b87),_0x281b87['setHelpWindow'](SceneManager[_0x3d5a03(0x23e)][_0x3d5a03(0x10a)]),this['_statesWindow']=_0x281b87;},Window_InBattleStatus[_0x23168f(0xa01)][_0x23168f(0x8bc)]=function(){const _0x384dd7=_0x23168f,_0x2da274=Window_InBattleStatusStates[_0x384dd7(0xb9c)][_0x384dd7(0x8e3)],_0x293c1d=Math[_0x384dd7(0x690)](_0x2da274,Math[_0x384dd7(0x58e)](this[_0x384dd7(0x2e0)]/0x2)),_0xbeee47=Graphics[_0x384dd7(0x2d7)]>0x44c?this['height']:this[_0x384dd7(0x6ad)]()*0x4+this['padding']*0x2,_0x2cda23=this[_0x384dd7(0x2e0)]-_0x293c1d,_0x65816f=this[_0x384dd7(0xb1c)]-_0xbeee47;return new Rectangle(_0x2cda23,_0x65816f,_0x293c1d,_0xbeee47);},Window_InBattleStatus[_0x23168f(0xa01)][_0x23168f(0x730)]=function(){const _0x5ef371=_0x23168f;if(!ConfigManager[_0x5ef371(0x7c1)])return;if(!Window_InBattleStatus[_0x5ef371(0xb9c)][_0x5ef371(0x76e)])return;this[_0x5ef371(0x12d)]=new Sprite_Button(_0x5ef371(0xbf0)),this[_0x5ef371(0x12d)]['x']=this['pageButtonX']()+Window_InBattleStatus[_0x5ef371(0xb9c)][_0x5ef371(0x4d1)],this[_0x5ef371(0x12d)]['y']=this[_0x5ef371(0x7ae)]()+Window_InBattleStatus[_0x5ef371(0xb9c)][_0x5ef371(0x858)];const _0x420265=this[_0x5ef371(0x12d)]['x']+this['_pageupButton'][_0x5ef371(0x2e0)];this['_pagedownButton']=new Sprite_Button('pagedown'),this['_pagedownButton']['x']=_0x420265+0x4,this[_0x5ef371(0x1d9)]['y']=this[_0x5ef371(0x12d)]['y'],this[_0x5ef371(0x314)](this['_pageupButton']),this['addChild'](this['_pagedownButton']),this[_0x5ef371(0x12d)]['setClickHandler'](this[_0x5ef371(0x233)][_0x5ef371(0x7f5)](this)),this['_pagedownButton']['setClickHandler'](this[_0x5ef371(0x5d6)]['bind'](this));},Window_InBattleStatus[_0x23168f(0xa01)]['pageButtonX']=function(){const _0x311bc3=_0x23168f;if(Graphics[_0x311bc3(0x2d7)]>0x44c&&Graphics['boxHeight']>0x2bc){if(Window_InBattleStatus[_0x311bc3(0xb9c)][_0x311bc3(0x409)]==='left'){let _0x565ece=Math[_0x311bc3(0x330)]((-this['x']-0x64)/0x2);if(_0x565ece>=-0x64)_0x565ece=this['padding'];return _0x565ece;}else{const _0x10dc7e=Graphics[_0x311bc3(0x2d7)]-this['x']-this['width'];let _0x7d835=Math[_0x311bc3(0x58e)]((_0x10dc7e-0x64)/0x2)+this[_0x311bc3(0x2e0)];return _0x7d835;}}else return this[_0x311bc3(0x2e0)]-0x64-this['padding']/0x2;},Window_InBattleStatus[_0x23168f(0xa01)][_0x23168f(0x7ae)]=function(){const _0x2ce458=_0x23168f;return Graphics[_0x2ce458(0x2d7)]>0x44c&&Graphics[_0x2ce458(0x493)]>0x2bc?this[_0x2ce458(0xb1c)]-0x30-this[_0x2ce458(0x1d3)]:0x30+this[_0x2ce458(0x1d3)];},Window_InBattleStatus[_0x23168f(0xa01)][_0x23168f(0x233)]=function(){const _0x49d749=_0x23168f;let _0x59e10f=this[_0x49d749(0xe9)]();if(_0x59e10f['length']<=0x1&&!Window_InBattleStatus[_0x49d749(0xb9c)][_0x49d749(0x1fb)])return;let _0x15cf45=_0x59e10f[_0x49d749(0xb3c)](this[_0x49d749(0x311)]);_0x15cf45--;_0x15cf45<0x0&&(Window_InBattleStatus[_0x49d749(0xb9c)][_0x49d749(0x1fb)]&&(_0x59e10f=this['getBattleMembers'](!![])),_0x15cf45=_0x59e10f[_0x49d749(0x312)]-0x1);const _0x446cc8=_0x59e10f[_0x15cf45];this[_0x49d749(0x45b)](_0x446cc8),SoundManager[_0x49d749(0x71e)]();},Window_InBattleStatus[_0x23168f(0xa01)][_0x23168f(0x5d6)]=function(){const _0x5db852=_0x23168f;let _0x31d595=this[_0x5db852(0xe9)]();if(_0x31d595['length']<=0x1&&!Window_InBattleStatus[_0x5db852(0xb9c)][_0x5db852(0x1fb)])return;let _0x34215e=_0x31d595['indexOf'](this[_0x5db852(0x311)]);_0x34215e++;_0x34215e>=_0x31d595[_0x5db852(0x312)]&&(Window_InBattleStatus[_0x5db852(0xb9c)]['enemyStatus']&&(_0x31d595=this['getBattleMembers'](!![])),_0x34215e=0x0);const _0x145f20=_0x31d595[_0x34215e];this[_0x5db852(0x45b)](_0x145f20),SoundManager[_0x5db852(0x71e)]();},Window_InBattleStatus[_0x23168f(0xa01)][_0x23168f(0xe9)]=function(_0x21082a){const _0x5703dd=_0x23168f;let _0x244aff=[];const _0x32b7ec=_0x21082a?this['_battler'][_0x5703dd(0x91e)]():this[_0x5703dd(0x311)][_0x5703dd(0x337)]();return _0x32b7ec===$gameParty?_0x244aff=$gameParty[_0x5703dd(0x4e1)]():_0x244aff=$gameTroop[_0x5703dd(0x2a6)](),_0x244aff[_0x5703dd(0xa32)](null);},Window_InBattleStatus[_0x23168f(0xa01)][_0x23168f(0x926)]=function(){const _0x382ce0=_0x23168f;Window_Base[_0x382ce0(0xa01)][_0x382ce0(0x926)][_0x382ce0(0x88f)](this),this[_0x382ce0(0x37b)]();},Window_InBattleStatus[_0x23168f(0xa01)][_0x23168f(0x37b)]=function(){const _0xf37115=_0x23168f;if(this[_0xf37115(0x152)]()){if(this[_0xf37115(0x6c4)]())return this[_0xf37115(0xb1f)]();if(Input[_0xf37115(0x605)](_0xf37115(0x945)))return this[_0xf37115(0x5d6)]();if(Input[_0xf37115(0x605)](_0xf37115(0xb07)))return this[_0xf37115(0x233)]();}},SoundManager[_0x23168f(0x71e)]=function(){this['playSystemSound'](0x0);},Window_InBattleStatus[_0x23168f(0xa01)][_0x23168f(0x152)]=function(){const _0x87b8c8=_0x23168f;return this['isOpen']()&&this[_0x87b8c8(0x12e)];},Window_InBattleStatus[_0x23168f(0xa01)][_0x23168f(0x6c4)]=function(){const _0x476161=_0x23168f;if(Input['isTriggered'](_0x476161(0x7f1)))return!![];if(TouchInput[_0x476161(0x16d)]())return!![];return![];},Window_InBattleStatus[_0x23168f(0xa01)]['processCancel']=function(){const _0x12669b=_0x23168f;SoundManager[_0x12669b(0x475)](),this['deactivate'](),this[_0x12669b(0x595)]&&(this[_0x12669b(0x595)][_0x12669b(0xb20)](),this[_0x12669b(0x595)][_0x12669b(0xad5)]()),SceneManager[_0x12669b(0x23e)][_0x12669b(0x278)]();},Window_InBattleStatus[_0x23168f(0xa01)][_0x23168f(0x78d)]=function(){const _0x21719b=_0x23168f;if(!this[_0x21719b(0x12d)])return;if(!this[_0x21719b(0x1d9)])return;const _0x187b2d=$gameParty[_0x21719b(0x4e1)]()[_0x21719b(0x312)]>0x0||Window_InBattleStatus['SETTINGS']['enemyStatus'];this[_0x21719b(0x12d)][_0x21719b(0x12e)]=_0x187b2d,this[_0x21719b(0x1d9)][_0x21719b(0x12e)]=_0x187b2d;},Window_InBattleStatus[_0x23168f(0xa01)]['refresh']=function(){const _0x141b0d=_0x23168f;Window_StatusBase[_0x141b0d(0xa01)][_0x141b0d(0xa39)][_0x141b0d(0x88f)](this);if(this[_0x141b0d(0x5ea)])this[_0x141b0d(0x5ea)][_0x141b0d(0x198)]();this[_0x141b0d(0x5c3)][_0x141b0d(0x176)](),this[_0x141b0d(0x120)][_0x141b0d(0x176)]();if(!this['_battler'])return;this[_0x141b0d(0x869)]();},Window_InBattleStatus['prototype']['drawBattlerData']=function(){const _0x7c5c8c=_0x23168f;if(VisuMZ['BattleCore'][_0x7c5c8c(0xbac)][_0x7c5c8c(0x98a)][_0x7c5c8c(0x993)])return VisuMZ[_0x7c5c8c(0x895)]['Settings']['InBattleStatus']['StatusWindow_DrawJS'][_0x7c5c8c(0x88f)](this);{const _0x3c4e51=this[_0x7c5c8c(0x10c)]()/0x2,_0x50244c=ImageManager[_0x7c5c8c(0x279)],_0x514d1d=_0x50244c/0x2-this[_0x7c5c8c(0x6ad)]()*1.5;this[_0x7c5c8c(0xa1a)](this[_0x7c5c8c(0x311)],_0x3c4e51+0x1,0x0,ImageManager[_0x7c5c8c(0x6b2)],_0x50244c),this[_0x7c5c8c(0x2cb)](this[_0x7c5c8c(0x311)],_0x3c4e51+0xb4,_0x514d1d);}{let _0x2f1834=this['drawingAreaWidth'](),_0x1929fe=0x0,_0x1e9170=Math[_0x7c5c8c(0x330)](this['drawingAreaWidth']()/0x2),_0x4a4718=0x0;const _0x2b098f=this[_0x7c5c8c(0x576)]();let _0x163221=_0x1929fe;const _0x117eee=this[_0x7c5c8c(0x5f9)]-ImageManager[_0x7c5c8c(0x279)],_0x4166f3=Math['ceil'](_0x2b098f[_0x7c5c8c(0x312)]/0x2)*this[_0x7c5c8c(0x6ad)]();let _0x2f6c6f=Math['ceil']((_0x117eee-_0x4166f3)/0x2)+ImageManager[_0x7c5c8c(0x279)],_0x1a31d6=Math[_0x7c5c8c(0x58e)](_0x2f1834/0x2);this[_0x7c5c8c(0x595)]['y']!==0x0&&(this['_statesWindow']['y']=_0x2f6c6f);for(const _0x17da75 of _0x2b098f){this[_0x7c5c8c(0xa57)](_0x163221,_0x2f6c6f,_0x1a31d6,this['lineHeight']()),this[_0x7c5c8c(0xbd6)](_0x17da75,_0x163221,_0x2f6c6f,_0x1a31d6),_0x4a4718++,_0x4a4718%0x2===0x0?(_0x163221=_0x1929fe,_0x2f6c6f+=this[_0x7c5c8c(0x6ad)]()):_0x163221=_0x1e9170;}}},Window_InBattleStatus[_0x23168f(0xa01)][_0x23168f(0x372)]=function(){const _0x207f11=_0x23168f;return VisuMZ[_0x207f11(0x895)][_0x207f11(0xbac)][_0x207f11(0x98a)][_0x207f11(0x9f5)];},Window_InBattleStatus['prototype'][_0x23168f(0xa1a)]=function(_0x3abb68,_0x3e9a93,_0xb1bcb,_0x43d393,_0x2315c8){const _0x3c1e4b=_0x23168f;if(_0x3abb68['isActor']())switch(this['graphicType']()){case _0x3c1e4b(0x405):break;case _0x3c1e4b(0x784):this[_0x3c1e4b(0x7f4)](_0x3abb68,_0x3e9a93,_0xb1bcb+0x1,_0x43d393,_0x2315c8-0x2);break;case _0x3c1e4b(0xb60):this[_0x3c1e4b(0x39c)](_0x3abb68,_0x3e9a93,_0xb1bcb+0x1,_0x43d393,_0x2315c8-0x2);break;default:this['drawItemActorFace'](_0x3abb68,_0x3e9a93,_0xb1bcb,_0x43d393,_0x2315c8);break;}else this[_0x3c1e4b(0x4ff)](_0x3abb68,_0x3e9a93,_0xb1bcb,_0x43d393,_0x2315c8);},Window_InBattleStatus[_0x23168f(0xa01)][_0x23168f(0x6a8)]=function(_0x110c16,_0x4d875a,_0x4bd6ee,_0x333814,_0x409519){const _0x4f7c01=_0x23168f;_0x333814=_0x333814||ImageManager[_0x4f7c01(0x6b2)],_0x409519=_0x409519||ImageManager[_0x4f7c01(0x279)];const _0x5ba27c=ImageManager[_0x4f7c01(0x6b2)],_0x26ef1e=_0x409519-0x2,_0x3485a9=_0x4d875a+Math['floor']((_0x333814-_0x5ba27c)/0x2);this[_0x4f7c01(0xbc5)]===Window_MenuStatus&&this[_0x4f7c01(0x623)](_0x110c16[_0x4f7c01(0x694)]()),this[_0x4f7c01(0x67d)](_0x110c16,_0x3485a9,_0x4bd6ee,_0x5ba27c,_0x26ef1e),this[_0x4f7c01(0x623)](!![]);},Window_InBattleStatus[_0x23168f(0xa01)][_0x23168f(0x7f4)]=function(_0x1878d6,_0x3d4b60,_0x62a2e7,_0x4049c8,_0xc0f250){const _0x37eee4=_0x23168f;_0x4049c8=_0x4049c8||ImageManager[_0x37eee4(0x6b2)],_0xc0f250=_0xc0f250||ImageManager[_0x37eee4(0x279)];const _0x706c03=_0x1878d6['characterName'](),_0x396a3a=_0x1878d6[_0x37eee4(0x46f)](),_0x1dffca=ImageManager[_0x37eee4(0x165)](_0x706c03),_0x4408a8=ImageManager[_0x37eee4(0xa49)](_0x706c03),_0x311722=_0x1dffca[_0x37eee4(0x2e0)]/(_0x4408a8?0x3:0xc),_0x5c42e8=_0x1dffca[_0x37eee4(0xb1c)]/(_0x4408a8?0x4:0x8),_0x8775ca=_0x4049c8,_0x28c656=_0xc0f250-0x2,_0x23d110=_0x3d4b60+Math[_0x37eee4(0x58e)](_0x8775ca/0x2),_0x5ba7e5=_0x62a2e7+Math[_0x37eee4(0x330)]((_0xc0f250+_0x5c42e8)/0x2);this[_0x37eee4(0xbc5)]===Window_MenuStatus&&this['changePaintOpacity'](_0x1878d6['isBattleMember']());const _0x2429e3=Math[_0x37eee4(0x690)](_0x4049c8,_0x311722),_0x6310d8=Math[_0x37eee4(0x690)](_0xc0f250,_0x5c42e8),_0x8ed4cb=Math['floor'](_0x3d4b60+Math['max'](_0x4049c8-_0x311722,0x0)/0x2),_0x39a673=Math['floor'](_0x62a2e7+Math['max'](_0xc0f250-_0x5c42e8,0x0)/0x2),_0x591b16=_0x4408a8?0x0:_0x396a3a,_0x2071f9=(_0x591b16%0x4*0x3+0x1)*_0x311722,_0x4ba3bd=Math[_0x37eee4(0x58e)](_0x591b16/0x4)*0x4*_0x5c42e8;this[_0x37eee4(0x5c3)][_0x37eee4(0x797)](_0x1dffca,_0x2071f9,_0x4ba3bd,_0x2429e3,_0x6310d8,_0x8ed4cb,_0x39a673),this[_0x37eee4(0x623)](!![]);},Window_InBattleStatus[_0x23168f(0xa01)]['drawItemActorSvBattler']=function(_0x23855b,_0xc995c5,_0x5784bc,_0x2fae70,_0x127e03,_0x417007){const _0x76fb1=_0x23168f;_0x2fae70=_0x2fae70||ImageManager[_0x76fb1(0x6b2)],_0x127e03=_0x127e03||ImageManager[_0x76fb1(0x279)];const _0x48d94d=ImageManager[_0x76fb1(0x367)](_0x417007?_0x23855b[_0x76fb1(0x2ec)]():_0x23855b[_0x76fb1(0x78b)]()),_0x1e40e2=_0x48d94d[_0x76fb1(0x2e0)]/ImageManager[_0x76fb1(0x413)],_0x4957ef=_0x48d94d[_0x76fb1(0xb1c)]/ImageManager[_0x76fb1(0x160)],_0x203311=_0x2fae70,_0x5f27d8=_0x127e03-0x2,_0x5981ed=_0xc995c5+Math['floor'](_0x203311/0x2),_0x1ae1d5=_0x5784bc+Math[_0x76fb1(0x330)]((_0x127e03+_0x4957ef)/0x2);this[_0x76fb1(0xbc5)]===Window_MenuStatus&&this[_0x76fb1(0x623)](_0x23855b[_0x76fb1(0x694)]());const _0x25682a=_0x23855b[_0x76fb1(0x55a)]&&_0x23855b[_0x76fb1(0x55a)](),_0x3d068b=0x0,_0x1dd58e=0x0,_0x18fa12=_0x25682a?_0x48d94d[_0x76fb1(0x2e0)]:_0x1e40e2,_0x3b0473=_0x25682a?_0x48d94d[_0x76fb1(0xb1c)]:_0x4957ef,_0xbec02c=Math[_0x76fb1(0x690)](0x1,_0x2fae70/_0x18fa12,_0x127e03/_0x3b0473),_0x4cdacd=_0xbec02c*_0x18fa12,_0x4b2c5f=_0xbec02c*_0x3b0473,_0x2ed04=Math[_0x76fb1(0x58e)](_0xc995c5+Math[_0x76fb1(0x705)](_0x2fae70-_0x4cdacd,0x0)/0x2),_0x1c25cd=Math['floor'](_0x5784bc+Math[_0x76fb1(0x705)](_0x127e03-_0x4b2c5f,0x0)/0x2);this[_0x76fb1(0x5c3)][_0x76fb1(0x797)](_0x48d94d,_0x3d068b,_0x1dd58e,_0x18fa12,_0x3b0473,_0x2ed04,_0x1c25cd,_0x4cdacd,_0x4b2c5f),this['changePaintOpacity'](!![]);},Window_InBattleStatus[_0x23168f(0xa01)][_0x23168f(0x4ff)]=function(_0x140b76,_0x43ccca,_0x3d4937,_0x4ca4ca,_0x25a245){const _0x1ce06b=_0x23168f;if(_0x140b76[_0x1ce06b(0xb8b)]()){this[_0x1ce06b(0x39c)](_0x140b76,_0x43ccca,_0x3d4937+0x1,_0x4ca4ca,_0x25a245-0x2,!![]);return;}const _0x1e71ad=_0x140b76[_0x1ce06b(0x78b)](),_0x347bc2=$gameSystem[_0x1ce06b(0x18f)]()?ImageManager[_0x1ce06b(0x6ab)](_0x1e71ad):ImageManager[_0x1ce06b(0x5da)](_0x1e71ad);_0x347bc2[_0x1ce06b(0x313)](this[_0x1ce06b(0x957)][_0x1ce06b(0x7f5)](this,_0x140b76,_0x347bc2,_0x43ccca,_0x3d4937,_0x4ca4ca,_0x25a245));},Window_InBattleStatus[_0x23168f(0xa01)]['processDrawEnemyBattler']=function(_0x32c02d,_0x143612,_0x32c6e1,_0x3647f7,_0x3ecea5,_0x3d4bf3){const _0x1eca17=_0x23168f;if(this[_0x1eca17(0x311)]!==_0x32c02d)return;this[_0x1eca17(0x5ea)][_0x1eca17(0xaa3)](),this[_0x1eca17(0x5ea)][_0x1eca17(0xa65)]=new Bitmap(_0x3ecea5,_0x3d4bf3);const _0x2f106b=_0x3ecea5,_0x19f8f4=_0x3d4bf3,_0xbbea8d=Math[_0x1eca17(0x690)](_0x2f106b,_0x19f8f4),_0x34da5a=this[_0x1eca17(0x5ea)]['bitmap'],_0x26b0ed=Math[_0x1eca17(0x690)](0x1,_0xbbea8d/_0x143612['width'],_0xbbea8d/_0x143612['height']),_0x2977fe=_0x143612[_0x1eca17(0x2e0)]*_0x26b0ed,_0x552dcd=_0x143612[_0x1eca17(0xb1c)]*_0x26b0ed,_0x22f21d=Math[_0x1eca17(0x1fc)]((_0x2f106b-_0x2977fe)/0x2),_0x5196c9=Math['round']((_0x19f8f4-_0x552dcd)/0x2);_0x34da5a[_0x1eca17(0x797)](_0x143612,0x0,0x0,_0x143612[_0x1eca17(0x2e0)],_0x143612[_0x1eca17(0xb1c)],_0x22f21d,_0x5196c9,_0x2977fe,_0x552dcd),this['_enemySprite'][_0x1eca17(0x4d5)]['x']=0.5,this[_0x1eca17(0x5ea)]['anchor']['y']=0x1,this[_0x1eca17(0x5ea)]['x']=_0x32c6e1+_0x3ecea5/0x2+this[_0x1eca17(0x1d3)],this[_0x1eca17(0x5ea)]['y']=_0x3647f7+_0x3d4bf3+this[_0x1eca17(0x1d3)],this[_0x1eca17(0x5ea)][_0x1eca17(0x2b8)](this[_0x1eca17(0x311)]['battlerHue']());},Window_InBattleStatus[_0x23168f(0xa01)]['drawActorName']=function(_0x178932,_0x597c0e,_0x230509,_0x13a6e8){const _0x400353=_0x23168f;if(_0x178932[_0x400353(0x77b)]())_0x13a6e8=this[_0x400353(0xb84)]-_0x597c0e;Window_StatusBase['prototype'][_0x400353(0x52e)][_0x400353(0x88f)](this,_0x178932,_0x597c0e,_0x230509,_0x13a6e8);},Window_InBattleStatus[_0x23168f(0xa01)][_0x23168f(0x932)]=function(_0x2d739d,_0x44e1bc,_0x33dcec,_0x29cf36){const _0x5a01ea=_0x23168f;if(!_0x2d739d['isActor']())return;Window_StatusBase[_0x5a01ea(0xa01)][_0x5a01ea(0x932)][_0x5a01ea(0x88f)](this,_0x2d739d,_0x44e1bc,_0x33dcec,_0x29cf36);},Window_InBattleStatus['prototype'][_0x23168f(0x332)]=function(_0x2ee364,_0x309368,_0x31c809){const _0x179261=_0x23168f;if(_0x2ee364[_0x179261(0x77b)]()&&!Window_InBattleStatus['SETTINGS'][_0x179261(0x362)])return;Window_StatusBase[_0x179261(0xa01)][_0x179261(0x332)][_0x179261(0x88f)](this,_0x2ee364,_0x309368,_0x31c809);},Window_InBattleStatus[_0x23168f(0xa01)][_0x23168f(0x7f6)]=function(_0x484161,_0x20a7e5,_0x1f8d5a,_0x4c5ec8){const _0x24e220=_0x23168f;_0x484161[_0x24e220(0x2e3)]=!![],Window_StatusBase['prototype'][_0x24e220(0x7f6)][_0x24e220(0x88f)](this,_0x484161,_0x20a7e5,_0x1f8d5a,_0x4c5ec8),_0x484161[_0x24e220(0x2e3)]=undefined;},VisuMZ[_0x23168f(0x895)][_0x23168f(0x854)]=Game_BattlerBase[_0x23168f(0xa01)]['allIcons'],Game_BattlerBase[_0x23168f(0xa01)][_0x23168f(0xb91)]=function(){const _0x513415=_0x23168f;if(this['_hideAllIcons'])return[];return VisuMZ[_0x513415(0x895)][_0x513415(0x854)][_0x513415(0x88f)](this);},Window_InBattleStatus['prototype'][_0x23168f(0x9d8)]=function(_0x1a583d,_0x31201a,_0x490b80,_0x52c8c9){const _0x354a0a=_0x23168f,_0x540c66=_0x354a0a(0x7ff)[_0x354a0a(0x7d3)](_0x1a583d['battlerKey'](),_0x31201a);let _0x4aacb2=![];if(_0x1a583d[_0x354a0a(0x77b)]()){const _0x19c9de=Window_InBattleStatus['SETTINGS'];if(_0x31201a==='hp'&&_0x19c9de[_0x354a0a(0x94d)])_0x4aacb2=!![];if(_0x31201a==='mp'&&_0x19c9de[_0x354a0a(0x94c)])_0x4aacb2=!![];if(_0x31201a==='tp'&&_0x19c9de[_0x354a0a(0x712)])_0x4aacb2=!![];}const _0xa4b782=this[_0x354a0a(0xb92)](_0x540c66,_0x4aacb2?Sprite_GaugeRate:Sprite_Gauge);_0xa4b782[_0x354a0a(0x85b)](_0x1a583d,_0x31201a),_0xa4b782[_0x354a0a(0x817)](_0x490b80,_0x52c8c9),_0xa4b782[_0x354a0a(0xaa3)]();},Window_InBattleStatus[_0x23168f(0xa01)][_0x23168f(0x2fa)]=function(){const _0x12b739=_0x23168f,_0x12d7de=this[_0x12b739(0x595)]?this[_0x12b739(0x595)][_0x12b739(0x2e0)]:0x0;return this[_0x12b739(0xb84)]-_0x12d7de+this[_0x12b739(0x1d3)]*0x2;},Window_InBattleStatus[_0x23168f(0xa01)]['displayedParams']=function(){const _0x15a532=_0x23168f;return Imported[_0x15a532(0x74a)]?VisuMZ[_0x15a532(0x8b4)][_0x15a532(0xbac)][_0x15a532(0x6b0)][_0x15a532(0x47d)]:[_0x15a532(0x4eb),_0x15a532(0x28b),'ATK',_0x15a532(0xac9),_0x15a532(0x602),_0x15a532(0x916),_0x15a532(0x9ac),_0x15a532(0x167)];},Window_InBattleStatus[_0x23168f(0xa01)][_0x23168f(0xbd6)]=function(_0x1c628e,_0x2aef14,_0x29a5bb,_0x207a8d){const _0xbc8a=_0x23168f,_0xab5697=Window_InBattleStatus[_0xbc8a(0xb9c)],_0x42033e=Imported['VisuMZ_0_CoreEngine'];this[_0xbc8a(0xa4d)]();let _0x32593b='',_0x1ee5c4=0x0,_0x5f27f7=['MAXHP','MAXMP',_0xbc8a(0x677),_0xbc8a(0xac9),'MAT','MDF',_0xbc8a(0x9ac),_0xbc8a(0x167)][_0xbc8a(0xb3c)](String(_0x1c628e)[_0xbc8a(0x1ef)]()[_0xbc8a(0xf4)]());if(_0x42033e)_0x32593b=TextManager[_0xbc8a(0xb58)](_0x1c628e),_0x1ee5c4=VisuMZ[_0xbc8a(0x1d5)](_0x1c628e);else{if(_0x5f27f7>=0x0&&_0x5f27f7<0x8)_0x32593b=TextManager[_0xbc8a(0xa2b)](_0x5f27f7);}if(_0x5f27f7>=0x0&&_0x5f27f7<0x8){const _0x59a2c5=this[_0xbc8a(0x311)][_0xbc8a(0x4ec)][_0x5f27f7];this[_0xbc8a(0x311)][_0xbc8a(0xea)](_0x59a2c5,_0x5f27f7)!==0x0&&(_0x1ee5c4=this[_0xbc8a(0x311)][_0xbc8a(0xea)](_0x59a2c5,_0x5f27f7));}if(_0x32593b){let _0x515246='\x5cI[%2]\x5cC[16]%1\x5cC[0]'[_0xbc8a(0x7d3)](_0x32593b,_0x1ee5c4);_0x207a8d<=0xd4&&(_0x515246=_0xbc8a(0x930)[_0xbc8a(0x7d3)](_0x32593b));const _0x56c4c5=_0x207a8d<=0xd4?'\x20':'\x20\x20';this[_0xbc8a(0x9c5)](_0x56c4c5+_0x515246,_0x2aef14,_0x29a5bb);}this['resetTextColor']();let _0x10a97e='';_0x42033e?_0x10a97e=this[_0xbc8a(0x311)][_0xbc8a(0x255)](_0x1c628e,!![]):_0x10a97e=String(this[_0xbc8a(0x311)][_0xbc8a(0xa2b)](_0x5f27f7));if(this[_0xbc8a(0x311)][_0xbc8a(0x77b)]()){let _0x182b7f=!![];if(_0xab5697[_0xbc8a(0x1e7)])_0x182b7f=![];if(_0xab5697[_0xbc8a(0x962)]&&BattleManager['isBattleTest']())_0x182b7f=![];if(_0xab5697[_0xbc8a(0x112)]&&$gameSystem['getDefeatedEnemies']()[_0xbc8a(0x2d8)](this[_0xbc8a(0x311)][_0xbc8a(0xe2)]()))_0x182b7f=![];_0x182b7f&&(_0x10a97e=_0xab5697[_0xbc8a(0x840)]);}if(_0x5f27f7>=0x0&&_0x5f27f7<0x8){if(this[_0xbc8a(0x311)]['getParamBuffAndStateRate'](_0x5f27f7)>0x1)_0x10a97e=_0xab5697['buffValueFmt'][_0xbc8a(0x7d3)](_0x10a97e),Imported[_0xbc8a(0x9a3)]?this['changeTextColor'](ColorManager['buffColor']()):this[_0xbc8a(0x2d5)](ColorManager[_0xbc8a(0x791)]());else this['_battler'][_0xbc8a(0x539)](_0x5f27f7)<0x1&&(_0x10a97e=_0xab5697[_0xbc8a(0x455)]['format'](_0x10a97e),Imported['VisuMZ_1_SkillsStatesCore']?this[_0xbc8a(0x2d5)](ColorManager[_0xbc8a(0x431)]()):this[_0xbc8a(0x2d5)](ColorManager['powerDownColor']()));}if(String(_0x10a97e)){const _0x1ac305=_0x207a8d<=0xd4?'\x20':'\x20\x20';this[_0xbc8a(0x601)](_0x10a97e+_0x1ac305,_0x2aef14,_0x29a5bb,_0x207a8d,'right');}},Window_InBattleStatus['prototype']['drawDarkRect']=function(_0x29f1ca,_0x3a797f,_0x328abc,_0x57fafa){const _0x185e7f=_0x23168f;_0x57fafa=_0x57fafa||this['lineHeight'](),this['contentsBack'][_0x185e7f(0xb5e)]=0xa0;const _0x3a3a1c=ColorManager[_0x185e7f(0xbc4)]();this[_0x185e7f(0x120)]['fillRect'](_0x29f1ca+0x1,_0x3a797f+0x1,_0x328abc-0x2,_0x57fafa-0x2,_0x3a3a1c),this[_0x185e7f(0x120)]['paintOpacity']=0xff;},Game_BattlerBase[_0x23168f(0xa01)][_0x23168f(0x539)]=function(_0x350683){const _0x35e197=_0x23168f;let _0x903def=0x1;_0x903def*=this[_0x35e197(0x3c7)](_0x350683);for(const _0x5ada6d of this['states']()){if(!_0x5ada6d)continue;for(const _0x12cfb0 of _0x5ada6d[_0x35e197(0xa9a)]){if(!_0x12cfb0)continue;if(_0x12cfb0[_0x35e197(0x142)]!==Game_BattlerBase[_0x35e197(0x514)])continue;if(_0x12cfb0[_0x35e197(0x36f)]!==_0x350683)continue;_0x903def*=_0x12cfb0[_0x35e197(0x706)];}}return _0x903def;};function Window_InBattleStatusStates(){this['initialize'](...arguments);}Window_InBattleStatusStates[_0x23168f(0xa01)]=Object['create'](Window_Command[_0x23168f(0xa01)]),Window_InBattleStatusStates[_0x23168f(0xa01)][_0x23168f(0xbc5)]=Window_InBattleStatusStates,Window_InBattleStatusStates[_0x23168f(0xb9c)]={'maxWidth':VisuMZ[_0x23168f(0x895)]['Settings'][_0x23168f(0x98a)][_0x23168f(0x3b6)]??0x180,'drawStates':VisuMZ[_0x23168f(0x895)]['Settings'][_0x23168f(0x98a)]['drawStates']??!![],'drawBuffs':VisuMZ['BattleCore'][_0x23168f(0xbac)][_0x23168f(0x98a)][_0x23168f(0x7a8)]??!![],'drawDebuffs':VisuMZ[_0x23168f(0x895)][_0x23168f(0xbac)][_0x23168f(0x98a)][_0x23168f(0xcb)]??!![],'normalIcon':VisuMZ[_0x23168f(0x895)][_0x23168f(0xbac)][_0x23168f(0x98a)]['normalIcon']??0x54,'normalText':VisuMZ[_0x23168f(0x895)]['Settings'][_0x23168f(0x98a)][_0x23168f(0x905)]??_0x23168f(0x96f),'normalHelp':VisuMZ[_0x23168f(0x895)][_0x23168f(0xbac)][_0x23168f(0x98a)][_0x23168f(0x347)]??'Status\x20is\x20currently\x20normal.','stateHelpFmt':VisuMZ[_0x23168f(0x895)][_0x23168f(0xbac)][_0x23168f(0x98a)]['stateHelpFmt']??_0x23168f(0x627),'buffNameFmt':VisuMZ[_0x23168f(0x895)][_0x23168f(0xbac)][_0x23168f(0x98a)][_0x23168f(0x9ef)]??'%1▲','buffHelpFmt':VisuMZ[_0x23168f(0x895)][_0x23168f(0xbac)][_0x23168f(0x98a)]['buffHelpFmt']??'Increases\x20%1\x20to\x20%3%2\x5cC[0].\x20%4','debuffNameFmt':VisuMZ[_0x23168f(0x895)][_0x23168f(0xbac)][_0x23168f(0x98a)][_0x23168f(0x200)]??_0x23168f(0x744),'debuffHelpFmt':VisuMZ[_0x23168f(0x895)][_0x23168f(0xbac)][_0x23168f(0x98a)][_0x23168f(0xaf7)]??_0x23168f(0xb32),'actionsFmt':VisuMZ['BattleCore'][_0x23168f(0xbac)]['InBattleStatus'][_0x23168f(0x973)]??_0x23168f(0x106),'turnsFmt':VisuMZ[_0x23168f(0x895)][_0x23168f(0xbac)][_0x23168f(0x98a)][_0x23168f(0xae0)]??_0x23168f(0x819),'passiveText':VisuMZ[_0x23168f(0x895)][_0x23168f(0xbac)][_0x23168f(0x98a)][_0x23168f(0x6c1)]??_0x23168f(0xa80)},Window_InBattleStatusStates[_0x23168f(0xa01)][_0x23168f(0x8c9)]=function(_0x247600){const _0x41af84=_0x23168f;this[_0x41af84(0x311)]=null,Window_Command[_0x41af84(0xa01)]['initialize'][_0x41af84(0x88f)](this,_0x247600),this[_0x41af84(0xad5)](),this['deselect'](),this['setBackgroundType'](0x2);},Window_InBattleStatusStates[_0x23168f(0xa01)][_0x23168f(0x45b)]=function(_0x37c525){const _0x3561ae=_0x23168f;this['_battler']=_0x37c525||null,this[_0x3561ae(0xa39)](),this[_0x3561ae(0x3a5)](0x0),this[_0x3561ae(0x7e0)](0x0,0x0),this['activate']();},Window_InBattleStatusStates['prototype'][_0x23168f(0xd0)]=function(){},Window_InBattleStatusStates[_0x23168f(0xa01)][_0x23168f(0x8b2)]=function(){const _0x2f5799=_0x23168f;if(!this['_battler'])return;this[_0x2f5799(0xbf6)](),this['addBattlerStates'](),this[_0x2f5799(0xaa4)](),this['addNormalStatus']();},Window_InBattleStatusStates[_0x23168f(0xa01)]['addBattlerAspect']=function(){const _0x239d78=_0x23168f;if(!this[_0x239d78(0x311)][_0x239d78(0x77b)]())return;if(!this[_0x239d78(0x311)][_0x239d78(0x824)]())return;const _0x3418c6=this[_0x239d78(0x311)][_0x239d78(0x89d)]()['name'],_0x526d36=this[_0x239d78(0x311)][_0x239d78(0x89d)]()[_0x239d78(0x761)],_0x1d0755=this[_0x239d78(0x311)][_0x239d78(0x89d)]()[_0x239d78(0x885)];let _0x56f9c0='';_0x1d0755[_0x239d78(0x26e)](/#(.*?)/gi)&&Imported['VisuMZ_1_MessageCore']?_0x56f9c0=_0x239d78(0x504)[_0x239d78(0x7d3)](_0x526d36,_0x3418c6,_0x1d0755):_0x56f9c0=_0x239d78(0x918)[_0x239d78(0x7d3)](_0x526d36,_0x3418c6,_0x1d0755),this[_0x239d78(0x21e)](_0x56f9c0,'aspect',!![]);},Window_InBattleStatusStates['prototype']['addBattlerStates']=function(){const _0x28ff31=_0x23168f;if(!Window_InBattleStatusStates[_0x28ff31(0xb9c)][_0x28ff31(0x621)])return;for(const _0x507cd2 of this['_battler'][_0x28ff31(0xa33)]()){if(!this[_0x28ff31(0x852)](_0x507cd2))continue;const _0x4d13e7=this[_0x28ff31(0x7c2)](_0x507cd2);this[_0x28ff31(0x21e)](_0x4d13e7,_0x28ff31(0x3e3),!![],_0x507cd2['id']);}},Window_InBattleStatusStates['prototype']['includeState']=function(_0x351ab7){const _0x23dfa0=_0x23168f;if(!_0x351ab7)return![];if(_0x351ab7[_0x23dfa0(0x611)]['trim']()==='')return![];if(_0x351ab7[_0x23dfa0(0x611)][_0x23dfa0(0x2d8)]('-----'))return![];if(_0x351ab7[_0x23dfa0(0x761)]<=0x0)return![];if(_0x351ab7[_0x23dfa0(0xab4)])return![];return!![];},Window_InBattleStatusStates[_0x23168f(0xa01)][_0x23168f(0x7c2)]=function(_0x24c46d){const _0x1e2d01=_0x23168f;let _0x5d9b02=_0x24c46d[_0x1e2d01(0x761)],_0x48ffe8=_0x24c46d[_0x1e2d01(0x611)],_0x46f7ec='0';return Imported[_0x1e2d01(0x9a3)]&&Imported[_0x1e2d01(0xafb)]&&(_0x46f7ec=String(ColorManager[_0x1e2d01(0xa3b)](_0x24c46d))),_0x46f7ec['match'](/#(.*?)/gi)?'\x5cI[%1]\x5cHEXCOLOR<%3>%2'[_0x1e2d01(0x7d3)](_0x5d9b02,_0x48ffe8,_0x46f7ec):_0x1e2d01(0x918)[_0x1e2d01(0x7d3)](_0x5d9b02,_0x48ffe8,_0x46f7ec);},Window_InBattleStatusStates[_0x23168f(0xa01)][_0x23168f(0xaa4)]=function(){const _0x32d1d8=_0x23168f;for(let _0x3cb957=0x0;_0x3cb957<0x8;_0x3cb957++){const _0x4ab2a5=this[_0x32d1d8(0xb15)](_0x3cb957);if(!_0x4ab2a5)continue;this[_0x32d1d8(0x21e)](_0x4ab2a5,'buff',!![],_0x3cb957);}},Window_InBattleStatusStates['prototype'][_0x23168f(0xb15)]=function(_0x3cb0bc){const _0xfba31e=_0x23168f;if(!this[_0xfba31e(0x311)]['isBuffAffected'](_0x3cb0bc)&&!this[_0xfba31e(0x311)][_0xfba31e(0x589)](_0x3cb0bc))return'';const _0x235b2b=Window_InBattleStatusStates[_0xfba31e(0xb9c)];if(this['_battler'][_0xfba31e(0x83f)](_0x3cb0bc)&&!_0x235b2b['drawBuffs'])return'';if(this[_0xfba31e(0x311)][_0xfba31e(0x589)](_0x3cb0bc)&&!_0x235b2b[_0xfba31e(0xcb)])return'';const _0x49e8cf=this[_0xfba31e(0x311)]['_buffs'][_0x3cb0bc];let _0x2fbaa2=this[_0xfba31e(0x311)][_0xfba31e(0xea)](_0x49e8cf,_0x3cb0bc),_0x2b6b89=TextManager[_0xfba31e(0xa2b)](_0x3cb0bc);_0x49e8cf>0x0?_0x2b6b89=_0x235b2b[_0xfba31e(0x9ef)][_0xfba31e(0x7d3)](_0x2b6b89):_0x2b6b89=_0x235b2b[_0xfba31e(0x200)][_0xfba31e(0x7d3)](_0x2b6b89);let _0x21452b=0x0;return Imported[_0xfba31e(0x9a3)]&&(_0x21452b=_0x49e8cf>0x0?ColorManager['buffColor']():ColorManager['debuffColor']()),String(_0x21452b)[_0xfba31e(0x26e)](/#(.*?)/gi)?'\x5cI[%1]\x5cHEXCOLOR<%3>%2'[_0xfba31e(0x7d3)](_0x2fbaa2,_0x2b6b89,_0x21452b):_0xfba31e(0x918)['format'](_0x2fbaa2,_0x2b6b89,_0x21452b);},Window_InBattleStatusStates['prototype'][_0x23168f(0x7a7)]=function(){const _0x350640=_0x23168f;if(this[_0x350640(0x4f5)][_0x350640(0x312)]>0x0)return;const _0x433d47=Window_InBattleStatusStates[_0x350640(0xb9c)],_0x1237fe=_0x433d47[_0x350640(0x5ae)],_0x58b6ea=_0x433d47[_0x350640(0x905)],_0x34673c=_0x350640(0xee)[_0x350640(0x7d3)](_0x1237fe,_0x58b6ea);this[_0x350640(0x21e)](_0x34673c,_0x350640(0x3d1));},Window_InBattleStatusStates[_0x23168f(0xa01)][_0x23168f(0x5a8)]=function(_0x556565){const _0xff4ab0=_0x23168f,_0x124284=this['itemLineRect'](_0x556565);this[_0xff4ab0(0x623)](0xff),this[_0xff4ab0(0x9c5)](this[_0xff4ab0(0x83c)](_0x556565),_0x124284['x'],_0x124284['y']),this[_0xff4ab0(0x87a)](_0x556565,_0x124284);},Window_InBattleStatusStates[_0x23168f(0xa01)][_0x23168f(0x87a)]=function(_0x26612c,_0xa8ebbb){const _0x24489e=_0x23168f;if(!Imported[_0x24489e(0x9a3)])return;const _0x8b12d2=this[_0x24489e(0xbd3)](_0x26612c),_0x5e6192=_0xa8ebbb['x']+0x2;if(_0x8b12d2===_0x24489e(0x3e3)){const _0x1672e3=$dataStates[this[_0x24489e(0x4f5)][_0x26612c]['ext']||0x0];this['drawActorStateTurns'](this[_0x24489e(0x311)],_0x1672e3,_0x5e6192,_0xa8ebbb['y']),this[_0x24489e(0x561)](this[_0x24489e(0x311)],_0x1672e3,_0x5e6192,_0xa8ebbb['y']);}else{if(_0x8b12d2===_0x24489e(0x63d)){const _0x322182=this[_0x24489e(0x4f5)][_0x26612c][_0x24489e(0x534)];this[_0x24489e(0xdf)](this[_0x24489e(0x311)],_0x322182,_0x5e6192,_0xa8ebbb['y']),this[_0x24489e(0x62c)](this['_battler'],_0x322182,_0x5e6192,_0xa8ebbb['y']);}}},Window_InBattleStatusStates[_0x23168f(0xa01)][_0x23168f(0xaa8)]=function(){const _0x3d1804=_0x23168f,_0x310878=this[_0x3d1804(0x3d6)]();let _0x315c5e='';if(_0x310878==='aspect')_0x315c5e=this[_0x3d1804(0x311)][_0x3d1804(0x89d)]()[_0x3d1804(0x3ef)];else{if(_0x310878===_0x3d1804(0x3e3))_0x315c5e=this[_0x3d1804(0x72a)]();else{if(_0x310878===_0x3d1804(0x63d))_0x315c5e=this[_0x3d1804(0x15a)]();else _0x310878===_0x3d1804(0x3d1)&&(_0x315c5e=Window_InBattleStatusStates[_0x3d1804(0xb9c)][_0x3d1804(0x347)]);}}_0x315c5e?this[_0x3d1804(0x10a)][_0x3d1804(0x8be)](_0x315c5e):this[_0x3d1804(0x10a)][_0x3d1804(0x176)]();},Window_InBattleStatusStates[_0x23168f(0xa01)][_0x23168f(0x72a)]=function(){const _0x242bb8=_0x23168f,_0x36da9b=Window_InBattleStatusStates['SETTINGS'],_0x4fb076=this[_0x242bb8(0x93c)]();let _0x4eb70a='';const _0x57b930=$dataStates[_0x4fb076]||null;if(_0x57b930){const _0x2d3465=_0x36da9b[_0x242bb8(0x67b)];let _0x31f8a9=_0x57b930[_0x242bb8(0x119)]||_0x57b930[_0x242bb8(0x3ef)]||'';Imported[_0x242bb8(0x9a3)]&&(_0x31f8a9=_0x31f8a9[_0x242bb8(0x7d3)](this['_battler'][_0x242bb8(0x344)](_0x4fb076)));let _0x28a90f='passive';if(this[_0x242bb8(0x311)]['isStateAffected'](_0x4fb076)){if(_0x57b930[_0x242bb8(0x4ea)]===0x0)_0x28a90f=_0x242bb8(0x405);if(_0x57b930['autoRemovalTiming']===0x1)_0x28a90f=_0x242bb8(0x5ef);if(_0x57b930[_0x242bb8(0x4ea)]===0x2)_0x28a90f=_0x242bb8(0xa9b);}const _0x2e3409=this[_0x242bb8(0x311)]['_stateTurns'][_0x4fb076]||0x0;let _0x1541dc=_0x242bb8(0x649);Imported['VisuMZ_1_SkillsStatesCore']&&Imported[_0x242bb8(0xafb)]&&(_0x1541dc=ColorManager[_0x242bb8(0xa3b)](_0x57b930),_0x1541dc[_0x242bb8(0x26e)](/#(.*?)/gi)?_0x1541dc='\x5cHEXCOLOR<%1>'[_0x242bb8(0x7d3)](_0x1541dc):_0x1541dc=_0x242bb8(0x5c8)[_0x242bb8(0x7d3)](_0x1541dc)),_0x4eb70a=_0x2d3465['format'](_0x31f8a9,this[_0x242bb8(0x2d4)](_0x28a90f,_0x2e3409,_0x1541dc));}return _0x4eb70a;},Window_InBattleStatusStates[_0x23168f(0xa01)][_0x23168f(0x15a)]=function(){const _0x36cb74=_0x23168f,_0x81d4ff=Window_InBattleStatusStates['SETTINGS'],_0x3648a3=this['currentExt']();let _0x5daa9a='';const _0x4efeb7=this[_0x36cb74(0x311)][_0x36cb74(0x83f)](_0x3648a3),_0x449eb5=_0x4efeb7?'buffHelpFmt':_0x36cb74(0xaf7),_0x21a708=_0x81d4ff[_0x449eb5];let _0x48ae2e='\x5cC[0]';Imported[_0x36cb74(0x9a3)]&&Imported[_0x36cb74(0xafb)]&&(_0x48ae2e=_0x4efeb7?ColorManager[_0x36cb74(0x5a0)]():ColorManager[_0x36cb74(0x431)](),_0x48ae2e[_0x36cb74(0x26e)](/#(.*?)/gi)?_0x48ae2e='\x5cHEXCOLOR<%1>'[_0x36cb74(0x7d3)](_0x48ae2e):_0x48ae2e=_0x36cb74(0x5c8)[_0x36cb74(0x7d3)](_0x48ae2e));const _0x2520ab=this['_battler'][_0x36cb74(0x495)][_0x3648a3]||0x0;return _0x5daa9a=_0x21a708[_0x36cb74(0x7d3)](TextManager[_0x36cb74(0xa2b)](_0x3648a3),Math['floor'](this['_battler'][_0x36cb74(0x3c7)](_0x3648a3)*0x64)+'%',_0x48ae2e,this[_0x36cb74(0x2d4)](_0x36cb74(0xa9b),_0x2520ab,_0x48ae2e)),_0x5daa9a;},Window_InBattleStatusStates[_0x23168f(0xa01)][_0x23168f(0x2d4)]=function(_0x13ab01,_0x87c3ff,_0xeddfa2){const _0x5e9171=_0x23168f,_0x4fe3cf=Window_InBattleStatusStates[_0x5e9171(0xb9c)];let _0x39155f=_0x4fe3cf[_0x5e9171(0x6c1)];if(_0x13ab01===_0x5e9171(0x5ef))_0x39155f=_0x4fe3cf['actionsFmt'];if(_0x13ab01===_0x5e9171(0xa9b))_0x39155f=_0x4fe3cf['turnsFmt'];if(_0x13ab01===_0x5e9171(0x405))return'';return _0x39155f[_0x5e9171(0x7d3)](_0x87c3ff,_0xeddfa2);};